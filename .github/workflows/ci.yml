name: CI

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    # run CI every day even if no PRs/merges occur
    - cron:  '0 12 * * *'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # needs to run only on pull_request
  lint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: ['3.11']  # Simplified to single Python version
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    - name: Lint
      if: github.event_name == 'pull_request'
      run: |
        # Install uv for faster package management
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        uv pip install --system -e .[lint]
        # Run ruff for fast linting (respects exclude in pyproject.toml)
        ruff --version
        ruff check .
        # Check formatting with ruff format (respects exclude in pyproject.toml)
        ruff format --check .
        # Type checking with mypy
        mypy --version
        mypy


  tests:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python: ['3.11']
        type: ["ethereum_bench", "examples", "ethereum", "ethereum_vm", "native", "aarch64", "wasm", "wasm_sym", "other", "ethereum_truffle"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    - name: Install NPM
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - name: Cache SMT Solvers
      uses: actions/cache@v4
      with:
        path: |
          /usr/bin/cvc4
          /usr/local/bin/yices
          /usr/local/bin/yices-smt2
          /usr/local/bin/yices-sat
          /usr/local/bin/yices-smt
          /usr/local/lib/libyices.so*
        key: ${{ runner.os }}-smt-solvers-cvc4-1.8-yices-2.6.2
    - name: Cache Solidity Compilers
      uses: actions/cache@v4
      with:
        path: ~/.solcx
        key: ${{ runner.os }}-solc-0.4.24-0.5.11
    - name: Install dependencies and Solidity compilers
      env:
        TEST_TYPE: ${{ matrix.type }}
      run: |
        # Install uv for faster package management
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        #install utils
        uv pip install --system coveralls
        uv pip install --system -e ".[dev-noks]"
        # Get version info
        uv pip freeze
        z3 --version
        #install cvc4
        if [ ! -f /usr/bin/cvc4 ]; then
          echo "Installing CVC4..."
          sudo wget -O /usr/bin/cvc4 https://github.com/CVC4/CVC4-archived/releases/download/1.8/cvc4-1.8-x86_64-linux-opt
          sudo chmod +x /usr/bin/cvc4
        fi
        cvc4 --version
        #install yices
        if [ ! -f /usr/local/bin/yices ]; then
          echo "Installing Yices..."
          sudo wget -O yices.tar.gz https://yices.csl.sri.com/releases/2.6.2/yices-2.6.2-x86_64-pc-linux-gnu-static-gmp.tar.gz
          sudo tar -xzf yices.tar.gz
          cd yices-2.6.2
          sudo ./install-yices
          cd ..
        fi
        yices --version
        # Note: Boolector removed - it's archived/unmaintained upstream
        # Consider using Bitwuzla (its successor) in the future
        # Install Solidity compilers via py-solc-x
        python -c "import solcx; [solcx.install_solc(v) for v in ('0.4.24','0.5.11')]; print('Installed solc versions:', solcx.get_installed_solc_versions())"
        # Point default solc to 0.4.24 for non-decorated tests
        mkdir -p "$HOME/.local/bin"
        SOLC_0424=$(python -c "import solcx; import sys; print(str(solcx.get_solcx_install_folder() / 'solc-v0.4.24'))")
        ln -sf "$SOLC_0424" "$HOME/.local/bin/solc"
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Run Tests
      env:
        TEST_TYPE: ${{ matrix.type }}
      run: |
        cp scripts/run_tests.sh .
        ./run_tests.sh
    - name: Coveralls Parallel
      shell: bash
      run: |
        set +e
        counter=1
        while [ "${counter}" -le 10 ] ; do
          echo "Attempt ${counter} to upload"
          $(coveralls --service=github)
          if [ $? -eq 0 ] ; then
              exit 0
          fi
          ((counter++))
          sleep 1
        done
        exit 1
      env:
        COVERALLS_PARALLEL: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manticore-server:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: ['3.11']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Cache SMT Solvers
        uses: actions/cache@v4
        with:
          path: |
            /usr/bin/cvc4
            /usr/local/bin/yices
            /usr/local/bin/yices-smt2
            /usr/local/bin/yices-sat
            /usr/local/bin/yices-smt
            /usr/local/lib/libyices.so*
          key: ${{ runner.os }}-smt-solvers-cvc4-1.8-yices-2.6.2

      - name: Cache Solidity Compilers
        uses: actions/cache@v4
        with:
          path: ~/.solcx
          key: ${{ runner.os }}-solc-0.4.24-0.5.11

      - name: 'Install tools and Solidity compilers'
        run: |
          # Install uv for faster package management
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          # just command runner https://github.com/casey/just#pre-built-binaries
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to "${HOME}/.local/bin"
          # Install py-solc-x and compilers
          uv pip install --system py-solc-x
          python -c "import solcx; [solcx.install_solc(v) for v in ('0.4.24','0.5.11')]; print('Installed solc versions:', solcx.get_installed_solc_versions())"
          mkdir -p "$HOME/.local/bin"
          SOLC_0424=$(python -c "import solcx; import sys; print(str(solcx.get_solcx_install_folder() / 'solc-v0.4.24'))")
          ln -sf "$SOLC_0424" "$HOME/.local/bin/solc"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 'Lint MUI Server'
        working-directory: server
        run: |
          just init
          source venv/bin/activate
          just lint

      - name: 'Prepare solc 0.4.24 in server venv'
        working-directory: server
        run: |
          set -euo pipefail
          # Activate server venv
          source venv/bin/activate
          # Ensure py-solc-x available in venv
          python -m pip install -U pip wheel setuptools
          python -m pip install py-solc-x
          # Install solc 0.4.24 if not already present
          python -c "import solcx; print('installed before:', solcx.get_installed_solc_versions()); solcx.install_solc('0.4.24'); print('installed after:', solcx.get_installed_solc_versions())"
          # Symlink venv-local solc to 0.4.24 to satisfy server tests
          ln -sf "$HOME/.solcx/solc-v0.4.24" venv/bin/solc
          # Verify version
          venv/bin/solc --version

      - name: 'Test MUI Server'
        working-directory: server
        run: |
          source venv/bin/activate
          just test

  # Send notification when all tests have finished to combine coverage results
  coverage-finish:
    needs: tests
    runs-on: ubuntu-22.04
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
