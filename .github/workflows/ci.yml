name: CI

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    # run CI every day even if no PRs/merges occur
    - cron:  '0 12 * * *'

jobs:
  # needs to run only on pull_request
  lint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: ['3.9', '3.10']  # Updated to 3.9+ for mypy compatibility
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Lint
      if: github.event_name == 'pull_request'
      run: |
        pip install -e .[lint]
        # Run ruff for fast linting (respects exclude in pyproject.toml)
        ruff --version
        ruff check .
        # Check formatting with ruff format (respects exclude in pyproject.toml)
        ruff format --check .
        # Type checking with mypy
        mypy --version
        mypy
  
  # Fast tests for quick feedback on PRs (skip slow and generated tests)
  fast-tests:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        pip install -e ".[dev-noks]"
        # Install multiple Solidity versions
        # 0.4.24 for legacy tests, 0.5.11 for modern syntax tests
        solc-select install 0.4.24
        solc-select install 0.5.11
        # Use 0.4.24 as default (most tests use this version)
        solc-select use 0.4.24
        # Verify the versions are available
        solc-select versions
    - name: Run fast tests
      run: |
        # Most tests need Solidity 0.4.24
        solc-select use 0.4.24
        # Skip slow and generated tests for quick PR feedback
        # No coverage collection - this is for quick feedback only
        # Exclude SHA3 tests that need Solidity 0.5+
        pytest -xvs tests/ -m "not slow and not generated" --durations=10 --no-cov --ignore=tests/ethereum/test_sha3.py
        
        # Now run SHA3 tests with Solidity 0.5.11
        solc-select use 0.5.11
        pytest -xvs tests/ethereum/test_sha3.py -m "not slow and not generated" --durations=10 --no-cov
        
  tests:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: ['3.9', '3.10']
        type: ["ethereum_bench", "examples", "ethereum", "ethereum_vm", "native", "wasm", "wasm_sym", "other"]
        include:
          # ethereum_truffle only needs to run on one Python version
          - python: '3.10'
            type: "ethereum_truffle"
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Install NPM
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
    - name: Install dependencies
      env:
        TEST_TYPE: ${{ matrix.type }}
      run: |
        #install utils
        pip install coveralls
        pip install -e ".[dev-noks]"
        # Get version info
        pip freeze
        z3 --version
        #install cvc4
        sudo wget -O /usr/bin/cvc4 https://github.com/CVC4/CVC4-archived/releases/download/1.8/cvc4-1.8-x86_64-linux-opt
        sudo chmod +x /usr/bin/cvc4
        cvc4 --version
        #install yices
        sudo wget -O yices.tar.gz https://yices.csl.sri.com/releases/2.6.2/yices-2.6.2-x86_64-pc-linux-gnu-static-gmp.tar.gz
        sudo tar -xzf yices.tar.gz
        cd yices-2.6.2
        sudo ./install-yices
        yices --version
        # Note: Boolector removed - it's archived/unmaintained upstream
        # Consider using Bitwuzla (its successor) in the future
        # Install multiple Solidity versions
        solc-select install 0.4.24
        solc-select install 0.5.11
        # Use 0.4.24 as default (most tests use this version)
        solc-select use 0.4.24
        # Verify the versions are available
        solc-select versions
    - name: Run Tests
      env:
        TEST_TYPE: ${{ matrix.type }}
      run: |
        cp scripts/run_tests.sh .
        ./run_tests.sh
    - name: Coveralls Parallel
      shell: bash
      run: |
        set +e
        counter=1
        while [ "${counter}" -le 10 ] ; do
          echo "Attempt ${counter} to upload"
          $(coveralls --service=github)
          if [ $? -eq 0 ] ; then
              exit 0
          fi
          ((counter++))
          sleep 1
        done
        exit 1
      env:
        COVERALLS_PARALLEL: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manticore-server:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: ['3.9', '3.10']
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: 'Install tools'
        run: |
          # just command runner https://github.com/casey/just#pre-built-binaries
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to "${HOME}/.local/bin"
          # Install solc-select first
          pip install solc-select
          # Install multiple Solidity versions for server tests
          solc-select install 0.4.24
          solc-select install 0.5.11
          # Use 0.4.24 as default for server tests (most contracts use 0.4.24)
          solc-select use 0.4.24

      - name: 'Lint MUI Server'
        working-directory: server
        run: |
          just init
          source venv/bin/activate
          just lint

      - name: 'Test MUI Server'
        working-directory: server
        run: |
          source venv/bin/activate
          just test

  # Send notification when all tests have finished to combine coverage results
  coverage-finish:
    needs: tests
    runs-on: ubuntu-22.04
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2.1.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
  upload:
    runs-on: ubuntu-22.04
    if: github.event_name == 'schedule'
    needs: tests
    strategy:
      matrix:
        python: ['3.9', '3.10']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Build Dist
      run: |
        python3 -m pip install wheel
        python3 setup.py --dev_release sdist bdist_wheel
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@v1.6.4
      with:
        password: ${{ secrets.PYPI_UPLOAD }}
