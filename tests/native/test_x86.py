import unittest
import functools
from manticore.native.cpu.x86 import *
from manticore.core.smtlib import *
from manticore.native.memory import *
from manticore.core.smtlib.solver import Z3Solver

solver = Z3Solver.instance()


def skipIfNotImplemented(f):
    # XXX(yan) the inner function name must start with test_
    @functools.wraps(f)
    def test_inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except NotImplementedError as e:
            raise unittest.SkipTest(str(e))

    return test_inner


def forAllTests(decorator):
    def decorate(cls):
        for attr in cls.__dict__:
            if not attr.startswith("test_"):
                continue
            method = getattr(cls, attr)
            if callable(method):
                setattr(cls, attr, decorator(method))
        return cls

    return decorate


@forAllTests(skipIfNotImplemented)
class CPUTest(unittest.TestCase):
    _multiprocess_can_split_ = True

    # Used while transitioning to py3
    def assertEqual(self, a, b):
        if isinstance(b, str):
            b = bytes([ord(c) for c in b])
        return super().assertEqual(a, b)

    class ROOperand:
        """ Mocking class for operand ronly """

        def __init__(self, size, value):
            self.size = size
            self.value = value

        def read(self):
            return self.value & ((1 << self.size) - 1)

    class RWOperand(ROOperand):
        """ Mocking class for operand rw """

        def write(self, value):
            self.value = value & ((1 << self.size) - 1)
            return self.value

    def test_AAD_1(self):
        """Instruction AAD_1
        Groups: not64bitmode
        0x80702ff:  aad     0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FF, "\xd5\xff")
        cpu.EIP = 0x80702FF
        cpu.AH = 0x0
        cpu.ZF = False
        cpu.AL = 0x30
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80702FF:0x8070301], [b"\xd5", b"\xff"])
        self.assertEqual(cpu.EIP, 134677249)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.AL, 48)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AAD_2(self):
        """Instruction AAD_2
        Groups: not64bitmode
        0x8070301:  aad     0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070301, "\xd5\x00")
        cpu.EIP = 0x8070301
        cpu.AH = 0x0
        cpu.ZF = False
        cpu.AL = 0x30
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8070301:0x8070303], [b"\xd5", b"\x00"])
        self.assertEqual(cpu.EIP, 134677251)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.AL, 48)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AAD_3(self):
        """Instruction AAD_3
        Groups: not64bitmode
        0x8070303:  aad     0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070303, "\xd5\x00")
        cpu.EIP = 0x8070303
        cpu.AH = 0x0
        cpu.ZF = False
        cpu.AL = 0x30
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8070303:0x8070305], [b"\xd5", b"\x00"])
        self.assertEqual(cpu.EIP, 134677253)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.AL, 48)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AAD_4(self):
        """Instruction AAD_4
        Groups: not64bitmode
        0x80702fb:  aad
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FB, "\xd5\n")
        cpu.EIP = 0x80702FB
        cpu.AH = 0xEC
        cpu.ZF = True
        cpu.AL = 0xF8
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80702FB:0x80702FD], [b"\xd5", b"\n"])
        self.assertEqual(cpu.EIP, 134677245)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.AL, 48)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AAD_5(self):
        """Instruction AAD_5
        Groups: not64bitmode
        0x80702fd:  aad     0xf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FD, "\xd5\x0f")
        cpu.EIP = 0x80702FD
        cpu.AH = 0x0
        cpu.ZF = False
        cpu.AL = 0x30
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80702FD:0x80702FF], [b"\xd5", b"\x0f"])
        self.assertEqual(cpu.EIP, 134677247)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.AL, 48)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AAM_1(self):
        """Instruction AAM_1
        Groups: not64bitmode
        0x8070306:  aam
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070306, "\xd4\n")
        cpu.EIP = 0x8070306
        cpu.AH = 0x0
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8070306:0x8070308], [b"\xd4", b"\n"])
        self.assertEqual(cpu.EIP, 134677256)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AAM_2(self):
        """Instruction AAM_2
        Groups: not64bitmode
        0x807030a:  aam     0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807030A, "\xd4\xff")
        cpu.EIP = 0x807030A
        cpu.AH = 0x0
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807030A:0x807030C], [b"\xd4", b"\xff"])
        self.assertEqual(cpu.EIP, 134677260)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AAM_3(self):
        """Instruction AAM_3
        Groups: not64bitmode
        0x8070308:  aam     0xf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070308, "\xd4\x0f")
        cpu.EIP = 0x8070308
        cpu.AH = 0x0
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8070308:0x807030A], [b"\xd4", b"\x0f"])
        self.assertEqual(cpu.EIP, 134677258)
        self.assertEqual(cpu.AH, 0)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_ADD_1(self):
        """Instruction ADD_1
        Groups:
        0xf7fec387: add     ecx, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC387, "\x01\xf9")
        cpu.EIP = 0xF7FEC387
        cpu.PF = False
        cpu.ECX = 0x5C6B
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0xF7E22474
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FEC387:0xF7FEC389], [b"\x01", b"\xf9"])
        self.assertEqual(cpu.EIP, 4160668553)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.ECX, 4158816479)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 4158792820)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_ADD_10(self):
        """Instruction ADD_10
        Groups:
        0xf7fe71b9: add     dword ptr [eax], edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FBF000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FBF780, "\xa0\xe9\x06\x00")
        mem.write(0xF7FE71B9, "\x01\x10")
        cpu.EIP = 0xF7FE71B9
        cpu.EAX = 0xF7FBF780
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xF7E15000
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FBF780:0xF7FBF784], [b"\xa0", b"9", b"\xe8", b"\xf7"])
        self.assertEqual(mem[0xF7FE71B9:0xF7FE71BB], [b"\x01", b"\x10"])
        self.assertEqual(cpu.EIP, 4160647611)
        self.assertEqual(cpu.EAX, 4160485248)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 4158738432)
        self.assertEqual(cpu.SF, True)

    def test_ADD_11(self):
        """Instruction ADD_11
        Groups:
        0xf7ff41d7: add     ebx, 0x1315
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41D7, "\x81\xc3\x15\x13\x00\x00")
        cpu.EIP = 0xF7FF41D7
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EBX = 0xF7FF41D7
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF41D7:0xF7FF41DD], [b"\x81", b"\xc3", b"\x15", b"\x13", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160700893)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EBX, 4160705772)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_ADD_12(self):
        """Instruction ADD_12
        Groups:
        0xf7fe71b9: add     dword ptr [eax], edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FBF000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FBFB0C, "\xf0\x1e\x07\x00")
        mem.write(0xF7FE71B9, "\x01\x10")
        cpu.EIP = 0xF7FE71B9
        cpu.EAX = 0xF7FBFB0C
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xF7E15000
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FBFB0C:0xF7FBFB10], [b"\xf0", b"n", b"\xe8", b"\xf7"])
        self.assertEqual(mem[0xF7FE71B9:0xF7FE71BB], [b"\x01", b"\x10"])
        self.assertEqual(cpu.EIP, 4160647611)
        self.assertEqual(cpu.EAX, 4160486156)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 4158738432)
        self.assertEqual(cpu.SF, True)

    def test_ADD_13(self):
        """Instruction ADD_13
        Groups:
        0xf7fe7299: add     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7299, "\x01\xc0")
        cpu.EIP = 0xF7FE7299
        cpu.EAX = 0x0
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7299:0xF7FE729B], [b"\x01", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647835)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_ADD_14(self):
        """Instruction ADD_14
        Groups:
        0xf7fe71aa: add     eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71AA, "\x01\xd0")
        cpu.EIP = 0xF7FE71AA
        cpu.EAX = 0x1AACDC
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xF7E15000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71AA:0xF7FE71AC], [b"\x01", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647596)
        self.assertEqual(cpu.EAX, 4160486620)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 4158738432)
        self.assertEqual(cpu.SF, True)

    def test_ADD_15(self):
        """Instruction ADD_15
        Groups:
        0xf7fe9c44: add     dword ptr [ebp - 0x20], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE9C44, "\x83E\xe0\x01")
        mem.write(0xFFFFD478, "\x0e\x00\x00\x00")
        cpu.EIP = 0xF7FE9C44
        cpu.EBP = 0xFFFFD498
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9C44:0xF7FE9C48], [b"\x83", b"E", b"\xe0", b"\x01"])
        self.assertEqual(mem[0xFFFFD478:0xFFFFD47C], [b"\x0f", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160658504)
        self.assertEqual(cpu.EBP, 4294956184)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_ADD_16(self):
        """Instruction ADD_16
        Groups:
        0xf7fe56a2: add     edx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A2, "\x83\xc2\x01")
        cpu.EIP = 0xF7FE56A2
        cpu.EDX = 0xF7E25ACC
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A2:0xF7FE56A5], [b"\x83", b"\xc2", b"\x01"])
        self.assertEqual(cpu.EIP, 4160640677)
        self.assertEqual(cpu.EDX, 4158806733)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_ADD_17(self):
        """Instruction ADD_17
        Groups:
        0xf7fe71b9: add     dword ptr [eax], edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FBF000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FBF09C, "\x88\x1e\x16\x00")
        mem.write(0xF7FE71B9, "\x01\x10")
        cpu.EIP = 0xF7FE71B9
        cpu.EAX = 0xF7FBF09C
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xF7E15000
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FBF09C:0xF7FBF0A0], [b"\x88", b"n", b"\xf7", b"\xf7"])
        self.assertEqual(mem[0xF7FE71B9:0xF7FE71BB], [b"\x01", b"\x10"])
        self.assertEqual(cpu.EIP, 4160647611)
        self.assertEqual(cpu.EAX, 4160483484)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 4158738432)
        self.assertEqual(cpu.SF, True)

    def test_ADD_18(self):
        """Instruction ADD_18
        Groups:
        0xf7fe71aa: add     eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71AA, "\x01\xd0")
        cpu.EIP = 0xF7FE71AA
        cpu.EAX = 0x1AA628
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xF7E15000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71AA:0xF7FE71AC], [b"\x01", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647596)
        self.assertEqual(cpu.EAX, 4160484904)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 4158738432)
        self.assertEqual(cpu.SF, True)

    def test_ADD_19(self):
        """Instruction ADD_19
        Groups:
        0xf7fe4d33: add     esp, 0x2c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4D33, "\x83\xc4,")
        cpu.EIP = 0xF7FE4D33
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ESP = 0xFFFFD2B0
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D33:0xF7FE4D36], [b"\x83", b"\xc4", b","])
        self.assertEqual(cpu.EIP, 4160638262)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955740)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_ADD_2(self):
        """Instruction ADD_2
        Groups:
        0xf7fe7213: add     ecx, dword ptr [ebp - 0x78]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE7213, "\x03M\x88")
        mem.write(0xFFFFD480, "\xd4\x8e\xe1\xf7")
        cpu.EIP = 0xF7FE7213
        cpu.EBP = 0xFFFFD4F8
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ECX = 0x0
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7213:0xF7FE7216], [b"\x03", b"M", b"\x88"])
        self.assertEqual(mem[0xFFFFD480:0xFFFFD484], [b"\xd4", b"\x8e", b"\xe1", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160647702)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4158754516)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_ADD_20(self):
        """Instruction ADD_20
        Groups:
        0xf7fe71fc: add     esi, dword ptr [edi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2C000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E2C18C, "\x18\xaf\x1a\x00")
        mem.write(0xF7FE71FC, "\x037")
        cpu.EIP = 0xF7FE71FC
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0xF7E2C18C
        cpu.CF = False
        cpu.ESI = 0xF7E15000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7E2C18C:0xF7E2C190], [b"\x18", b"\xaf", b"\x1a", b"\x00"])
        self.assertEqual(mem[0xF7FE71FC:0xF7FE71FE], [b"\x03", b"7"])
        self.assertEqual(cpu.EIP, 4160647678)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 4158833036)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4160487192)
        self.assertEqual(cpu.SF, True)

    def test_ADD_21(self):
        """Instruction ADD_21
        Groups:
        0xf7fe56aa: add     edi, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AA, "\x01\xc7")
        cpu.EIP = 0xF7FE56AA
        cpu.EAX = 0x72
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x2F2C5D89
        cpu.CF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE56AA:0xF7FE56AC], [b"\x01", b"\xc7"])
        self.assertEqual(cpu.EIP, 4160640684)
        self.assertEqual(cpu.EAX, 114)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 791436795)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_ADD_3(self):
        """Instruction ADD_3
        Groups:
        0xf7fe56aa: add     edi, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AA, "\x01\xc7")
        cpu.EIP = 0xF7FE56AA
        cpu.EAX = 0x69
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x6F268490
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE56AA:0xF7FE56AC], [b"\x01", b"\xc7"])
        self.assertEqual(cpu.EIP, 4160640684)
        self.assertEqual(cpu.EAX, 105)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 1864795385)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_ADD_4(self):
        """Instruction ADD_4
        Groups:
        0xf7eaa0d9: add     eax, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D9, "\x83\xc0\x01")
        cpu.EIP = 0xF7EAA0D9
        cpu.EAX = 0x26
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0D9:0xF7EAA0DC], [b"\x83", b"\xc0", b"\x01"])
        self.assertEqual(cpu.EIP, 4159348956)
        self.assertEqual(cpu.EAX, 39)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_ADD_5(self):
        """Instruction ADD_5
        Groups:
        0x8070234:  add     byte ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070234, "\x80E\x00\xff")
        mem.write(0xFFFFB600, "\xfe")
        cpu.EIP = 0x8070234
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8070234:0x8070238], [b"\x80", b"E", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\xfd"])
        self.assertEqual(cpu.EIP, 134677048)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_ADD_6(self):
        """Instruction ADD_6
        Groups:
        0xf7fe71b6: add     esi, 8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B6, "\x83\xc6\x08")
        cpu.EIP = 0xF7FE71B6
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.ESI = 0xF7E2B534
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71B6:0xF7FE71B9], [b"\x83", b"\xc6", b"\x08"])
        self.assertEqual(cpu.EIP, 4160647609)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4158829884)
        self.assertEqual(cpu.SF, True)

    def test_ADD_7(self):
        """Instruction ADD_7
        Groups:
        0xf7fe71aa: add     eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71AA, "\x01\xd0")
        cpu.EIP = 0xF7FE71AA
        cpu.EAX = 0x1A9498
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xF7E15000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71AA:0xF7FE71AC], [b"\x01", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647596)
        self.assertEqual(cpu.EAX, 4160480408)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 4158738432)
        self.assertEqual(cpu.SF, True)

    def test_ADD_8(self):
        """Instruction ADD_8
        Groups:
        0xf7fe56a2: add     edx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A2, "\x83\xc2\x01")
        cpu.EIP = 0xF7FE56A2
        cpu.EDX = 0xF7E23C44
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A2:0xF7FE56A5], [b"\x83", b"\xc2", b"\x01"])
        self.assertEqual(cpu.EIP, 4160640677)
        self.assertEqual(cpu.EDX, 4158798917)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_ADD_9(self):
        """Instruction ADD_9
        Groups:
        0xf7fe56a8: add     edi, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A8, "\x01\xcf")
        cpu.EIP = 0xF7FE56A8
        cpu.PF = False
        cpu.ECX = 0xFECF2720
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0xC7F67939
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A8:0xF7FE56AA], [b"\x01", b"\xcf"])
        self.assertEqual(cpu.EIP, 4160640682)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.ECX, 4274988832)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 3334840409)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_AND_1(self):
        """Instruction AND_1
        Groups:
        0x806c452:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806C000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806C452, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x806C452
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x806C452:0x806C459], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134661209)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_10(self):
        """Instruction AND_10
        Groups:
        0xf7fe88dd: and     edx, 3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.write(0xF7FE88DD, "\x83\xe2\x03")
        cpu.EIP = 0xF7FE88DD
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x21
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE88DD:0xF7FE88E0], [b"\x83", b"\xe2", b"\x03"])
        self.assertEqual(cpu.EIP, 4160653536)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.SF, False)

    def test_AND_11(self):
        """Instruction AND_11
        Groups:
        0xf7ff3eed: and     edx, 0x1010100
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EED, "\x81\xe2\x00\x01\x01\x01")
        cpu.EIP = 0xF7FF3EED
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EDX = 0xFEFCFEF8
        cpu.SF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF3EED:0xF7FF3EF3], [b"\x81", b"\xe2", b"\x00", b"\x01", b"\x01", b"\x01"]
        )
        self.assertEqual(cpu.EIP, 4160700147)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_AND_12(self):
        """Instruction AND_12
        Groups:
        0x804a3e4:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804A000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804A3E4, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804A3E4
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x804A3E4:0x804A3EB], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134521835)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_13(self):
        """Instruction AND_13
        Groups:
        0x8069701:  and     edx, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08069000, 0x1000, "rwx")
        mem.write(0x8069701, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x8069701
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x8069701:0x8069707], [b"\x81", b"\xe2", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 134649607)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_AND_14(self):
        """Instruction AND_14
        Groups:
        0x8065b70:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065B70, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x10\x00\x00\x00")
        cpu.EIP = 0x8065B70
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x8065B70:0x8065B77], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x10", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134634359)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_15(self):
        """Instruction AND_15
        Groups:
        0x8064eb1:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08064000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8064EB1, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x10\x00\x00\x00")
        cpu.EIP = 0x8064EB1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x8064EB1:0x8064EB8], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x10", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134631096)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_16(self):
        """Instruction AND_16
        Groups:
        0x806b598:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806B598, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x806B598
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x806B598:0x806B59F], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134657439)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_17(self):
        """Instruction AND_17
        Groups:
        0x805b447:  and     eax, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B447, "%\xff\x00\x00\x00")
        cpu.EIP = 0x805B447
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xEB
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x805B447:0x805B44C], [b"%", b"\xff", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134591564)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 235)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_18(self):
        """Instruction AND_18
        Groups:
        0x805a902:  and     eax, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805A000, 0x1000, "rwx")
        mem.write(0x805A902, "%\xff\x00\x00\x00")
        cpu.EIP = 0x805A902
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xEB
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x805A902:0x805A907], [b"%", b"\xff", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134588679)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 235)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_19(self):
        """Instruction AND_19
        Groups:
        0x806aae2:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806A000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806AAE2, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x806AAE2
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x806AAE2:0x806AAE9], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134654697)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_2(self):
        """Instruction AND_2
        Groups:
        0x805dc21:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805DC21, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x805DC21
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x805DC21:0x805DC28], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134601768)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_20(self):
        """Instruction AND_20
        Groups:
        0x805a4fc:  and     eax, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805A000, 0x1000, "rwx")
        mem.write(0x805A4FC, "%\xff\x00\x00\x00")
        cpu.EIP = 0x805A4FC
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xEB
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x805A4FC:0x805A501], [b"%", b"\xff", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134587649)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 235)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_AND_21(self):
        """Instruction AND_21
        Groups:
        0x8060799:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8060799, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x8060799
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x8060799:0x80607A0], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134612896)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_3(self):
        """Instruction AND_3
        Groups:
        0x806e0cf:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806E000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806E0CF, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x806E0CF
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x806E0CF:0x806E0D6], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134668502)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_4(self):
        """Instruction AND_4
        Groups:
        0x806cf9f:  and     edx, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806C000, 0x1000, "rwx")
        mem.write(0x806CF9F, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x806CF9F
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0xFA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x806CF9F:0x806CFA5], [b"\x81", b"\xe2", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 134664101)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 250)
        self.assertEqual(cpu.SF, False)

    def test_AND_5(self):
        """Instruction AND_5
        Groups:
        0x8062394:  and     dword ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08062000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8062394, "\x81e\x00\xff\x00\x00\x00")
        mem.write(0xFFFFB600, "\x10\x00\x00\x00")
        cpu.EIP = 0x8062394
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x8062394:0x806239B], [b"\x81", b"e", b"\x00", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x10", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134620059)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_AND_6(self):
        """Instruction AND_6
        Groups:
        0xf7fe212b: and     ecx, 7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE212B, "\x83\xe1\x07")
        cpu.EIP = 0xF7FE212B
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0xF7FE212B:0xF7FE212E], [b"\x83", b"\xe1", b"\x07"])
        self.assertEqual(cpu.EIP, 4160626990)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 6)

    def test_AND_7(self):
        """Instruction AND_7
        Groups:
        0x804bf30:  and     edx, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804B000, 0x1000, "rwx")
        mem.write(0x804BF30, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x804BF30
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0xF0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x804BF30:0x804BF36], [b"\x81", b"\xe2", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 134528822)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 240)
        self.assertEqual(cpu.SF, False)

    def test_AND_8(self):
        """Instruction AND_8
        Groups:
        0xf7fec3da: and     edx, 0x7fff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC3DA, "\x81\xe2\xff\x7f\x00\x00")
        cpu.EIP = 0xF7FEC3DA
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x19
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FEC3DA:0xF7FEC3E0], [b"\x81", b"\xe2", b"\xff", b"\x7f", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160668640)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 25)
        self.assertEqual(cpu.SF, False)

    def test_AND_9(self):
        """Instruction AND_9
        Groups:
        0x80494c9:  and     edx, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08049000, 0x1000, "rwx")
        mem.write(0x80494C9, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x80494C9
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0xF0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0x80494C9:0x80494CF], [b"\x81", b"\xe2", b"\xff", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 134517967)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 240)
        self.assertEqual(cpu.SF, False)

    def test_BSF_1(self):
        """Instruction BSF_1
        Groups:
        0x806b25c:  bsf     cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B25C, "f\x0f\xbc\xca")
        cpu.EIP = 0x806B25C
        cpu.ZF = True
        cpu.CX = 0x746E
        cpu.DX = 0xFA
        cpu.execute()

        self.assertEqual(mem[0x806B25C:0x806B260], [b"f", b"\x0f", b"\xbc", b"\xca"])
        self.assertEqual(cpu.EIP, 134656608)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CX, 1)
        self.assertEqual(cpu.DX, 250)

    def test_BSF_2(self):
        """Instruction BSF_2
        Groups:
        0x806b294:  bsf     cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806B294, "f\x0f\xbcM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x806B294
        cpu.ZF = True
        cpu.CX = 0x1
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x806B294:0x806B299], [b"f", b"\x0f", b"\xbc", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134656665)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CX, 1)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_BSF_3(self):
        """Instruction BSF_3
        Groups:
        0x806b335:  bsf     ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B335, "\x0f\xbc\xca")
        cpu.EIP = 0x806B335
        cpu.ZF = True
        cpu.EDX = 0xFA
        cpu.ECX = 0x6C650001
        cpu.execute()

        self.assertEqual(mem[0x806B335:0x806B338], [b"\x0f", b"\xbc", b"\xca"])
        self.assertEqual(cpu.EIP, 134656824)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 250)
        self.assertEqual(cpu.ECX, 1)

    def test_BSF_4(self):
        """Instruction BSF_4
        Groups:
        0x806b36c:  bsf     ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806B36C, "\x0f\xbcM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x806B36C
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0x806B36C:0x806B370], [b"\x0f", b"\xbc", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134656880)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 1)

    def test_BSR_1(self):
        """Instruction BSR_1
        Groups:
        0x80661a3:  bsr     cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80661A3, "f\x0f\xbdM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x80661A3
        cpu.ZF = True
        cpu.CX = 0xFC00
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80661A3:0x80661A8], [b"f", b"\x0f", b"\xbd", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134635944)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CX, 64512)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_BSR_2(self):
        """Instruction BSR_2
        Groups:
        0xf7e2e8e8: bsr     ecx, dword ptr [esp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7E2E8E8, "\x0f\xbd\x0c$")
        mem.write(0xFFFFD600, "\x1f\x00\x00\x00")
        cpu.EIP = 0xF7E2E8E8
        cpu.ZF = True
        cpu.ECX = 0x200
        cpu.ESP = 0xFFFFD600
        cpu.execute()

        self.assertEqual(mem[0xF7E2E8E8:0xF7E2E8EC], [b"\x0f", b"\xbd", b"\x0c", b"$"])
        self.assertEqual(mem[0xFFFFD600:0xFFFFD604], [b"\x1f", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4158843116)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956544)
        self.assertEqual(cpu.ECX, 4)

    def test_BSR_3(self):
        """Instruction BSR_3
        Groups:
        0x806627b:  bsr     ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806627B, "\x0f\xbdM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x806627B
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0x80F1FC00
        cpu.execute()

        self.assertEqual(mem[0x806627B:0x806627F], [b"\x0f", b"\xbd", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134636159)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 2163342336)

    def test_BSR_4(self):
        """Instruction BSR_4
        Groups:
        0x8066244:  bsr     ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.write(0x8066244, "\x0f\xbd\xca")
        cpu.EIP = 0x8066244
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.ECX = 0x80F1FC00
        cpu.execute()

        self.assertEqual(mem[0x8066244:0x8066247], [b"\x0f", b"\xbd", b"\xca"])
        self.assertEqual(cpu.EIP, 134636103)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 2163342336)

    def test_BSR_5(self):
        """Instruction BSR_5
        Groups:
        0x806616b:  bsr     cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.write(0x806616B, "f\x0f\xbd\xca")
        cpu.EIP = 0x806616B
        cpu.ZF = True
        cpu.CX = 0xFC00
        cpu.DX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x806616B:0x806616F], [b"f", b"\x0f", b"\xbd", b"\xca"])
        self.assertEqual(cpu.EIP, 134635887)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CX, 64512)
        self.assertEqual(cpu.DX, 0)

    def test_BSWAP_1(self):
        """Instruction BSWAP_1
        Groups:
        0x807937c:  bswap   ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807937C, "\x0f\xc9")
        cpu.EIP = 0x807937C
        cpu.ECX = 0x80008001
        cpu.execute()

        self.assertEqual(mem[0x807937C:0x807937E], [b"\x0f", b"\xc9"])
        self.assertEqual(cpu.EIP, 134714238)
        self.assertEqual(cpu.ECX, 25165952)

    def test_BTC_1(self):
        """Instruction BTC_1
        Groups:
        0x8061077:  btc     ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08061000, 0x1000, "rwx")
        mem.write(0x8061077, "\x0f\xba\xf9\x04")
        cpu.EIP = 0x8061077
        cpu.CF = False
        cpu.ECX = 0xFFFFFFEF
        cpu.execute()

        self.assertEqual(mem[0x8061077:0x806107B], [b"\x0f", b"\xba", b"\xf9", b"\x04"])
        self.assertEqual(cpu.EIP, 134615163)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_BTC_2(self):
        """Instruction BTC_2
        Groups:
        0x8060f33:  btc     cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060F33, "f\x0f\xbb\xd1")
        cpu.EIP = 0x8060F33
        cpu.CX = 0xFFFF
        cpu.CF = False
        cpu.DX = 0xEC
        cpu.execute()

        self.assertEqual(mem[0x8060F33:0x8060F37], [b"f", b"\x0f", b"\xbb", b"\xd1"])
        self.assertEqual(cpu.EIP, 134614839)
        self.assertEqual(cpu.CX, 61439)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.DX, 236)

    def test_BTC_3(self):
        """Instruction BTC_3
        Groups:
        0x80610a2:  btc     ecx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08061000, 0x1000, "rwx")
        mem.write(0x80610A2, "\x0f\xba\xf9\xff")
        cpu.EIP = 0x80610A2
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0x80610A2:0x80610A6], [b"\x0f", b"\xba", b"\xf9", b"\xff"])
        self.assertEqual(cpu.EIP, 134615206)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ECX, 2147483647)

    def test_BTC_4(self):
        """Instruction BTC_4
        Groups:
        0x8060fac:  btc     cx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060FAC, "f\x0f\xba\xf9\x04")
        cpu.EIP = 0x8060FAC
        cpu.CX = 0xEFFF
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8060FAC:0x8060FB1], [b"f", b"\x0f", b"\xba", b"\xf9", b"\x04"])
        self.assertEqual(cpu.EIP, 134614961)
        self.assertEqual(cpu.CX, 61423)
        self.assertEqual(cpu.CF, True)

    def test_BTC_5(self):
        """Instruction BTC_5
        Groups:
        0x806100c:  btc     ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08061000, 0x1000, "rwx")
        mem.write(0x806100C, "\x0f\xbb\xd1")
        cpu.EIP = 0x806100C
        cpu.EDX = 0xEC
        cpu.CF = False
        cpu.ECX = 0xFFFFEFEF
        cpu.execute()

        self.assertEqual(mem[0x806100C:0x806100F], [b"\x0f", b"\xbb", b"\xd1"])
        self.assertEqual(cpu.EIP, 134615055)
        self.assertEqual(cpu.EDX, 236)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ECX, 4294967279)

    def test_BTR_1(self):
        """Instruction BTR_1
        Groups:
        0x805beed:  btr     ecx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BEED, "\x0f\xba\xf1\xff")
        cpu.EIP = 0x805BEED
        cpu.CF = False
        cpu.ECX = 0x80000000
        cpu.execute()

        self.assertEqual(mem[0x805BEED:0x805BEF1], [b"\x0f", b"\xba", b"\xf1", b"\xff"])
        self.assertEqual(cpu.EIP, 134594289)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_BTR_2(self):
        """Instruction BTR_2
        Groups:
        0x805bec2:  btr     ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BEC2, "\x0f\xba\xf1\x04")
        cpu.EIP = 0x805BEC2
        cpu.CF = False
        cpu.ECX = 0x80000000
        cpu.execute()

        self.assertEqual(mem[0x805BEC2:0x805BEC6], [b"\x0f", b"\xba", b"\xf1", b"\x04"])
        self.assertEqual(cpu.EIP, 134594246)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ECX, 2147483648)

    def test_BTR_3(self):
        """Instruction BTR_3
        Groups:
        0x805bdf7:  btr     cx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BDF7, "f\x0f\xba\xf1\x04")
        cpu.EIP = 0x805BDF7
        cpu.CX = 0x10
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x805BDF7:0x805BDFC], [b"f", b"\x0f", b"\xba", b"\xf1", b"\x04"])
        self.assertEqual(cpu.EIP, 134594044)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.CF, True)

    def test_BTR_4(self):
        """Instruction BTR_4
        Groups:
        0x805be57:  btr     ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BE57, "\x0f\xb3\xd1")
        cpu.EIP = 0x805BE57
        cpu.EDX = 0xEC
        cpu.CF = False
        cpu.ECX = 0x80000000
        cpu.execute()

        self.assertEqual(mem[0x805BE57:0x805BE5A], [b"\x0f", b"\xb3", b"\xd1"])
        self.assertEqual(cpu.EIP, 134594138)
        self.assertEqual(cpu.EDX, 236)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ECX, 2147483648)

    def test_BTR_5(self):
        """Instruction BTR_5
        Groups:
        0x805bd7e:  btr     cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BD7E, "f\x0f\xb3\xd1")
        cpu.EIP = 0x805BD7E
        cpu.CX = 0x1010
        cpu.CF = False
        cpu.DX = 0xEC
        cpu.execute()

        self.assertEqual(mem[0x805BD7E:0x805BD82], [b"f", b"\x0f", b"\xb3", b"\xd1"])
        self.assertEqual(cpu.EIP, 134593922)
        self.assertEqual(cpu.CX, 16)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.DX, 236)

    def test_BTS_1(self):
        """Instruction BTS_1
        Groups:
        0x805bbab:  bts     ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBAB, "\x0f\xba\xe9\x04")
        cpu.EIP = 0x805BBAB
        cpu.CF = True
        cpu.ECX = 0x1010
        cpu.execute()

        self.assertEqual(mem[0x805BBAB:0x805BBAF], [b"\x0f", b"\xba", b"\xe9", b"\x04"])
        self.assertEqual(cpu.EIP, 134593455)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ECX, 4112)

    def test_BTS_2(self):
        """Instruction BTS_2
        Groups:
        0x805bba8:  bts     ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBA8, "\x0f\xab\xd1")
        cpu.EIP = 0x805BBA8
        cpu.EDX = 0x3EC
        cpu.CF = False
        cpu.ECX = 0x1010
        cpu.execute()

        self.assertEqual(mem[0x805BBA8:0x805BBAB], [b"\x0f", b"\xab", b"\xd1"])
        self.assertEqual(cpu.EIP, 134593451)
        self.assertEqual(cpu.EDX, 1004)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ECX, 4112)

    def test_BTS_3(self):
        """Instruction BTS_3
        Groups:
        0x805bba3:  bts     cx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBA3, "f\x0f\xba\xe9\x04")
        cpu.EIP = 0x805BBA3
        cpu.CX = 0x1000
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x805BBA3:0x805BBA8], [b"f", b"\x0f", b"\xba", b"\xe9", b"\x04"])
        self.assertEqual(cpu.EIP, 134593448)
        self.assertEqual(cpu.CX, 4112)
        self.assertEqual(cpu.CF, False)

    def test_BTS_4(self):
        """Instruction BTS_4
        Groups:
        0x805bb9f:  bts     cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BB9F, "f\x0f\xab\xd1")
        cpu.EIP = 0x805BB9F
        cpu.CX = 0x0
        cpu.CF = False
        cpu.DX = 0x3EC
        cpu.execute()

        self.assertEqual(mem[0x805BB9F:0x805BBA3], [b"f", b"\x0f", b"\xab", b"\xd1"])
        self.assertEqual(cpu.EIP, 134593443)
        self.assertEqual(cpu.CX, 4096)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.DX, 1004)

    def test_BTS_5(self):
        """Instruction BTS_5
        Groups:
        0x805bbaf:  bts     ecx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBAF, "\x0f\xba\xe9\xff")
        cpu.EIP = 0x805BBAF
        cpu.CF = True
        cpu.ECX = 0x1010
        cpu.execute()

        self.assertEqual(mem[0x805BBAF:0x805BBB3], [b"\x0f", b"\xba", b"\xe9", b"\xff"])
        self.assertEqual(cpu.EIP, 134593459)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ECX, 2147487760)

    def test_BT_1(self):
        """Instruction BT_1
        Groups:
        0x80486c3:  bt      ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x80486C3, "\x0f\xa3\xd1")
        cpu.EIP = 0x80486C3
        cpu.EDX = 0xF0
        cpu.CF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80486C3:0x80486C6], [b"\x0f", b"\xa3", b"\xd1"])
        self.assertEqual(cpu.EIP, 134514374)
        self.assertEqual(cpu.EDX, 240)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ECX, 0)

    def test_BT_10(self):
        """Instruction BT_10
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_11(self):
        """Instruction BT_11
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x2
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 2)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_12(self):
        """Instruction BT_12
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_13(self):
        """Instruction BT_13
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_14(self):
        """Instruction BT_14
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_15(self):
        """Instruction BT_15
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_16(self):
        """Instruction BT_16
        Groups:
        0x80485ea:  bt      cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x80485EA, "f\x0f\xa3\xd1")
        cpu.EIP = 0x80485EA
        cpu.CX = 0x0
        cpu.CF = False
        cpu.DX = 0xF0
        cpu.execute()

        self.assertEqual(mem[0x80485EA:0x80485EE], [b"f", b"\x0f", b"\xa3", b"\xd1"])
        self.assertEqual(cpu.EIP, 134514158)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.DX, 240)

    def test_BT_17(self):
        """Instruction BT_17
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_18(self):
        """Instruction BT_18
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_19(self):
        """Instruction BT_19
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_2(self):
        """Instruction BT_2
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_20(self):
        """Instruction BT_20
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_21(self):
        """Instruction BT_21
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_3(self):
        """Instruction BT_3
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_4(self):
        """Instruction BT_4
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_5(self):
        """Instruction BT_5
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_6(self):
        """Instruction BT_6
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_7(self):
        """Instruction BT_7
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_BT_8(self):
        """Instruction BT_8
        Groups:
        0x8048759:  bt      ecx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x8048759, "\x0f\xba\xe1\xff")
        cpu.EIP = 0x8048759
        cpu.CF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8048759:0x804875D], [b"\x0f", b"\xba", b"\xe1", b"\xff"])
        self.assertEqual(cpu.EIP, 134514525)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ECX, 0)

    def test_BT_9(self):
        """Instruction BT_9
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.EAX = 0x467
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CC0:0xF7FE4CC3], [b"\x0f", b"\xa3", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160638147)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 1127)

    def test_CALL_1(self):
        """Instruction CALL_1
        Groups: call, not64bitmode
        0xf7fec303: call    0xf7fdc820
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEC303, "\xe8\x18\x05\xff\xff")
        mem.write(0xFFFFD3FC, "\xc1\xc1\xfe\xf7\x03\x00\x00\x00\x10")
        cpu.EIP = 0xF7FEC303
        cpu.EBP = 0xFFFFD488
        cpu.ESP = 0xFFFFD400
        cpu.execute()

        self.assertEqual(mem[0xF7FEC303:0xF7FEC308], [b"\xe8", b"\x18", b"\x05", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD3FC:0xFFFFD405],
            [b"\x08", b"\xc3", b"\xfe", b"\xf7", b"\x03", b"\x00", b"\x00", b"\x00", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160604192)
        self.assertEqual(cpu.EBP, 4294956168)
        self.assertEqual(cpu.ESP, 4294956028)

    def test_CALL_10(self):
        """Instruction CALL_10
        Groups: call, not64bitmode
        0xf7ff0819: call    0xf7ff0590
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF0819, "\xe8r\xfd\xff\xff")
        mem.write(0xFFFFD01C, "\x1e\x08\xff\xf7\xcd^\xff\xf7\x00")
        cpu.EIP = 0xF7FF0819
        cpu.EBP = 0x306
        cpu.ESP = 0xFFFFD020
        cpu.execute()

        self.assertEqual(mem[0xF7FF0819:0xF7FF081E], [b"\xe8", b"r", b"\xfd", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD01C:0xFFFFD025],
            [b"\x1e", b"\x08", b"\xff", b"\xf7", b"\xcd", b"^", b"\xff", b"\xf7", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160685456)
        self.assertEqual(cpu.EBP, 774)
        self.assertEqual(cpu.ESP, 4294955036)

    def test_CALL_11(self):
        """Instruction CALL_11
        Groups: call, not64bitmode
        0xf7fe54ef: call    0xf7fe4c80
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE54EF, "\xe8\x8c\xf7\xff\xff")
        mem.write(0xFFFFD2EC, "4N\xfe\xf7\xc4\xb1\xfd\xf7\xdc")
        cpu.EIP = 0xF7FE54EF
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2F0
        cpu.execute()

        self.assertEqual(mem[0xF7FE54EF:0xF7FE54F4], [b"\xe8", b"\x8c", b"\xf7", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD2EC:0xFFFFD2F5],
            [b"\xf4", b"T", b"\xfe", b"\xf7", b"\xc4", b"\xb1", b"\xfd", b"\xf7", b"\xdc"],
        )
        self.assertEqual(cpu.EIP, 4160638080)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955756)

    def test_CALL_12(self):
        """Instruction CALL_12
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        mem.write(0xFFFFD43C, "\xf8r\xfe\xf7\x10\xaa\xfd\xf7\xa8")
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD440
        cpu.execute()

        self.assertEqual(mem[0xF7FE72F3:0xF7FE72F8], [b"\xe8", b"x", b"\xe3", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD43C:0xFFFFD445],
            [b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10", b"\xaa", b"\xfd", b"\xf7", b"\xa8"],
        )
        self.assertEqual(cpu.EIP, 4160640624)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956092)

    def test_CALL_13(self):
        """Instruction CALL_13
        Groups: call, not64bitmode
        0xf7fe8bc3: call    0xf7ff45f0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE8BC3, "\xe8(\xba\x00\x00")
        mem.write(0xFFFFD34C, "\x9d\x8b\xfe\xf7\xf4\xaa\xfd\xf7\x80")
        cpu.EIP = 0xF7FE8BC3
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD350
        cpu.execute()

        self.assertEqual(mem[0xF7FE8BC3:0xF7FE8BC8], [b"\xe8", b"(", b"\xba", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD34C:0xFFFFD355],
            [b"\xc8", b"\x8b", b"\xfe", b"\xf7", b"\xf4", b"\xaa", b"\xfd", b"\xf7", b"\x80"],
        )
        self.assertEqual(cpu.EIP, 4160701936)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294955852)

    def test_CALL_14(self):
        """Instruction CALL_14
        Groups: call, not64bitmode
        0xf7eaa007: call    0xf7f3b7db
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7EAA007, "\xe8\xcf\x17\t\x00")
        mem.write(0xFFFFD57C, "\x0c\xa0\xea\xf7\x00\x00\x00\x00\x00")
        cpu.EIP = 0xF7EAA007
        cpu.EBP = 0xC2
        cpu.ESP = 0xFFFFD580
        cpu.execute()

        self.assertEqual(mem[0xF7EAA007:0xF7EAA00C], [b"\xe8", b"\xcf", b"\x17", b"\t", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD57C:0xFFFFD585],
            [b"\x0c", b"\xa0", b"\xea", b"\xf7", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4159944667)
        self.assertEqual(cpu.EBP, 194)
        self.assertEqual(cpu.ESP, 4294956412)

    def test_CALL_15(self):
        """Instruction CALL_15
        Groups: call, not64bitmode
        0xf7feabc3: call    dword ptr [ebx + 0x558]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEA000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEABC3, "\xff\x93X\x05\x00\x00")
        mem.write(0xF7FFD558, " \xd1\xfd\xf7")
        mem.write(0xFFFFD33C, "\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0xF7FEABC3
        cpu.EBP = 0xFFFFD4F8
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD340
        cpu.execute()

        self.assertEqual(
            mem[0xF7FEABC3:0xF7FEABC9], [b"\xff", b"\x93", b"X", b"\x05", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xF7FFD558:0xF7FFD55C], [b" ", b"\xd1", b"\xfd", b"\xf7"])
        self.assertEqual(
            mem[0xFFFFD33C:0xFFFFD345],
            [b"\xc9", b"\xab", b"\xfe", b"\xf7", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160606496)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955836)

    def test_CALL_16(self):
        """Instruction CALL_16
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        mem.write(0xFFFFD43C, "\xf8r\xfe\xf7\x10\xaa\xfd\xf7\xa8")
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD440
        cpu.execute()

        self.assertEqual(mem[0xF7FE72F3:0xF7FE72F8], [b"\xe8", b"x", b"\xe3", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD43C:0xFFFFD445],
            [b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10", b"\xaa", b"\xfd", b"\xf7", b"\xa8"],
        )
        self.assertEqual(cpu.EIP, 4160640624)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956092)

    def test_CALL_17(self):
        """Instruction CALL_17
        Groups: call, not64bitmode
        0xf7fe568c: call    0xf7ff4768
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE568C, "\xe8\xd7\xf0\x00\x00")
        mem.write(0xFFFFD37C, "zW\xfe\xf7\xe8\xd3\xff\xff\xd4")
        cpu.EIP = 0xF7FE568C
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD380
        cpu.execute()

        self.assertEqual(mem[0xF7FE568C:0xF7FE5691], [b"\xe8", b"\xd7", b"\xf0", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD37C:0xFFFFD385],
            [b"\x91", b"V", b"\xfe", b"\xf7", b"\xe8", b"\xd3", b"\xff", b"\xff", b"\xd4"],
        )
        self.assertEqual(cpu.EIP, 4160702312)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955900)

    def test_CALL_18(self):
        """Instruction CALL_18
        Groups: call, not64bitmode
        0xf7ff0a62: call    0xf7ff0590
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF0A62, "\xe8)\xfb\xff\xff")
        mem.write(0xFFFFD01C, "\x1e\x08\xff\xf7\xcd^\xff\xf7\x00")
        cpu.EIP = 0xF7FF0A62
        cpu.EBP = 0x340
        cpu.ESP = 0xFFFFD020
        cpu.execute()

        self.assertEqual(mem[0xF7FF0A62:0xF7FF0A67], [b"\xe8", b")", b"\xfb", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD01C:0xFFFFD025],
            [b"g", b"\n", b"\xff", b"\xf7", b"\xcd", b"^", b"\xff", b"\xf7", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160685456)
        self.assertEqual(cpu.EBP, 832)
        self.assertEqual(cpu.ESP, 4294955036)

    def test_CALL_19(self):
        """Instruction CALL_19
        Groups: call, not64bitmode
        0xf7fe4d98: call    0xf7ff3e60
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D98, "\xe8\xc3\xf0\x00\x00")
        mem.write(0xFFFFD2AC, "\x97L\xfe\xf7a\x80\xe2\xf7a")
        cpu.EIP = 0xF7FE4D98
        cpu.EBP = 0xF7FDABA8
        cpu.ESP = 0xFFFFD2B0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D98:0xF7FE4D9D], [b"\xe8", b"\xc3", b"\xf0", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD2AC:0xFFFFD2B5],
            [b"\x9d", b"M", b"\xfe", b"\xf7", b"a", b"\x80", b"\xe2", b"\xf7", b"a"],
        )
        self.assertEqual(cpu.EIP, 4160700000)
        self.assertEqual(cpu.EBP, 4160596904)
        self.assertEqual(cpu.ESP, 4294955692)

    def test_CALL_2(self):
        """Instruction CALL_2
        Groups: call, not64bitmode
        0xf7eaa8b1: call    0xf7f3b7db
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7EAA8B1, "\xe8%\x0f\t\x00")
        mem.write(0xFFFFD434, "vx\xe9\xf7\x00\xd0\xff\xf7\x8c")
        cpu.EIP = 0xF7EAA8B1
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD438
        cpu.execute()

        self.assertEqual(mem[0xF7EAA8B1:0xF7EAA8B6], [b"\xe8", b"%", b"\x0f", b"\t", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD434:0xFFFFD43D],
            [b"\xb6", b"\xa8", b"\xea", b"\xf7", b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x8c"],
        )
        self.assertEqual(cpu.EIP, 4159944667)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956084)

    def test_CALL_20(self):
        """Instruction CALL_20
        Groups: call, not64bitmode
        0xf7fe9d3c: call    0xf7fdc810
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE9D3C, "\xe8\xcf*\xff\xff")
        mem.write(0xFFFFD3EC, "\x1b\x9c\xfe\xf7\xb8\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE9D3C
        cpu.EBP = 0xFFFFD498
        cpu.ESP = 0xFFFFD3F0
        cpu.execute()

        self.assertEqual(mem[0xF7FE9D3C:0xF7FE9D41], [b"\xe8", b"\xcf", b"*", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD3EC:0xFFFFD3F5],
            [b"A", b"\x9d", b"\xfe", b"\xf7", b"\xb8", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160604176)
        self.assertEqual(cpu.EBP, 4294956184)
        self.assertEqual(cpu.ESP, 4294956012)

    def test_CALL_21(self):
        """Instruction CALL_21
        Groups: call, not64bitmode
        0xf7fe3b46: call    0xf7fdc810
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE3B46, "\xe8\xc5\x8c\xff\xff")
        mem.write(0xFFFFD49C, "6;\xfe\xf7\x14\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE3B46
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD4A0
        cpu.execute()

        self.assertEqual(mem[0xF7FE3B46:0xF7FE3B4B], [b"\xe8", b"\xc5", b"\x8c", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD49C:0xFFFFD4A5],
            [b"K", b";", b"\xfe", b"\xf7", b"\x14", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160604176)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956188)

    def test_CALL_3(self):
        """Instruction CALL_3
        Groups: call, not64bitmode
        0xf7fe4d98: call    0xf7ff3e60
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D98, "\xe8\xc3\xf0\x00\x00")
        mem.write(0xFFFFD2AC, "\xe2L\xfe\xf74\xc6\xfd\xf7\xac")
        cpu.EIP = 0xF7FE4D98
        cpu.EBP = 0xF7FDADB8
        cpu.ESP = 0xFFFFD2B0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D98:0xF7FE4D9D], [b"\xe8", b"\xc3", b"\xf0", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD2AC:0xFFFFD2B5],
            [b"\x9d", b"M", b"\xfe", b"\xf7", b"4", b"\xc6", b"\xfd", b"\xf7", b"\xac"],
        )
        self.assertEqual(cpu.EIP, 4160700000)
        self.assertEqual(cpu.EBP, 4160597432)
        self.assertEqual(cpu.ESP, 4294955692)

    def test_CALL_4(self):
        """Instruction CALL_4
        Groups: call, not64bitmode
        0xf7fe54ef: call    0xf7fe4c80
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE54EF, "\xe8\x8c\xf7\xff\xff")
        mem.write(0xFFFFD2EC, "4N\xfe\xf7\xc4\xb1\xfd\xf7\xdc")
        cpu.EIP = 0xF7FE54EF
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2F0
        cpu.execute()

        self.assertEqual(mem[0xF7FE54EF:0xF7FE54F4], [b"\xe8", b"\x8c", b"\xf7", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD2EC:0xFFFFD2F5],
            [b"\xf4", b"T", b"\xfe", b"\xf7", b"\xc4", b"\xb1", b"\xfd", b"\xf7", b"\xdc"],
        )
        self.assertEqual(cpu.EIP, 4160638080)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955756)

    def test_CALL_5(self):
        """Instruction CALL_5
        Groups: call, not64bitmode
        0xf7ff41d2: call    0xf7ff4768
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF41D2, "\xe8\x91\x05\x00\x00")
        mem.write(0xFFFFD030, "\xd7A\xff\xf7D\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF41D2
        cpu.EBP = 0xFFFFD088
        cpu.ESP = 0xFFFFD034
        cpu.execute()

        self.assertEqual(mem[0xF7FF41D2:0xF7FF41D7], [b"\xe8", b"\x91", b"\x05", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD030:0xFFFFD039],
            [b"\xd7", b"A", b"\xff", b"\xf7", b"D", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160702312)
        self.assertEqual(cpu.EBP, 4294955144)
        self.assertEqual(cpu.ESP, 4294955056)

    def test_CALL_6(self):
        """Instruction CALL_6
        Groups: call, not64bitmode
        0xf7fe568c: call    0xf7ff4768
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE568C, "\xe8\xd7\xf0\x00\x00")
        mem.write(0xFFFFD37C, "zW\xfe\xf7\xe8\xd3\xff\xff\xb8")
        cpu.EIP = 0xF7FE568C
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD380
        cpu.execute()

        self.assertEqual(mem[0xF7FE568C:0xF7FE5691], [b"\xe8", b"\xd7", b"\xf0", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD37C:0xFFFFD385],
            [b"\x91", b"V", b"\xfe", b"\xf7", b"\xe8", b"\xd3", b"\xff", b"\xff", b"\xb8"],
        )
        self.assertEqual(cpu.EIP, 4160702312)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955900)

    def test_CALL_7(self):
        """Instruction CALL_7
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        mem.write(0xFFFFD43C, "\xf8r\xfe\xf7\x10\xaa\xfd\xf7\xa8")
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD440
        cpu.execute()

        self.assertEqual(mem[0xF7FE72F3:0xF7FE72F8], [b"\xe8", b"x", b"\xe3", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD43C:0xFFFFD445],
            [b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10", b"\xaa", b"\xfd", b"\xf7", b"\xa8"],
        )
        self.assertEqual(cpu.EIP, 4160640624)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956092)

    def test_CALL_8(self):
        """Instruction CALL_8
        Groups: call, not64bitmode
        0xf7fe5775: call    0xf7fe4e10
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5775, "\xe8\x96\xf6\xff\xff")
        mem.write(0xFFFFD37C, "\x91V\xfe\xf7\xe8\xd3\xff\xffD")
        cpu.EIP = 0xF7FE5775
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD380
        cpu.execute()

        self.assertEqual(mem[0xF7FE5775:0xF7FE577A], [b"\xe8", b"\x96", b"\xf6", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD37C:0xFFFFD385],
            [b"z", b"W", b"\xfe", b"\xf7", b"\xe8", b"\xd3", b"\xff", b"\xff", b"D"],
        )
        self.assertEqual(cpu.EIP, 4160638480)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955900)

    def test_CALL_9(self):
        """Instruction CALL_9
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        mem.write(0xFFFFD43C, "\xf8r\xfe\xf7\x10\xaa\xfd\xf7\xa8")
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD440
        cpu.execute()

        self.assertEqual(mem[0xF7FE72F3:0xF7FE72F8], [b"\xe8", b"x", b"\xe3", b"\xff", b"\xff"])
        self.assertEqual(
            mem[0xFFFFD43C:0xFFFFD445],
            [b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10", b"\xaa", b"\xfd", b"\xf7", b"\xa8"],
        )
        self.assertEqual(cpu.EIP, 4160640624)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956092)

    def test_CBW_1(self):
        """Instruction CBW_1
        Groups:
        0x8060d84:  cbw
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060D84, "f\x98")
        cpu.EIP = 0x8060D84
        cpu.AX = 0xEB
        cpu.execute()

        self.assertEqual(mem[0x8060D84:0x8060D86], [b"f", b"\x98"])
        self.assertEqual(cpu.EIP, 134614406)
        self.assertEqual(cpu.AX, 65515)

    def test_CDQ_1(self):
        """Instruction CDQ_1
        Groups:
        0x804d63b:  cdq
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D63B, "\x99")
        cpu.EIP = 0x804D63B
        cpu.EDX = 0xF0
        cpu.EAX = 0xEB6EB6EB
        cpu.execute()

        self.assertEqual(mem[0x804D63B:0x804D63C], [b"\x99"])
        self.assertEqual(cpu.EIP, 134534716)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.EAX, 3949901547)

    def test_CDQ_2(self):
        """Instruction CDQ_2
        Groups:
        0x80702fa:  cdq
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FA, "\x99")
        cpu.EIP = 0x80702FA
        cpu.EDX = 0xFA
        cpu.EAX = 0xFFFFECF8
        cpu.execute()

        self.assertEqual(mem[0x80702FA:0x80702FB], [b"\x99"])
        self.assertEqual(cpu.EIP, 134677243)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.EAX, 4294962424)

    def test_CLC_1(self):
        """Instruction CLC_1
        Groups:
        0x80701bc:  clc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701BC, "\xf8")
        cpu.EIP = 0x80701BC
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x80701BC:0x80701BD], [b"\xf8"])
        self.assertEqual(cpu.EIP, 134676925)
        self.assertEqual(cpu.CF, False)

    def test_CLD_1(self):
        """Instruction CLD_1
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_10(self):
        """Instruction CLD_10
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_11(self):
        """Instruction CLD_11
        Groups:
        0xf7ff4607: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4607
        cpu.execute()

        self.assertEqual(mem[0xF7FF4607:0xF7FF4608], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701960)

    def test_CLD_12(self):
        """Instruction CLD_12
        Groups:
        0xf7ff4607: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4607
        cpu.execute()

        self.assertEqual(mem[0xF7FF4607:0xF7FF4608], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701960)

    def test_CLD_13(self):
        """Instruction CLD_13
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_14(self):
        """Instruction CLD_14
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_15(self):
        """Instruction CLD_15
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_16(self):
        """Instruction CLD_16
        Groups:
        0xf7ff4607: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4607
        cpu.execute()

        self.assertEqual(mem[0xF7FF4607:0xF7FF4608], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701960)

    def test_CLD_17(self):
        """Instruction CLD_17
        Groups:
        0xf7ff4607: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4607
        cpu.execute()

        self.assertEqual(mem[0xF7FF4607:0xF7FF4608], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701960)

    def test_CLD_18(self):
        """Instruction CLD_18
        Groups:
        0xf7ff44e0: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44E0, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF44E0
        cpu.execute()

        self.assertEqual(mem[0xF7FF44E0:0xF7FF44E1], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701665)

    def test_CLD_19(self):
        """Instruction CLD_19
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_2(self):
        """Instruction CLD_2
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_20(self):
        """Instruction CLD_20
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_21(self):
        """Instruction CLD_21
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_3(self):
        """Instruction CLD_3
        Groups:
        0xf7ff44e0: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44E0, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF44E0
        cpu.execute()

        self.assertEqual(mem[0xF7FF44E0:0xF7FF44E1], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701665)

    def test_CLD_4(self):
        """Instruction CLD_4
        Groups:
        0xf7ff4540: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4540
        cpu.execute()

        self.assertEqual(mem[0xF7FF4540:0xF7FF4541], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701761)

    def test_CLD_5(self):
        """Instruction CLD_5
        Groups:
        0xf7ff4607: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4607
        cpu.execute()

        self.assertEqual(mem[0xF7FF4607:0xF7FF4608], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701960)

    def test_CLD_6(self):
        """Instruction CLD_6
        Groups:
        0xf7ff44e0: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44E0, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF44E0
        cpu.execute()

        self.assertEqual(mem[0xF7FF44E0:0xF7FF44E1], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701665)

    def test_CLD_7(self):
        """Instruction CLD_7
        Groups:
        0xf7ff4607: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4607
        cpu.execute()

        self.assertEqual(mem[0xF7FF4607:0xF7FF4608], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701960)

    def test_CLD_8(self):
        """Instruction CLD_8
        Groups:
        0x807019f:  cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807019F, "\xfc")
        cpu.DF = False
        cpu.EIP = 0x807019F
        cpu.execute()

        self.assertEqual(mem[0x807019F:0x80701A0], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 134676896)

    def test_CLD_9(self):
        """Instruction CLD_9
        Groups:
        0xf7ff4607: cld
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = False
        cpu.EIP = 0xF7FF4607
        cpu.execute()

        self.assertEqual(mem[0xF7FF4607:0xF7FF4608], [b"\xfc"])
        self.assertEqual(cpu.DF, False)
        self.assertEqual(cpu.EIP, 4160701960)

    def test_CMOVAE_1(self):
        """Instruction CMOVAE_1
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = 0x2
        cpu.CF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC1D5:0xF7FEC1D8], [b"\x0f", b"C", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160668120)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.EAX, 2)

    def test_CMOVAE_10(self):
        """Instruction CMOVAE_10
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = 0x23
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC1D5:0xF7FEC1D8], [b"\x0f", b"C", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160668120)
        self.assertEqual(cpu.ECX, 36)
        self.assertEqual(cpu.EAX, 36)

    def test_CMOVAE_11(self):
        """Instruction CMOVAE_11
        Groups: cmov
        0xf7fec2ae: cmovae  edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2AE, "\x0fC\xd1")
        cpu.EIP = 0xF7FEC2AE
        cpu.EDX = 0x1
        cpu.CF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2AE:0xF7FEC2B1], [b"\x0f", b"C", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160668337)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVAE_12(self):
        """Instruction CMOVAE_12
        Groups: cmov
        0x8048431:  cmovae  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8048431, "f\x0fCM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x8048431
        cpu.CX = 0x6FF0
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8048431:0x8048436], [b"f", b"\x0f", b"C", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134513718)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVAE_2(self):
        """Instruction CMOVAE_2
        Groups: cmov
        0x8048439:  cmovae  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8048439, "\x0fCM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x8048439
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.ECX = 0xE6FE6FF0
        cpu.execute()

        self.assertEqual(mem[0x8048439:0x804843D], [b"\x0f", b"C", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134513725)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVAE_3(self):
        """Instruction CMOVAE_3
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = 0x22
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC1D5:0xF7FEC1D8], [b"\x0f", b"C", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160668120)
        self.assertEqual(cpu.ECX, 36)
        self.assertEqual(cpu.EAX, 36)

    def test_CMOVAE_4(self):
        """Instruction CMOVAE_4
        Groups: cmov
        0xf7fec2ae: cmovae  edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2AE, "\x0fC\xd1")
        cpu.EIP = 0xF7FEC2AE
        cpu.EDX = 0x1
        cpu.CF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2AE:0xF7FEC2B1], [b"\x0f", b"C", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160668337)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVAE_5(self):
        """Instruction CMOVAE_5
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = 0x24
        cpu.CF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC1D5:0xF7FEC1D8], [b"\x0f", b"C", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160668120)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.EAX, 36)

    def test_CMOVAE_6(self):
        """Instruction CMOVAE_6
        Groups: cmov
        0xf7fed76a: cmovae  edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED76A, "\x0fC\xd1")
        cpu.EIP = 0xF7FED76A
        cpu.EDX = 0x1
        cpu.CF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FED76A:0xF7FED76D], [b"\x0f", b"C", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160673645)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVAE_7(self):
        """Instruction CMOVAE_7
        Groups: cmov
        0x804842d:  cmovae  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804842D, "f\x0fC\xca")
        cpu.EIP = 0x804842D
        cpu.CX = 0x0
        cpu.CF = False
        cpu.DX = 0x6FF0
        cpu.execute()

        self.assertEqual(mem[0x804842D:0x8048431], [b"f", b"\x0f", b"C", b"\xca"])
        self.assertEqual(cpu.EIP, 134513713)
        self.assertEqual(cpu.CX, 28656)
        self.assertEqual(cpu.DX, 28656)

    def test_CMOVAE_8(self):
        """Instruction CMOVAE_8
        Groups: cmov
        0xf7fec2ae: cmovae  edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2AE, "\x0fC\xd1")
        cpu.EIP = 0xF7FEC2AE
        cpu.EDX = 0x1
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2AE:0xF7FEC2B1], [b"\x0f", b"C", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160668337)
        self.assertEqual(cpu.EDX, 36)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVAE_9(self):
        """Instruction CMOVAE_9
        Groups: cmov
        0x8048436:  cmovae  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x8048436, "\x0fC\xca")
        cpu.EIP = 0x8048436
        cpu.EDX = 0xE6FE6FF0
        cpu.CF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8048436:0x8048439], [b"\x0f", b"C", b"\xca"])
        self.assertEqual(cpu.EIP, 134513721)
        self.assertEqual(cpu.EDX, 3875434480)
        self.assertEqual(cpu.ECX, 3875434480)

    def test_CMOVA_1(self):
        """Instruction CMOVA_1
        Groups: cmov
        0xf7fe231d: cmova   edx, dword ptr [ebp - 0x9c]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0xF7FE231D, "\x0fG\x95d\xff\xff\xff")
        mem.write(0xFFFFCFEC, "|:\xfc\xf7")
        cpu.EIP = 0xF7FE231D
        cpu.ZF = False
        cpu.EBP = 0xFFFFD088
        cpu.CF = True
        cpu.EDX = 0xF7FC1000
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE231D:0xF7FE2324], [b"\x0f", b"G", b"\x95", b"d", b"\xff", b"\xff", b"\xff"]
        )
        self.assertEqual(mem[0xFFFFCFEC:0xFFFFCFF0], [b"|", b":", b"\xfc", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160627492)
        self.assertEqual(cpu.EDX, 4160491520)
        self.assertEqual(cpu.EBP, 4294955144)

    def test_CMOVA_2(self):
        """Instruction CMOVA_2
        Groups: cmov
        0x804d67b:  cmova   cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D67B, "f\x0fG\xca")
        cpu.EIP = 0x804D67B
        cpu.ZF = True
        cpu.CX = 0x0
        cpu.CF = False
        cpu.DX = 0xFFFF
        cpu.execute()

        self.assertEqual(mem[0x804D67B:0x804D67F], [b"f", b"\x0f", b"G", b"\xca"])
        self.assertEqual(cpu.EIP, 134534783)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 65535)

    def test_CMOVA_3(self):
        """Instruction CMOVA_3
        Groups: cmov
        0x804d67f:  cmova   cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D67F, "f\x0fGM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x804D67F
        cpu.ZF = True
        cpu.CX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x804D67F:0x804D684], [b"f", b"\x0f", b"G", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534788)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVA_4(self):
        """Instruction CMOVA_4
        Groups: cmov
        0x804d684:  cmova   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D684, "\x0fG\xca")
        cpu.EIP = 0x804D684
        cpu.ZF = True
        cpu.CF = False
        cpu.EDX = 0xFFFFFFFF
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D684:0x804D687], [b"\x0f", b"G", b"\xca"])
        self.assertEqual(cpu.EIP, 134534791)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVA_5(self):
        """Instruction CMOVA_5
        Groups: cmov
        0x804d687:  cmova   ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D687, "\x0fGM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D687
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D687:0x804D68B], [b"\x0f", b"G", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534795)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVBE_1(self):
        """Instruction CMOVBE_1
        Groups: cmov
        0x805988d:  cmovbe  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805988D, "f\x0fFM\x00")
        mem.write(0xFFFFB600, "\xf4\xc9")
        cpu.EIP = 0x805988D
        cpu.ZF = False
        cpu.CX = 0xC703
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x805988D:0x8059892], [b"f", b"\x0f", b"F", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\xf4", b"\xc9"])
        self.assertEqual(cpu.EIP, 134584466)
        self.assertEqual(cpu.CX, 50947)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVBE_2(self):
        """Instruction CMOVBE_2
        Groups: cmov
        0x8059889:  cmovbe  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059889, "f\x0fF\xca")
        cpu.EIP = 0x8059889
        cpu.ZF = False
        cpu.CX = 0xC703
        cpu.CF = False
        cpu.DX = 0xC8F8
        cpu.execute()

        self.assertEqual(mem[0x8059889:0x805988D], [b"f", b"\x0f", b"F", b"\xca"])
        self.assertEqual(cpu.EIP, 134584461)
        self.assertEqual(cpu.CX, 50947)
        self.assertEqual(cpu.DX, 51448)

    def test_CMOVBE_3(self):
        """Instruction CMOVBE_3
        Groups: cmov
        0x8059892:  cmovbe  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059892, "\x0fF\xca")
        cpu.EIP = 0x8059892
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xC8F8
        cpu.ECX = 0xFFFFC703
        cpu.execute()

        self.assertEqual(mem[0x8059892:0x8059895], [b"\x0f", b"F", b"\xca"])
        self.assertEqual(cpu.EIP, 134584469)
        self.assertEqual(cpu.EDX, 51448)
        self.assertEqual(cpu.ECX, 4294952707)

    def test_CMOVBE_4(self):
        """Instruction CMOVBE_4
        Groups: cmov
        0xf7fe6d28: cmovbe  edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6D28, "\x0fF\xd1")
        cpu.EIP = 0xF7FE6D28
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x4E5
        cpu.ECX = 0x542
        cpu.execute()

        self.assertEqual(mem[0xF7FE6D28:0xF7FE6D2B], [b"\x0f", b"F", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160646443)
        self.assertEqual(cpu.EDX, 1253)
        self.assertEqual(cpu.ECX, 1346)

    def test_CMOVBE_5(self):
        """Instruction CMOVBE_5
        Groups: cmov
        0xf7fe6d28: cmovbe  edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6D28, "\x0fF\xd1")
        cpu.EIP = 0xF7FE6D28
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0xB
        cpu.ECX = 0xE
        cpu.execute()

        self.assertEqual(mem[0xF7FE6D28:0xF7FE6D2B], [b"\x0f", b"F", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160646443)
        self.assertEqual(cpu.EDX, 11)
        self.assertEqual(cpu.ECX, 14)

    def test_CMOVBE_6(self):
        """Instruction CMOVBE_6
        Groups: cmov
        0xf7fe0a66: cmovbe  eax, esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0A66, "\x0fF\xc6")
        cpu.EIP = 0xF7FE0A66
        cpu.ZF = False
        cpu.CF = False
        cpu.ESI = 0xE
        cpu.EAX = 0xB
        cpu.execute()

        self.assertEqual(mem[0xF7FE0A66:0xF7FE0A69], [b"\x0f", b"F", b"\xc6"])
        self.assertEqual(cpu.EIP, 4160621161)
        self.assertEqual(cpu.ESI, 14)
        self.assertEqual(cpu.EAX, 11)

    def test_CMOVBE_7(self):
        """Instruction CMOVBE_7
        Groups: cmov
        0x8059895:  cmovbe  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059895, "\x0fFM\x00")
        mem.write(0xFFFFB600, "\xf4\xc9\x00\x00")
        cpu.EIP = 0x8059895
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.ECX = 0xFFFFC703
        cpu.execute()

        self.assertEqual(mem[0x8059895:0x8059899], [b"\x0f", b"F", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\xf4", b"\xc9", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134584473)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 4294952707)

    def test_CMOVB_1(self):
        """Instruction CMOVB_1
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_10(self):
        """Instruction CMOVB_10
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_11(self):
        """Instruction CMOVB_11
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = True
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 4294967295)

    def test_CMOVB_12(self):
        """Instruction CMOVB_12
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_13(self):
        """Instruction CMOVB_13
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x9
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 9)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVB_14(self):
        """Instruction CMOVB_14
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_15(self):
        """Instruction CMOVB_15
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_16(self):
        """Instruction CMOVB_16
        Groups: cmov
        0x804d68f:  cmovb   cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D68F, "f\x0fBM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x804D68F
        cpu.CX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x804D68F:0x804D694], [b"f", b"\x0f", b"B", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534804)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVB_17(self):
        """Instruction CMOVB_17
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0xC
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 12)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVB_18(self):
        """Instruction CMOVB_18
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x12
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 18)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVB_19(self):
        """Instruction CMOVB_19
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x4
        cpu.CF = True
        cpu.ECX = 0x3
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 4)
        self.assertEqual(cpu.ECX, 4)

    def test_CMOVB_2(self):
        """Instruction CMOVB_2
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x1E
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 30)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVB_20(self):
        """Instruction CMOVB_20
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_21(self):
        """Instruction CMOVB_21
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x2
        cpu.CF = True
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 2)
        self.assertEqual(cpu.ECX, 2)

    def test_CMOVB_3(self):
        """Instruction CMOVB_3
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = True
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 4294967295)

    def test_CMOVB_4(self):
        """Instruction CMOVB_4
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_5(self):
        """Instruction CMOVB_5
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x20
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 32)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVB_6(self):
        """Instruction CMOVB_6
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x8
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 8)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVB_7(self):
        """Instruction CMOVB_7
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_8(self):
        """Instruction CMOVB_8
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E81:0xF7FF3E84], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160700036)
        self.assertEqual(cpu.ECX, 4294967295)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVB_9(self):
        """Instruction CMOVB_9
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = 0x1B
        cpu.CF = False
        cpu.ECX = 0x24
        cpu.execute()

        self.assertEqual(mem[0xF7FEC2CE:0xF7FEC2D1], [b"\x0f", b"B", b"\xca"])
        self.assertEqual(cpu.EIP, 4160668369)
        self.assertEqual(cpu.EDX, 27)
        self.assertEqual(cpu.ECX, 36)

    def test_CMOVE_1(self):
        """Instruction CMOVE_1
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_10(self):
        """Instruction CMOVE_10
        Groups: cmov
        0x804d62b:  cmove   cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D62B, "f\x0fD\xca")
        cpu.EIP = 0x804D62B
        cpu.ZF = True
        cpu.CX = 0x0
        cpu.DX = 0xF0
        cpu.execute()

        self.assertEqual(mem[0x804D62B:0x804D62F], [b"f", b"\x0f", b"D", b"\xca"])
        self.assertEqual(cpu.EIP, 134534703)
        self.assertEqual(cpu.CX, 240)
        self.assertEqual(cpu.DX, 240)

    def test_CMOVE_11(self):
        """Instruction CMOVE_11
        Groups: cmov
        0x804d637:  cmove   ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D637, "\x0fDM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D637
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0xF0
        cpu.execute()

        self.assertEqual(mem[0x804D637:0x804D63B], [b"\x0f", b"D", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534715)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVE_12(self):
        """Instruction CMOVE_12
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABF8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596984)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_13(self):
        """Instruction CMOVE_13
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDADB8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160597432)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_14(self):
        """Instruction CMOVE_14
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_15(self):
        """Instruction CMOVE_15
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABB8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596920)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_16(self):
        """Instruction CMOVE_16
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_17(self):
        """Instruction CMOVE_17
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDADF8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160597496)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_18(self):
        """Instruction CMOVE_18
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_19(self):
        """Instruction CMOVE_19
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABB8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596920)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_2(self):
        """Instruction CMOVE_2
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_20(self):
        """Instruction CMOVE_20
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDADF8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160597496)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_21(self):
        """Instruction CMOVE_21
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_3(self):
        """Instruction CMOVE_3
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_4(self):
        """Instruction CMOVE_4
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_5(self):
        """Instruction CMOVE_5
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDAE38
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160597560)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_6(self):
        """Instruction CMOVE_6
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_7(self):
        """Instruction CMOVE_7
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABA8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596904)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_8(self):
        """Instruction CMOVE_8
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABB8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596920)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVE_9(self):
        """Instruction CMOVE_9
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = False
        cpu.EDX = 0xF7FDABF8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72BE:0xF7FE72C1], [b"\x0f", b"D", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160647873)
        self.assertEqual(cpu.EDX, 4160596984)
        self.assertEqual(cpu.EAX, 0)

    def test_CMOVGE_1(self):
        """Instruction CMOVGE_1
        Groups: cmov
        0x8079470:  cmovge  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079470, "\x0fM\xca")
        cpu.EIP = 0x8079470
        cpu.EDX = 0x0
        cpu.SF = True
        cpu.OF = False
        cpu.ECX = 0xFE8F0085
        cpu.execute()

        self.assertEqual(mem[0x8079470:0x8079473], [b"\x0f", b"M", b"\xca"])
        self.assertEqual(cpu.EIP, 134714483)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 4270784645)

    def test_CMOVGE_2(self):
        """Instruction CMOVGE_2
        Groups: cmov
        0x8079473:  cmovge  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079473, "\x0fMM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x8079473
        cpu.EBP = 0xFFFFB600
        cpu.SF = True
        cpu.OF = False
        cpu.ECX = 0xFE8F0085
        cpu.execute()

        self.assertEqual(mem[0x8079473:0x8079477], [b"\x0f", b"M", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134714487)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 4270784645)

    def test_CMOVGE_3(self):
        """Instruction CMOVGE_3
        Groups: cmov
        0x807946b:  cmovge  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807946B, "f\x0fMM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x807946B
        cpu.CX = 0x85
        cpu.EBP = 0xFFFFB600
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807946B:0x8079470], [b"f", b"\x0f", b"M", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134714480)
        self.assertEqual(cpu.CX, 133)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVGE_4(self):
        """Instruction CMOVGE_4
        Groups: cmov
        0x8079467:  cmovge  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079467, "f\x0fM\xca")
        cpu.EIP = 0x8079467
        cpu.CX = 0x85
        cpu.SF = True
        cpu.DX = 0x0
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079467:0x807946B], [b"f", b"\x0f", b"M", b"\xca"])
        self.assertEqual(cpu.EIP, 134714475)
        self.assertEqual(cpu.CX, 133)
        self.assertEqual(cpu.DX, 0)

    def test_CMOVG_1(self):
        """Instruction CMOVG_1
        Groups: cmov
        0x804d69b:  cmovg   cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D69B, "f\x0fO\xca")
        cpu.EIP = 0x804D69B
        cpu.OF = False
        cpu.ZF = True
        cpu.CX = 0x0
        cpu.DX = 0xFFFF
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D69B:0x804D69F], [b"f", b"\x0f", b"O", b"\xca"])
        self.assertEqual(cpu.EIP, 134534815)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 65535)

    def test_CMOVG_2(self):
        """Instruction CMOVG_2
        Groups: cmov
        0x804d6a7:  cmovg   ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D6A7, "\x0fOM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D6A7
        cpu.OF = False
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D6A7:0x804D6AB], [b"\x0f", b"O", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534827)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVG_3(self):
        """Instruction CMOVG_3
        Groups: cmov
        0x804d6a4:  cmovg   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D6A4, "\x0fO\xca")
        cpu.EIP = 0x804D6A4
        cpu.OF = False
        cpu.ZF = True
        cpu.EDX = 0xFFFFFFFF
        cpu.SF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D6A4:0x804D6A7], [b"\x0f", b"O", b"\xca"])
        self.assertEqual(cpu.EIP, 134534823)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVG_4(self):
        """Instruction CMOVG_4
        Groups: cmov
        0x804d69f:  cmovg   cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D69F, "f\x0fOM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x804D69F
        cpu.OF = False
        cpu.ZF = True
        cpu.CX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D69F:0x804D6A4], [b"f", b"\x0f", b"O", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534820)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVLE_1(self):
        """Instruction CMOVLE_1
        Groups: cmov
        0x80702ea:  cmovle  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702EA, "f\x0fN\xca")
        cpu.EIP = 0x80702EA
        cpu.OF = False
        cpu.ZF = True
        cpu.CX = 0xB600
        cpu.DX = 0xFA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80702EA:0x80702EE], [b"f", b"\x0f", b"N", b"\xca"])
        self.assertEqual(cpu.EIP, 134677230)
        self.assertEqual(cpu.CX, 250)
        self.assertEqual(cpu.DX, 250)

    def test_CMOVLE_2(self):
        """Instruction CMOVLE_2
        Groups: cmov
        0x80702f6:  cmovle  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80702F6, "\x0fNM\x00")
        mem.write(0xFFFFB600, "\x00\x85\xe1\x01")
        cpu.EIP = 0x80702F6
        cpu.OF = False
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.ECX = 0xFA
        cpu.execute()

        self.assertEqual(mem[0x80702F6:0x80702FA], [b"\x0f", b"N", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x85", b"\xe1", b"\x01"])
        self.assertEqual(cpu.EIP, 134677242)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 31556864)

    def test_CMOVLE_3(self):
        """Instruction CMOVLE_3
        Groups: cmov
        0x80702ee:  cmovle  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80702EE, "f\x0fNM\x00")
        mem.write(0xFFFFB600, "\x00\x85")
        cpu.EIP = 0x80702EE
        cpu.OF = False
        cpu.ZF = True
        cpu.CX = 0xFA
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80702EE:0x80702F3], [b"f", b"\x0f", b"N", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x85"])
        self.assertEqual(cpu.EIP, 134677235)
        self.assertEqual(cpu.CX, 34048)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVLE_4(self):
        """Instruction CMOVLE_4
        Groups: cmov
        0x80702f3:  cmovle  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702F3, "\x0fN\xca")
        cpu.EIP = 0x80702F3
        cpu.OF = False
        cpu.ZF = True
        cpu.EDX = 0xFA
        cpu.SF = False
        cpu.ECX = 0xFFFF8500
        cpu.execute()

        self.assertEqual(mem[0x80702F3:0x80702F6], [b"\x0f", b"N", b"\xca"])
        self.assertEqual(cpu.EIP, 134677238)
        self.assertEqual(cpu.EDX, 250)
        self.assertEqual(cpu.ECX, 250)

    def test_CMOVL_1(self):
        """Instruction CMOVL_1
        Groups: cmov
        0x804d64d:  cmovl   cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D64D, "f\x0fL\xca")
        cpu.EIP = 0x804D64D
        cpu.CX = 0x0
        cpu.SF = False
        cpu.DX = 0xFFFF
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x804D64D:0x804D651], [b"f", b"\x0f", b"L", b"\xca"])
        self.assertEqual(cpu.EIP, 134534737)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 65535)

    def test_CMOVL_2(self):
        """Instruction CMOVL_2
        Groups: cmov
        0x804d656:  cmovl   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D656, "\x0fL\xca")
        cpu.EIP = 0x804D656
        cpu.EDX = 0xFFFFFFFF
        cpu.SF = False
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D656:0x804D659], [b"\x0f", b"L", b"\xca"])
        self.assertEqual(cpu.EIP, 134534745)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVL_3(self):
        """Instruction CMOVL_3
        Groups: cmov
        0x804d659:  cmovl   ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D659, "\x0fLM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D659
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D659:0x804D65D], [b"\x0f", b"L", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534749)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVL_4(self):
        """Instruction CMOVL_4
        Groups: cmov
        0x804d651:  cmovl   cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D651, "f\x0fLM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x804D651
        cpu.CX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x804D651:0x804D656], [b"f", b"\x0f", b"L", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534742)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVNE_1(self):
        """Instruction CMOVNE_1
        Groups: cmov
        0xf7fe211a: cmovne  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE211A, "\x0fE\xca")
        cpu.EIP = 0xF7FE211A
        cpu.ZF = False
        cpu.EDX = 0x1
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE211A:0xF7FE211D], [b"\x0f", b"E", b"\xca"])
        self.assertEqual(cpu.EIP, 4160626973)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.ECX, 1)

    def test_CMOVNE_10(self):
        """Instruction CMOVNE_10
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x4008000
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 67141632)

    def test_CMOVNE_11(self):
        """Instruction CMOVNE_11
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x8010
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 32784)

    def test_CMOVNE_12(self):
        """Instruction CMOVNE_12
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x20
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 32)

    def test_CMOVNE_13(self):
        """Instruction CMOVNE_13
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x1002000
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 16785408)

    def test_CMOVNE_14(self):
        """Instruction CMOVNE_14
        Groups: cmov
        0xf7fe686d: cmovne  ebp, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE686D, "\x0fE\xe8")
        cpu.EIP = 0xF7FE686D
        cpu.ZF = False
        cpu.EBP = 0x0
        cpu.EAX = 0x10
        cpu.execute()

        self.assertEqual(mem[0xF7FE686D:0xF7FE6870], [b"\x0f", b"E", b"\xe8"])
        self.assertEqual(cpu.EIP, 4160645232)
        self.assertEqual(cpu.EBP, 16)
        self.assertEqual(cpu.EAX, 16)

    def test_CMOVNE_15(self):
        """Instruction CMOVNE_15
        Groups: cmov
        0xf7fe66d5: cmovne  eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE66D5, "\x0fE\xc1")
        cpu.EIP = 0xF7FE66D5
        cpu.ZF = False
        cpu.EAX = 0xF7FDAACD
        cpu.ECX = 0xF7FDA838
        cpu.execute()

        self.assertEqual(mem[0xF7FE66D5:0xF7FE66D8], [b"\x0f", b"E", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160644824)
        self.assertEqual(cpu.ECX, 4160596024)
        self.assertEqual(cpu.EAX, 4160596024)

    def test_CMOVNE_16(self):
        """Instruction CMOVNE_16
        Groups: cmov
        0xf7fe66d5: cmovne  eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE66D5, "\x0fE\xc1")
        cpu.EIP = 0xF7FE66D5
        cpu.ZF = True
        cpu.EAX = 0xF7FFDC24
        cpu.ECX = 0xF7FF5844
        cpu.execute()

        self.assertEqual(mem[0xF7FE66D5:0xF7FE66D8], [b"\x0f", b"E", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160644824)
        self.assertEqual(cpu.ECX, 4160706628)
        self.assertEqual(cpu.EAX, 4160740388)

    def test_CMOVNE_17(self):
        """Instruction CMOVNE_17
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x40080
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 262272)

    def test_CMOVNE_18(self):
        """Instruction CMOVNE_18
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x801
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 2049)

    def test_CMOVNE_19(self):
        """Instruction CMOVNE_19
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x4
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 4)

    def test_CMOVNE_2(self):
        """Instruction CMOVNE_2
        Groups: cmov
        0x80794b9:  cmovne  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794B9, "\x0fEM\x00")
        mem.write(0xFFFFB600, "\x01\x03\x00\x00")
        cpu.EIP = 0x80794B9
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80794B9:0x80794BD], [b"\x0f", b"E", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x01", b"\x03", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134714557)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 769)

    def test_CMOVNE_20(self):
        """Instruction CMOVNE_20
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x2004000
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 33570816)

    def test_CMOVNE_21(self):
        """Instruction CMOVNE_21
        Groups: cmov
        0x80794ad:  cmovne  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794AD, "f\x0fE\xca")
        cpu.EIP = 0x80794AD
        cpu.ZF = False
        cpu.CX = 0x1
        cpu.DX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80794AD:0x80794B1], [b"f", b"\x0f", b"E", b"\xca"])
        self.assertEqual(cpu.EIP, 134714545)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 0)

    def test_CMOVNE_3(self):
        """Instruction CMOVNE_3
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x10
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 16)

    def test_CMOVNE_4(self):
        """Instruction CMOVNE_4
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x40
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 64)

    def test_CMOVNE_5(self):
        """Instruction CMOVNE_5
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 1)

    def test_CMOVNE_6(self):
        """Instruction CMOVNE_6
        Groups: cmov
        0xf7fe66d5: cmovne  eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE66D5, "\x0fE\xc1")
        cpu.EIP = 0xF7FE66D5
        cpu.ZF = True
        cpu.EAX = 0xF7FFDE94
        cpu.ECX = 0xF7FF5844
        cpu.execute()

        self.assertEqual(mem[0xF7FE66D5:0xF7FE66D8], [b"\x0f", b"E", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160644824)
        self.assertEqual(cpu.ECX, 4160706628)
        self.assertEqual(cpu.EAX, 4160741012)

    def test_CMOVNE_7(self):
        """Instruction CMOVNE_7
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x1002
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 4098)

    def test_CMOVNE_8(self):
        """Instruction CMOVNE_8
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x8
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 8)

    def test_CMOVNE_9(self):
        """Instruction CMOVNE_9
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = True
        cpu.EDX = 0x0
        cpu.EAX = 0x80
        cpu.execute()

        self.assertEqual(mem[0xF7FE99A0:0xF7FE99A3], [b"\x0f", b"E", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160657827)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 128)

    def test_CMOVNO_1(self):
        """Instruction CMOVNO_1
        Groups: cmov
        0x80794e1:  cmovno  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794E1, "f\x0fAM\x00")
        mem.write(0xFFFFB600, "\x01\x03")
        cpu.EIP = 0x80794E1
        cpu.CX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80794E1:0x80794E6], [b"f", b"\x0f", b"A", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x01", b"\x03"])
        self.assertEqual(cpu.EIP, 134714598)
        self.assertEqual(cpu.CX, 769)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVNO_2(self):
        """Instruction CMOVNO_2
        Groups: cmov
        0x80794e6:  cmovno  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794E6, "\x0fA\xca")
        cpu.EIP = 0x80794E6
        cpu.EDX = 0x0
        cpu.OF = False
        cpu.ECX = 0x301
        cpu.execute()

        self.assertEqual(mem[0x80794E6:0x80794E9], [b"\x0f", b"A", b"\xca"])
        self.assertEqual(cpu.EIP, 134714601)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVNO_3(self):
        """Instruction CMOVNO_3
        Groups: cmov
        0x80794dd:  cmovno  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794DD, "f\x0fA\xca")
        cpu.EIP = 0x80794DD
        cpu.CX = 0x301
        cpu.DX = 0x0
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80794DD:0x80794E1], [b"f", b"\x0f", b"A", b"\xca"])
        self.assertEqual(cpu.EIP, 134714593)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 0)

    def test_CMOVNO_4(self):
        """Instruction CMOVNO_4
        Groups: cmov
        0x80794e9:  cmovno  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794E9, "\x0fAM\x00")
        mem.write(0xFFFFB600, "\x01\x03\x00\x00")
        cpu.EIP = 0x80794E9
        cpu.EBP = 0xFFFFB600
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80794E9:0x80794ED], [b"\x0f", b"A", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x01", b"\x03", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134714605)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 769)

    def test_CMOVNP_1(self):
        """Instruction CMOVNP_1
        Groups: cmov
        0x80794d1:  cmovnp  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794D1, "f\x0fKM\x00")
        mem.write(0xFFFFB600, "\x01\x03")
        cpu.EIP = 0x80794D1
        cpu.CX = 0x301
        cpu.PF = True
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80794D1:0x80794D6], [b"f", b"\x0f", b"K", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x01", b"\x03"])
        self.assertEqual(cpu.EIP, 134714582)
        self.assertEqual(cpu.CX, 769)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVNP_2(self):
        """Instruction CMOVNP_2
        Groups: cmov
        0x80794cd:  cmovnp  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794CD, "f\x0fK\xca")
        cpu.EIP = 0x80794CD
        cpu.CX = 0x301
        cpu.PF = True
        cpu.DX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80794CD:0x80794D1], [b"f", b"\x0f", b"K", b"\xca"])
        self.assertEqual(cpu.EIP, 134714577)
        self.assertEqual(cpu.CX, 769)
        self.assertEqual(cpu.DX, 0)

    def test_CMOVNP_3(self):
        """Instruction CMOVNP_3
        Groups: cmov
        0x80794d6:  cmovnp  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794D6, "\x0fK\xca")
        cpu.EIP = 0x80794D6
        cpu.EDX = 0x0
        cpu.PF = True
        cpu.ECX = 0x301
        cpu.execute()

        self.assertEqual(mem[0x80794D6:0x80794D9], [b"\x0f", b"K", b"\xca"])
        self.assertEqual(cpu.EIP, 134714585)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 769)

    def test_CMOVNP_4(self):
        """Instruction CMOVNP_4
        Groups: cmov
        0x80794d9:  cmovnp  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794D9, "\x0fKM\x00")
        mem.write(0xFFFFB600, "\x01\x03\x00\x00")
        cpu.EIP = 0x80794D9
        cpu.PF = True
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0x301
        cpu.execute()

        self.assertEqual(mem[0x80794D9:0x80794DD], [b"\x0f", b"K", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x01", b"\x03", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134714589)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 769)

    def test_CMOVNS_1(self):
        """Instruction CMOVNS_1
        Groups: cmov
        0x80794c1:  cmovns  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794C1, "f\x0fIM\x00")
        mem.write(0xFFFFB600, "\x01\x03")
        cpu.EIP = 0x80794C1
        cpu.CX = 0x301
        cpu.EBP = 0xFFFFB600
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x80794C1:0x80794C6], [b"f", b"\x0f", b"I", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x01", b"\x03"])
        self.assertEqual(cpu.EIP, 134714566)
        self.assertEqual(cpu.CX, 769)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVNS_2(self):
        """Instruction CMOVNS_2
        Groups: cmov
        0x80794c9:  cmovns  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794C9, "\x0fIM\x00")
        mem.write(0xFFFFB600, "\x01\x03\x00\x00")
        cpu.EIP = 0x80794C9
        cpu.EBP = 0xFFFFB600
        cpu.SF = True
        cpu.ECX = 0x301
        cpu.execute()

        self.assertEqual(mem[0x80794C9:0x80794CD], [b"\x0f", b"I", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x01", b"\x03", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134714573)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 769)

    def test_CMOVNS_3(self):
        """Instruction CMOVNS_3
        Groups: cmov
        0x80794bd:  cmovns  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794BD, "f\x0fI\xca")
        cpu.EIP = 0x80794BD
        cpu.CX = 0x301
        cpu.SF = True
        cpu.DX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80794BD:0x80794C1], [b"f", b"\x0f", b"I", b"\xca"])
        self.assertEqual(cpu.EIP, 134714561)
        self.assertEqual(cpu.CX, 769)
        self.assertEqual(cpu.DX, 0)

    def test_CMOVNS_4(self):
        """Instruction CMOVNS_4
        Groups: cmov
        0x80794c6:  cmovns  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794C6, "\x0fI\xca")
        cpu.EIP = 0x80794C6
        cpu.EDX = 0x0
        cpu.SF = True
        cpu.ECX = 0x301
        cpu.execute()

        self.assertEqual(mem[0x80794C6:0x80794C9], [b"\x0f", b"I", b"\xca"])
        self.assertEqual(cpu.EIP, 134714569)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 769)

    def test_CMOVO_1(self):
        """Instruction CMOVO_1
        Groups: cmov
        0x804d677:  cmovo   ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D677, "\x0f@M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D677
        cpu.EBP = 0xFFFFB600
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D677:0x804D67B], [b"\x0f", b"@", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534779)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVO_2(self):
        """Instruction CMOVO_2
        Groups: cmov
        0x804d674:  cmovo   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D674, "\x0f@\xca")
        cpu.EIP = 0x804D674
        cpu.EDX = 0xFFFFFFFF
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D674:0x804D677], [b"\x0f", b"@", b"\xca"])
        self.assertEqual(cpu.EIP, 134534775)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVO_3(self):
        """Instruction CMOVO_3
        Groups: cmov
        0x804d66b:  cmovo   cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D66B, "f\x0f@\xca")
        cpu.EIP = 0x804D66B
        cpu.CX = 0x0
        cpu.DX = 0xFFFF
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x804D66B:0x804D66F], [b"f", b"\x0f", b"@", b"\xca"])
        self.assertEqual(cpu.EIP, 134534767)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 65535)

    def test_CMOVO_4(self):
        """Instruction CMOVO_4
        Groups: cmov
        0x804d66f:  cmovo   cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D66F, "f\x0f@M\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x804D66F
        cpu.CX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x804D66F:0x804D674], [b"f", b"\x0f", b"@", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534772)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVP_1(self):
        """Instruction CMOVP_1
        Groups: cmov
        0x804d63c:  cmovp   cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D63C, "f\x0fJ\xca")
        cpu.EIP = 0x804D63C
        cpu.CX = 0x0
        cpu.PF = True
        cpu.DX = 0xFFFF
        cpu.execute()

        self.assertEqual(mem[0x804D63C:0x804D640], [b"f", b"\x0f", b"J", b"\xca"])
        self.assertEqual(cpu.EIP, 134534720)
        self.assertEqual(cpu.CX, 65535)
        self.assertEqual(cpu.DX, 65535)

    def test_CMOVP_2(self):
        """Instruction CMOVP_2
        Groups: cmov
        0x804d648:  cmovp   ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D648, "\x0fJM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D648
        cpu.PF = True
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0x804D648:0x804D64C], [b"\x0f", b"J", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534732)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_CMOVP_3(self):
        """Instruction CMOVP_3
        Groups: cmov
        0x804d640:  cmovp   cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D640, "f\x0fJM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x804D640
        cpu.CX = 0xFFFF
        cpu.PF = True
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D640:0x804D645], [b"f", b"\x0f", b"J", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534725)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVP_4(self):
        """Instruction CMOVP_4
        Groups: cmov
        0x804d645:  cmovp   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D645, "\x0fJ\xca")
        cpu.EIP = 0x804D645
        cpu.EDX = 0xFFFFFFFF
        cpu.PF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D645:0x804D648], [b"\x0f", b"J", b"\xca"])
        self.assertEqual(cpu.EIP, 134534728)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVS_1(self):
        """Instruction CMOVS_1
        Groups: cmov
        0x8079391:  cmovs   ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079391, "\x0fH\xca")
        cpu.EIP = 0x8079391
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.ECX = 0x1800080
        cpu.execute()

        self.assertEqual(mem[0x8079391:0x8079394], [b"\x0f", b"H", b"\xca"])
        self.assertEqual(cpu.EIP, 134714260)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 25165952)

    def test_CMOVS_2(self):
        """Instruction CMOVS_2
        Groups: cmov
        0x8079394:  cmovs   ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079394, "\x0fHM\x00")
        mem.write(0xFFFFB600, "\x01\x00\x00\x00")
        cpu.EIP = 0x8079394
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.ECX = 0x1800080
        cpu.execute()

        self.assertEqual(mem[0x8079394:0x8079398], [b"\x0f", b"H", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x01", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134714264)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 25165952)

    def test_CMOVS_3(self):
        """Instruction CMOVS_3
        Groups: cmov
        0x807938c:  cmovs   cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807938C, "f\x0fHM\x00")
        mem.write(0xFFFFB600, "\x01\x00")
        cpu.EIP = 0x807938C
        cpu.CX = 0x80
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807938C:0x8079391], [b"f", b"\x0f", b"H", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x01", b"\x00"])
        self.assertEqual(cpu.EIP, 134714257)
        self.assertEqual(cpu.CX, 128)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_CMOVS_4(self):
        """Instruction CMOVS_4
        Groups: cmov
        0x8079388:  cmovs   cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079388, "f\x0fH\xca")
        cpu.EIP = 0x8079388
        cpu.CX = 0x80
        cpu.SF = False
        cpu.DX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079388:0x807938C], [b"f", b"\x0f", b"H", b"\xca"])
        self.assertEqual(cpu.EIP, 134714252)
        self.assertEqual(cpu.CX, 128)
        self.assertEqual(cpu.DX, 0)

    def test_CMPSB_1(self):
        """Instruction CMPSB_1
        Groups:
        0x8056678:  cmpsb   byte ptr [esi], byte ptr es:[edi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x8056678, "\xa6")
        mem.write(0x807E037, "\xe5")
        mem.write(0x807F037, "\xed")
        cpu.EIP = 0x8056678
        cpu.PF = True
        cpu.AF = False
        cpu.DF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x807F037
        cpu.CF = False
        cpu.ESI = 0x807E037
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8056678:0x8056679], [b"\xa6"])
        self.assertEqual(mem[0x807E037:0x807E038], [b"\xe5"])
        self.assertEqual(mem[0x807F037:0x807F038], [b"\xed"])
        self.assertEqual(cpu.EIP, 134571641)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 134737976)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ESI, 134733880)
        self.assertEqual(cpu.SF, True)

    def test_CMPSD_1(self):
        """Instruction CMPSD_1
        Groups:
        0x805667b:  cmpsd   dword ptr [esi], dword ptr es:[edi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x805667B, "\xa7")
        mem.write(0x807E03A, "\x1e\xe5\xe5Q")
        mem.write(0x807F03A, "\x1e\xed\xed\xd1")
        cpu.EIP = 0x805667B
        cpu.PF = False
        cpu.AF = True
        cpu.DF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x807F03A
        cpu.CF = True
        cpu.ESI = 0x807E03A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x805667B:0x805667C], [b"\xa7"])
        self.assertEqual(mem[0x807E03A:0x807E03E], [b"\x1e", b"\xe5", b"\xe5", b"Q"])
        self.assertEqual(mem[0x807F03A:0x807F03E], [b"\x1e", b"\xed", b"\xed", b"\xd1"])
        self.assertEqual(cpu.EIP, 134571644)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 134737982)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ESI, 134733886)
        self.assertEqual(cpu.SF, False)

    def test_CMPSW_1(self):
        """Instruction CMPSW_1
        Groups:
        0x8056679:  cmpsw   word ptr [esi], word ptr es:[edi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x8056679, "f\xa7")
        mem.write(0x807E038, "\xe5Q")
        mem.write(0x807F038, "\xed\xd1")
        cpu.EIP = 0x8056679
        cpu.PF = False
        cpu.AF = True
        cpu.DF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x807F038
        cpu.CF = True
        cpu.ESI = 0x807E038
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8056679:0x805667B], [b"f", b"\xa7"])
        self.assertEqual(mem[0x807E038:0x807E03A], [b"\xe5", b"Q"])
        self.assertEqual(mem[0x807F038:0x807F03A], [b"\xed", b"\xd1"])
        self.assertEqual(cpu.EIP, 134571643)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 134737978)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ESI, 134733882)
        self.assertEqual(cpu.SF, False)

    def test_CMP_1(self):
        """Instruction CMP_1
        Groups:
        0xf7fe0b35: cmp     edi, 0x23
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0B35, "\x83\xff#")
        cpu.EIP = 0xF7FE0B35
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x1
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE0B35:0xF7FE0B38], [b"\x83", b"\xff", b"#"])
        self.assertEqual(cpu.EIP, 4160621368)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_CMP_10(self):
        """Instruction CMP_10
        Groups:
        0xf7fe4caa: cmp     word ptr [edi + 0xe], 0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E20000, 0x1000, "rwx")
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7E20892, " \x00")
        mem.write(0xF7FE4CAA, "f\x83\x7f\x0e\x00")
        cpu.EIP = 0xF7FE4CAA
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.EDI = 0xF7E20884
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7E20892:0xF7E20894], [b" ", b"\x00"])
        self.assertEqual(mem[0xF7FE4CAA:0xF7FE4CAF], [b"f", b"\x83", b"\x7f", b"\x0e", b"\x00"])
        self.assertEqual(cpu.EIP, 4160638127)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 4158785668)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_CMP_11(self):
        """Instruction CMP_11
        Groups:
        0xf7ff41ad: cmp     ecx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41AD, "\x83\xf9\x01")
        cpu.EIP = 0xF7FF41AD
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x14
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF41AD:0xF7FF41B0], [b"\x83", b"\xf9", b"\x01"])
        self.assertEqual(cpu.EIP, 4160700848)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 20)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_CMP_12(self):
        """Instruction CMP_12
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FDC4FE, "_")
        mem.write(0xF7FF3E6A, ":\x02")
        cpu.SF = False
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = 0xF7FDC4FE
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.AL = 0x5F
        cpu.execute()

        self.assertEqual(mem[0xF7FDC4FE:0xF7FDC4FF], [b"_"])
        self.assertEqual(mem[0xF7FF3E6A:0xF7FF3E6C], [b":", b"\x02"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.EIP, 4160700012)
        self.assertEqual(cpu.EDX, 4160603390)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 95)

    def test_CMP_13(self):
        """Instruction CMP_13
        Groups:
        0xf7fe71ac: cmp     byte ptr [esi + 4], 8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2A000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E2AF60, "\x08")
        mem.write(0xF7FE71AC, "\x80~\x04\x08")
        cpu.EIP = 0xF7FE71AC
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.ESI = 0xF7E2AF5C
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7E2AF60:0xF7E2AF61], [b"\x08"])
        self.assertEqual(mem[0xF7FE71AC:0xF7FE71B0], [b"\x80", b"~", b"\x04", b"\x08"])
        self.assertEqual(cpu.EIP, 4160647600)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4158828380)
        self.assertEqual(cpu.SF, False)

    def test_CMP_14(self):
        """Instruction CMP_14
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7E28067, "2")
        mem.write(0xF7FF3E6A, ":\x02")
        cpu.SF = False
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = 0xF7E28067
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.AL = 0x32
        cpu.execute()

        self.assertEqual(mem[0xF7E28067:0xF7E28068], [b"2"])
        self.assertEqual(mem[0xF7FF3E6A:0xF7FF3E6C], [b":", b"\x02"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.EIP, 4160700012)
        self.assertEqual(cpu.EDX, 4158816359)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 50)

    def test_CMP_15(self):
        """Instruction CMP_15
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF7E2C06C
        cpu.CF = False
        cpu.ESI = 0xF7E29F8C
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BB:0xF7FE71BD], [b"9", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160647613)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4158832748)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4158824332)
        self.assertEqual(cpu.SF, False)

    def test_CMP_16(self):
        """Instruction CMP_16
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF7E2C06C
        cpu.CF = False
        cpu.ESI = 0xF7E29F44
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BB:0xF7FE71BD], [b"9", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160647613)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4158832748)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4158824260)
        self.assertEqual(cpu.SF, False)

    def test_CMP_17(self):
        """Instruction CMP_17
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF7E2C06C
        cpu.CF = False
        cpu.ESI = 0xF7E2BAC4
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BB:0xF7FE71BD], [b"9", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160647613)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4158832748)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4158831300)
        self.assertEqual(cpu.SF, False)

    def test_CMP_18(self):
        """Instruction CMP_18
        Groups:
        0xf7fe4fa7: cmp     dl, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FA7, "\x80\xfa\x02")
        cpu.EIP = 0xF7FE4FA7
        cpu.DL = 0x2
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FA7:0xF7FE4FAA], [b"\x80", b"\xfa", b"\x02"])
        self.assertEqual(cpu.EIP, 4160638890)
        self.assertEqual(cpu.DL, 2)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_CMP_19(self):
        """Instruction CMP_19
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FDAAC5, "i")
        mem.write(0xF7FF3E6A, ":\x02")
        cpu.SF = False
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = 0xF7FDAAC5
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.AL = 0x64
        cpu.execute()

        self.assertEqual(mem[0xF7FDAAC5:0xF7FDAAC6], [b"i"])
        self.assertEqual(mem[0xF7FF3E6A:0xF7FF3E6C], [b":", b"\x02"])
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.EIP, 4160700012)
        self.assertEqual(cpu.EDX, 4160596677)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.AL, 100)

    def test_CMP_2(self):
        """Instruction CMP_2
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF7E2C06C
        cpu.CF = False
        cpu.ESI = 0xF7E2B12C
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BB:0xF7FE71BD], [b"9", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160647613)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4158832748)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4158828844)
        self.assertEqual(cpu.SF, False)

    def test_CMP_20(self):
        """Instruction CMP_20
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FDC626, "2")
        mem.write(0xF7FF3E6A, ":\x02")
        cpu.SF = False
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = 0xF7FDC626
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.AL = 0x32
        cpu.execute()

        self.assertEqual(mem[0xF7FDC626:0xF7FDC627], [b"2"])
        self.assertEqual(mem[0xF7FF3E6A:0xF7FF3E6C], [b":", b"\x02"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.EIP, 4160700012)
        self.assertEqual(cpu.EDX, 4160603686)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 50)

    def test_CMP_21(self):
        """Instruction CMP_21
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF7E2C06C
        cpu.CF = False
        cpu.ESI = 0xF7E2B944
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BB:0xF7FE71BD], [b"9", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160647613)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4158832748)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4158830916)
        self.assertEqual(cpu.SF, False)

    def test_CMP_3(self):
        """Instruction CMP_3
        Groups:
        0xf7ff0681: cmp     cl, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0681, "8\xd1")
        cpu.EIP = 0xF7FF0681
        cpu.DL = 0x62
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CL = 0x62
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF0681:0xF7FF0683], [b"8", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160685699)
        self.assertEqual(cpu.DL, 98)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CL, 98)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_CMP_4(self):
        """Instruction CMP_4
        Groups:
        0xf7fe4ea2: cmp     esi, dword ptr [esp + 0xac]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4EA2, ";\xb4$\xac\x00\x00\x00")
        mem.write(0xFFFFD39C, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE4EA2
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD2F0
        cpu.CF = False
        cpu.ESI = 0xF7FDA858
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4EA2:0xF7FE4EA9], [b";", b"\xb4", b"$", b"\xac", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xFFFFD39C:0xFFFFD3A0], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160638633)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955760)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4160596056)
        self.assertEqual(cpu.SF, True)

    def test_CMP_5(self):
        """Instruction CMP_5
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7E28099, "G")
        mem.write(0xF7FF3E6A, ":\x02")
        cpu.SF = False
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = 0xF7E28099
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.AL = 0x47
        cpu.execute()

        self.assertEqual(mem[0xF7E28099:0xF7E2809A], [b"G"])
        self.assertEqual(mem[0xF7FF3E6A:0xF7FF3E6C], [b":", b"\x02"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.EIP, 4160700012)
        self.assertEqual(cpu.EDX, 4158816409)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 71)

    def test_CMP_6(self):
        """Instruction CMP_6
        Groups:
        0xf7ff0681: cmp     cl, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0681, "8\xd1")
        cpu.EIP = 0xF7FF0681
        cpu.DL = 0x63
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CL = 0x63
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF0681:0xF7FF0683], [b"8", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160685699)
        self.assertEqual(cpu.DL, 99)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CL, 99)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_CMP_7(self):
        """Instruction CMP_7
        Groups:
        0xf7fe7f28: cmp     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7F28, "\x83\xf8\x02")
        cpu.EIP = 0xF7FE7F28
        cpu.EAX = 0xFFFFFFDE
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7F28:0xF7FE7F2B], [b"\x83", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160651051)
        self.assertEqual(cpu.EAX, 4294967262)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_CMP_8(self):
        """Instruction CMP_8
        Groups:
        0xf7fe579d: cmp     dl, 3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE579D, "\x80\xfa\x03")
        cpu.EIP = 0xF7FE579D
        cpu.DL = 0x0
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE579D:0xF7FE57A0], [b"\x80", b"\xfa", b"\x03"])
        self.assertEqual(cpu.EIP, 4160640928)
        self.assertEqual(cpu.DL, 0)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_CMP_9(self):
        """Instruction CMP_9
        Groups:
        0xf7fe0abc: cmp     byte ptr [eax + 4], 8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FDC780, "\x08")
        mem.write(0xF7FE0ABC, "\x80x\x04\x08")
        cpu.EIP = 0xF7FE0ABC
        cpu.EAX = 0xF7FDC77C
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FDC780:0xF7FDC781], [b"\x08"])
        self.assertEqual(mem[0xF7FE0ABC:0xF7FE0AC0], [b"\x80", b"x", b"\x04", b"\x08"])
        self.assertEqual(cpu.EIP, 4160621248)
        self.assertEqual(cpu.EAX, 4160604028)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_CWDE_1(self):
        """Instruction CWDE_1
        Groups:
        0x807934a:  cwde
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807934A, "\x98")
        cpu.EIP = 0x807934A
        cpu.EAX = 0x137
        cpu.execute()

        self.assertEqual(mem[0x807934A:0x807934B], [b"\x98"])
        self.assertEqual(cpu.EIP, 134714187)
        self.assertEqual(cpu.EAX, 311)

    def test_CWDE_2(self):
        """Instruction CWDE_2
        Groups:
        0x807028c:  cwde
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807028C, "\x98")
        cpu.EIP = 0x807028C
        cpu.EAX = 0xB594ECF8
        cpu.execute()

        self.assertEqual(mem[0x807028C:0x807028D], [b"\x98"])
        self.assertEqual(cpu.EIP, 134677133)
        self.assertEqual(cpu.EAX, 4294962424)

    def test_DEC_1(self):
        """Instruction DEC_1
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0xA0FFC9D2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE8:0xF7FF3EE9], [b"J"])
        self.assertEqual(cpu.EIP, 4160700137)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2701117905)
        self.assertEqual(cpu.SF, True)

    def test_DEC_10(self):
        """Instruction DEC_10
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0xC7CC96D1
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE8:0xF7FF3EE9], [b"J"])
        self.assertEqual(cpu.EIP, 4160700137)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 3352073936)
        self.assertEqual(cpu.SF, True)

    def test_DEC_11(self):
        """Instruction DEC_11
        Groups: not64bitmode
        0xf7ff3f1c: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F1C, "J")
        cpu.EIP = 0xF7FF3F1C
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x8A9198D3
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3F1C:0xF7FF3F1D], [b"J"])
        self.assertEqual(cpu.EIP, 4160700189)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2324797650)
        self.assertEqual(cpu.SF, True)

    def test_DEC_12(self):
        """Instruction DEC_12
        Groups: not64bitmode
        0x8059862:  dec     cx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059862, "fI")
        cpu.EIP = 0x8059862
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CX = 0xFF
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059862:0x8059864], [b"f", b"I"])
        self.assertEqual(cpu.EIP, 134584420)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CX, 254)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_DEC_13(self):
        """Instruction DEC_13
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0xFFFFFF99
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE8:0xF7FF3EE9], [b"J"])
        self.assertEqual(cpu.EIP, 4160700137)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 4294967192)
        self.assertEqual(cpu.SF, True)

    def test_DEC_14(self):
        """Instruction DEC_14
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0x0
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE8:0xF7FF3EE9], [b"J"])
        self.assertEqual(cpu.EIP, 4160700137)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 4294967295)
        self.assertEqual(cpu.SF, True)

    def test_DEC_15(self):
        """Instruction DEC_15
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x908CD19D
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE8:0xF7FF3EE9], [b"J"])
        self.assertEqual(cpu.EIP, 4160700137)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2425147804)
        self.assertEqual(cpu.SF, True)

    def test_DEC_16(self):
        """Instruction DEC_16
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x908CD19D
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3ECE:0xF7FF3ECF], [b"J"])
        self.assertEqual(cpu.EIP, 4160700111)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2425147804)
        self.assertEqual(cpu.SF, True)

    def test_DEC_17(self):
        """Instruction DEC_17
        Groups: not64bitmode
        0x8059864:  dec     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059864, "I")
        cpu.EIP = 0x8059864
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0xFE
        cpu.execute()

        self.assertEqual(mem[0x8059864:0x8059865], [b"I"])
        self.assertEqual(cpu.EIP, 134584421)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 253)

    def test_DEC_18(self):
        """Instruction DEC_18
        Groups: not64bitmode
        0xf7ff3f02: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F02, "J")
        cpu.EIP = 0xF7FF3F02
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0x9693D2CA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3F02:0xF7FF3F03], [b"J"])
        self.assertEqual(cpu.EIP, 4160700163)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2526270153)
        self.assertEqual(cpu.SF, True)

    def test_DEC_19(self):
        """Instruction DEC_19
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x908CD19D
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3ECE:0xF7FF3ECF], [b"J"])
        self.assertEqual(cpu.EIP, 4160700111)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2425147804)
        self.assertEqual(cpu.SF, True)

    def test_DEC_2(self):
        """Instruction DEC_2
        Groups: not64bitmode
        0xf7ff3cea: dec     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CEA, "O")
        cpu.EIP = 0xF7FF3CEA
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x1
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3CEA:0xF7FF3CEB], [b"O"])
        self.assertEqual(cpu.EIP, 4160699627)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EDI, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_20(self):
        """Instruction DEC_20
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0x9D9693D1
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3ECE:0xF7FF3ECF], [b"J"])
        self.assertEqual(cpu.EIP, 4160700111)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 2643891152)
        self.assertEqual(cpu.SF, True)

    def test_DEC_21(self):
        """Instruction DEC_21
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0xA0FFC9D2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE8:0xF7FF3EE9], [b"J"])
        self.assertEqual(cpu.EIP, 4160700137)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2701117905)
        self.assertEqual(cpu.SF, True)

    def test_DEC_3(self):
        """Instruction DEC_3
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x9A91989B
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3ECE:0xF7FF3ECF], [b"J"])
        self.assertEqual(cpu.EIP, 4160700111)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2593233050)
        self.assertEqual(cpu.SF, True)

    def test_DEC_4(self):
        """Instruction DEC_4
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0xCC96D09E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3ECE:0xF7FF3ECF], [b"J"])
        self.assertEqual(cpu.EIP, 4160700111)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 3432435869)
        self.assertEqual(cpu.SF, True)

    def test_DEC_5(self):
        """Instruction DEC_5
        Groups: not64bitmode
        0xf7ff3f02: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F02, "J")
        cpu.EIP = 0xF7FF3F02
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x8CD19A8C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3F02:0xF7FF3F03], [b"J"])
        self.assertEqual(cpu.EIP, 4160700163)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2362546827)
        self.assertEqual(cpu.SF, True)

    def test_DEC_6(self):
        """Instruction DEC_6
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x8A919694
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3ECE:0xF7FF3ECF], [b"J"])
        self.assertEqual(cpu.EIP, 4160700111)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2324797075)
        self.assertEqual(cpu.SF, True)

    def test_DEC_7(self):
        """Instruction DEC_7
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0x9D9693D1
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3ECE:0xF7FF3ECF], [b"J"])
        self.assertEqual(cpu.EIP, 4160700111)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 2643891152)
        self.assertEqual(cpu.SF, True)

    def test_DEC_8(self):
        """Instruction DEC_8
        Groups: not64bitmode
        0xf7ff3cea: dec     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CEA, "O")
        cpu.EIP = 0xF7FF3CEA
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x1
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3CEA:0xF7FF3CEB], [b"O"])
        self.assertEqual(cpu.EIP, 4160699627)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EDI, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_9(self):
        """Instruction DEC_9
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0x93D2C9C8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE8:0xF7FF3EE9], [b"J"])
        self.assertEqual(cpu.EIP, 4160700137)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 2480064967)
        self.assertEqual(cpu.SF, True)

    def test_EMMS_1(self):
        """Instruction EMMS_1
        Groups: mmx
        0x804d5b9:  emms
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5B9, "\x0fw")
        cpu.EIP = 0x804D5B9
        cpu.execute()

        self.assertEqual(mem[0x804D5B9:0x804D5BB], [b"\x0f", b"w"])
        self.assertEqual(cpu.EIP, 134534587)

    def test_FNSTCW_1(self):
        """Instruction FNSTCW_1
        Groups:
        0x8079485:  fnstcw  word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079485, "\xd9}\x00")
        mem.write(0xFFFFB600, "\x01\x00")
        cpu.FPCW = 0x37F
        cpu.EIP = 0x8079485
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079485:0x8079488], [b"\xd9", b"}", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134714504)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_IMUL_1(self):
        """Instruction IMUL_1
        Groups:
        0x8070337:  imul    cx, cx, 0xffff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070337, "fi\xc9\xff\xff")
        cpu.EIP = 0x8070337
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0x0
        cpu.CX = 0x0
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8070337:0x807033C], [b"f", b"i", b"\xc9", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 134677308)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_10(self):
        """Instruction IMUL_10
        Groups:
        0xf7ff16bf: imul    edi, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF16BF, "\x0f\xaf\xf9")
        cpu.EIP = 0xF7FF16BF
        cpu.OF = False
        cpu.EDI = 0x3
        cpu.CF = False
        cpu.EAX = 0x13
        cpu.EDX = 0x2
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0xF7FF16BF:0xF7FF16C2], [b"\x0f", b"\xaf", b"\xf9"])
        self.assertEqual(cpu.EIP, 4160689858)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.EDI, 48)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 19)
        self.assertEqual(cpu.EDX, 2)
        self.assertEqual(cpu.ECX, 16)

    def test_IMUL_11(self):
        """Instruction IMUL_11
        Groups:
        0x807037d:  imul    ecx, edx, 0x7fffffff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807037D, "i\xca\xff\xff\xff\x7f")
        cpu.EIP = 0x807037D
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0x0
        cpu.EDX = 0x0
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(
            mem[0x807037D:0x8070383], [b"i", b"\xca", b"\xff", b"\xff", b"\xff", b"\x7f"]
        )
        self.assertEqual(cpu.EIP, 134677379)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 0)

    def test_IMUL_12(self):
        """Instruction IMUL_12
        Groups:
        0xf7fe6597: imul    edx, edi, 0x4c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6597, "k\xd7L")
        cpu.EIP = 0xF7FE6597
        cpu.OF = False
        cpu.EDI = 0x0
        cpu.CF = False
        cpu.EAX = 0xF7FFD51C
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE6597:0xF7FE659A], [b"k", b"\xd7", b"L"])
        self.assertEqual(cpu.EIP, 4160644506)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.EDI, 0)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4160738588)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_13(self):
        """Instruction IMUL_13
        Groups:
        0x8070359:  imul    cx, dx, 0x8000
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070359, "fi\xca\x00\x80")
        cpu.EIP = 0x8070359
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0x0
        cpu.CX = 0x0
        cpu.DX = 0x0
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8070359:0x807035E], [b"f", b"i", b"\xca", b"\x00", b"\x80"])
        self.assertEqual(cpu.EIP, 134677342)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 0)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_14(self):
        """Instruction IMUL_14
        Groups:
        0x8070368:  imul    cx, word ptr [ebp], 0x8000
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070368, "fiM\x00\x00\x80")
        mem.write(0xFFFFB600, "\x00\x85")
        cpu.EIP = 0x8070368
        cpu.OF = True
        cpu.CF = True
        cpu.EAX = 0x0
        cpu.CX = 0xA00
        cpu.EBP = 0xFFFFB600
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8070368:0x807036E], [b"f", b"i", b"M", b"\x00", b"\x00", b"\x80"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x85"])
        self.assertEqual(cpu.EIP, 134677358)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_15(self):
        """Instruction IMUL_15
        Groups:
        0x8070320:  imul    cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070320, "f\x0f\xaf\xca")
        cpu.EIP = 0x8070320
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0x0
        cpu.CX = 0x8500
        cpu.DX = 0x0
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8070320:0x8070324], [b"f", b"\x0f", b"\xaf", b"\xca"])
        self.assertEqual(cpu.EIP, 134677284)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 0)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_16(self):
        """Instruction IMUL_16
        Groups:
        0xf7fe1dc2: imul    eax, dword ptr [ebp + 0x20], 0x4c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE1DC2, "kE L")
        mem.write(0xFFFFD0A8, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE1DC2
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0xF7FFD040
        cpu.EBP = 0xFFFFD088
        cpu.EDX = 0x3
        cpu.execute()

        self.assertEqual(mem[0xF7FE1DC2:0xF7FE1DC6], [b"k", b"E", b" ", b"L"])
        self.assertEqual(mem[0xFFFFD0A8:0xFFFFD0AC], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160626118)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EBP, 4294955144)
        self.assertEqual(cpu.EDX, 3)

    def test_IMUL_17(self):
        """Instruction IMUL_17
        Groups:
        0x807032d:  imul    cx, cx, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807032D, "fi\xc9\xff\x00")
        cpu.EIP = 0x807032D
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0x0
        cpu.CX = 0x0
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x807032D:0x8070332], [b"f", b"i", b"\xc9", b"\xff", b"\x00"])
        self.assertEqual(cpu.EIP, 134677298)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_18(self):
        """Instruction IMUL_18
        Groups:
        0x8070316:  imul    word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070316, "f\xf7m\x00")
        mem.write(0xFFFFB600, "\x00\x85")
        cpu.EIP = 0x8070316
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0x7B000000
        cpu.EBP = 0xFFFFB600
        cpu.EDX = 0xFFFFFE1E
        cpu.execute()

        self.assertEqual(mem[0x8070316:0x807031A], [b"f", b"\xf7", b"m", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x85"])
        self.assertEqual(cpu.EIP, 134677274)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 2063597568)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.EDX, 4294901760)

    def test_IMUL_19(self):
        """Instruction IMUL_19
        Groups:
        0x807030c:  imul    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807030C, "\xf6\xe9")
        cpu.EIP = 0x807030C
        cpu.CL = 0x0
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0xFFFF0000
        cpu.EDX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0x807030C:0x807030E], [b"\xf6", b"\xe9"])
        self.assertEqual(cpu.EIP, 134677262)
        self.assertEqual(cpu.CL, 0)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4294901760)
        self.assertEqual(cpu.EDX, 4294967295)

    def test_IMUL_2(self):
        """Instruction IMUL_2
        Groups:
        0x807030e:  imul    cx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807030E, "f\xf7\xe9")
        cpu.EIP = 0x807030E
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0xFFFF0000
        cpu.CX = 0x8500
        cpu.EDX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0x807030E:0x8070311], [b"f", b"\xf7", b"\xe9"])
        self.assertEqual(cpu.EIP, 134677265)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4294901760)
        self.assertEqual(cpu.CX, 34048)
        self.assertEqual(cpu.EDX, 4294901760)

    def test_IMUL_20(self):
        """Instruction IMUL_20
        Groups:
        0x8070313:  imul    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070313, "\xf6m\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x8070313
        cpu.OF = True
        cpu.CF = True
        cpu.EAX = 0x7B000000
        cpu.EBP = 0xFFFFB600
        cpu.EDX = 0xFFFFFE1E
        cpu.execute()

        self.assertEqual(mem[0x8070313:0x8070316], [b"\xf6", b"m", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134677270)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 2063597568)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.EDX, 4294966814)

    def test_IMUL_21(self):
        """Instruction IMUL_21
        Groups:
        0xf7fed3c3: imul    eax, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED3C3, "\x0f\xaf\xc7")
        cpu.EIP = 0xF7FED3C3
        cpu.OF = False
        cpu.EDI = 0x40
        cpu.CF = False
        cpu.EAX = 0x1C
        cpu.EDX = 0xB
        cpu.execute()

        self.assertEqual(mem[0xF7FED3C3:0xF7FED3C6], [b"\x0f", b"\xaf", b"\xc7"])
        self.assertEqual(cpu.EIP, 4160672710)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.EDI, 64)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1792)
        self.assertEqual(cpu.EDX, 11)

    def test_IMUL_3(self):
        """Instruction IMUL_3
        Groups:
        0x807031d:  imul    dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807031D, "\xf7m\x00")
        mem.write(0xFFFFB600, "\x00\x85\xe1\x01")
        cpu.EIP = 0x807031D
        cpu.OF = True
        cpu.CF = True
        cpu.EAX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.EDX = 0xE75AE7
        cpu.execute()

        self.assertEqual(mem[0x807031D:0x8070320], [b"\xf7", b"m", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x85", b"\xe1", b"\x01"])
        self.assertEqual(cpu.EIP, 134677280)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_4(self):
        """Instruction IMUL_4
        Groups:
        0xf7fe6734: imul    eax, dword ptr [esp + 0x58], 0x4c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0xF7FE6734, "kD$XL")
        mem.write(0xFFFFCF88, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE6734
        cpu.ESP = 0xFFFFCF30
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0xF7FDAA10
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE6734:0xF7FE6739], [b"k", b"D", b"$", b"X", b"L"])
        self.assertEqual(mem[0xFFFFCF88:0xFFFFCF8C], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160644921)
        self.assertEqual(cpu.ESP, 4294954800)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_5(self):
        """Instruction IMUL_5
        Groups:
        0xf7fe65c5: imul    edx, edi, 0x4c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE65C5, "k\xd7L")
        cpu.EIP = 0xF7FE65C5
        cpu.OF = False
        cpu.EDI = 0x0
        cpu.CF = False
        cpu.EAX = 0xF7FFDC28
        cpu.EDX = 0xF7FFD040
        cpu.execute()

        self.assertEqual(mem[0xF7FE65C5:0xF7FE65C8], [b"k", b"\xd7", b"L"])
        self.assertEqual(cpu.EIP, 4160644552)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.EDI, 0)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4160740392)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_6(self):
        """Instruction IMUL_6
        Groups:
        0xf7fe6597: imul    edx, edi, 0x4c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6597, "k\xd7L")
        cpu.EIP = 0xF7FE6597
        cpu.OF = False
        cpu.EDI = 0x0
        cpu.CF = False
        cpu.EAX = 0xF7FFD51C
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE6597:0xF7FE659A], [b"k", b"\xd7", b"L"])
        self.assertEqual(cpu.EIP, 4160644506)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.EDI, 0)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4160738588)
        self.assertEqual(cpu.EDX, 0)

    def test_IMUL_7(self):
        """Instruction IMUL_7
        Groups:
        0xf7eaa033: imul    edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA033, "\xf7\xea")
        cpu.EIP = 0xF7EAA033
        cpu.EDX = 0x55555556
        cpu.CF = False
        cpu.EAX = 0x3
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7EAA033:0xF7EAA035], [b"\xf7", b"\xea"])
        self.assertEqual(cpu.EIP, 4159348789)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.EAX, 2)

    def test_IMUL_8(self):
        """Instruction IMUL_8
        Groups:
        0xf7ff16bf: imul    edi, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF16BF, "\x0f\xaf\xf9")
        cpu.EIP = 0xF7FF16BF
        cpu.OF = False
        cpu.EDI = 0x2ED
        cpu.CF = False
        cpu.EAX = 0x2ED
        cpu.EDX = 0x100
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FF16BF:0xF7FF16C2], [b"\x0f", b"\xaf", b"\xf9"])
        self.assertEqual(cpu.EIP, 4160689858)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.EDI, 749)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 749)
        self.assertEqual(cpu.EDX, 256)
        self.assertEqual(cpu.ECX, 1)

    def test_IMUL_9(self):
        """Instruction IMUL_9
        Groups:
        0x8070343:  imul    ecx, ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070343, "k\xc9\x04")
        cpu.EIP = 0x8070343
        cpu.OF = False
        cpu.CF = False
        cpu.EAX = 0x0
        cpu.EDX = 0x0
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8070343:0x8070346], [b"k", b"\xc9", b"\x04"])
        self.assertEqual(cpu.EIP, 134677318)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.ECX, 0)

    def test_INC_1(self):
        """Instruction INC_1
        Groups: not64bitmode
        0x80798f6:  inc     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798F6, "F")
        cpu.EIP = 0x80798F6
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = False
        cpu.SF = False
        cpu.ESI = 0x9
        cpu.execute()

        self.assertEqual(mem[0x80798F6:0x80798F7], [b"F"])
        self.assertEqual(cpu.EIP, 134715639)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 10)

    def test_INC_10(self):
        """Instruction INC_10
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7FDC639
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4160603706)

    def test_INC_11(self):
        """Instruction INC_11
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0xF7E280A2
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6F:0xF7FF3E70], [b"B"])
        self.assertEqual(cpu.EIP, 4160700016)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 4158816419)
        self.assertEqual(cpu.SF, True)

    def test_INC_12(self):
        """Instruction INC_12
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E2806A
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816363)

    def test_INC_13(self):
        """Instruction INC_13
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E2806A
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816363)

    def test_INC_14(self):
        """Instruction INC_14
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E2809F
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816416)

    def test_INC_15(self):
        """Instruction INC_15
        Groups: not64bitmode
        0x807b66d:  inc     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B66D, "G")
        cpu.EIP = 0x807B66D
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0xD
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807B66D:0x807B66E], [b"G"])
        self.assertEqual(cpu.EIP, 134723182)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 14)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_INC_16(self):
        """Instruction INC_16
        Groups: not64bitmode
        0xf7e901c4: inc     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901C4, "G")
        cpu.EIP = 0xF7E901C4
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0xFFFFFFFF
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7E901C4:0xF7E901C5], [b"G"])
        self.assertEqual(cpu.EIP, 4159242693)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.EDI, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_INC_17(self):
        """Instruction INC_17
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x80481F3
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 134513140)

    def test_INC_18(self):
        """Instruction INC_18
        Groups: not64bitmode
        0x807adab:  inc     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ADAB, "F")
        cpu.EIP = 0x807ADAB
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.SF = False
        cpu.ESI = 0x0
        cpu.execute()

        self.assertEqual(mem[0x807ADAB:0x807ADAC], [b"F"])
        self.assertEqual(cpu.EIP, 134720940)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 1)

    def test_INC_19(self):
        """Instruction INC_19
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E2806E
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816367)

    def test_INC_2(self):
        """Instruction INC_2
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E28054
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816341)

    def test_INC_20(self):
        """Instruction INC_20
        Groups: not64bitmode
        0x807a42d:  inc     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A42D, "F")
        cpu.EIP = 0x807A42D
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = True
        cpu.ESI = 0xF
        cpu.execute()

        self.assertEqual(mem[0x807A42D:0x807A42E], [b"F"])
        self.assertEqual(cpu.EIP, 134718510)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 16)

    def test_INC_21(self):
        """Instruction INC_21
        Groups: not64bitmode
        0x8079cb3:  inc     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CB3, "F")
        cpu.EIP = 0x8079CB3
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ESI = 0x10
        cpu.execute()

        self.assertEqual(mem[0x8079CB3:0x8079CB4], [b"F"])
        self.assertEqual(cpu.EIP, 134716596)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 17)

    def test_INC_3(self):
        """Instruction INC_3
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E28065
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816358)

    def test_INC_4(self):
        """Instruction INC_4
        Groups: not64bitmode
        0x8079f01:  inc     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079F01, "G")
        cpu.EIP = 0x8079F01
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = True
        cpu.EDI = 0x7
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8079F01:0x8079F02], [b"G"])
        self.assertEqual(cpu.EIP, 134717186)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 8)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_INC_5(self):
        """Instruction INC_5
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E28050
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816337)

    def test_INC_6(self):
        """Instruction INC_6
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0xF7E28067
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6F:0xF7FF3E70], [b"B"])
        self.assertEqual(cpu.EIP, 4160700016)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 4158816360)
        self.assertEqual(cpu.SF, True)

    def test_INC_7(self):
        """Instruction INC_7
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = True
        cpu.EDX = 0xF7FDC613
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6F:0xF7FF3E70], [b"B"])
        self.assertEqual(cpu.EIP, 4160700016)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 4160603668)
        self.assertEqual(cpu.SF, True)

    def test_INC_8(self):
        """Instruction INC_8
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0xF7E28062
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6E:0xF7FF3E6F], [b"A"])
        self.assertEqual(cpu.EIP, 4160700015)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4158816355)

    def test_INC_9(self):
        """Instruction INC_9
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.PF = False
        cpu.EDX = 0xF7E27290
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6F:0xF7FF3E70], [b"B"])
        self.assertEqual(cpu.EIP, 4160700016)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 4158812817)
        self.assertEqual(cpu.SF, True)

    def test_JAE_1(self):
        """Instruction JAE_1
        Groups: jump
        0xf7fddb2d: jae     0xf7fddbb3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDB2D, "\x0f\x83\x80\x00\x00\x00")
        cpu.EIP = 0xF7FDDB2D
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FDDB2D:0xF7FDDB33], [b"\x0f", b"\x83", b"\x80", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160609075)

    def test_JAE_10(self):
        """Instruction JAE_10
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CC3:0xF7FE4CC9], [b"\x0f", b"\x83", b"\xaf", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638153)

    def test_JAE_11(self):
        """Instruction JAE_11
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CC3:0xF7FE4CC9], [b"\x0f", b"\x83", b"\xaf", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638153)

    def test_JAE_12(self):
        """Instruction JAE_12
        Groups: jump
        0xf7fddb2d: jae     0xf7fddbb3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDB2D, "\x0f\x83\x80\x00\x00\x00")
        cpu.EIP = 0xF7FDDB2D
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FDDB2D:0xF7FDDB33], [b"\x0f", b"\x83", b"\x80", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160609075)

    def test_JAE_13(self):
        """Instruction JAE_13
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CC3:0xF7FE4CC9], [b"\x0f", b"\x83", b"\xaf", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638153)

    def test_JAE_14(self):
        """Instruction JAE_14
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CC3:0xF7FE4CC9], [b"\x0f", b"\x83", b"\xaf", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638153)

    def test_JAE_15(self):
        """Instruction JAE_15
        Groups: jump
        0x807ab94:  jae     0x807ab99
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB94, "s\x03")
        cpu.EIP = 0x807AB94
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807AB94:0x807AB96], [b"s", b"\x03"])
        self.assertEqual(cpu.EIP, 134720406)

    def test_JAE_16(self):
        """Instruction JAE_16
        Groups: jump
        0xf7fe1fcd: jae     0xf7fe21e8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.write(0xF7FE1FCD, "\x0f\x83\x15\x02\x00\x00")
        cpu.EIP = 0xF7FE1FCD
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE1FCD:0xF7FE1FD3], [b"\x0f", b"\x83", b"\x15", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160626643)

    def test_JAE_17(self):
        """Instruction JAE_17
        Groups: jump
        0xf7e9019c: jae     0xf7e9027c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E9019C, "\x0f\x83\xda\x00\x00\x00")
        cpu.EIP = 0xF7E9019C
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7E9019C:0xF7E901A2], [b"\x0f", b"\x83", b"\xda", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4159242658)

    def test_JAE_18(self):
        """Instruction JAE_18
        Groups: jump
        0xf7ff4648: jae     0xf7ff464b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4648, "s\x01")
        cpu.EIP = 0xF7FF4648
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF4648:0xF7FF464A], [b"s", b"\x01"])
        self.assertEqual(cpu.EIP, 4160702026)

    def test_JAE_19(self):
        """Instruction JAE_19
        Groups: jump
        0xf7eaa0c6: jae     0xf7eaa0e4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0C6, "s\x1c")
        cpu.EIP = 0xF7EAA0C6
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0C6:0xF7EAA0C8], [b"s", b"\x1c"])
        self.assertEqual(cpu.EIP, 4159348936)

    def test_JAE_2(self):
        """Instruction JAE_2
        Groups: jump
        0xf7eaa0c6: jae     0xf7eaa0e4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0C6, "s\x1c")
        cpu.EIP = 0xF7EAA0C6
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0C6:0xF7EAA0C8], [b"s", b"\x1c"])
        self.assertEqual(cpu.EIP, 4159348936)

    def test_JAE_20(self):
        """Instruction JAE_20
        Groups: jump
        0xf7eaa0c6: jae     0xf7eaa0e4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0C6, "s\x1c")
        cpu.EIP = 0xF7EAA0C6
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0C6:0xF7EAA0C8], [b"s", b"\x1c"])
        self.assertEqual(cpu.EIP, 4159348936)

    def test_JAE_21(self):
        """Instruction JAE_21
        Groups: jump
        0xf7ff3d5f: jae     0xf7ff3e32
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3D5F, "\x0f\x83\xcd\x00\x00\x00")
        cpu.EIP = 0xF7FF3D5F
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF3D5F:0xF7FF3D65], [b"\x0f", b"\x83", b"\xcd", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160699749)

    def test_JAE_3(self):
        """Instruction JAE_3
        Groups: jump
        0x807b4c9:  jae     0x807b4ce
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B4C9, "s\x03")
        cpu.EIP = 0x807B4C9
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807B4C9:0x807B4CB], [b"s", b"\x03"])
        self.assertEqual(cpu.EIP, 134722766)

    def test_JAE_4(self):
        """Instruction JAE_4
        Groups: jump
        0xf7ff15a0: jae     0xf7ff15aa
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A0, "s\x08")
        cpu.EIP = 0xF7FF15A0
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF15A0:0xF7FF15A2], [b"s", b"\x08"])
        self.assertEqual(cpu.EIP, 4160689570)

    def test_JAE_5(self):
        """Instruction JAE_5
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CC3:0xF7FE4CC9], [b"\x0f", b"\x83", b"\xaf", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638153)

    def test_JAE_6(self):
        """Instruction JAE_6
        Groups: jump
        0x807abb8:  jae     0x807abbd
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ABB8, "s\x03")
        cpu.EIP = 0x807ABB8
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807ABB8:0x807ABBA], [b"s", b"\x03"])
        self.assertEqual(cpu.EIP, 134720442)

    def test_JAE_7(self):
        """Instruction JAE_7
        Groups: jump
        0x807a4b3:  jae     0x807a4b8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A4B3, "s\x03")
        cpu.EIP = 0x807A4B3
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807A4B3:0x807A4B5], [b"s", b"\x03"])
        self.assertEqual(cpu.EIP, 134718648)

    def test_JAE_8(self):
        """Instruction JAE_8
        Groups: jump
        0xf7ff4543: jae     0xf7ff4546
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4543, "s\x01")
        cpu.EIP = 0xF7FF4543
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF4543:0xF7FF4545], [b"s", b"\x01"])
        self.assertEqual(cpu.EIP, 4160701765)

    def test_JAE_9(self):
        """Instruction JAE_9
        Groups: jump
        0xf7e901d1: jae     0xf7e90279
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901D1, "\x0f\x83\xa2\x00\x00\x00")
        cpu.EIP = 0xF7E901D1
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7E901D1:0xF7E901D7], [b"\x0f", b"\x83", b"\xa2", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4159242711)

    def test_JA_1(self):
        """Instruction JA_1
        Groups: jump
        0xf7ff062a: ja      0xf7ff06a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF062A, "w|")
        cpu.EIP = 0xF7FF062A
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF062A:0xF7FF062C], [b"w", b"|"])
        self.assertEqual(cpu.EIP, 4160685736)

    def test_JA_10(self):
        """Instruction JA_10
        Groups: jump
        0xf7fe4f87: ja      0xf7fe4e88
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F87, "\x0f\x87\xfb\xfe\xff\xff")
        cpu.EIP = 0xF7FE4F87
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4F87:0xF7FE4F8D], [b"\x0f", b"\x87", b"\xfb", b"\xfe", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160638600)

    def test_JA_11(self):
        """Instruction JA_11
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_12(self):
        """Instruction JA_12
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_13(self):
        """Instruction JA_13
        Groups: jump
        0xf7fe735a: ja      0xf7fe71f0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE735A, "\x0f\x87\x90\xfe\xff\xff")
        cpu.EIP = 0xF7FE735A
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE735A:0xF7FE7360], [b"\x0f", b"\x87", b"\x90", b"\xfe", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160647664)

    def test_JA_14(self):
        """Instruction JA_14
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_15(self):
        """Instruction JA_15
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_16(self):
        """Instruction JA_16
        Groups: jump
        0xf7fe4f87: ja      0xf7fe4e88
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F87, "\x0f\x87\xfb\xfe\xff\xff")
        cpu.EIP = 0xF7FE4F87
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4F87:0xF7FE4F8D], [b"\x0f", b"\x87", b"\xfb", b"\xfe", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160638600)

    def test_JA_17(self):
        """Instruction JA_17
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_18(self):
        """Instruction JA_18
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_19(self):
        """Instruction JA_19
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_2(self):
        """Instruction JA_2
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_20(self):
        """Instruction JA_20
        Groups: jump
        0xf7fe732f: ja      0xf7fe74b0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE732F, "\x0f\x87{\x01\x00\x00")
        cpu.EIP = 0xF7FE732F
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE732F:0xF7FE7335], [b"\x0f", b"\x87", b"{", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160647989)

    def test_JA_21(self):
        """Instruction JA_21
        Groups: jump
        0xf7fe732f: ja      0xf7fe74b0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE732F, "\x0f\x87{\x01\x00\x00")
        cpu.EIP = 0xF7FE732F
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE732F:0xF7FE7335], [b"\x0f", b"\x87", b"{", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160647989)

    def test_JA_3(self):
        """Instruction JA_3
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_4(self):
        """Instruction JA_4
        Groups: jump
        0xf7fe6dd7: ja      0xf7fe6da8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6DD7, "w\xcf")
        cpu.EIP = 0xF7FE6DD7
        cpu.ZF = True
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE6DD7:0xF7FE6DD9], [b"w", b"\xcf"])
        self.assertEqual(cpu.EIP, 4160646617)

    def test_JA_5(self):
        """Instruction JA_5
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_6(self):
        """Instruction JA_6
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_7(self):
        """Instruction JA_7
        Groups: jump
        0x8079dd2:  ja      0x8079dd7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079DD2, "w\x03")
        cpu.EIP = 0x8079DD2
        cpu.ZF = True
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x8079DD2:0x8079DD4], [b"w", b"\x03"])
        self.assertEqual(cpu.EIP, 134716884)

    def test_JA_8(self):
        """Instruction JA_8
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JA_9(self):
        """Instruction JA_9
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE71BD:0xF7FE71BF], [b"w", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160647592)

    def test_JBE_1(self):
        """Instruction JBE_1
        Groups: jump
        0xf7ff0a21: jbe     0xf7ff0cb3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0A21, "\x0f\x86\x8c\x02\x00\x00")
        cpu.EIP = 0xF7FF0A21
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF0A21:0xF7FF0A27], [b"\x0f", b"\x86", b"\x8c", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160686631)

    def test_JBE_10(self):
        """Instruction JBE_10
        Groups: jump
        0xf7fddcb8: jbe     0xf7fddca9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDCB8, "v\xef")
        cpu.EIP = 0xF7FDDCB8
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FDDCB8:0xF7FDDCBA], [b"v", b"\xef"])
        self.assertEqual(cpu.EIP, 4160609449)

    def test_JBE_11(self):
        """Instruction JBE_11
        Groups: jump
        0xf7fe07fc: jbe     0xf7fe07e9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE07FC, "v\xeb")
        cpu.EIP = 0xF7FE07FC
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE07FC:0xF7FE07FE], [b"v", b"\xeb"])
        self.assertEqual(cpu.EIP, 4160620542)

    def test_JBE_12(self):
        """Instruction JBE_12
        Groups: jump
        0xf7fe26e0: jbe     0xf7fe26b8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26E0, "v\xd6")
        cpu.EIP = 0xF7FE26E0
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE26E0:0xF7FE26E2], [b"v", b"\xd6"])
        self.assertEqual(cpu.EIP, 4160628408)

    def test_JBE_13(self):
        """Instruction JBE_13
        Groups: jump
        0xf7fddcc1: jbe     0xf7fddca0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDCC1, "v\xdd")
        cpu.EIP = 0xF7FDDCC1
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FDDCC1:0xF7FDDCC3], [b"v", b"\xdd"])
        self.assertEqual(cpu.EIP, 4160609475)

    def test_JBE_14(self):
        """Instruction JBE_14
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF067B:0xF7FF067D], [b"v", b"4"])
        self.assertEqual(cpu.EIP, 4160685693)

    def test_JBE_15(self):
        """Instruction JBE_15
        Groups: jump
        0x8079c05:  jbe     0x8079c0a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C05, "v\x03")
        cpu.EIP = 0x8079C05
        cpu.ZF = True
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C05:0x8079C07], [b"v", b"\x03"])
        self.assertEqual(cpu.EIP, 134716426)

    def test_JBE_16(self):
        """Instruction JBE_16
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF067B:0xF7FF067D], [b"v", b"4"])
        self.assertEqual(cpu.EIP, 4160685693)

    def test_JBE_17(self):
        """Instruction JBE_17
        Groups: jump
        0xf7fe07fc: jbe     0xf7fe07e9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE07FC, "v\xeb")
        cpu.EIP = 0xF7FE07FC
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE07FC:0xF7FE07FE], [b"v", b"\xeb"])
        self.assertEqual(cpu.EIP, 4160620521)

    def test_JBE_18(self):
        """Instruction JBE_18
        Groups: jump
        0x807b67a:  jbe     0x807b67f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B67A, "v\x03")
        cpu.EIP = 0x807B67A
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807B67A:0x807B67C], [b"v", b"\x03"])
        self.assertEqual(cpu.EIP, 134723199)

    def test_JBE_19(self):
        """Instruction JBE_19
        Groups: jump
        0x8079b90:  jbe     0x8079b95
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079B90, "v\x03")
        cpu.EIP = 0x8079B90
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x8079B90:0x8079B92], [b"v", b"\x03"])
        self.assertEqual(cpu.EIP, 134716309)

    def test_JBE_2(self):
        """Instruction JBE_2
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF067B:0xF7FF067D], [b"v", b"4"])
        self.assertEqual(cpu.EIP, 4160685693)

    def test_JBE_20(self):
        """Instruction JBE_20
        Groups: jump
        0xf7fe7427: jbe     0xf7fe7fe5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7427, "\x0f\x86\xb8\x0b\x00\x00")
        cpu.EIP = 0xF7FE7427
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE7427:0xF7FE742D], [b"\x0f", b"\x86", b"\xb8", b"\x0b", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160648237)

    def test_JBE_21(self):
        """Instruction JBE_21
        Groups: jump
        0xf7fddf42: jbe     0xf7fddf30
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDF42, "v\xec")
        cpu.EIP = 0xF7FDDF42
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FDDF42:0xF7FDDF44], [b"v", b"\xec"])
        self.assertEqual(cpu.EIP, 4160610116)

    def test_JBE_3(self):
        """Instruction JBE_3
        Groups: jump
        0xf7fddcb8: jbe     0xf7fddca9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDCB8, "v\xef")
        cpu.EIP = 0xF7FDDCB8
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FDDCB8:0xF7FDDCBA], [b"v", b"\xef"])
        self.assertEqual(cpu.EIP, 4160609449)

    def test_JBE_4(self):
        """Instruction JBE_4
        Groups: jump
        0xf7fe080f: jbe     0xf7fe0a08
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE080F, "\x0f\x86\xf3\x01\x00\x00")
        cpu.EIP = 0xF7FE080F
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE080F:0xF7FE0815], [b"\x0f", b"\x86", b"\xf3", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160621064)

    def test_JBE_5(self):
        """Instruction JBE_5
        Groups: jump
        0xf7fddb3e: jbe     0xf7fddb0c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDB3E, "v\xcc")
        cpu.EIP = 0xF7FDDB3E
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FDDB3E:0xF7FDDB40], [b"v", b"\xcc"])
        self.assertEqual(cpu.EIP, 4160609088)

    def test_JBE_6(self):
        """Instruction JBE_6
        Groups: jump
        0xf7fe71dc: jbe     0xf7fe6dd9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71DC, "\x0f\x86\xf7\xfb\xff\xff")
        cpu.EIP = 0xF7FE71DC
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE71DC:0xF7FE71E2], [b"\x0f", b"\x86", b"\xf7", b"\xfb", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160647650)

    def test_JBE_7(self):
        """Instruction JBE_7
        Groups: jump
        0xf7fe26e0: jbe     0xf7fe26b8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26E0, "v\xd6")
        cpu.EIP = 0xF7FE26E0
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE26E0:0xF7FE26E2], [b"v", b"\xd6"])
        self.assertEqual(cpu.EIP, 4160628408)

    def test_JBE_8(self):
        """Instruction JBE_8
        Groups: jump
        0xf7fe26d4: jbe     0xf7fe26c1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26D4, "v\xeb")
        cpu.EIP = 0xF7FE26D4
        cpu.ZF = False
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE26D4:0xF7FE26D6], [b"v", b"\xeb"])
        self.assertEqual(cpu.EIP, 4160628417)

    def test_JBE_9(self):
        """Instruction JBE_9
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = False
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF067B:0xF7FF067D], [b"v", b"4"])
        self.assertEqual(cpu.EIP, 4160685693)

    def test_JB_1(self):
        """Instruction JB_1
        Groups: jump
        0x807a3ec:  jb      0x807a3f1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A3EC, "r\x03")
        cpu.EIP = 0x807A3EC
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807A3EC:0x807A3EE], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134718449)

    def test_JB_10(self):
        """Instruction JB_10
        Groups: jump
        0x807a20e:  jb      0x807a213
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A20E, "r\x03")
        cpu.EIP = 0x807A20E
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807A20E:0x807A210], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134717971)

    def test_JB_11(self):
        """Instruction JB_11
        Groups: jump
        0xf7fe6e0f: jb      0xf7fe6dfc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6E0F, "r\xeb")
        cpu.EIP = 0xF7FE6E0F
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE6E0F:0xF7FE6E11], [b"r", b"\xeb"])
        self.assertEqual(cpu.EIP, 4160646652)

    def test_JB_12(self):
        """Instruction JB_12
        Groups: jump
        0x807a30a:  jb      0x807a30f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A30A, "r\x03")
        cpu.EIP = 0x807A30A
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807A30A:0x807A30C], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134718223)

    def test_JB_13(self):
        """Instruction JB_13
        Groups: jump
        0xf7fe6cef: jb      0xf7fe6cdc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6CEF, "r\xeb")
        cpu.EIP = 0xF7FE6CEF
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE6CEF:0xF7FE6CF1], [b"r", b"\xeb"])
        self.assertEqual(cpu.EIP, 4160646364)

    def test_JB_14(self):
        """Instruction JB_14
        Groups: jump
        0x807a9b5:  jb      0x807a9ba
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A9B5, "r\x03")
        cpu.EIP = 0x807A9B5
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807A9B5:0x807A9B7], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134719927)

    def test_JB_15(self):
        """Instruction JB_15
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0D7:0xF7EAA0D9], [b"r", b"\xe7"])
        self.assertEqual(cpu.EIP, 4159348928)

    def test_JB_16(self):
        """Instruction JB_16
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0D7:0xF7EAA0D9], [b"r", b"\xe7"])
        self.assertEqual(cpu.EIP, 4159348928)

    def test_JB_17(self):
        """Instruction JB_17
        Groups: jump
        0x807a91c:  jb      0x807a921
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A91C, "r\x03")
        cpu.EIP = 0x807A91C
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807A91C:0x807A91E], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134719777)

    def test_JB_18(self):
        """Instruction JB_18
        Groups: jump
        0x807a31d:  jb      0x807a322
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A31D, "r\x03")
        cpu.EIP = 0x807A31D
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807A31D:0x807A31F], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134718239)

    def test_JB_19(self):
        """Instruction JB_19
        Groups: jump
        0x807a2b0:  jb      0x807a2b5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A2B0, "r\x03")
        cpu.EIP = 0x807A2B0
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807A2B0:0x807A2B2], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134718133)

    def test_JB_2(self):
        """Instruction JB_2
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0D7:0xF7EAA0D9], [b"r", b"\xe7"])
        self.assertEqual(cpu.EIP, 4159348928)

    def test_JB_20(self):
        """Instruction JB_20
        Groups: jump
        0xf7fe6cef: jb      0xf7fe6cdc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6CEF, "r\xeb")
        cpu.EIP = 0xF7FE6CEF
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE6CEF:0xF7FE6CF1], [b"r", b"\xeb"])
        self.assertEqual(cpu.EIP, 4160646364)

    def test_JB_21(self):
        """Instruction JB_21
        Groups: jump
        0xf7fe6e0f: jb      0xf7fe6dfc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6E0F, "r\xeb")
        cpu.EIP = 0xF7FE6E0F
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE6E0F:0xF7FE6E11], [b"r", b"\xeb"])
        self.assertEqual(cpu.EIP, 4160646652)

    def test_JB_3(self):
        """Instruction JB_3
        Groups: jump
        0x807a220:  jb      0x807a225
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A220, "r\x03")
        cpu.EIP = 0x807A220
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0x807A220:0x807A222], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134717989)

    def test_JB_4(self):
        """Instruction JB_4
        Groups: jump
        0x807a39b:  jb      0x807a3a0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A39B, "r\x03")
        cpu.EIP = 0x807A39B
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807A39B:0x807A39D], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134718365)

    def test_JB_5(self):
        """Instruction JB_5
        Groups: jump
        0xf7fe095a: jb      0xf7fe0966
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE095A, "r\n")
        cpu.EIP = 0xF7FE095A
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE095A:0xF7FE095C], [b"r", b"\n"])
        self.assertEqual(cpu.EIP, 4160620892)

    def test_JB_6(self):
        """Instruction JB_6
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0D7:0xF7EAA0D9], [b"r", b"\xe7"])
        self.assertEqual(cpu.EIP, 4159348928)

    def test_JB_7(self):
        """Instruction JB_7
        Groups: jump
        0x807a3bf:  jb      0x807a3c4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A3BF, "r\x03")
        cpu.EIP = 0x807A3BF
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807A3BF:0x807A3C1], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134718401)

    def test_JB_8(self):
        """Instruction JB_8
        Groups: jump
        0xf7fe0acd: jb      0xf7fe0ab8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0ACD, "r\xe9")
        cpu.EIP = 0xF7FE0ACD
        cpu.CF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE0ACD:0xF7FE0ACF], [b"r", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160621240)

    def test_JB_9(self):
        """Instruction JB_9
        Groups: jump
        0x807a2b9:  jb      0x807a2be
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A2B9, "r\x03")
        cpu.EIP = 0x807A2B9
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807A2B9:0x807A2BB], [b"r", b"\x03"])
        self.assertEqual(cpu.EIP, 134718139)

    def test_JCXZ_1(self):
        """Instruction JCXZ_1
        Groups: not64bitmode, jump
        0x807b741:  jcxz    0x807b747
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B741, "g\xe3\x03")
        cpu.EIP = 0x807B741
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B741:0x807B744], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723396)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_10(self):
        """Instruction JCXZ_10
        Groups: not64bitmode, jump
        0x807b7eb:  jcxz    0x807b7f1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7EB, "g\xe3\x03")
        cpu.EIP = 0x807B7EB
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B7EB:0x807B7EE], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723566)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_11(self):
        """Instruction JCXZ_11
        Groups: not64bitmode, jump
        0x807b7d7:  jcxz    0x807b7dd
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7D7, "g\xe3\x03")
        cpu.EIP = 0x807B7D7
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B7D7:0x807B7DA], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723546)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_12(self):
        """Instruction JCXZ_12
        Groups: not64bitmode, jump
        0x807b723:  jcxz    0x807b729
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B723, "g\xe3\x03")
        cpu.EIP = 0x807B723
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B723:0x807B726], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723366)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_13(self):
        """Instruction JCXZ_13
        Groups: not64bitmode, jump
        0x807b787:  jcxz    0x807b78d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B787, "g\xe3\x03")
        cpu.EIP = 0x807B787
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B787:0x807B78A], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723466)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_14(self):
        """Instruction JCXZ_14
        Groups: not64bitmode, jump
        0x807b737:  jcxz    0x807b73d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B737, "g\xe3\x03")
        cpu.EIP = 0x807B737
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B737:0x807B73A], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723386)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_15(self):
        """Instruction JCXZ_15
        Groups: not64bitmode, jump
        0x807b6fb:  jcxz    0x807b701
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B6FB, "g\xe3\x03")
        cpu.EIP = 0x807B6FB
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B6FB:0x807B6FE], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723326)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_16(self):
        """Instruction JCXZ_16
        Groups: not64bitmode, jump
        0x807b7f5:  jcxz    0x807b7fb
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7F5, "g\xe3\x03")
        cpu.EIP = 0x807B7F5
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B7F5:0x807B7F8], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723576)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_17(self):
        """Instruction JCXZ_17
        Groups: not64bitmode, jump
        0x807b7af:  jcxz    0x807b7b5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7AF, "g\xe3\x03")
        cpu.EIP = 0x807B7AF
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B7AF:0x807B7B2], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723506)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_18(self):
        """Instruction JCXZ_18
        Groups: not64bitmode, jump
        0x807b755:  jcxz    0x807b75b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B755, "g\xe3\x03")
        cpu.EIP = 0x807B755
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B755:0x807B758], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723416)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_19(self):
        """Instruction JCXZ_19
        Groups: not64bitmode, jump
        0x807b7e1:  jcxz    0x807b7e7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7E1, "g\xe3\x03")
        cpu.EIP = 0x807B7E1
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B7E1:0x807B7E4], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723556)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_2(self):
        """Instruction JCXZ_2
        Groups: not64bitmode, jump
        0x807b705:  jcxz    0x807b70b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B705, "g\xe3\x03")
        cpu.EIP = 0x807B705
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B705:0x807B708], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723336)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_20(self):
        """Instruction JCXZ_20
        Groups: not64bitmode, jump
        0x807b769:  jcxz    0x807b76f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B769, "g\xe3\x03")
        cpu.EIP = 0x807B769
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B769:0x807B76C], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723436)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_21(self):
        """Instruction JCXZ_21
        Groups: not64bitmode, jump
        0x807b70f:  jcxz    0x807b715
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B70F, "g\xe3\x03")
        cpu.EIP = 0x807B70F
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B70F:0x807B712], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723346)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_3(self):
        """Instruction JCXZ_3
        Groups: not64bitmode, jump
        0x807b6f1:  jcxz    0x807b6f7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B6F1, "g\xe3\x03")
        cpu.EIP = 0x807B6F1
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B6F1:0x807B6F4], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723316)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_4(self):
        """Instruction JCXZ_4
        Groups: not64bitmode, jump
        0x807b7c3:  jcxz    0x807b7c9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7C3, "g\xe3\x03")
        cpu.EIP = 0x807B7C3
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B7C3:0x807B7C6], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723526)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_5(self):
        """Instruction JCXZ_5
        Groups: not64bitmode, jump
        0x807b809:  jcxz    0x807b80f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B809, "g\xe3\x03")
        cpu.EIP = 0x807B809
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B809:0x807B80C], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723596)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_6(self):
        """Instruction JCXZ_6
        Groups: not64bitmode, jump
        0x807b81d:  jcxz    0x807b823
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B81D, "g\xe3\x03")
        cpu.EIP = 0x807B81D
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B81D:0x807B820], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723616)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_7(self):
        """Instruction JCXZ_7
        Groups: not64bitmode, jump
        0x807b813:  jcxz    0x807b819
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B813, "g\xe3\x03")
        cpu.EIP = 0x807B813
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B813:0x807B816], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723606)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_8(self):
        """Instruction JCXZ_8
        Groups: not64bitmode, jump
        0x807b74b:  jcxz    0x807b751
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B74B, "g\xe3\x03")
        cpu.EIP = 0x807B74B
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B74B:0x807B74E], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723406)
        self.assertEqual(cpu.CX, 1290)

    def test_JCXZ_9(self):
        """Instruction JCXZ_9
        Groups: not64bitmode, jump
        0x807b7ff:  jcxz    0x807b805
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7FF, "g\xe3\x03")
        cpu.EIP = 0x807B7FF
        cpu.CX = 0x50A
        cpu.execute()

        self.assertEqual(mem[0x807B7FF:0x807B802], [b"g", b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134723586)
        self.assertEqual(cpu.CX, 1290)

    def test_JECXZ_1(self):
        """Instruction JECXZ_1
        Groups: not64bitmode, jump
        0x807aafa:  jecxz   0x807aaff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAFA, "\xe3\x03")
        cpu.EIP = 0x807AAFA
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AAFA:0x807AAFC], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720252)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_10(self):
        """Instruction JECXZ_10
        Groups: not64bitmode, jump
        0x807aa85:  jecxz   0x807aa8a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA85, "\xe3\x03")
        cpu.EIP = 0x807AA85
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA85:0x807AA87], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720135)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_11(self):
        """Instruction JECXZ_11
        Groups: not64bitmode, jump
        0x807aabb:  jecxz   0x807aac0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AABB, "\xe3\x03")
        cpu.EIP = 0x807AABB
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AABB:0x807AABD], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720189)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_12(self):
        """Instruction JECXZ_12
        Groups: not64bitmode, jump
        0x807aa61:  jecxz   0x807aa66
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA61, "\xe3\x03")
        cpu.EIP = 0x807AA61
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA61:0x807AA63], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720099)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_13(self):
        """Instruction JECXZ_13
        Groups: not64bitmode, jump
        0x807ab15:  jecxz   0x807ab1a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB15, "\xe3\x03")
        cpu.EIP = 0x807AB15
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AB15:0x807AB17], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720279)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_14(self):
        """Instruction JECXZ_14
        Groups: not64bitmode, jump
        0x807aa34:  jecxz   0x807aa39
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA34, "\xe3\x03")
        cpu.EIP = 0x807AA34
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA34:0x807AA36], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720054)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_15(self):
        """Instruction JECXZ_15
        Groups: not64bitmode, jump
        0x807ab0c:  jecxz   0x807ab11
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB0C, "\xe3\x03")
        cpu.EIP = 0x807AB0C
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AB0C:0x807AB0E], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720270)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_16(self):
        """Instruction JECXZ_16
        Groups: not64bitmode, jump
        0xf7ff44ef: jecxz   0xf7ff451d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44EF, "\xe3,")
        cpu.EIP = 0xF7FF44EF
        cpu.ECX = 0x44
        cpu.execute()

        self.assertEqual(mem[0xF7FF44EF:0xF7FF44F1], [b"\xe3", b","])
        self.assertEqual(cpu.EIP, 4160701681)
        self.assertEqual(cpu.ECX, 68)

    def test_JECXZ_17(self):
        """Instruction JECXZ_17
        Groups: not64bitmode, jump
        0x807aa7c:  jecxz   0x807aa81
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA7C, "\xe3\x03")
        cpu.EIP = 0x807AA7C
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA7C:0x807AA7E], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720126)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_18(self):
        """Instruction JECXZ_18
        Groups: not64bitmode, jump
        0x807aadf:  jecxz   0x807aae4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AADF, "\xe3\x03")
        cpu.EIP = 0x807AADF
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AADF:0x807AAE1], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720225)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_19(self):
        """Instruction JECXZ_19
        Groups: not64bitmode, jump
        0x807aae8:  jecxz   0x807aaed
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAE8, "\xe3\x03")
        cpu.EIP = 0x807AAE8
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AAE8:0x807AAEA], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720234)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_2(self):
        """Instruction JECXZ_2
        Groups: not64bitmode, jump
        0x807aa19:  jecxz   0x807aa1e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA19, "\xe3\x03")
        cpu.EIP = 0x807AA19
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA19:0x807AA1B], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720027)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_20(self):
        """Instruction JECXZ_20
        Groups: not64bitmode, jump
        0x807ab1e:  jecxz   0x807ab23
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB1E, "\xe3\x03")
        cpu.EIP = 0x807AB1E
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AB1E:0x807AB20], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720288)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_21(self):
        """Instruction JECXZ_21
        Groups: not64bitmode, jump
        0x807aaa9:  jecxz   0x807aaae
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAA9, "\xe3\x03")
        cpu.EIP = 0x807AAA9
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AAA9:0x807AAAB], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720171)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_3(self):
        """Instruction JECXZ_3
        Groups: not64bitmode, jump
        0x807aa22:  jecxz   0x807aa27
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA22, "\xe3\x03")
        cpu.EIP = 0x807AA22
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA22:0x807AA24], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720036)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_4(self):
        """Instruction JECXZ_4
        Groups: not64bitmode, jump
        0x807ab30:  jecxz   0x807ab35
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB30, "\xe3\x03")
        cpu.EIP = 0x807AB30
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AB30:0x807AB32], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720306)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_5(self):
        """Instruction JECXZ_5
        Groups: not64bitmode, jump
        0x807aa46:  jecxz   0x807aa4b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA46, "\xe3\x03")
        cpu.EIP = 0x807AA46
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA46:0x807AA48], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720072)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_6(self):
        """Instruction JECXZ_6
        Groups: not64bitmode, jump
        0x807aa58:  jecxz   0x807aa5d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA58, "\xe3\x03")
        cpu.EIP = 0x807AA58
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA58:0x807AA5A], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720090)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_7(self):
        """Instruction JECXZ_7
        Groups: not64bitmode, jump
        0x807aab2:  jecxz   0x807aab7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAB2, "\xe3\x03")
        cpu.EIP = 0x807AAB2
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AAB2:0x807AAB4], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720180)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_8(self):
        """Instruction JECXZ_8
        Groups: not64bitmode, jump
        0x807aac4:  jecxz   0x807aac9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAC4, "\xe3\x03")
        cpu.EIP = 0x807AAC4
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AAC4:0x807AAC6], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720198)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JECXZ_9(self):
        """Instruction JECXZ_9
        Groups: not64bitmode, jump
        0x807aa2b:  jecxz   0x807aa30
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA2B, "\xe3\x03")
        cpu.EIP = 0x807AA2B
        cpu.ECX = 0xF1050A
        cpu.execute()

        self.assertEqual(mem[0x807AA2B:0x807AA2D], [b"\xe3", b"\x03"])
        self.assertEqual(cpu.EIP, 134720045)
        self.assertEqual(cpu.ECX, 15795466)

    def test_JE_1(self):
        """Instruction JE_1
        Groups: jump
        0xf7fe5498: je      0xf7fe4f45
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE5498, "\x0f\x84\xa7\xfa\xff\xff")
        cpu.EIP = 0xF7FE5498
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE5498:0xF7FE549E], [b"\x0f", b"\x84", b"\xa7", b"\xfa", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160640158)

    def test_JE_10(self):
        """Instruction JE_10
        Groups: jump
        0xf7fe26cb: je      0xf7fe2459
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26CB, "\x0f\x84\x88\xfd\xff\xff")
        cpu.EIP = 0xF7FE26CB
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE26CB:0xF7FE26D1], [b"\x0f", b"\x84", b"\x88", b"\xfd", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160628433)

    def test_JE_11(self):
        """Instruction JE_11
        Groups: jump
        0xf7fe57c8: je      0xf7fe6291
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE57C8, "\x0f\x84\xc3\n\x00\x00")
        cpu.EIP = 0xF7FE57C8
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE57C8:0xF7FE57CE], [b"\x0f", b"\x84", b"\xc3", b"\n", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160640974)

    def test_JE_12(self):
        """Instruction JE_12
        Groups: jump
        0xf7fe4eed: je      0xf7fe4f80
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4EED, "\x0f\x84\x8d\x00\x00\x00")
        cpu.EIP = 0xF7FE4EED
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4EED:0xF7FE4EF3], [b"\x0f", b"\x84", b"\x8d", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638707)

    def test_JE_13(self):
        """Instruction JE_13
        Groups: jump
        0xf7fe4f52: je      0xf7fe4f98
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F52, "tD")
        cpu.EIP = 0xF7FE4F52
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F52:0xF7FE4F54], [b"t", b"D"])
        self.assertEqual(cpu.EIP, 4160638804)

    def test_JE_14(self):
        """Instruction JE_14
        Groups: jump
        0xf7fe4cfc: je      0xf7fe4dca
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFC, "\x0f\x84\xc8\x00\x00\x00")
        cpu.EIP = 0xF7FE4CFC
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CFC:0xF7FE4D02], [b"\x0f", b"\x84", b"\xc8", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638210)

    def test_JE_15(self):
        """Instruction JE_15
        Groups: jump
        0xf7fe4cfc: je      0xf7fe4dca
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFC, "\x0f\x84\xc8\x00\x00\x00")
        cpu.EIP = 0xF7FE4CFC
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CFC:0xF7FE4D02], [b"\x0f", b"\x84", b"\xc8", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638210)

    def test_JE_16(self):
        """Instruction JE_16
        Groups: jump
        0xf7fe4cf8: je      0xf7fe4d40
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CF8, "tF")
        cpu.EIP = 0xF7FE4CF8
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CF8:0xF7FE4CFA], [b"t", b"F"])
        self.assertEqual(cpu.EIP, 4160638202)

    def test_JE_17(self):
        """Instruction JE_17
        Groups: jump
        0xf7fe6ee1: je      0xf7fe79f1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6EE1, "\x0f\x84\n\x0b\x00\x00")
        cpu.EIP = 0xF7FE6EE1
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE6EE1:0xF7FE6EE7], [b"\x0f", b"\x84", b"\n", b"\x0b", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160646887)

    def test_JE_18(self):
        """Instruction JE_18
        Groups: jump
        0xf7ff3eb4: je      0xf7ff3ec1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EB4, "t\x0b")
        cpu.EIP = 0xF7FF3EB4
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EB4:0xF7FF3EB6], [b"t", b"\x0b"])
        self.assertEqual(cpu.EIP, 4160700086)

    def test_JE_19(self):
        """Instruction JE_19
        Groups: jump
        0xf7fe4ead: je      0xf7fe4f80
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4EAD, "\x0f\x84\xcd\x00\x00\x00")
        cpu.EIP = 0xF7FE4EAD
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4EAD:0xF7FE4EB3], [b"\x0f", b"\x84", b"\xcd", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638643)

    def test_JE_2(self):
        """Instruction JE_2
        Groups: jump
        0xf7e2eeb5: je      0xf7e2efc8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2EEB5, "\x0f\x84\r\x01\x00\x00")
        cpu.EIP = 0xF7E2EEB5
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7E2EEB5:0xF7E2EEBB], [b"\x0f", b"\x84", b"\r", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4158844872)

    def test_JE_20(self):
        """Instruction JE_20
        Groups: jump
        0xf7fe4faa: je      0xf7fe50e8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FAA, "\x0f\x848\x01\x00\x00")
        cpu.EIP = 0xF7FE4FAA
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4FAA:0xF7FE4FB0], [b"\x0f", b"\x84", b"8", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638896)

    def test_JE_21(self):
        """Instruction JE_21
        Groups: jump
        0xf7fe4faa: je      0xf7fe50e8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FAA, "\x0f\x848\x01\x00\x00")
        cpu.EIP = 0xF7FE4FAA
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4FAA:0xF7FE4FB0], [b"\x0f", b"\x84", b"8", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160639208)

    def test_JE_3(self):
        """Instruction JE_3
        Groups: jump
        0xf7fe4f0f: je      0xf7fe54fc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F0F, "\x0f\x84\xe7\x05\x00\x00")
        cpu.EIP = 0xF7FE4F0F
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4F0F:0xF7FE4F15], [b"\x0f", b"\x84", b"\xe7", b"\x05", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638741)

    def test_JE_4(self):
        """Instruction JE_4
        Groups: jump
        0xf7fe4ca2: je      0xf7fe4db7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CA2, "\x0f\x84\x0f\x01\x00\x00")
        cpu.EIP = 0xF7FE4CA2
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4CA2:0xF7FE4CA8], [b"\x0f", b"\x84", b"\x0f", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638120)

    def test_JE_5(self):
        """Instruction JE_5
        Groups: jump
        0xf7fe8c4b: je      0xf7fe8a46
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.write(0xF7FE8C4B, "\x0f\x84\xf5\xfd\xff\xff")
        cpu.EIP = 0xF7FE8C4B
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE8C4B:0xF7FE8C51], [b"\x0f", b"\x84", b"\xf5", b"\xfd", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160654417)

    def test_JE_6(self):
        """Instruction JE_6
        Groups: jump
        0xf7eaa215: je      0xf7eaa222
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA215, "t\x0b")
        cpu.EIP = 0xF7EAA215
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7EAA215:0xF7EAA217], [b"t", b"\x0b"])
        self.assertEqual(cpu.EIP, 4159349271)

    def test_JE_7(self):
        """Instruction JE_7
        Groups: jump
        0xf7fe72b2: je      0xf7fe72c1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72B2, "t\r")
        cpu.EIP = 0xF7FE72B2
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE72B2:0xF7FE72B4], [b"t", b"\r"])
        self.assertEqual(cpu.EIP, 4160647860)

    def test_JE_8(self):
        """Instruction JE_8
        Groups: jump
        0xf7fe4cf8: je      0xf7fe4d40
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CF8, "tF")
        cpu.EIP = 0xF7FE4CF8
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CF8:0xF7FE4CFA], [b"t", b"F"])
        self.assertEqual(cpu.EIP, 4160638202)

    def test_JE_9(self):
        """Instruction JE_9
        Groups: jump
        0xf7fe4faa: je      0xf7fe50e8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FAA, "\x0f\x848\x01\x00\x00")
        cpu.EIP = 0xF7FE4FAA
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4FAA:0xF7FE4FB0], [b"\x0f", b"\x84", b"8", b"\x01", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638896)

    def test_JGE_1(self):
        """Instruction JGE_1
        Groups: jump
        0x807a7c5:  jge     0x807a7ca
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7C5, "}\x03")
        cpu.EIP = 0x807A7C5
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A7C5:0x807A7C7], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719434)

    def test_JGE_10(self):
        """Instruction JGE_10
        Groups: jump
        0x807bc24:  jge     0x807bc29
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC24, "}\x03")
        cpu.EIP = 0x807BC24
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BC24:0x807BC26], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724649)

    def test_JGE_11(self):
        """Instruction JGE_11
        Groups: jump
        0x807a7d7:  jge     0x807a7dc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7D7, "}\x03")
        cpu.EIP = 0x807A7D7
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A7D7:0x807A7D9], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719452)

    def test_JGE_12(self):
        """Instruction JGE_12
        Groups: jump
        0xf7ff41cc: jge     0xf7ff43e0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41CC, "\x0f\x8d\x0e\x02\x00\x00")
        cpu.EIP = 0xF7FF41CC
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF41CC:0xF7FF41D2], [b"\x0f", b"\x8d", b"\x0e", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160700882)

    def test_JGE_13(self):
        """Instruction JGE_13
        Groups: jump
        0x807bc99:  jge     0x807bc9e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC99, "}\x03")
        cpu.EIP = 0x807BC99
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BC99:0x807BC9B], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724763)

    def test_JGE_14(self):
        """Instruction JGE_14
        Groups: jump
        0x807bc75:  jge     0x807bc7a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC75, "}\x03")
        cpu.EIP = 0x807BC75
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BC75:0x807BC77], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724727)

    def test_JGE_15(self):
        """Instruction JGE_15
        Groups: jump
        0x807a828:  jge     0x807a82d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A828, "}\x03")
        cpu.EIP = 0x807A828
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A828:0x807A82A], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719533)

    def test_JGE_16(self):
        """Instruction JGE_16
        Groups: jump
        0x807a8a6:  jge     0x807a8ab
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A8A6, "}\x03")
        cpu.EIP = 0x807A8A6
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A8A6:0x807A8A8], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719656)

    def test_JGE_17(self):
        """Instruction JGE_17
        Groups: jump
        0x807a7f2:  jge     0x807a7f7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7F2, "}\x03")
        cpu.EIP = 0x807A7F2
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A7F2:0x807A7F4], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719479)

    def test_JGE_18(self):
        """Instruction JGE_18
        Groups: jump
        0x807a7ce:  jge     0x807a7d3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7CE, "}\x03")
        cpu.EIP = 0x807A7CE
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A7CE:0x807A7D0], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719443)

    def test_JGE_19(self):
        """Instruction JGE_19
        Groups: jump
        0x807bca2:  jge     0x807bca7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BCA2, "}\x03")
        cpu.EIP = 0x807BCA2
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BCA2:0x807BCA4], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724772)

    def test_JGE_2(self):
        """Instruction JGE_2
        Groups: jump
        0xf7ff41cc: jge     0xf7ff43e0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41CC, "\x0f\x8d\x0e\x02\x00\x00")
        cpu.EIP = 0xF7FF41CC
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF41CC:0xF7FF41D2], [b"\x0f", b"\x8d", b"\x0e", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160700882)

    def test_JGE_20(self):
        """Instruction JGE_20
        Groups: jump
        0x807bc87:  jge     0x807bc8c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC87, "}\x03")
        cpu.EIP = 0x807BC87
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BC87:0x807BC89], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724745)

    def test_JGE_21(self):
        """Instruction JGE_21
        Groups: jump
        0x807bbd3:  jge     0x807bbd8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BBD3, "}\x03")
        cpu.EIP = 0x807BBD3
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BBD3:0x807BBD5], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724568)

    def test_JGE_3(self):
        """Instruction JGE_3
        Groups: jump
        0x807bc63:  jge     0x807bc68
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC63, "}\x03")
        cpu.EIP = 0x807BC63
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BC63:0x807BC65], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724709)

    def test_JGE_4(self):
        """Instruction JGE_4
        Groups: jump
        0x807a870:  jge     0x807a875
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A870, "}\x03")
        cpu.EIP = 0x807A870
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A870:0x807A872], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719602)

    def test_JGE_5(self):
        """Instruction JGE_5
        Groups: jump
        0x807a843:  jge     0x807a848
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A843, "}\x03")
        cpu.EIP = 0x807A843
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A843:0x807A845], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719560)

    def test_JGE_6(self):
        """Instruction JGE_6
        Groups: jump
        0x807bc6c:  jge     0x807bc71
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC6C, "}\x03")
        cpu.EIP = 0x807BC6C
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BC6C:0x807BC6E], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724718)

    def test_JGE_7(self):
        """Instruction JGE_7
        Groups: jump
        0x807a867:  jge     0x807a86c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A867, "}\x03")
        cpu.EIP = 0x807A867
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A867:0x807A869], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719593)

    def test_JGE_8(self):
        """Instruction JGE_8
        Groups: jump
        0x807a7e9:  jge     0x807a7ee
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7E9, "}\x03")
        cpu.EIP = 0x807A7E9
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A7E9:0x807A7EB], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134719470)

    def test_JGE_9(self):
        """Instruction JGE_9
        Groups: jump
        0x807bc48:  jge     0x807bc4d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC48, "}\x03")
        cpu.EIP = 0x807BC48
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BC48:0x807BC4A], [b"}", b"\x03"])
        self.assertEqual(cpu.EIP, 134724682)

    def test_JG_1(self):
        """Instruction JG_1
        Groups: jump
        0x807a76a:  jg      0x807a76f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A76A, "\x7f\x03")
        cpu.EIP = 0x807A76A
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A76A:0x807A76C], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719340)

    def test_JG_10(self):
        """Instruction JG_10
        Groups: jump
        0x807a746:  jg      0x807a74b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A746, "\x7f\x03")
        cpu.EIP = 0x807A746
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A746:0x807A748], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719304)

    def test_JG_11(self):
        """Instruction JG_11
        Groups: jump
        0x8079fc3:  jg      0x8079fc8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FC3, "\x7f\x03")
        cpu.EIP = 0x8079FC3
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079FC3:0x8079FC5], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134717384)

    def test_JG_12(self):
        """Instruction JG_12
        Groups: jump
        0x8079fb1:  jg      0x8079fb6
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FB1, "\x7f\x03")
        cpu.EIP = 0x8079FB1
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079FB1:0x8079FB3], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134717366)

    def test_JG_13(self):
        """Instruction JG_13
        Groups: jump
        0x8079fd5:  jg      0x8079fda
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FD5, "\x7f\x03")
        cpu.EIP = 0x8079FD5
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079FD5:0x8079FD7], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134717402)

    def test_JG_14(self):
        """Instruction JG_14
        Groups: jump
        0x807a05c:  jg      0x807a061
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A05C, "\x7f\x03")
        cpu.EIP = 0x807A05C
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A05C:0x807A05E], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134717534)

    def test_JG_15(self):
        """Instruction JG_15
        Groups: jump
        0x807a69b:  jg      0x807a6a0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A69B, "\x7f\x03")
        cpu.EIP = 0x807A69B
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A69B:0x807A69D], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719136)

    def test_JG_16(self):
        """Instruction JG_16
        Groups: jump
        0x807a761:  jg      0x807a766
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A761, "\x7f\x03")
        cpu.EIP = 0x807A761
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A761:0x807A763], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719331)

    def test_JG_17(self):
        """Instruction JG_17
        Groups: jump
        0x807a785:  jg      0x807a78a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A785, "\x7f\x03")
        cpu.EIP = 0x807A785
        cpu.ZF = True
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A785:0x807A787], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719367)

    def test_JG_18(self):
        """Instruction JG_18
        Groups: jump
        0x807a7a9:  jg      0x807a7ae
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7A9, "\x7f\x03")
        cpu.EIP = 0x807A7A9
        cpu.ZF = True
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A7A9:0x807A7AB], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719403)

    def test_JG_19(self):
        """Instruction JG_19
        Groups: jump
        0x807a7b2:  jg      0x807a7b7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7B2, "\x7f\x03")
        cpu.EIP = 0x807A7B2
        cpu.ZF = True
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A7B2:0x807A7B4], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719412)

    def test_JG_2(self):
        """Instruction JG_2
        Groups: jump
        0x807a707:  jg      0x807a70c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A707, "\x7f\x03")
        cpu.EIP = 0x807A707
        cpu.ZF = True
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A707:0x807A709], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719241)

    def test_JG_20(self):
        """Instruction JG_20
        Groups: jump
        0x807a773:  jg      0x807a778
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A773, "\x7f\x03")
        cpu.EIP = 0x807A773
        cpu.ZF = True
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A773:0x807A775], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719349)

    def test_JG_21(self):
        """Instruction JG_21
        Groups: jump
        0xf7fde27e: jg      0xf7fde9f9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDE000, 0x1000, "rwx")
        mem.write(0xF7FDE27E, "\x0f\x8fu\x07\x00\x00")
        cpu.EIP = 0xF7FDE27E
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FDE27E:0xF7FDE284], [b"\x0f", b"\x8f", b"u", b"\x07", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160612857)

    def test_JG_3(self):
        """Instruction JG_3
        Groups: jump
        0x807a78e:  jg      0x807a793
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A78E, "\x7f\x03")
        cpu.EIP = 0x807A78E
        cpu.ZF = True
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A78E:0x807A790], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719376)

    def test_JG_4(self):
        """Instruction JG_4
        Groups: jump
        0x8079f9f:  jg      0x8079fa4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079F9F, "\x7f\x03")
        cpu.EIP = 0x8079F9F
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079F9F:0x8079FA1], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134717348)

    def test_JG_5(self):
        """Instruction JG_5
        Groups: jump
        0x807a6c8:  jg      0x807a6cd
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A6C8, "\x7f\x03")
        cpu.EIP = 0x807A6C8
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A6C8:0x807A6CA], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719181)

    def test_JG_6(self):
        """Instruction JG_6
        Groups: jump
        0x807a6a4:  jg      0x807a6a9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A6A4, "\x7f\x03")
        cpu.EIP = 0x807A6A4
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A6A4:0x807A6A6], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719145)

    def test_JG_7(self):
        """Instruction JG_7
        Groups: jump
        0xf7e2e773: jg      0xf7e2e83e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E773, "\x0f\x8f\xc5\x00\x00\x00")
        cpu.EIP = 0xF7E2E773
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7E2E773:0xF7E2E779], [b"\x0f", b"\x8f", b"\xc5", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4158842942)

    def test_JG_8(self):
        """Instruction JG_8
        Groups: jump
        0x8079fa8:  jg      0x8079fad
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FA8, "\x7f\x03")
        cpu.EIP = 0x8079FA8
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079FA8:0x8079FAA], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134717357)

    def test_JG_9(self):
        """Instruction JG_9
        Groups: jump
        0x807a6da:  jg      0x807a6df
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A6DA, "\x7f\x03")
        cpu.EIP = 0x807A6DA
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807A6DA:0x807A6DC], [b"\x7f", b"\x03"])
        self.assertEqual(cpu.EIP, 134719199)

    def test_JLE_1(self):
        """Instruction JLE_1
        Groups: jump
        0x807b3b1:  jle     0x807b3b6
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B3B1, "~\x03")
        cpu.EIP = 0x807B3B1
        cpu.ZF = True
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B3B1:0x807B3B3], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134722486)

    def test_JLE_10(self):
        """Instruction JLE_10
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_11(self):
        """Instruction JLE_11
        Groups: jump
        0x807b936:  jle     0x807b93b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B936, "~\x03")
        cpu.EIP = 0x807B936
        cpu.ZF = True
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B936:0x807B938], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134723899)

    def test_JLE_12(self):
        """Instruction JLE_12
        Groups: jump
        0xf7ff0830: jle     0xf7ff07ef
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0830, "~\xbd")
        cpu.EIP = 0xF7FF0830
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF0830:0xF7FF0832], [b"~", b"\xbd"])
        self.assertEqual(cpu.EIP, 4160686063)

    def test_JLE_13(self):
        """Instruction JLE_13
        Groups: jump
        0x807b909:  jle     0x807b90e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B909, "~\x03")
        cpu.EIP = 0x807B909
        cpu.ZF = True
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B909:0x807B90B], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134723854)

    def test_JLE_14(self):
        """Instruction JLE_14
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_15(self):
        """Instruction JLE_15
        Groups: jump
        0x807b879:  jle     0x807b87e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B879, "~\x03")
        cpu.EIP = 0x807B879
        cpu.ZF = True
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B879:0x807B87B], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134723710)

    def test_JLE_16(self):
        """Instruction JLE_16
        Groups: jump
        0x807b8dc:  jle     0x807b8e1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B8DC, "~\x03")
        cpu.EIP = 0x807B8DC
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B8DC:0x807B8DE], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134723809)

    def test_JLE_17(self):
        """Instruction JLE_17
        Groups: jump
        0x807b867:  jle     0x807b86c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B867, "~\x03")
        cpu.EIP = 0x807B867
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B867:0x807B869], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134723689)

    def test_JLE_18(self):
        """Instruction JLE_18
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_19(self):
        """Instruction JLE_19
        Groups: jump
        0x807b369:  jle     0x807b36e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B369, "~\x03")
        cpu.EIP = 0x807B369
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B369:0x807B36B], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134722411)

    def test_JLE_2(self):
        """Instruction JLE_2
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_20(self):
        """Instruction JLE_20
        Groups: jump
        0x807b3f9:  jle     0x807b3fe
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B3F9, "~\x03")
        cpu.EIP = 0x807B3F9
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B3F9:0x807B3FB], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134722558)

    def test_JLE_21(self):
        """Instruction JLE_21
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_3(self):
        """Instruction JLE_3
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_4(self):
        """Instruction JLE_4
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_5(self):
        """Instruction JLE_5
        Groups: jump
        0x807b8e5:  jle     0x807b8ea
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B8E5, "~\x03")
        cpu.EIP = 0x807B8E5
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B8E5:0x807B8E7], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134723818)

    def test_JLE_6(self):
        """Instruction JLE_6
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_7(self):
        """Instruction JLE_7
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JLE_8(self):
        """Instruction JLE_8
        Groups: jump
        0x807b3d5:  jle     0x807b3da
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B3D5, "~\x03")
        cpu.EIP = 0x807B3D5
        cpu.ZF = True
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807B3D5:0x807B3D7], [b"~", b"\x03"])
        self.assertEqual(cpu.EIP, 134722522)

    def test_JLE_9(self):
        """Instruction JLE_9
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE577D:0xF7FE577F], [b"~", b"\xa1"])
        self.assertEqual(cpu.EIP, 4160640895)

    def test_JL_1(self):
        """Instruction JL_1
        Groups: jump
        0x8079aa5:  jl      0x8079aaa
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079AA5, "|\x03")
        cpu.EIP = 0x8079AA5
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079AA5:0x8079AA7], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134716074)

    def test_JL_10(self):
        """Instruction JL_10
        Groups: jump
        0x807aeca:  jl      0x807aecf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AECA, "|\x03")
        cpu.EIP = 0x807AECA
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AECA:0x807AECC], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721228)

    def test_JL_11(self):
        """Instruction JL_11
        Groups: jump
        0x807af87:  jl      0x807af8c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF87, "|\x03")
        cpu.EIP = 0x807AF87
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AF87:0x807AF89], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721420)

    def test_JL_12(self):
        """Instruction JL_12
        Groups: jump
        0x8079a27:  jl      0x8079a2c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A27, "|\x03")
        cpu.EIP = 0x8079A27
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079A27:0x8079A29], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134715945)

    def test_JL_13(self):
        """Instruction JL_13
        Groups: jump
        0x8079a81:  jl      0x8079a86
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A81, "|\x03")
        cpu.EIP = 0x8079A81
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079A81:0x8079A83], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134716038)

    def test_JL_14(self):
        """Instruction JL_14
        Groups: jump
        0xf7ff41c4: jl      0xf7ff41b9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41C4, "|\xf3")
        cpu.EIP = 0xF7FF41C4
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF41C4:0xF7FF41C6], [b"|", b"\xf3"])
        self.assertEqual(cpu.EIP, 4160700870)

    def test_JL_15(self):
        """Instruction JL_15
        Groups: jump
        0x807af09:  jl      0x807af0e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF09, "|\x03")
        cpu.EIP = 0x807AF09
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AF09:0x807AF0B], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721291)

    def test_JL_16(self):
        """Instruction JL_16
        Groups: jump
        0x807aedc:  jl      0x807aee1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEDC, "|\x03")
        cpu.EIP = 0x807AEDC
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AEDC:0x807AEDE], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721246)

    def test_JL_17(self):
        """Instruction JL_17
        Groups: jump
        0x8079a5d:  jl      0x8079a62
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A5D, "|\x03")
        cpu.EIP = 0x8079A5D
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079A5D:0x8079A5F], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134716002)

    def test_JL_18(self):
        """Instruction JL_18
        Groups: jump
        0x807aee5:  jl      0x807aeea
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEE5, "|\x03")
        cpu.EIP = 0x807AEE5
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AEE5:0x807AEE7], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721255)

    def test_JL_19(self):
        """Instruction JL_19
        Groups: jump
        0x8079adb:  jl      0x8079ae0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079ADB, "|\x03")
        cpu.EIP = 0x8079ADB
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079ADB:0x8079ADD], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134716128)

    def test_JL_2(self):
        """Instruction JL_2
        Groups: jump
        0x807aef7:  jl      0x807aefc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEF7, "|\x03")
        cpu.EIP = 0x807AEF7
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AEF7:0x807AEF9], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721273)

    def test_JL_20(self):
        """Instruction JL_20
        Groups: jump
        0x807af63:  jl      0x807af68
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF63, "|\x03")
        cpu.EIP = 0x807AF63
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AF63:0x807AF65], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721384)

    def test_JL_21(self):
        """Instruction JL_21
        Groups: jump
        0x8079a15:  jl      0x8079a1a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A15, "|\x03")
        cpu.EIP = 0x8079A15
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079A15:0x8079A17], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134715927)

    def test_JL_3(self):
        """Instruction JL_3
        Groups: jump
        0xf7ff41c4: jl      0xf7ff41b9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41C4, "|\xf3")
        cpu.EIP = 0xF7FF41C4
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF41C4:0xF7FF41C6], [b"|", b"\xf3"])
        self.assertEqual(cpu.EIP, 4160700870)

    def test_JL_4(self):
        """Instruction JL_4
        Groups: jump
        0x807afbd:  jl      0x807afc2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AFBD, "|\x03")
        cpu.EIP = 0x807AFBD
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AFBD:0x807AFBF], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721474)

    def test_JL_5(self):
        """Instruction JL_5
        Groups: jump
        0x8079ac0:  jl      0x8079ac5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079AC0, "|\x03")
        cpu.EIP = 0x8079AC0
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079AC0:0x8079AC2], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134716101)

    def test_JL_6(self):
        """Instruction JL_6
        Groups: jump
        0x8079a9c:  jl      0x8079aa1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A9C, "|\x03")
        cpu.EIP = 0x8079A9C
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079A9C:0x8079A9E], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134716065)

    def test_JL_7(self):
        """Instruction JL_7
        Groups: jump
        0x807af75:  jl      0x807af7a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF75, "|\x03")
        cpu.EIP = 0x807AF75
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AF75:0x807AF77], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721402)

    def test_JL_8(self):
        """Instruction JL_8
        Groups: jump
        0x807af90:  jl      0x807af95
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF90, "|\x03")
        cpu.EIP = 0x807AF90
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AF90:0x807AF92], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721429)

    def test_JL_9(self):
        """Instruction JL_9
        Groups: jump
        0x807aed3:  jl      0x807aed8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AED3, "|\x03")
        cpu.EIP = 0x807AED3
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807AED3:0x807AED5], [b"|", b"\x03"])
        self.assertEqual(cpu.EIP, 134721237)

    def test_JMP_1(self):
        """Instruction JMP_1
        Groups: jump
        0xf7fe7445: jmp     0xf7fe7350
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7445, "\xe9\x06\xff\xff\xff")
        cpu.EIP = 0xF7FE7445
        cpu.execute()

        self.assertEqual(mem[0xF7FE7445:0xF7FE744A], [b"\xe9", b"\x06", b"\xff", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160648016)

    def test_JMP_10(self):
        """Instruction JMP_10
        Groups: jump
        0xf7ff0fa7: jmp     0xf7ff0e58
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0FA7, "\xe9\xac\xfe\xff\xff")
        cpu.EIP = 0xF7FF0FA7
        cpu.execute()

        self.assertEqual(mem[0xF7FF0FA7:0xF7FF0FAC], [b"\xe9", b"\xac", b"\xfe", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160687704)

    def test_JMP_11(self):
        """Instruction JMP_11
        Groups: jump
        0x807ad1b:  jmp     0x807ad1e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD1B, "\xeb\x01")
        cpu.EIP = 0x807AD1B
        cpu.execute()

        self.assertEqual(mem[0x807AD1B:0x807AD1D], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134720798)

    def test_JMP_12(self):
        """Instruction JMP_12
        Groups: jump
        0x8079c2d:  jmp     0x8079c30
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C2D, "\xeb\x01")
        cpu.EIP = 0x8079C2D
        cpu.execute()

        self.assertEqual(mem[0x8079C2D:0x8079C2F], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134716464)

    def test_JMP_13(self):
        """Instruction JMP_13
        Groups: jump
        0xf7fe571c: jmp     0xf7fe5731
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE571C, "\xeb\x13")
        cpu.EIP = 0xF7FE571C
        cpu.execute()

        self.assertEqual(mem[0xF7FE571C:0xF7FE571E], [b"\xeb", b"\x13"])
        self.assertEqual(cpu.EIP, 4160640817)

    def test_JMP_14(self):
        """Instruction JMP_14
        Groups: not64bitmode, jump
        0xf7ff0e4a: jmp     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0E4A, "\xff\xe2")
        cpu.EIP = 0xF7FF0E4A
        cpu.EDX = 0xF7FF1018
        cpu.execute()

        self.assertEqual(mem[0xF7FF0E4A:0xF7FF0E4C], [b"\xff", b"\xe2"])
        self.assertEqual(cpu.EIP, 4160688152)
        self.assertEqual(cpu.EDX, 4160688152)

    def test_JMP_15(self):
        """Instruction JMP_15
        Groups: not64bitmode, jump
        0xf7fdc820: jmp     dword ptr [ebx + 0x14]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FDC820, "\xff\xa3\x14\x00\x00\x00")
        mem.write(0xF7FFD014, "\xa0\x16\xff\xf7")
        cpu.EIP = 0xF7FDC820
        cpu.EBX = 0xF7FFD000
        cpu.execute()

        self.assertEqual(
            mem[0xF7FDC820:0xF7FDC826], [b"\xff", b"\xa3", b"\x14", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xF7FFD014:0xF7FFD018], [b"\xa0", b"\x16", b"\xff", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160689824)
        self.assertEqual(cpu.EBX, 4160737280)

    def test_JMP_16(self):
        """Instruction JMP_16
        Groups: jump
        0x8079830:  jmp     0x8079833
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079830, "\xeb\x01")
        cpu.EIP = 0x8079830
        cpu.execute()

        self.assertEqual(mem[0x8079830:0x8079832], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134715443)

    def test_JMP_17(self):
        """Instruction JMP_17
        Groups: jump
        0xf7fe74a5: jmp     0xf7fe7350
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE74A5, "\xe9\xa6\xfe\xff\xff")
        cpu.EIP = 0xF7FE74A5
        cpu.execute()

        self.assertEqual(mem[0xF7FE74A5:0xF7FE74AA], [b"\xe9", b"\xa6", b"\xfe", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160648016)

    def test_JMP_18(self):
        """Instruction JMP_18
        Groups: jump
        0xf7fe555e: jmp     0xf7fe4fa0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE555E, "\xe9=\xfa\xff\xff")
        cpu.EIP = 0xF7FE555E
        cpu.execute()

        self.assertEqual(mem[0xF7FE555E:0xF7FE5563], [b"\xe9", b"=", b"\xfa", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160638880)

    def test_JMP_19(self):
        """Instruction JMP_19
        Groups: jump
        0xf7fe7445: jmp     0xf7fe7350
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7445, "\xe9\x06\xff\xff\xff")
        cpu.EIP = 0xF7FE7445
        cpu.execute()

        self.assertEqual(mem[0xF7FE7445:0xF7FE744A], [b"\xe9", b"\x06", b"\xff", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160648016)

    def test_JMP_2(self):
        """Instruction JMP_2
        Groups: jump
        0x8079912:  jmp     0x8079915
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079912, "\xeb\x01")
        cpu.EIP = 0x8079912
        cpu.execute()

        self.assertEqual(mem[0x8079912:0x8079914], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134715669)

    def test_JMP_20(self):
        """Instruction JMP_20
        Groups: jump
        0xf7fe571c: jmp     0xf7fe5731
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE571C, "\xeb\x13")
        cpu.EIP = 0xF7FE571C
        cpu.execute()

        self.assertEqual(mem[0xF7FE571C:0xF7FE571E], [b"\xeb", b"\x13"])
        self.assertEqual(cpu.EIP, 4160640817)

    def test_JMP_21(self):
        """Instruction JMP_21
        Groups: jump
        0x807af15:  jmp     0x807af18
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF15, "\xeb\x01")
        cpu.EIP = 0x807AF15
        cpu.execute()

        self.assertEqual(mem[0x807AF15:0x807AF17], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134721304)

    def test_JMP_3(self):
        """Instruction JMP_3
        Groups: not64bitmode, jump
        0xf7fe733e: jmp     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE733E, "\xff\xe0")
        cpu.EIP = 0xF7FE733E
        cpu.EAX = 0xF7FE7440
        cpu.execute()

        self.assertEqual(mem[0xF7FE733E:0xF7FE7340], [b"\xff", b"\xe0"])
        self.assertEqual(cpu.EIP, 4160648256)
        self.assertEqual(cpu.EAX, 4160648256)

    def test_JMP_4(self):
        """Instruction JMP_4
        Groups: jump
        0x8079dc3:  jmp     0x8079dc6
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079DC3, "\xeb\x01")
        cpu.EIP = 0x8079DC3
        cpu.execute()

        self.assertEqual(mem[0x8079DC3:0x8079DC5], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134716870)

    def test_JMP_5(self):
        """Instruction JMP_5
        Groups: jump
        0x807a0b0:  jmp     0x807a0b3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A0B0, "\xeb\x01")
        cpu.EIP = 0x807A0B0
        cpu.execute()

        self.assertEqual(mem[0x807A0B0:0x807A0B2], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134717619)

    def test_JMP_6(self):
        """Instruction JMP_6
        Groups: jump
        0x807ab97:  jmp     0x807ab9a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB97, "\xeb\x01")
        cpu.EIP = 0x807AB97
        cpu.execute()

        self.assertEqual(mem[0x807AB97:0x807AB99], [b"\xeb", b"\x01"])
        self.assertEqual(cpu.EIP, 134720410)

    def test_JMP_7(self):
        """Instruction JMP_7
        Groups: not64bitmode, jump
        0xf7fe733e: jmp     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE733E, "\xff\xe0")
        cpu.EIP = 0xF7FE733E
        cpu.EAX = 0xF7FE7440
        cpu.execute()

        self.assertEqual(mem[0xF7FE733E:0xF7FE7340], [b"\xff", b"\xe0"])
        self.assertEqual(cpu.EIP, 4160648256)
        self.assertEqual(cpu.EAX, 4160648256)

    def test_JMP_8(self):
        """Instruction JMP_8
        Groups: not64bitmode, jump
        0xf7fe733e: jmp     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE733E, "\xff\xe0")
        cpu.EIP = 0xF7FE733E
        cpu.EAX = 0xF7FE74A0
        cpu.execute()

        self.assertEqual(mem[0xF7FE733E:0xF7FE7340], [b"\xff", b"\xe0"])
        self.assertEqual(cpu.EIP, 4160648352)
        self.assertEqual(cpu.EAX, 4160648352)

    def test_JMP_9(self):
        """Instruction JMP_9
        Groups: jump
        0xf7fe7445: jmp     0xf7fe7350
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7445, "\xe9\x06\xff\xff\xff")
        cpu.EIP = 0xF7FE7445
        cpu.execute()

        self.assertEqual(mem[0xF7FE7445:0xF7FE744A], [b"\xe9", b"\x06", b"\xff", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160648016)

    def test_JNE_1(self):
        """Instruction JNE_1
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE71B0:0xF7FE71B6], [b"\x0f", b"\x85", b"\xfe", b"\x0c", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160647606)

    def test_JNE_10(self):
        """Instruction JNE_10
        Groups: jump
        0xf7ff4222: jne     0xf7ff4457
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4222, "\x0f\x85/\x02\x00\x00")
        cpu.EIP = 0xF7FF4222
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF4222:0xF7FF4228], [b"\x0f", b"\x85", b"/", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160700968)

    def test_JNE_11(self):
        """Instruction JNE_11
        Groups: jump
        0xf7fe54f6: jne     0xf7fe555a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54F6, "ub")
        cpu.EIP = 0xF7FE54F6
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54F6:0xF7FE54F8], [b"u", b"b"])
        self.assertEqual(cpu.EIP, 4160640346)

    def test_JNE_12(self):
        """Instruction JNE_12
        Groups: jump
        0xf7ff3e72: jne     0xf7ff3e68
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E72, "u\xf4")
        cpu.EIP = 0xF7FF3E72
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E72:0xF7FF3E74], [b"u", b"\xf4"])
        self.assertEqual(cpu.EIP, 4160700008)

    def test_JNE_13(self):
        """Instruction JNE_13
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE71B0:0xF7FE71B6], [b"\x0f", b"\x85", b"\xfe", b"\x0c", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160647606)

    def test_JNE_14(self):
        """Instruction JNE_14
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE71B0:0xF7FE71B6], [b"\x0f", b"\x85", b"\xfe", b"\x0c", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160647606)

    def test_JNE_15(self):
        """Instruction JNE_15
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6C:0xF7FF3E6E], [b"u", b"\t"])
        self.assertEqual(cpu.EIP, 4160700014)

    def test_JNE_16(self):
        """Instruction JNE_16
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE71B0:0xF7FE71B6], [b"\x0f", b"\x85", b"\xfe", b"\x0c", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160647606)

    def test_JNE_17(self):
        """Instruction JNE_17
        Groups: jump
        0xf7fe56b1: jne     0xf7fe56a0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56B1, "u\xed")
        cpu.EIP = 0xF7FE56B1
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE56B1:0xF7FE56B3], [b"u", b"\xed"])
        self.assertEqual(cpu.EIP, 4160640691)

    def test_JNE_18(self):
        """Instruction JNE_18
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6C:0xF7FF3E6E], [b"u", b"\t"])
        self.assertEqual(cpu.EIP, 4160700014)

    def test_JNE_19(self):
        """Instruction JNE_19
        Groups: jump
        0xf7ff0b7e: jne     0xf7ff0a90
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0B7E, "\x0f\x85\x0c\xff\xff\xff")
        cpu.EIP = 0xF7FF0B7E
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FF0B7E:0xF7FF0B84], [b"\x0f", b"\x85", b"\x0c", b"\xff", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.EIP, 4160686980)

    def test_JNE_2(self):
        """Instruction JNE_2
        Groups: jump
        0xf7ff3e72: jne     0xf7ff3e68
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E72, "u\xf4")
        cpu.EIP = 0xF7FF3E72
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E72:0xF7FF3E74], [b"u", b"\xf4"])
        self.assertEqual(cpu.EIP, 4160700008)

    def test_JNE_20(self):
        """Instruction JNE_20
        Groups: jump
        0xf7fe4f3f: jne     0xf7fe5483
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F3F, "\x0f\x85>\x05\x00\x00")
        cpu.EIP = 0xF7FE4F3F
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4F3F:0xF7FE4F45], [b"\x0f", b"\x85", b">", b"\x05", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160638789)

    def test_JNE_21(self):
        """Instruction JNE_21
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6C:0xF7FF3E6E], [b"u", b"\t"])
        self.assertEqual(cpu.EIP, 4160700014)

    def test_JNE_3(self):
        """Instruction JNE_3
        Groups: jump
        0xf7fe8ab3: jne     0xf7fe9164
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.write(0xF7FE8AB3, "\x0f\x85\xab\x06\x00\x00")
        cpu.EIP = 0xF7FE8AB3
        cpu.ZF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE8AB3:0xF7FE8AB9], [b"\x0f", b"\x85", b"\xab", b"\x06", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160655716)

    def test_JNE_4(self):
        """Instruction JNE_4
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E6C:0xF7FF3E6E], [b"u", b"\t"])
        self.assertEqual(cpu.EIP, 4160700014)

    def test_JNE_5(self):
        """Instruction JNE_5
        Groups: jump
        0xf7fe1e7c: jne     0xf7fe2a9e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.write(0xF7FE1E7C, "\x0f\x85\x1c\x0c\x00\x00")
        cpu.EIP = 0xF7FE1E7C
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE1E7C:0xF7FE1E82], [b"\x0f", b"\x85", b"\x1c", b"\x0c", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160626306)

    def test_JNE_6(self):
        """Instruction JNE_6
        Groups: jump
        0xf7fe7275: jne     0xf7fe7288
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7275, "u\x11")
        cpu.EIP = 0xF7FE7275
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE7275:0xF7FE7277], [b"u", b"\x11"])
        self.assertEqual(cpu.EIP, 4160647799)

    def test_JNE_7(self):
        """Instruction JNE_7
        Groups: jump
        0xf7fec1e0: jne     0xf7fec168
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1E0, "u\x86")
        cpu.EIP = 0xF7FEC1E0
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FEC1E0:0xF7FEC1E2], [b"u", b"\x86"])
        self.assertEqual(cpu.EIP, 4160668130)

    def test_JNE_8(self):
        """Instruction JNE_8
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE71B0:0xF7FE71B6], [b"\x0f", b"\x85", b"\xfe", b"\x0c", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160647606)

    def test_JNE_9(self):
        """Instruction JNE_9
        Groups: jump
        0xf7ff092d: jne     0xf7ff099c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF092D, "um")
        cpu.EIP = 0xF7FF092D
        cpu.ZF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF092D:0xF7FF092F], [b"u", b"m"])
        self.assertEqual(cpu.EIP, 4160686383)

    def test_JNO_1(self):
        """Instruction JNO_1
        Groups: jump
        0x807bb6f:  jno     0x807bb74
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB6F, "q\x03")
        cpu.EIP = 0x807BB6F
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB6F:0x807BB71], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724468)

    def test_JNO_10(self):
        """Instruction JNO_10
        Groups: jump
        0x807baa9:  jno     0x807baae
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BAA9, "q\x03")
        cpu.EIP = 0x807BAA9
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BAA9:0x807BAAB], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724270)

    def test_JNO_11(self):
        """Instruction JNO_11
        Groups: jump
        0x807bb9c:  jno     0x807bba1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB9C, "q\x03")
        cpu.EIP = 0x807BB9C
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB9C:0x807BB9E], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724513)

    def test_JNO_12(self):
        """Instruction JNO_12
        Groups: jump
        0x807bb8a:  jno     0x807bb8f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB8A, "q\x03")
        cpu.EIP = 0x807BB8A
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB8A:0x807BB8C], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724495)

    def test_JNO_13(self):
        """Instruction JNO_13
        Groups: jump
        0x807bb5d:  jno     0x807bb62
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB5D, "q\x03")
        cpu.EIP = 0x807BB5D
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB5D:0x807BB5F], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724450)

    def test_JNO_14(self):
        """Instruction JNO_14
        Groups: jump
        0x807baa0:  jno     0x807baa5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BAA0, "q\x03")
        cpu.EIP = 0x807BAA0
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BAA0:0x807BAA2], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724261)

    def test_JNO_15(self):
        """Instruction JNO_15
        Groups: jump
        0x807bb78:  jno     0x807bb7d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB78, "q\x03")
        cpu.EIP = 0x807BB78
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB78:0x807BB7A], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724477)

    def test_JNO_16(self):
        """Instruction JNO_16
        Groups: jump
        0x807bb15:  jno     0x807bb1a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB15, "q\x03")
        cpu.EIP = 0x807BB15
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB15:0x807BB17], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724378)

    def test_JNO_17(self):
        """Instruction JNO_17
        Groups: jump
        0x807bb66:  jno     0x807bb6b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB66, "q\x03")
        cpu.EIP = 0x807BB66
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB66:0x807BB68], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724459)

    def test_JNO_18(self):
        """Instruction JNO_18
        Groups: jump
        0x807bb54:  jno     0x807bb59
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB54, "q\x03")
        cpu.EIP = 0x807BB54
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB54:0x807BB56], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724441)

    def test_JNO_19(self):
        """Instruction JNO_19
        Groups: jump
        0x807bb03:  jno     0x807bb08
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB03, "q\x03")
        cpu.EIP = 0x807BB03
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB03:0x807BB05], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724360)

    def test_JNO_2(self):
        """Instruction JNO_2
        Groups: jump
        0x807ba85:  jno     0x807ba8a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BA85, "q\x03")
        cpu.EIP = 0x807BA85
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BA85:0x807BA87], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724234)

    def test_JNO_20(self):
        """Instruction JNO_20
        Groups: jump
        0x807bacd:  jno     0x807bad2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BACD, "q\x03")
        cpu.EIP = 0x807BACD
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BACD:0x807BACF], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724306)

    def test_JNO_21(self):
        """Instruction JNO_21
        Groups: jump
        0x807bb0c:  jno     0x807bb11
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB0C, "q\x03")
        cpu.EIP = 0x807BB0C
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB0C:0x807BB0E], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724369)

    def test_JNO_3(self):
        """Instruction JNO_3
        Groups: jump
        0x807bb39:  jno     0x807bb3e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB39, "q\x03")
        cpu.EIP = 0x807BB39
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB39:0x807BB3B], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724414)

    def test_JNO_4(self):
        """Instruction JNO_4
        Groups: jump
        0x807bb30:  jno     0x807bb35
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB30, "q\x03")
        cpu.EIP = 0x807BB30
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB30:0x807BB32], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724405)

    def test_JNO_5(self):
        """Instruction JNO_5
        Groups: jump
        0x807bb4b:  jno     0x807bb50
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB4B, "q\x03")
        cpu.EIP = 0x807BB4B
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB4B:0x807BB4D], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724432)

    def test_JNO_6(self):
        """Instruction JNO_6
        Groups: jump
        0x807badf:  jno     0x807bae4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BADF, "q\x03")
        cpu.EIP = 0x807BADF
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BADF:0x807BAE1], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724324)

    def test_JNO_7(self):
        """Instruction JNO_7
        Groups: jump
        0x807babb:  jno     0x807bac0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BABB, "q\x03")
        cpu.EIP = 0x807BABB
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BABB:0x807BABD], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724288)

    def test_JNO_8(self):
        """Instruction JNO_8
        Groups: jump
        0x807bb81:  jno     0x807bb86
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB81, "q\x03")
        cpu.EIP = 0x807BB81
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB81:0x807BB83], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724486)

    def test_JNO_9(self):
        """Instruction JNO_9
        Groups: jump
        0x807bb1e:  jno     0x807bb23
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB1E, "q\x03")
        cpu.EIP = 0x807BB1E
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB1E:0x807BB20], [b"q", b"\x03"])
        self.assertEqual(cpu.EIP, 134724387)

    def test_JNP_1(self):
        """Instruction JNP_1
        Groups: jump
        0x807b006:  jnp     0x807b00b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B006, "{\x03")
        cpu.EIP = 0x807B006
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B006:0x807B008], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721544)

    def test_JNP_10(self):
        """Instruction JNP_10
        Groups: jump
        0x807aea5:  jnp     0x807aeaa
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEA5, "{\x03")
        cpu.EIP = 0x807AEA5
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807AEA5:0x807AEA7], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721191)

    def test_JNP_11(self):
        """Instruction JNP_11
        Groups: jump
        0x807b09f:  jnp     0x807b0a4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B09F, "{\x03")
        cpu.EIP = 0x807B09F
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B09F:0x807B0A1], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721700)

    def test_JNP_12(self):
        """Instruction JNP_12
        Groups: jump
        0x807aff4:  jnp     0x807aff9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AFF4, "{\x03")
        cpu.EIP = 0x807AFF4
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807AFF4:0x807AFF6], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721529)

    def test_JNP_13(self):
        """Instruction JNP_13
        Groups: jump
        0x807ae39:  jnp     0x807ae3e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE39, "{\x03")
        cpu.EIP = 0x807AE39
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807AE39:0x807AE3B], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721083)

    def test_JNP_14(self):
        """Instruction JNP_14
        Groups: jump
        0x807ae27:  jnp     0x807ae2c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE27, "{\x03")
        cpu.EIP = 0x807AE27
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807AE27:0x807AE29], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721068)

    def test_JNP_15(self):
        """Instruction JNP_15
        Groups: jump
        0x807b072:  jnp     0x807b077
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B072, "{\x03")
        cpu.EIP = 0x807B072
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B072:0x807B074], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721652)

    def test_JNP_16(self):
        """Instruction JNP_16
        Groups: jump
        0x807b057:  jnp     0x807b05c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B057, "{\x03")
        cpu.EIP = 0x807B057
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B057:0x807B059], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721628)

    def test_JNP_17(self):
        """Instruction JNP_17
        Groups: jump
        0x807ae15:  jnp     0x807ae1a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE15, "{\x03")
        cpu.EIP = 0x807AE15
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807AE15:0x807AE17], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721047)

    def test_JNP_18(self):
        """Instruction JNP_18
        Groups: jump
        0x807b021:  jnp     0x807b026
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B021, "{\x03")
        cpu.EIP = 0x807B021
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B021:0x807B023], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721571)

    def test_JNP_19(self):
        """Instruction JNP_19
        Groups: jump
        0x807ae9c:  jnp     0x807aea1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE9C, "{\x03")
        cpu.EIP = 0x807AE9C
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807AE9C:0x807AE9E], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721185)

    def test_JNP_2(self):
        """Instruction JNP_2
        Groups: jump
        0x807b0de:  jnp     0x807b0e3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B0DE, "{\x03")
        cpu.EIP = 0x807B0DE
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B0DE:0x807B0E0], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721760)

    def test_JNP_20(self):
        """Instruction JNP_20
        Groups: jump
        0x807ad97:  jnp     0x807ad9c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD97, "{\x03")
        cpu.EIP = 0x807AD97
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807AD97:0x807AD99], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134720924)

    def test_JNP_21(self):
        """Instruction JNP_21
        Groups: jump
        0x807add6:  jnp     0x807addb
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ADD6, "{\x03")
        cpu.EIP = 0x807ADD6
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807ADD6:0x807ADD8], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134720984)

    def test_JNP_3(self):
        """Instruction JNP_3
        Groups: jump
        0x807b102:  jnp     0x807b107
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B102, "{\x03")
        cpu.EIP = 0x807B102
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B102:0x807B104], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721796)

    def test_JNP_4(self):
        """Instruction JNP_4
        Groups: jump
        0x807addf:  jnp     0x807ade4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ADDF, "{\x03")
        cpu.EIP = 0x807ADDF
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807ADDF:0x807ADE1], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134720996)

    def test_JNP_5(self):
        """Instruction JNP_5
        Groups: jump
        0x807b096:  jnp     0x807b09b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B096, "{\x03")
        cpu.EIP = 0x807B096
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B096:0x807B098], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721688)

    def test_JNP_6(self):
        """Instruction JNP_6
        Groups: jump
        0x807ae81:  jnp     0x807ae86
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE81, "{\x03")
        cpu.EIP = 0x807AE81
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807AE81:0x807AE83], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721155)

    def test_JNP_7(self):
        """Instruction JNP_7
        Groups: jump
        0x807b0cc:  jnp     0x807b0d1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B0CC, "{\x03")
        cpu.EIP = 0x807B0CC
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B0CC:0x807B0CE], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721745)

    def test_JNP_8(self):
        """Instruction JNP_8
        Groups: jump
        0x807b08d:  jnp     0x807b092
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B08D, "{\x03")
        cpu.EIP = 0x807B08D
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B08D:0x807B08F], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721679)

    def test_JNP_9(self):
        """Instruction JNP_9
        Groups: jump
        0x807ae93:  jnp     0x807ae98
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE93, "{\x03")
        cpu.EIP = 0x807AE93
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807AE93:0x807AE95], [b"{", b"\x03"])
        self.assertEqual(cpu.EIP, 134721176)

    def test_JNS_1(self):
        """Instruction JNS_1
        Groups: jump
        0x807aceb:  jns     0x807acf0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACEB, "y\x03")
        cpu.EIP = 0x807ACEB
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807ACEB:0x807ACED], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720752)

    def test_JNS_10(self):
        """Instruction JNS_10
        Groups: jump
        0x807ad7b:  jns     0x807ad80
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD7B, "y\x03")
        cpu.EIP = 0x807AD7B
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD7B:0x807AD7D], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720893)

    def test_JNS_11(self):
        """Instruction JNS_11
        Groups: jump
        0x807ad4e:  jns     0x807ad53
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD4E, "y\x03")
        cpu.EIP = 0x807AD4E
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD4E:0x807AD50], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720848)

    def test_JNS_12(self):
        """Instruction JNS_12
        Groups: jump
        0x807acd0:  jns     0x807acd5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACD0, "y\x03")
        cpu.EIP = 0x807ACD0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807ACD0:0x807ACD2], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720725)

    def test_JNS_13(self):
        """Instruction JNS_13
        Groups: jump
        0xf7ff0826: jns     0xf7ff07e8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0826, "y\xc0")
        cpu.EIP = 0xF7FF0826
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF0826:0xF7FF0828], [b"y", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160686056)

    def test_JNS_14(self):
        """Instruction JNS_14
        Groups: jump
        0x807ad33:  jns     0x807ad38
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD33, "y\x03")
        cpu.EIP = 0x807AD33
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD33:0x807AD35], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720821)

    def test_JNS_15(self):
        """Instruction JNS_15
        Groups: jump
        0x807ac88:  jns     0x807ac8d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC88, "y\x03")
        cpu.EIP = 0x807AC88
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AC88:0x807AC8A], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720653)

    def test_JNS_16(self):
        """Instruction JNS_16
        Groups: jump
        0x807ad3c:  jns     0x807ad41
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD3C, "y\x03")
        cpu.EIP = 0x807AD3C
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD3C:0x807AD3E], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720830)

    def test_JNS_17(self):
        """Instruction JNS_17
        Groups: jump
        0x807acfd:  jns     0x807ad02
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACFD, "y\x03")
        cpu.EIP = 0x807ACFD
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807ACFD:0x807ACFF], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720767)

    def test_JNS_18(self):
        """Instruction JNS_18
        Groups: jump
        0xf7ff0826: jns     0xf7ff07e8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0826, "y\xc0")
        cpu.EIP = 0xF7FF0826
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF0826:0xF7FF0828], [b"y", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160686120)

    def test_JNS_19(self):
        """Instruction JNS_19
        Groups: jump
        0x807ac9a:  jns     0x807ac9f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC9A, "y\x03")
        cpu.EIP = 0x807AC9A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AC9A:0x807AC9C], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720671)

    def test_JNS_2(self):
        """Instruction JNS_2
        Groups: jump
        0x807ac91:  jns     0x807ac96
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC91, "y\x03")
        cpu.EIP = 0x807AC91
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AC91:0x807AC93], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720662)

    def test_JNS_20(self):
        """Instruction JNS_20
        Groups: jump
        0x807ad72:  jns     0x807ad77
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD72, "y\x03")
        cpu.EIP = 0x807AD72
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD72:0x807AD74], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720884)

    def test_JNS_21(self):
        """Instruction JNS_21
        Groups: jump
        0x807ad2a:  jns     0x807ad2f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD2A, "y\x03")
        cpu.EIP = 0x807AD2A
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD2A:0x807AD2C], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720812)

    def test_JNS_3(self):
        """Instruction JNS_3
        Groups: jump
        0x807ad0f:  jns     0x807ad14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD0F, "y\x03")
        cpu.EIP = 0x807AD0F
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD0F:0x807AD11], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720785)

    def test_JNS_4(self):
        """Instruction JNS_4
        Groups: jump
        0x807aca3:  jns     0x807aca8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACA3, "y\x03")
        cpu.EIP = 0x807ACA3
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807ACA3:0x807ACA5], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720680)

    def test_JNS_5(self):
        """Instruction JNS_5
        Groups: jump
        0x807ace2:  jns     0x807ace7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACE2, "y\x03")
        cpu.EIP = 0x807ACE2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807ACE2:0x807ACE4], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720743)

    def test_JNS_6(self):
        """Instruction JNS_6
        Groups: jump
        0x807ad84:  jns     0x807ad89
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD84, "y\x03")
        cpu.EIP = 0x807AD84
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD84:0x807AD86], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720902)

    def test_JNS_7(self):
        """Instruction JNS_7
        Groups: jump
        0xf7ff0826: jns     0xf7ff07e8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0826, "y\xc0")
        cpu.EIP = 0xF7FF0826
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF0826:0xF7FF0828], [b"y", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160686120)

    def test_JNS_8(self):
        """Instruction JNS_8
        Groups: jump
        0x807ac6d:  jns     0x807ac72
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC6D, "y\x03")
        cpu.EIP = 0x807AC6D
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AC6D:0x807AC6F], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720626)

    def test_JNS_9(self):
        """Instruction JNS_9
        Groups: jump
        0x807ad69:  jns     0x807ad6e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD69, "y\x03")
        cpu.EIP = 0x807AD69
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807AD69:0x807AD6B], [b"y", b"\x03"])
        self.assertEqual(cpu.EIP, 134720875)

    def test_JO_1(self):
        """Instruction JO_1
        Groups: jump
        0x8079c60:  jo      0x8079c65
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C60, "p\x03")
        cpu.EIP = 0x8079C60
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C60:0x8079C62], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716514)

    def test_JO_10(self):
        """Instruction JO_10
        Groups: jump
        0x8079c7b:  jo      0x8079c80
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C7B, "p\x03")
        cpu.EIP = 0x8079C7B
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C7B:0x8079C7D], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716541)

    def test_JO_11(self):
        """Instruction JO_11
        Groups: jump
        0x8079cd5:  jo      0x8079cda
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CD5, "p\x03")
        cpu.EIP = 0x8079CD5
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079CD5:0x8079CD7], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716631)

    def test_JO_12(self):
        """Instruction JO_12
        Groups: jump
        0x8079cba:  jo      0x8079cbf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CBA, "p\x03")
        cpu.EIP = 0x8079CBA
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079CBA:0x8079CBC], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716604)

    def test_JO_13(self):
        """Instruction JO_13
        Groups: jump
        0x8079cc3:  jo      0x8079cc8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CC3, "p\x03")
        cpu.EIP = 0x8079CC3
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079CC3:0x8079CC5], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716613)

    def test_JO_14(self):
        """Instruction JO_14
        Groups: jump
        0x8079ce7:  jo      0x8079cec
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CE7, "p\x03")
        cpu.EIP = 0x8079CE7
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079CE7:0x8079CE9], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716649)

    def test_JO_15(self):
        """Instruction JO_15
        Groups: jump
        0x8079c4e:  jo      0x8079c53
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C4E, "p\x03")
        cpu.EIP = 0x8079C4E
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C4E:0x8079C50], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716496)

    def test_JO_16(self):
        """Instruction JO_16
        Groups: jump
        0x8079c33:  jo      0x8079c38
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C33, "p\x03")
        cpu.EIP = 0x8079C33
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C33:0x8079C35], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716469)

    def test_JO_17(self):
        """Instruction JO_17
        Groups: jump
        0x8079c69:  jo      0x8079c6e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C69, "p\x03")
        cpu.EIP = 0x8079C69
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C69:0x8079C6B], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716523)

    def test_JO_18(self):
        """Instruction JO_18
        Groups: jump
        0x8079d0b:  jo      0x8079d10
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D0B, "p\x03")
        cpu.EIP = 0x8079D0B
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079D0B:0x8079D0D], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716685)

    def test_JO_19(self):
        """Instruction JO_19
        Groups: jump
        0x8079c96:  jo      0x8079c9b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C96, "p\x03")
        cpu.EIP = 0x8079C96
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C96:0x8079C98], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716568)

    def test_JO_2(self):
        """Instruction JO_2
        Groups: jump
        0x8079c9f:  jo      0x8079ca4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C9F, "p\x03")
        cpu.EIP = 0x8079C9F
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C9F:0x8079CA1], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716577)

    def test_JO_20(self):
        """Instruction JO_20
        Groups: jump
        0x8079d02:  jo      0x8079d07
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D02, "p\x03")
        cpu.EIP = 0x8079D02
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079D02:0x8079D04], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716676)

    def test_JO_21(self):
        """Instruction JO_21
        Groups: jump
        0x8079c72:  jo      0x8079c77
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C72, "p\x03")
        cpu.EIP = 0x8079C72
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C72:0x8079C74], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716532)

    def test_JO_3(self):
        """Instruction JO_3
        Groups: jump
        0x8079d1d:  jo      0x8079d22
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D1D, "p\x03")
        cpu.EIP = 0x8079D1D
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079D1D:0x8079D1F], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716703)

    def test_JO_4(self):
        """Instruction JO_4
        Groups: jump
        0x8079c45:  jo      0x8079c4a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C45, "p\x03")
        cpu.EIP = 0x8079C45
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C45:0x8079C47], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716487)

    def test_JO_5(self):
        """Instruction JO_5
        Groups: jump
        0x8079cde:  jo      0x8079ce3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CDE, "p\x03")
        cpu.EIP = 0x8079CDE
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079CDE:0x8079CE0], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716640)

    def test_JO_6(self):
        """Instruction JO_6
        Groups: jump
        0x8079ca8:  jo      0x8079cad
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CA8, "p\x03")
        cpu.EIP = 0x8079CA8
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079CA8:0x8079CAA], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716586)

    def test_JO_7(self):
        """Instruction JO_7
        Groups: jump
        0x8079c3c:  jo      0x8079c41
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C3C, "p\x03")
        cpu.EIP = 0x8079C3C
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C3C:0x8079C3E], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716478)

    def test_JO_8(self):
        """Instruction JO_8
        Groups: jump
        0x8079c84:  jo      0x8079c89
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C84, "p\x03")
        cpu.EIP = 0x8079C84
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079C84:0x8079C86], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716550)

    def test_JO_9(self):
        """Instruction JO_9
        Groups: jump
        0x8079d26:  jo      0x8079d2b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D26, "p\x03")
        cpu.EIP = 0x8079D26
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079D26:0x8079D28], [b"p", b"\x03"])
        self.assertEqual(cpu.EIP, 134716712)

    def test_JP_1(self):
        """Instruction JP_1
        Groups: jump
        0x807b2ab:  jp      0x807b2b0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2AB, "z\x03")
        cpu.EIP = 0x807B2AB
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B2AB:0x807B2AD], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722221)

    def test_JP_10(self):
        """Instruction JP_10
        Groups: jump
        0xf7ff3cc2: jp      0xf7ff3ced
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CC2, "z)")
        cpu.EIP = 0xF7FF3CC2
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3CC2:0xF7FF3CC4], [b"z", b")"])
        self.assertEqual(cpu.EIP, 4160699588)

    def test_JP_11(self):
        """Instruction JP_11
        Groups: jump
        0x8079887:  jp      0x807988c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079887, "z\x03")
        cpu.EIP = 0x8079887
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x8079887:0x8079889], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715532)

    def test_JP_12(self):
        """Instruction JP_12
        Groups: jump
        0x80797d3:  jp      0x80797d8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797D3, "z\x03")
        cpu.EIP = 0x80797D3
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x80797D3:0x80797D5], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715352)

    def test_JP_13(self):
        """Instruction JP_13
        Groups: jump
        0x807b299:  jp      0x807b29e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B299, "z\x03")
        cpu.EIP = 0x807B299
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B299:0x807B29B], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722206)

    def test_JP_14(self):
        """Instruction JP_14
        Groups: jump
        0xf7ff3cc2: jp      0xf7ff3ced
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CC2, "z)")
        cpu.EIP = 0xF7FF3CC2
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3CC2:0xF7FF3CC4], [b"z", b")"])
        self.assertEqual(cpu.EIP, 4160699588)

    def test_JP_15(self):
        """Instruction JP_15
        Groups: jump
        0x80797ca:  jp      0x80797cf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797CA, "z\x03")
        cpu.EIP = 0x80797CA
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x80797CA:0x80797CC], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715340)

    def test_JP_16(self):
        """Instruction JP_16
        Groups: jump
        0x80797dc:  jp      0x80797e1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797DC, "z\x03")
        cpu.EIP = 0x80797DC
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x80797DC:0x80797DE], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715361)

    def test_JP_17(self):
        """Instruction JP_17
        Groups: jump
        0x807b275:  jp      0x807b27a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B275, "z\x03")
        cpu.EIP = 0x807B275
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B275:0x807B277], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722170)

    def test_JP_18(self):
        """Instruction JP_18
        Groups: jump
        0x807b2cf:  jp      0x807b2d4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2CF, "z\x03")
        cpu.EIP = 0x807B2CF
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B2CF:0x807B2D1], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722257)

    def test_JP_19(self):
        """Instruction JP_19
        Groups: jump
        0x8079809:  jp      0x807980e
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079809, "z\x03")
        cpu.EIP = 0x8079809
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x8079809:0x807980B], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715403)

    def test_JP_2(self):
        """Instruction JP_2
        Groups: jump
        0x8079782:  jp      0x8079787
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079782, "z\x03")
        cpu.EIP = 0x8079782
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x8079782:0x8079784], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715268)

    def test_JP_20(self):
        """Instruction JP_20
        Groups: jump
        0x80797e5:  jp      0x80797ea
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797E5, "z\x03")
        cpu.EIP = 0x80797E5
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x80797E5:0x80797E7], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715367)

    def test_JP_21(self):
        """Instruction JP_21
        Groups: jump
        0x80797a6:  jp      0x80797ab
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797A6, "z\x03")
        cpu.EIP = 0x80797A6
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x80797A6:0x80797A8], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715304)

    def test_JP_3(self):
        """Instruction JP_3
        Groups: jump
        0x807b332:  jp      0x807b337
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B332, "z\x03")
        cpu.EIP = 0x807B332
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B332:0x807B334], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722359)

    def test_JP_4(self):
        """Instruction JP_4
        Groups: jump
        0x807b2d8:  jp      0x807b2dd
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2D8, "z\x03")
        cpu.EIP = 0x807B2D8
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B2D8:0x807B2DA], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722266)

    def test_JP_5(self):
        """Instruction JP_5
        Groups: jump
        0x8079875:  jp      0x807987a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079875, "z\x03")
        cpu.EIP = 0x8079875
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x8079875:0x8079877], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134715511)

    def test_JP_6(self):
        """Instruction JP_6
        Groups: jump
        0x807b248:  jp      0x807b24d
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B248, "z\x03")
        cpu.EIP = 0x807B248
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B248:0x807B24A], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722122)

    def test_JP_7(self):
        """Instruction JP_7
        Groups: jump
        0x807b2fc:  jp      0x807b301
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2FC, "z\x03")
        cpu.EIP = 0x807B2FC
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B2FC:0x807B2FE], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722302)

    def test_JP_8(self):
        """Instruction JP_8
        Groups: jump
        0x807b25a:  jp      0x807b25f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B25A, "z\x03")
        cpu.EIP = 0x807B25A
        cpu.PF = True
        cpu.execute()

        self.assertEqual(mem[0x807B25A:0x807B25C], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722143)

    def test_JP_9(self):
        """Instruction JP_9
        Groups: jump
        0x807b320:  jp      0x807b325
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B320, "z\x03")
        cpu.EIP = 0x807B320
        cpu.PF = False
        cpu.execute()

        self.assertEqual(mem[0x807B320:0x807B322], [b"z", b"\x03"])
        self.assertEqual(cpu.EIP, 134722338)

    def test_JS_1(self):
        """Instruction JS_1
        Groups: jump
        0x8079945:  js      0x807994a
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079945, "x\x03")
        cpu.EIP = 0x8079945
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8079945:0x8079947], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715722)

    def test_JS_10(self):
        """Instruction JS_10
        Groups: jump
        0x8079921:  js      0x8079926
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079921, "x\x03")
        cpu.EIP = 0x8079921
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8079921:0x8079923], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715683)

    def test_JS_11(self):
        """Instruction JS_11
        Groups: jump
        0xf7febaad: js      0xf7febaf0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBAAD, "xA")
        cpu.EIP = 0xF7FEBAAD
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FEBAAD:0xF7FEBAAF], [b"x", b"A"])
        self.assertEqual(cpu.EIP, 4160666287)

    def test_JS_12(self):
        """Instruction JS_12
        Groups: jump
        0x80798ac:  js      0x80798b1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798AC, "x\x03")
        cpu.EIP = 0x80798AC
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80798AC:0x80798AE], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715566)

    def test_JS_13(self):
        """Instruction JS_13
        Groups: jump
        0x80798c7:  js      0x80798cc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798C7, "x\x03")
        cpu.EIP = 0x80798C7
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80798C7:0x80798C9], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715593)

    def test_JS_14(self):
        """Instruction JS_14
        Groups: jump
        0xf7febac9: js      0xf7febad5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBAC9, "x\n")
        cpu.EIP = 0xF7FEBAC9
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FEBAC9:0xF7FEBACB], [b"x", b"\n"])
        self.assertEqual(cpu.EIP, 4160666315)

    def test_JS_15(self):
        """Instruction JS_15
        Groups: jump
        0xf7ff07ca: js      0xf7ff0838
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF07CA, "xl")
        cpu.EIP = 0xF7FF07CA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF07CA:0xF7FF07CC], [b"x", b"l"])
        self.assertEqual(cpu.EIP, 4160686028)

    def test_JS_16(self):
        """Instruction JS_16
        Groups: jump
        0xf7fe3ff8: js      0xf7fe4a54
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE3000, 0x1000, "rwx")
        mem.write(0xF7FE3FF8, "\x0f\x88V\n\x00\x00")
        cpu.EIP = 0xF7FE3FF8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE3FF8:0xF7FE3FFE], [b"\x0f", b"\x88", b"V", b"\n", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160634878)

    def test_JS_17(self):
        """Instruction JS_17
        Groups: jump
        0x80799b1:  js      0x80799b6
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80799B1, "x\x03")
        cpu.EIP = 0x80799B1
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x80799B1:0x80799B3], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715830)

    def test_JS_18(self):
        """Instruction JS_18
        Groups: jump
        0xf7fde25f: js      0xf7fe0077
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDE000, 0x1000, "rwx")
        mem.write(0xF7FDE25F, "\x0f\x88\x12\x1e\x00\x00")
        cpu.EIP = 0xF7FDE25F
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FDE25F:0xF7FDE265], [b"\x0f", b"\x88", b"\x12", b"\x1e", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160610917)

    def test_JS_19(self):
        """Instruction JS_19
        Groups: jump
        0x8079906:  js      0x807990b
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079906, "x\x03")
        cpu.EIP = 0x8079906
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8079906:0x8079908], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715656)

    def test_JS_2(self):
        """Instruction JS_2
        Groups: jump
        0xf7fe1dae: js      0xf7fe2be9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.write(0xF7FE1DAE, "\x0f\x885\x0e\x00\x00")
        cpu.EIP = 0xF7FE1DAE
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE1DAE:0xF7FE1DB4], [b"\x0f", b"\x88", b"5", b"\x0e", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160626100)

    def test_JS_20(self):
        """Instruction JS_20
        Groups: jump
        0x80799ba:  js      0x80799bf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80799BA, "x\x03")
        cpu.EIP = 0x80799BA
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x80799BA:0x80799BC], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715839)

    def test_JS_21(self):
        """Instruction JS_21
        Groups: jump
        0x807992a:  js      0x807992f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807992A, "x\x03")
        cpu.EIP = 0x807992A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807992A:0x807992C], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715692)

    def test_JS_3(self):
        """Instruction JS_3
        Groups: jump
        0x8079972:  js      0x8079977
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079972, "x\x03")
        cpu.EIP = 0x8079972
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8079972:0x8079974], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715767)

    def test_JS_4(self):
        """Instruction JS_4
        Groups: jump
        0x807990f:  js      0x8079914
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807990F, "x\x03")
        cpu.EIP = 0x807990F
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807990F:0x8079911], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715665)

    def test_JS_5(self):
        """Instruction JS_5
        Groups: jump
        0x807993c:  js      0x8079941
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807993C, "x\x03")
        cpu.EIP = 0x807993C
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x807993C:0x807993E], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715713)

    def test_JS_6(self):
        """Instruction JS_6
        Groups: jump
        0x8079984:  js      0x8079989
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079984, "x\x03")
        cpu.EIP = 0x8079984
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8079984:0x8079986], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715785)

    def test_JS_7(self):
        """Instruction JS_7
        Groups: jump
        0xf7eaa01c: js      0xf7eaa0f5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA01C, "\x0f\x88\xd3\x00\x00\x00")
        cpu.EIP = 0xF7EAA01C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7EAA01C:0xF7EAA022], [b"\x0f", b"\x88", b"\xd3", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4159348770)

    def test_JS_8(self):
        """Instruction JS_8
        Groups: jump
        0x8079957:  js      0x807995c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079957, "x\x03")
        cpu.EIP = 0x8079957
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8079957:0x8079959], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715740)

    def test_JS_9(self):
        """Instruction JS_9
        Groups: jump
        0x80798e2:  js      0x80798e7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798E2, "x\x03")
        cpu.EIP = 0x80798E2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80798E2:0x80798E4], [b"x", b"\x03"])
        self.assertEqual(cpu.EIP, 134715620)

    def test_LAHF_1(self):
        """Instruction LAHF_1
        Groups:
        0x804d64c:  lahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D64C, "\x9f")
        cpu.EIP = 0x804D64C
        cpu.AF = False
        cpu.AH = 0xB6
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D64C:0x804D64D], [b"\x9f"])
        self.assertEqual(cpu.EIP, 134534733)
        self.assertEqual(cpu.AH, 70)

    def test_LEAVE_1(self):
        """Instruction LEAVE_1
        Groups: not64bitmode
        0x805668e:  leave
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x2000, "rwx")
        mem.write(0x805668E, "\xc9")
        mem.write(0xFFFFB5FC, "\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0xFFFFC602, "\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x805668E
        cpu.EBP = 0xFFFFB600
        cpu.ESP = 0xFFFFC606
        cpu.execute()

        self.assertEqual(mem[0x805668E:0x805668F], [b"\xc9"])
        self.assertEqual(
            mem[0xFFFFB5FC:0xFFFFB605],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0xFFFFC602:0xFFFFC60B],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134571663)
        self.assertEqual(cpu.EBP, 0)
        self.assertEqual(cpu.ESP, 4294948356)

    def test_LEA_1(self):
        """Instruction LEA_1
        Groups: not64bitmode
        0xf7e2ea34: lea     edx, dword ptr [ebx + 0x40]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.mmap(0xF7FC0000, 0x1000, "rwx")
        mem.write(0xF7E2EA34, "\x8d\x93@\x00\x00\x00")
        mem.write(0xF7FC0040, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7E2EA34
        cpu.EDX = 0x0
        cpu.EBX = 0xF7FC0000
        cpu.execute()

        self.assertEqual(
            mem[0xF7E2EA34:0xF7E2EA3A], [b"\x8d", b"\x93", b"@", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0xF7FC0040:0xF7FC0044], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4158843450)
        self.assertEqual(cpu.EDX, 4160487488)
        self.assertEqual(cpu.EBX, 4160487424)

    def test_LEA_10(self):
        """Instruction LEA_10
        Groups: not64bitmode
        0xf7fe54ab: lea     eax, dword ptr [esp + 0x48]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE54AB, "\x8dD$H")
        mem.write(0xFFFFD338, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE54AB
        cpu.EAX = 0x741
        cpu.ESP = 0xFFFFD2F0
        cpu.execute()

        self.assertEqual(mem[0xF7FE54AB:0xF7FE54AF], [b"\x8d", b"D", b"$", b"H"])
        self.assertEqual(mem[0xFFFFD338:0xFFFFD33C], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160640175)
        self.assertEqual(cpu.ESP, 4294955760)
        self.assertEqual(cpu.EAX, 4294955832)

    def test_LEA_11(self):
        """Instruction LEA_11
        Groups: not64bitmode
        0xf7fe54a8: lea     esi, dword ptr [edx + eax*4]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E17000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E17598, "2&\x9e|")
        mem.write(0xF7FE54A8, "\x8d4\x82")
        cpu.EIP = 0xF7FE54A8
        cpu.EDX = 0xF7E1696C
        cpu.ESI = 0xF7FDA858
        cpu.EAX = 0x30B
        cpu.execute()

        self.assertEqual(mem[0xF7E17598:0xF7E1759C], [b"2", b"&", b"\x9e", b"|"])
        self.assertEqual(mem[0xF7FE54A8:0xF7FE54AB], [b"\x8d", b"4", b"\x82"])
        self.assertEqual(cpu.EIP, 4160640171)
        self.assertEqual(cpu.EDX, 4158744940)
        self.assertEqual(cpu.ESI, 4158748056)
        self.assertEqual(cpu.EAX, 779)

    def test_LEA_12(self):
        """Instruction LEA_12
        Groups: not64bitmode
        0xf7fe4e78: lea     eax, dword ptr [ebx - 0x55d4]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xF7FF7000, 0x1000, "rwx")
        mem.write(0xF7FE4E78, "\x8d\x83,\xaa\xff\xff")
        mem.write(0xF7FF7A2C, "symb")
        cpu.EIP = 0xF7FE4E78
        cpu.EBX = 0xF7FFD000
        cpu.EAX = 0x4802C4E
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4E78:0xF7FE4E7E], [b"\x8d", b"\x83", b",", b"\xaa", b"\xff", b"\xff"]
        )
        self.assertEqual(mem[0xF7FF7A2C:0xF7FF7A30], [b"s", b"y", b"m", b"b"])
        self.assertEqual(cpu.EIP, 4160638590)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.EAX, 4160715308)

    def test_LEA_13(self):
        """Instruction LEA_13
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        mem.write(0xFFFFD3F0, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE5705
        cpu.EBP = 0xFFFFD438
        cpu.ECX = 0xF7FDABA8
        cpu.execute()

        self.assertEqual(mem[0xF7FE5705:0xF7FE5708], [b"\x8d", b"M", b"\xb8"])
        self.assertEqual(mem[0xFFFFD3F0:0xFFFFD3F4], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160640776)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ECX, 4294956016)

    def test_LEA_14(self):
        """Instruction LEA_14
        Groups: not64bitmode
        0xf7fe894c: lea     edi, dword ptr [esp + 0x1f]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE894C, "\x8d|$\x1f")
        mem.write(0xFFFFD43F, "\x008\x18\x00")
        cpu.EIP = 0xF7FE894C
        cpu.EDI = 0x0
        cpu.ESP = 0xFFFFD420
        cpu.execute()

        self.assertEqual(mem[0xF7FE894C:0xF7FE8950], [b"\x8d", b"|", b"$", b"\x1f"])
        self.assertEqual(mem[0xFFFFD43F:0xFFFFD443], [b"\x00", b"8", b"\x18", b"\x00"])
        self.assertEqual(cpu.EIP, 4160653648)
        self.assertEqual(cpu.EDI, 4294956095)
        self.assertEqual(cpu.ESP, 4294956064)

    def test_LEA_15(self):
        """Instruction LEA_15
        Groups: not64bitmode
        0xf7fe54a8: lea     esi, dword ptr [edx + eax*4]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E18000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E182AC, "X\x05&\x87")
        mem.write(0xF7FE54A8, "\x8d4\x82")
        cpu.EIP = 0xF7FE54A8
        cpu.EDX = 0xF7E1696C
        cpu.ESI = 0xF7FDA858
        cpu.EAX = 0x650
        cpu.execute()

        self.assertEqual(mem[0xF7E182AC:0xF7E182B0], [b"X", b"\x05", b"&", b"\x87"])
        self.assertEqual(mem[0xF7FE54A8:0xF7FE54AB], [b"\x8d", b"4", b"\x82"])
        self.assertEqual(cpu.EIP, 4160640171)
        self.assertEqual(cpu.EDX, 4158744940)
        self.assertEqual(cpu.ESI, 4158751404)
        self.assertEqual(cpu.EAX, 1616)

    def test_LEA_16(self):
        """Instruction LEA_16
        Groups: not64bitmode
        0xf7fe0b41: lea     edx, dword ptr [edi + ebx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0B41, "\x8d\x14\x1f")
        mem.write(0xF7FE0B98, "\x8bu\xd0\x89")
        cpu.EIP = 0xF7FE0B41
        cpu.EDX = 0x2
        cpu.EDI = 0xFFFE3B98
        cpu.EBX = 0xF7FFD000
        cpu.execute()

        self.assertEqual(mem[0xF7FE0B41:0xF7FE0B44], [b"\x8d", b"\x14", b"\x1f"])
        self.assertEqual(mem[0xF7FE0B98:0xF7FE0B9C], [b"\x8b", b"u", b"\xd0", b"\x89"])
        self.assertEqual(cpu.EIP, 4160621380)
        self.assertEqual(cpu.EDX, 4160621464)
        self.assertEqual(cpu.EDI, 4294851480)
        self.assertEqual(cpu.EBX, 4160737280)

    def test_LEA_17(self):
        """Instruction LEA_17
        Groups: not64bitmode
        0xf7eaa0d0: lea     ecx, dword ptr [edi + eax*8]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xF7F71000, 0x1000, "rwx")
        mem.write(0xF7EAA0D0, "\x8d\x0c\xc7")
        mem.write(0xF7F714C8, "\x08\x04 \x00")
        cpu.EIP = 0xF7EAA0D0
        cpu.EDI = 0xF7F714C0
        cpu.ECX = 0xF7F714D0
        cpu.EAX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0D0:0xF7EAA0D3], [b"\x8d", b"\x0c", b"\xc7"])
        self.assertEqual(mem[0xF7F714C8:0xF7F714CC], [b"\x08", b"\x04", b" ", b"\x00"])
        self.assertEqual(cpu.EIP, 4159348947)
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.EDI, 4160165056)
        self.assertEqual(cpu.ECX, 4160165064)

    def test_LEA_18(self):
        """Instruction LEA_18
        Groups: not64bitmode
        0xf7fe57e8: lea     esp, dword ptr [ebp - 0xc]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57E8, "\x8de\xf4")
        mem.write(0xFFFFD42C, "\x00\xd0\xff\xf7")
        cpu.EIP = 0xF7FE57E8
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD380
        cpu.execute()

        self.assertEqual(mem[0xF7FE57E8:0xF7FE57EB], [b"\x8d", b"e", b"\xf4"])
        self.assertEqual(mem[0xFFFFD42C:0xFFFFD430], [b"\x00", b"\xd0", b"\xff", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160641003)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294956076)

    def test_LEA_19(self):
        """Instruction LEA_19
        Groups: not64bitmode
        0xf7fe8aea: lea     eax, dword ptr [ebp - 0x34]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE8AEA, "\x8dE\xcc")
        mem.write(0xFFFFD4C4, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE8AEA
        cpu.EBP = 0xFFFFD4F8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE8AEA:0xF7FE8AED], [b"\x8d", b"E", b"\xcc"])
        self.assertEqual(mem[0xFFFFD4C4:0xFFFFD4C8], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160654061)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.EAX, 4294956228)

    def test_LEA_2(self):
        """Instruction LEA_2
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        mem.write(0xFFFFD3F0, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE5705
        cpu.EBP = 0xFFFFD438
        cpu.ECX = 0xF7FDABA8
        cpu.execute()

        self.assertEqual(mem[0xF7FE5705:0xF7FE5708], [b"\x8d", b"M", b"\xb8"])
        self.assertEqual(mem[0xFFFFD3F0:0xFFFFD3F4], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160640776)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ECX, 4294956016)

    def test_LEA_20(self):
        """Instruction LEA_20
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        mem.write(0xFFFFD3F0, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE5705
        cpu.EBP = 0xFFFFD438
        cpu.ECX = 0xF7FDABA8
        cpu.execute()

        self.assertEqual(mem[0xF7FE5705:0xF7FE5708], [b"\x8d", b"M", b"\xb8"])
        self.assertEqual(mem[0xFFFFD3F0:0xFFFFD3F4], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160640776)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ECX, 4294956016)

    def test_LEA_21(self):
        """Instruction LEA_21
        Groups: not64bitmode
        0xf7fe570b: lea     ecx, dword ptr [ebp - 0x50]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE570B, "\x8dM\xb0")
        mem.write(0xFFFFD3E8, "\xff\xff\xff\xff")
        cpu.EIP = 0xF7FE570B
        cpu.EBP = 0xFFFFD438
        cpu.ECX = 0xFFFFD3F0
        cpu.execute()

        self.assertEqual(mem[0xF7FE570B:0xF7FE570E], [b"\x8d", b"M", b"\xb0"])
        self.assertEqual(mem[0xFFFFD3E8:0xFFFFD3EC], [b"\xff", b"\xff", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160640782)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ECX, 4294956008)

    def test_LEA_3(self):
        """Instruction LEA_3
        Groups: not64bitmode
        0xf7fe54a8: lea     esi, dword ptr [edx + eax*4]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E18000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E18C08, "\xc0\xf0/\xa2")
        mem.write(0xF7FE54A8, "\x8d4\x82")
        cpu.EIP = 0xF7FE54A8
        cpu.EDX = 0xF7E1696C
        cpu.ESI = 0xF7FDA858
        cpu.EAX = 0x8A7
        cpu.execute()

        self.assertEqual(mem[0xF7E18C08:0xF7E18C0C], [b"\xc0", b"\xf0", b"/", b"\xa2"])
        self.assertEqual(mem[0xF7FE54A8:0xF7FE54AB], [b"\x8d", b"4", b"\x82"])
        self.assertEqual(cpu.EIP, 4160640171)
        self.assertEqual(cpu.EDX, 4158744940)
        self.assertEqual(cpu.ESI, 4158753800)
        self.assertEqual(cpu.EAX, 2215)

    def test_LEA_4(self):
        """Instruction LEA_4
        Groups: not64bitmode
        0xf7fe72c4: lea     eax, dword ptr [ebp - 0x44]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE72C4, "\x8dE\xbc")
        mem.write(0xFFFFD4B4, "\x94\x9c\xe1\xf7")
        cpu.EIP = 0xF7FE72C4
        cpu.EBP = 0xFFFFD4F8
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE72C4:0xF7FE72C7], [b"\x8d", b"E", b"\xbc"])
        self.assertEqual(mem[0xFFFFD4B4:0xFFFFD4B8], [b"\x94", b"\x9c", b"\xe1", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160647879)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.EAX, 4294956212)

    def test_LEA_5(self):
        """Instruction LEA_5
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        mem.write(0xFFFFD3F0, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE5705
        cpu.EBP = 0xFFFFD438
        cpu.ECX = 0xF7FDABA8
        cpu.execute()

        self.assertEqual(mem[0xF7FE5705:0xF7FE5708], [b"\x8d", b"M", b"\xb8"])
        self.assertEqual(mem[0xFFFFD3F0:0xFFFFD3F4], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160640776)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ECX, 4294956016)

    def test_LEA_6(self):
        """Instruction LEA_6
        Groups: not64bitmode
        0xf7fdd6c8: lea     eax, dword ptr [ebx + eax - 0x8880]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDD6C8, "\x8d\x84\x03\x80w\xff\xff")
        mem.write(0xF7FF4780, "/var")
        cpu.EIP = 0xF7FDD6C8
        cpu.EBX = 0xF7FFD000
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(
            mem[0xF7FDD6C8:0xF7FDD6CF], [b"\x8d", b"\x84", b"\x03", b"\x80", b"w", b"\xff", b"\xff"]
        )
        self.assertEqual(mem[0xF7FF4780:0xF7FF4784], [b"/", b"v", b"a", b"r"])
        self.assertEqual(cpu.EIP, 4160607951)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.EAX, 4160702336)

    def test_LEA_7(self):
        """Instruction LEA_7
        Groups: not64bitmode
        0xf7fe4e78: lea     eax, dword ptr [ebx - 0x55d4]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xF7FF7000, 0x1000, "rwx")
        mem.write(0xF7FE4E78, "\x8d\x83,\xaa\xff\xff")
        mem.write(0xF7FF7A2C, "symb")
        cpu.EIP = 0xF7FE4E78
        cpu.EBX = 0xF7FFD000
        cpu.EAX = 0x830AAB
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE4E78:0xF7FE4E7E], [b"\x8d", b"\x83", b",", b"\xaa", b"\xff", b"\xff"]
        )
        self.assertEqual(mem[0xF7FF7A2C:0xF7FF7A30], [b"s", b"y", b"m", b"b"])
        self.assertEqual(cpu.EIP, 4160638590)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.EAX, 4160715308)

    def test_LEA_8(self):
        """Instruction LEA_8
        Groups: not64bitmode
        0xf7ff0e47: lea     edx, dword ptr [ecx + ebx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0E47, "\x8d\x14\x19")
        mem.write(0xF7FF0E58, "\x83\xc0\x08\x8b")
        cpu.EIP = 0xF7FF0E47
        cpu.EDX = 0x1C
        cpu.EBX = 0xF7FFD000
        cpu.ECX = 0xFFFF3E58
        cpu.execute()

        self.assertEqual(mem[0xF7FF0E47:0xF7FF0E4A], [b"\x8d", b"\x14", b"\x19"])
        self.assertEqual(mem[0xF7FF0E58:0xF7FF0E5C], [b"\x83", b"\xc0", b"\x08", b"\x8b"])
        self.assertEqual(cpu.EIP, 4160687690)
        self.assertEqual(cpu.EDX, 4160687704)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ECX, 4294917720)

    def test_LEA_9(self):
        """Instruction LEA_9
        Groups: not64bitmode
        0xf7fe57e8: lea     esp, dword ptr [ebp - 0xc]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57E8, "\x8de\xf4")
        mem.write(0xFFFFD42C, "\x00\xd0\xff\xf7")
        cpu.EIP = 0xF7FE57E8
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD380
        cpu.execute()

        self.assertEqual(mem[0xF7FE57E8:0xF7FE57EB], [b"\x8d", b"e", b"\xf4"])
        self.assertEqual(mem[0xFFFFD42C:0xFFFFD430], [b"\x00", b"\xd0", b"\xff", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160641003)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294956076)

    def test_LODSB_1(self):
        """Instruction LODSB_1
        Groups:
        0x8070436:  lodsb   al, byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x1000, "rwx")
        mem.write(0x8070436, "\xac")
        mem.write(0x807E042, "\x1e")
        cpu.DF = False
        cpu.EIP = 0x8070436
        cpu.AL = 0x0
        cpu.ESI = 0x807E042
        cpu.execute()

        self.assertEqual(mem[0x8070436:0x8070437], [b"\xac"])
        self.assertEqual(mem[0x807E042:0x807E043], [b"\x1e"])
        self.assertEqual(cpu.EIP, 134677559)
        self.assertEqual(cpu.AL, 30)
        self.assertEqual(cpu.ESI, 134733891)

    def test_LODSD_1(self):
        """Instruction LODSD_1
        Groups:
        0x8070439:  lodsd   eax, dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x1000, "rwx")
        mem.write(0x8070439, "\xad")
        mem.write(0x807E045, "Q\x1e\xe5\xe5")
        cpu.DF = False
        cpu.EIP = 0x8070439
        cpu.ESI = 0x807E045
        cpu.EAX = 0xE5E5
        cpu.execute()

        self.assertEqual(mem[0x8070439:0x807043A], [b"\xad"])
        self.assertEqual(mem[0x807E045:0x807E049], [b"Q", b"\x1e", b"\xe5", b"\xe5"])
        self.assertEqual(cpu.EIP, 134677562)
        self.assertEqual(cpu.ESI, 134733897)
        self.assertEqual(cpu.EAX, 3856997969)

    def test_LODSW_1(self):
        """Instruction LODSW_1
        Groups:
        0x8070437:  lodsw   ax, word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x1000, "rwx")
        mem.write(0x8070437, "f\xad")
        mem.write(0x807E043, "\xe5\xe5")
        cpu.DF = False
        cpu.EIP = 0x8070437
        cpu.ESI = 0x807E043
        cpu.AX = 0x1E
        cpu.execute()

        self.assertEqual(mem[0x8070437:0x8070439], [b"f", b"\xad"])
        self.assertEqual(mem[0x807E043:0x807E045], [b"\xe5", b"\xe5"])
        self.assertEqual(cpu.EIP, 134677561)
        self.assertEqual(cpu.ESI, 134733893)
        self.assertEqual(cpu.AX, 58853)

    def test_LSL_1(self):
        """Instruction LSL_1
        Groups:
        0x8059a3e:  lsl     ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A3E, "\x0f\x03M\x00")
        mem.write(0xFFFFB600, ">0\x00\x1e")
        cpu.EIP = 0x8059A3E
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8059A3E:0x8059A42], [b"\x0f", b"\x03", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b">", b"0", b"\x00", b"\x1e"])
        self.assertEqual(cpu.EIP, 134584898)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_LSL_2(self):
        """Instruction LSL_2
        Groups:
        0x8059a36:  lsl     cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A36, "f\x0f\x03M\x00")
        mem.write(0xFFFFB600, ">0")
        cpu.EIP = 0x8059A36
        cpu.ZF = False
        cpu.CX = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8059A36:0x8059A3B], [b"f", b"\x0f", b"\x03", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b">", b"0"])
        self.assertEqual(cpu.EIP, 134584891)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_LSL_3(self):
        """Instruction LSL_3
        Groups:
        0x8059a3b:  lsl     ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A3B, "\x0f\x03\xca")
        cpu.EIP = 0x8059A3B
        cpu.ZF = False
        cpu.EDX = 0xC8F8
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8059A3B:0x8059A3E], [b"\x0f", b"\x03", b"\xca"])
        self.assertEqual(cpu.EIP, 134584894)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 51448)
        self.assertEqual(cpu.ECX, 0)

    def test_LSL_4(self):
        """Instruction LSL_4
        Groups:
        0x8059a32:  lsl     cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A32, "f\x0f\x03\xca")
        cpu.EIP = 0x8059A32
        cpu.ZF = False
        cpu.CX = 0x0
        cpu.DX = 0xC8F8
        cpu.execute()

        self.assertEqual(mem[0x8059A32:0x8059A36], [b"f", b"\x0f", b"\x03", b"\xca"])
        self.assertEqual(cpu.EIP, 134584886)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.DX, 51448)

    def test_MOVAPS_1(self):
        """Instruction MOVAPS_1
        Groups: sse1
        0x8048413:  movaps  xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8048413, "\x0f(E\x00")
        mem.write(0xFFFFB600, "\xeb\xb6n\xeb\xeb\xb6n\xeb\xeb\xb6n\xeb\xeb\xb6n\xeb")
        cpu.EIP = 0x8048413
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8048413:0x8048417], [b"\x0f", b"(", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\xeb",
                b"\xb6",
                b"n",
                b"\xeb",
                b"\xeb",
                b"\xb6",
                b"n",
                b"\xeb",
                b"\xeb",
                b"\xb6",
                b"n",
                b"\xeb",
                b"\xeb",
                b"\xb6",
                b"n",
                b"\xeb",
            ],
        )
        self.assertEqual(cpu.EIP, 134513687)
        self.assertEqual(cpu.XMM0, 312943441753922939598492644572107028203)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVAPS_2(self):
        """Instruction MOVAPS_2
        Groups: sse1
        0x8048417:  movaps  xmmword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8048417, "\x0f)M\x00")
        mem.write(0xFFFFB600, "\xeb\xb6n\xeb\xeb\xb6n\xeb\xeb\xb6n\xeb\xeb\xb6n\xeb")
        cpu.EIP = 0x8048417
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8048417:0x804841B], [b"\x0f", b")", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134513691)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVAPS_3(self):
        """Instruction MOVAPS_3
        Groups: sse1
        0x8048410:  movaps  xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x8048410, "\x0f(\xc1")
        cpu.EIP = 0x8048410
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8048410:0x8048413], [b"\x0f", b"(", b"\xc1"])
        self.assertEqual(cpu.EIP, 134513683)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_MOVDQA_1(self):
        """Instruction MOVDQA_1
        Groups: sse2
        0x8079433:  movdqa  xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079433, "f\x0fo\xc1")
        cpu.EIP = 0x8079433
        cpu.XMM0 = 0x8000F100FC0000000000000100000101
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079433:0x8079437], [b"f", b"\x0f", b"o", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714423)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_MOVDQA_2(self):
        """Instruction MOVDQA_2
        Groups: sse2
        0x807943c:  movdqa  xmmword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807943C, "f\x0f\x7fM\x00")
        mem.write(0xFFFFB600, "\xfe\x80\xff\xff\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x807943C
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x807943C:0x8079441], [b"f", b"\x0f", b"\x7f", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714433)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVDQA_3(self):
        """Instruction MOVDQA_3
        Groups: sse2
        0x8079437:  movdqa  xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079437, "f\x0foE\x00")
        mem.write(0xFFFFB600, "\xfe\x80\xff\xff\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8079437
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079437:0x807943C], [b"f", b"\x0f", b"o", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\xfe",
                b"\x80",
                b"\xff",
                b"\xff",
                b"\x00",
                b"\xfc",
                b"\xf1",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714428)
        self.assertEqual(cpu.XMM0, 9291484587467178238)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVDQU_1(self):
        """Instruction MOVDQU_1
        Groups: sse2
        0x805bb8c:  movdqu  xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BB8C, "\xf3\x0foE\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x805BB8C
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BB8C:0x805BB91], [b"\xf3", b"\x0f", b"o", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134593425)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVDQU_2(self):
        """Instruction MOVDQU_2
        Groups: sse2
        0x805bb91:  movdqu  xmmword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BB91, "\xf3\x0f\x7fM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x805BB91
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BB91:0x805BB96], [b"\xf3", b"\x0f", b"\x7f", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134593430)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVDQU_3(self):
        """Instruction MOVDQU_3
        Groups: sse2
        0x805bb88:  movdqu  xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BB88, "\xf3\x0fo\xc1")
        cpu.EIP = 0x805BB88
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805BB88:0x805BB8C], [b"\xf3", b"\x0f", b"o", b"\xc1"])
        self.assertEqual(cpu.EIP, 134593420)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_MOVD_1(self):
        """Instruction MOVD_1
        Groups: sse2
        0x804841b:  movd    ecx, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804841B, "f\x0f~\xc9")
        cpu.EIP = 0x804841B
        cpu.XMM1 = 0x0
        cpu.ECX = 0xECFECF0F
        cpu.execute()

        self.assertEqual(mem[0x804841B:0x804841F], [b"f", b"\x0f", b"~", b"\xc9"])
        self.assertEqual(cpu.EIP, 134513695)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVD_2(self):
        """Instruction MOVD_2
        Groups: sse2
        0x804841f:  movd    xmm0, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804841F, "f\x0fn\xc2")
        cpu.EIP = 0x804841F
        cpu.XMM0 = 0xEB6EB6EBEB6EB6EBEB6EB6EBEB6EB6EB
        cpu.EDX = 0xE6FE6FF0
        cpu.execute()

        self.assertEqual(mem[0x804841F:0x8048423], [b"f", b"\x0f", b"n", b"\xc2"])
        self.assertEqual(cpu.EIP, 134513699)
        self.assertEqual(cpu.XMM0, 3875434480)
        self.assertEqual(cpu.EDX, 3875434480)

    def test_MOVD_3(self):
        """Instruction MOVD_3
        Groups: sse2
        0x8048423:  movd    xmm0, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8048423, "f\x0fnE\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x8048423
        cpu.XMM0 = 0xE6FE6FF0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8048423:0x8048428], [b"f", b"\x0f", b"n", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134513704)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVD_4(self):
        """Instruction MOVD_4
        Groups: sse2
        0x8048428:  movd    dword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8048428, "f\x0f~M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x8048428
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8048428:0x804842D], [b"f", b"\x0f", b"~", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134513709)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVHPD_1(self):
        """Instruction MOVHPD_1
        Groups: sse2
        0x804d613:  movhpd  xmm0, qword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D613, "f\x0f\x16E\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D613
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D613:0x804D618], [b"f", b"\x0f", b"\x16", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134534680)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVHPD_2(self):
        """Instruction MOVHPD_2
        Groups: sse2
        0x804d618:  movhpd  qword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D618, "f\x0f\x17M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D618
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D618:0x804D61D], [b"f", b"\x0f", b"\x17", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134534685)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVLPD_1(self):
        """Instruction MOVLPD_1
        Groups: sse2
        0x804d553:  movlpd  qword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D553, "f\x0f\x13M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D553
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D553:0x804D558], [b"f", b"\x0f", b"\x13", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134534488)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVLPD_2(self):
        """Instruction MOVLPD_2
        Groups: sse2
        0x804d54e:  movlpd  xmm0, qword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D54E, "f\x0f\x12E\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D54E
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D54E:0x804D553], [b"f", b"\x0f", b"\x12", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134534483)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVQ_1(self):
        """Instruction MOVQ_1
        Groups: sse2
        0x804d55c:  movq    xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D55C, "\xf3\x0f~\xc1")
        cpu.EIP = 0x804D55C
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D55C:0x804D560], [b"\xf3", b"\x0f", b"~", b"\xc1"])
        self.assertEqual(cpu.EIP, 134534496)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_MOVQ_2(self):
        """Instruction MOVQ_2
        Groups: sse2
        0x804d560:  movq    xmm0, qword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D560, "\xf3\x0f~E\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D560
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D560:0x804D565], [b"\xf3", b"\x0f", b"~", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134534501)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVQ_3(self):
        """Instruction MOVQ_3
        Groups: sse2
        0x804d565:  movq    qword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D565, "f\x0f\xd6M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D565
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D565:0x804D56A], [b"f", b"\x0f", b"\xd6", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134534506)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVSB_1(self):
        """Instruction MOVSB_1
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDAAF8, "\x00\x00\x00\x00")
        mem.write(0xF7FDAB04, "\x00\x00\x00\x00")
        mem.write(0xF7FF463A, "\xf3\xa4")
        cpu.EIP = 0xF7FF463A
        cpu.EDI = 0xF7FDAB04
        cpu.ESI = 0xF7FDAAF8
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FDAAF8:0xF7FDAAFC], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FDAB04:0xF7FDAB08], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FF463A:0xF7FF463C], [b"\xf3", b"\xa4"])
        self.assertEqual(cpu.EIP, 4160702012)
        self.assertEqual(cpu.EDI, 4160596740)
        self.assertEqual(cpu.ESI, 4160596728)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSB_10(self):
        """Instruction MOVSB_10
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF4545, "\xa4")
        mem.write(0xF7FF5E9A, "t")
        mem.write(0xF7FFDF3B, "\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF4545
        cpu.EDI = 0xF7FFDF3B
        cpu.ESI = 0xF7FF5E9A
        cpu.execute()

        self.assertEqual(mem[0xF7FF4545:0xF7FF4546], [b"\xa4"])
        self.assertEqual(mem[0xF7FF5E9A:0xF7FF5E9B], [b"t"])
        self.assertEqual(mem[0xF7FFDF3B:0xF7FFDF3C], [b"t"])
        self.assertEqual(cpu.EIP, 4160701766)
        self.assertEqual(cpu.EDI, 4160741180)
        self.assertEqual(cpu.ESI, 4160708251)

    def test_MOVSB_11(self):
        """Instruction MOVSB_11
        Groups:
        0xf7ff464a: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF464A, "\xa4")
        mem.write(0xF7FF5844, "\x00")
        mem.write(0xF7FFDC24, "\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF464A
        cpu.EDI = 0xF7FFDC24
        cpu.ESI = 0xF7FF5844
        cpu.execute()

        self.assertEqual(mem[0xF7FF464A:0xF7FF464B], [b"\xa4"])
        self.assertEqual(mem[0xF7FF5844:0xF7FF5845], [b"\x00"])
        self.assertEqual(mem[0xF7FFDC24:0xF7FFDC25], [b"\x00"])
        self.assertEqual(cpu.EIP, 4160702027)
        self.assertEqual(cpu.EDI, 4160740389)
        self.assertEqual(cpu.ESI, 4160706629)

    def test_MOVSB_2(self):
        """Instruction MOVSB_2
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF4545, "\xa4")
        mem.write(0xF7FF5E9A, "t")
        mem.write(0xF7FFDF57, "\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF4545
        cpu.EDI = 0xF7FFDF57
        cpu.ESI = 0xF7FF5E9A
        cpu.execute()

        self.assertEqual(mem[0xF7FF4545:0xF7FF4546], [b"\xa4"])
        self.assertEqual(mem[0xF7FF5E9A:0xF7FF5E9B], [b"t"])
        self.assertEqual(mem[0xF7FFDF57:0xF7FFDF58], [b"t"])
        self.assertEqual(cpu.EIP, 4160701766)
        self.assertEqual(cpu.EDI, 4160741208)
        self.assertEqual(cpu.ESI, 4160708251)

    def test_MOVSB_3(self):
        """Instruction MOVSB_3
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDAB14, "\x00\x00\x00\x00")
        mem.write(0xF7FDAB24, "\x00\x00\x00\x00")
        mem.write(0xF7FF463A, "\xf3\xa4")
        cpu.EIP = 0xF7FF463A
        cpu.EDI = 0xF7FDAB14
        cpu.ESI = 0xF7FDAB24
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FDAB14:0xF7FDAB18], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FDAB24:0xF7FDAB28], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FF463A:0xF7FF463C], [b"\xf3", b"\xa4"])
        self.assertEqual(cpu.EIP, 4160702012)
        self.assertEqual(cpu.EDI, 4160596756)
        self.assertEqual(cpu.ESI, 4160596772)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSB_4(self):
        """Instruction MOVSB_4
        Groups:
        0x804d558:  movsb   byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x804D558, "\xa4")
        mem.write(0x807E030, "0")
        mem.write(0x807F030, "0")
        cpu.DF = False
        cpu.EIP = 0x804D558
        cpu.EDI = 0x807F030
        cpu.ESI = 0x807E030
        cpu.execute()

        self.assertEqual(mem[0x804D558:0x804D559], [b"\xa4"])
        self.assertEqual(mem[0x807E030:0x807E031], [b"0"])
        self.assertEqual(mem[0x807F030:0x807F031], [b"0"])
        self.assertEqual(cpu.EIP, 134534489)
        self.assertEqual(cpu.EDI, 134737969)
        self.assertEqual(cpu.ESI, 134733873)

    def test_MOVSB_5(self):
        """Instruction MOVSB_5
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF4545, "\xa4")
        mem.write(0xF7FF5E9A, "t")
        mem.write(0xF7FFDF28, "\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF4545
        cpu.EDI = 0xF7FFDF28
        cpu.ESI = 0xF7FF5E9A
        cpu.execute()

        self.assertEqual(mem[0xF7FF4545:0xF7FF4546], [b"\xa4"])
        self.assertEqual(mem[0xF7FF5E9A:0xF7FF5E9B], [b"t"])
        self.assertEqual(mem[0xF7FFDF28:0xF7FFDF29], [b"t"])
        self.assertEqual(cpu.EIP, 4160701766)
        self.assertEqual(cpu.EDI, 4160741161)
        self.assertEqual(cpu.ESI, 4160708251)

    def test_MOVSB_6(self):
        """Instruction MOVSB_6
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDB000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FDB178, "LINU")
        mem.write(0xF7FF463A, "\xf3\xa4")
        mem.write(0xF7FFDEA8, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF463A
        cpu.EDI = 0xF7FFDEA8
        cpu.ESI = 0xF7FDB178
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FDB178:0xF7FDB17C], [b"L", b"I", b"N", b"U"])
        self.assertEqual(mem[0xF7FF463A:0xF7FF463C], [b"\xf3", b"\xa4"])
        self.assertEqual(mem[0xF7FFDEA8:0xF7FFDEAC], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160702012)
        self.assertEqual(cpu.EDI, 4160741032)
        self.assertEqual(cpu.ESI, 4160598392)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSB_7(self):
        """Instruction MOVSB_7
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FDAAFC, "\x00\x00\x00\x00")
        mem.write(0xF7FF463A, "\xf3\xa4")
        mem.write(0xFFFFD388, "\xef\xab\xfe\xf7")
        cpu.EIP = 0xF7FF463A
        cpu.EDI = 0xF7FDAAFC
        cpu.ESI = 0xFFFFD388
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FDAAFC:0xF7FDAB00], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FF463A:0xF7FF463C], [b"\xf3", b"\xa4"])
        self.assertEqual(mem[0xFFFFD388:0xFFFFD38C], [b"\xef", b"\xab", b"\xfe", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160702012)
        self.assertEqual(cpu.EDI, 4160596732)
        self.assertEqual(cpu.ESI, 4294955912)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSB_8(self):
        """Instruction MOVSB_8
        Groups:
        0xf7ff464a: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF464A, "\xa4")
        mem.write(0xF7FF5844, "\x00")
        mem.write(0xF7FFDE94, "\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF464A
        cpu.EDI = 0xF7FFDE94
        cpu.ESI = 0xF7FF5844
        cpu.execute()

        self.assertEqual(mem[0xF7FF464A:0xF7FF464B], [b"\xa4"])
        self.assertEqual(mem[0xF7FF5844:0xF7FF5845], [b"\x00"])
        self.assertEqual(mem[0xF7FFDE94:0xF7FFDE95], [b"\x00"])
        self.assertEqual(cpu.EIP, 4160702027)
        self.assertEqual(cpu.EDI, 4160741013)
        self.assertEqual(cpu.ESI, 4160706629)

    def test_MOVSB_9(self):
        """Instruction MOVSB_9
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF4545, "\xa4")
        mem.write(0xF7FF5E9A, "t")
        mem.write(0xF7FFDF49, "\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF4545
        cpu.EDI = 0xF7FFDF49
        cpu.ESI = 0xF7FF5E9A
        cpu.execute()

        self.assertEqual(mem[0xF7FF4545:0xF7FF4546], [b"\xa4"])
        self.assertEqual(mem[0xF7FF5E9A:0xF7FF5E9B], [b"t"])
        self.assertEqual(mem[0xF7FFDF49:0xF7FFDF4A], [b"t"])
        self.assertEqual(cpu.EIP, 4160701766)
        self.assertEqual(cpu.EDI, 4160741194)
        self.assertEqual(cpu.ESI, 4160708251)

    def test_MOVSD_1(self):
        """Instruction MOVSD_1
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDB000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FDB174, "o.1\x00")
        mem.write(0xF7FF4636, "\xf3\xa5")
        mem.write(0xF7FFDEA4, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF4636
        cpu.EDI = 0xF7FFDEA4
        cpu.ESI = 0xF7FDB174
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FDB174:0xF7FDB178], [b"o", b".", b"1", b"\x00"])
        self.assertEqual(mem[0xF7FF4636:0xF7FF4638], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FFDEA4:0xF7FFDEA8], [b"o", b".", b"1", b"\x00"])
        self.assertEqual(cpu.EIP, 4160702008)
        self.assertEqual(cpu.EDI, 4160741032)
        self.assertEqual(cpu.ESI, 4160598392)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_10(self):
        """Instruction MOVSD_10
        Groups:
        0x805ba6d:  movsd   dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x805BA6D, "\xa5")
        mem.write(0x807E03E, "\x1e\xe5\xe5Q")
        mem.write(0x807F03E, "\x1e\xed\xed\xd1")
        cpu.DF = False
        cpu.EIP = 0x805BA6D
        cpu.EDI = 0x807F03E
        cpu.ESI = 0x807E03E
        cpu.execute()

        self.assertEqual(mem[0x805BA6D:0x805BA6E], [b"\xa5"])
        self.assertEqual(mem[0x807E03E:0x807E042], [b"\x1e", b"\xe5", b"\xe5", b"Q"])
        self.assertEqual(mem[0x807F03E:0x807F042], [b"\x1e", b"\xe5", b"\xe5", b"Q"])
        self.assertEqual(cpu.EIP, 134593134)
        self.assertEqual(cpu.EDI, 134737986)
        self.assertEqual(cpu.ESI, 134733890)

    def test_MOVSD_11(self):
        """Instruction MOVSD_11
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF454C, "\xf3\xa5")
        mem.write(0xF7FFDF2C, "\x00\x00\x00\x00")
        mem.write(0xFFFFD7DB, "i686")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FFDF2C
        cpu.ESI = 0xFFFFD7DB
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FFDF2C:0xF7FFDF30], [b"i", b"6", b"8", b"6"])
        self.assertEqual(mem[0xFFFFD7DB:0xFFFFD7DF], [b"i", b"6", b"8", b"6"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160741168)
        self.assertEqual(cpu.ESI, 4294957023)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_12(self):
        """Instruction MOVSD_12
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDAAF0, "X\xa8\xfd\xf7")
        mem.write(0xF7FDAAFC, "\x00\x00\x00\x00")
        mem.write(0xF7FF4636, "\xf3\xa5")
        cpu.EIP = 0xF7FF4636
        cpu.EDI = 0xF7FDAAFC
        cpu.ESI = 0xF7FDAAF0
        cpu.ECX = 0x2
        cpu.execute()

        self.assertEqual(mem[0xF7FDAAF0:0xF7FDAAF4], [b"X", b"\xa8", b"\xfd", b"\xf7"])
        self.assertEqual(mem[0xF7FDAAFC:0xF7FDAB00], [b"X", b"\xa8", b"\xfd", b"\xf7"])
        self.assertEqual(mem[0xF7FF4636:0xF7FF4638], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160702006)
        self.assertEqual(cpu.EDI, 4160596736)
        self.assertEqual(cpu.ESI, 4160596724)
        self.assertEqual(cpu.ECX, 1)

    def test_MOVSD_13(self):
        """Instruction MOVSD_13
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDA852, "o.6\x00")
        mem.write(0xF7FDAAEA, "\x00\x00\x00\x00")
        mem.write(0xF7FF454C, "\xf3\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FDAAEA
        cpu.ESI = 0xF7FDA852
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FDA852:0xF7FDA856], [b"o", b".", b"6", b"\x00"])
        self.assertEqual(mem[0xF7FDAAEA:0xF7FDAAEE], [b"o", b".", b"6", b"\x00"])
        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160596718)
        self.assertEqual(cpu.ESI, 4160596054)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_14(self):
        """Instruction MOVSD_14
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        mem.write(0xF7FF454C, "\xf3\xa5")
        mem.write(0xF7FFCE44, "sse2")
        mem.write(0xF7FFDF4D, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FFDF4D
        cpu.ESI = 0xF7FFCE44
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FFCE44:0xF7FFCE48], [b"s", b"s", b"e", b"2"])
        self.assertEqual(mem[0xF7FFDF4D:0xF7FFDF51], [b"s", b"s", b"e", b"2"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160741201)
        self.assertEqual(cpu.ESI, 4160736840)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_15(self):
        """Instruction MOVSD_15
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDA83E, "386-")
        mem.write(0xF7FDAAD6, "\x00\x00\x00\x00")
        mem.write(0xF7FF454C, "\xf3\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FDAAD6
        cpu.ESI = 0xF7FDA83E
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0xF7FDA83E:0xF7FDA842], [b"3", b"8", b"6", b"-"])
        self.assertEqual(mem[0xF7FDAAD6:0xF7FDAADA], [b"3", b"8", b"6", b"-"])
        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160596698)
        self.assertEqual(cpu.ESI, 4160596034)
        self.assertEqual(cpu.ECX, 5)

    def test_MOVSD_16(self):
        """Instruction MOVSD_16
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDA842, "linu")
        mem.write(0xF7FDAADA, "\x00\x00\x00\x00")
        mem.write(0xF7FF454C, "\xf3\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FDAADA
        cpu.ESI = 0xF7FDA842
        cpu.ECX = 0x5
        cpu.execute()

        self.assertEqual(mem[0xF7FDA842:0xF7FDA846], [b"l", b"i", b"n", b"u"])
        self.assertEqual(mem[0xF7FDAADA:0xF7FDAADE], [b"l", b"i", b"n", b"u"])
        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160596702)
        self.assertEqual(cpu.ESI, 4160596038)
        self.assertEqual(cpu.ECX, 4)

    def test_MOVSD_17(self):
        """Instruction MOVSD_17
        Groups: sse2
        0x805ba6e:  movsd   qword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA6E, "\xf2\x0f\x11M\x00")
        mem.write(0xFFFFB600, "\x01\x00\x00\x00\x00\x00\x00\x00")
        cpu.DF = False
        cpu.EIP = 0x805BA6E
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BA6E:0x805BA73], [b"\xf2", b"\x0f", b"\x11", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134593139)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVSD_18(self):
        """Instruction MOVSD_18
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDAAF4, "\\\xd5\xff\xf7")
        mem.write(0xF7FDAB00, "\x00\x00\x00\x00")
        mem.write(0xF7FF4636, "\xf3\xa5")
        cpu.EIP = 0xF7FF4636
        cpu.EDI = 0xF7FDAB00
        cpu.ESI = 0xF7FDAAF4
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FDAAF4:0xF7FDAAF8], [b"\\", b"\xd5", b"\xff", b"\xf7"])
        self.assertEqual(mem[0xF7FDAB00:0xF7FDAB04], [b"\\", b"\xd5", b"\xff", b"\xf7"])
        self.assertEqual(mem[0xF7FF4636:0xF7FF4638], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160702008)
        self.assertEqual(cpu.EDI, 4160596740)
        self.assertEqual(cpu.ESI, 4160596728)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_19(self):
        """Instruction MOVSD_19
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FDAAF8, "\x00\x00\x00\x00")
        mem.write(0xF7FF4636, "\xf3\xa5")
        mem.write(0xFFFFD384, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF4636
        cpu.EDI = 0xF7FDAAF8
        cpu.ESI = 0xFFFFD384
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FDAAF8:0xF7FDAAFC], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FF4636:0xF7FF4638], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xFFFFD384:0xFFFFD388], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160702008)
        self.assertEqual(cpu.EDI, 4160596732)
        self.assertEqual(cpu.ESI, 4294955912)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_2(self):
        """Instruction MOVSD_2
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        mem.write(0xF7FF454C, "\xf3\xa5")
        mem.write(0xF7FFCDEC, "cmov")
        mem.write(0xF7FFDF44, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FFDF44
        cpu.ESI = 0xF7FFCDEC
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FFCDEC:0xF7FFCDF0], [b"c", b"m", b"o", b"v"])
        self.assertEqual(mem[0xF7FFDF44:0xF7FFDF48], [b"c", b"m", b"o", b"v"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160741192)
        self.assertEqual(cpu.ESI, 4160736752)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_20(self):
        """Instruction MOVSD_20
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        mem.write(0xF7FF454C, "\xf3\xa5")
        mem.write(0xF7FFCDEC, "cmov")
        mem.write(0xF7FFDF52, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FFDF52
        cpu.ESI = 0xF7FFCDEC
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FFCDEC:0xF7FFCDF0], [b"c", b"m", b"o", b"v"])
        self.assertEqual(mem[0xF7FFDF52:0xF7FFDF56], [b"c", b"m", b"o", b"v"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160741206)
        self.assertEqual(cpu.ESI, 4160736752)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_21(self):
        """Instruction MOVSD_21
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454C, "\xf3\xa5")
        mem.write(0xF7FF5E9D, "\x00dl-")
        mem.write(0xF7FFDF5A, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FFDF5A
        cpu.ESI = 0xF7FF5E9D
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FF5E9D:0xF7FF5EA1], [b"\x00", b"d", b"l", b"-"])
        self.assertEqual(mem[0xF7FFDF5A:0xF7FFDF5E], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160741210)
        self.assertEqual(cpu.ESI, 4160708253)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_3(self):
        """Instruction MOVSD_3
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDAB08, "\x00\x00\x00\x00")
        mem.write(0xF7FDAB18, "8\xd9\xff\xf7")
        mem.write(0xF7FF4636, "\xf3\xa5")
        cpu.EIP = 0xF7FF4636
        cpu.EDI = 0xF7FDAB08
        cpu.ESI = 0xF7FDAB18
        cpu.ECX = 0x3
        cpu.execute()

        self.assertEqual(mem[0xF7FDAB08:0xF7FDAB0C], [b"8", b"\xd9", b"\xff", b"\xf7"])
        self.assertEqual(mem[0xF7FDAB18:0xF7FDAB1C], [b"8", b"\xd9", b"\xff", b"\xf7"])
        self.assertEqual(mem[0xF7FF4636:0xF7FF4638], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160702006)
        self.assertEqual(cpu.EDI, 4160596748)
        self.assertEqual(cpu.ESI, 4160596764)
        self.assertEqual(cpu.ECX, 2)

    def test_MOVSD_4(self):
        """Instruction MOVSD_4
        Groups:
        0xf7ff4651: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD7000, 0x1000, "rwx")
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FD7047, "x-gn")
        mem.write(0xF7FDA846, "\x00\x00\x00\x00")
        mem.write(0xF7FF4651, "\xf3\xa5")
        cpu.EIP = 0xF7FF4651
        cpu.EDI = 0xF7FDA846
        cpu.ESI = 0xF7FD7047
        cpu.ECX = 0x4
        cpu.execute()

        self.assertEqual(mem[0xF7FD7047:0xF7FD704B], [b"x", b"-", b"g", b"n"])
        self.assertEqual(mem[0xF7FDA846:0xF7FDA84A], [b"x", b"-", b"g", b"n"])
        self.assertEqual(mem[0xF7FF4651:0xF7FF4653], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160702033)
        self.assertEqual(cpu.EDI, 4160596042)
        self.assertEqual(cpu.ESI, 4160581707)
        self.assertEqual(cpu.ECX, 3)

    def test_MOVSD_5(self):
        """Instruction MOVSD_5
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDA84A, "u/li")
        mem.write(0xF7FDAAE2, "\x00\x00\x00\x00")
        mem.write(0xF7FF454C, "\xf3\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FDAAE2
        cpu.ESI = 0xF7FDA84A
        cpu.ECX = 0x3
        cpu.execute()

        self.assertEqual(mem[0xF7FDA84A:0xF7FDA84E], [b"u", b"/", b"l", b"i"])
        self.assertEqual(mem[0xF7FDAAE2:0xF7FDAAE6], [b"u", b"/", b"l", b"i"])
        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160596710)
        self.assertEqual(cpu.ESI, 4160596046)
        self.assertEqual(cpu.ECX, 2)

    def test_MOVSD_6(self):
        """Instruction MOVSD_6
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        mem.write(0xF7FF454C, "\xf3\xa5")
        mem.write(0xF7FFCE44, "sse2")
        mem.write(0xF7FFDF31, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FFDF31
        cpu.ESI = 0xF7FFCE44
        cpu.ECX = 0x1
        cpu.execute()

        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FFCE44:0xF7FFCE48], [b"s", b"s", b"e", b"2"])
        self.assertEqual(mem[0xF7FFDF31:0xF7FFDF35], [b"s", b"s", b"e", b"2"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160741173)
        self.assertEqual(cpu.ESI, 4160736840)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSD_7(self):
        """Instruction MOVSD_7
        Groups:
        0x804d55b:  movsd   dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x804D55B, "\xa5")
        mem.write(0x807E033, "\x08\xe5Q\x1e")
        mem.write(0x807F033, "\x08\xed\xd1\x1e")
        cpu.DF = False
        cpu.EIP = 0x804D55B
        cpu.EDI = 0x807F033
        cpu.ESI = 0x807E033
        cpu.execute()

        self.assertEqual(mem[0x804D55B:0x804D55C], [b"\xa5"])
        self.assertEqual(mem[0x807E033:0x807E037], [b"\x08", b"\xe5", b"Q", b"\x1e"])
        self.assertEqual(mem[0x807F033:0x807F037], [b"\x08", b"\xe5", b"Q", b"\x1e"])
        self.assertEqual(cpu.EIP, 134534492)
        self.assertEqual(cpu.EDI, 134737975)
        self.assertEqual(cpu.ESI, 134733879)

    def test_MOVSD_8(self):
        """Instruction MOVSD_8
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDA83A, "ib/i")
        mem.write(0xF7FDAAD2, "\x00\x00\x00\x00")
        mem.write(0xF7FF454C, "\xf3\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FDAAD2
        cpu.ESI = 0xF7FDA83A
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0xF7FDA83A:0xF7FDA83E], [b"i", b"b", b"/", b"i"])
        self.assertEqual(mem[0xF7FDAAD2:0xF7FDAAD6], [b"i", b"b", b"/", b"i"])
        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160596694)
        self.assertEqual(cpu.ESI, 4160596030)
        self.assertEqual(cpu.ECX, 6)

    def test_MOVSD_9(self):
        """Instruction MOVSD_9
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454C, "\xf3\xa5")
        mem.write(0xF7FF5E9D, "\x00dl-")
        mem.write(0xF7FFDF2B, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = 0xF7FFDF2B
        cpu.ESI = 0xF7FF5E9D
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FF454C:0xF7FF454E], [b"\xf3", b"\xa5"])
        self.assertEqual(mem[0xF7FF5E9D:0xF7FF5EA1], [b"\x00", b"d", b"l", b"-"])
        self.assertEqual(mem[0xF7FFDF2B:0xF7FFDF2F], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160701774)
        self.assertEqual(cpu.EDI, 4160741163)
        self.assertEqual(cpu.ESI, 4160708253)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSS_1(self):
        """Instruction MOVSS_1
        Groups: sse1
        0x805badf:  movss   xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BADF, "\xf3\x0f\x10\xc1")
        cpu.EIP = 0x805BADF
        cpu.XMM0 = 0x1
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805BADF:0x805BAE3], [b"\xf3", b"\x0f", b"\x10", b"\xc1"])
        self.assertEqual(cpu.EIP, 134593251)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_MOVSS_2(self):
        """Instruction MOVSS_2
        Groups: sse1
        0x805bae3:  movss   xmm0, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BAE3, "\xf3\x0f\x10E\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x805BAE3
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BAE3:0x805BAE8], [b"\xf3", b"\x0f", b"\x10", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134593256)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVSS_3(self):
        """Instruction MOVSS_3
        Groups: sse1
        0x805bae8:  movss   dword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BAE8, "\xf3\x0f\x11M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x805BAE8
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BAE8:0x805BAED], [b"\xf3", b"\x0f", b"\x11", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134593261)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVSW_1(self):
        """Instruction MOVSW_1
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454A, "f\xa5")
        mem.write(0xF7FF5E9B, "ls")
        mem.write(0xF7FFDF58, "\x00\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF454A
        cpu.EDI = 0xF7FFDF58
        cpu.ESI = 0xF7FF5E9B
        cpu.execute()

        self.assertEqual(mem[0xF7FF454A:0xF7FF454C], [b"f", b"\xa5"])
        self.assertEqual(mem[0xF7FF5E9B:0xF7FF5E9D], [b"l", b"s"])
        self.assertEqual(mem[0xF7FFDF58:0xF7FFDF5A], [b"l", b"s"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160741210)
        self.assertEqual(cpu.ESI, 4160708253)

    def test_MOVSW_2(self):
        """Instruction MOVSW_2
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454A, "f\xa5")
        mem.write(0xF7FF5E9B, "ls")
        mem.write(0xF7FFDF4A, "\x00\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF454A
        cpu.EDI = 0xF7FFDF4A
        cpu.ESI = 0xF7FF5E9B
        cpu.execute()

        self.assertEqual(mem[0xF7FF454A:0xF7FF454C], [b"f", b"\xa5"])
        self.assertEqual(mem[0xF7FF5E9B:0xF7FF5E9D], [b"l", b"s"])
        self.assertEqual(mem[0xF7FFDF4A:0xF7FFDF4C], [b"l", b"s"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160741196)
        self.assertEqual(cpu.ESI, 4160708253)

    def test_MOVSW_3(self):
        """Instruction MOVSW_3
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FDA838, "/l")
        mem.write(0xF7FDAAD0, "\x00\x00")
        mem.write(0xF7FF454A, "f\xa5")
        cpu.DF = False
        cpu.EIP = 0xF7FF454A
        cpu.EDI = 0xF7FDAAD0
        cpu.ESI = 0xF7FDA838
        cpu.execute()

        self.assertEqual(mem[0xF7FDA838:0xF7FDA83A], [b"/", b"l"])
        self.assertEqual(mem[0xF7FDAAD0:0xF7FDAAD2], [b"/", b"l"])
        self.assertEqual(mem[0xF7FF454A:0xF7FF454C], [b"f", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160596690)
        self.assertEqual(cpu.ESI, 4160596026)

    def test_MOVSW_4(self):
        """Instruction MOVSW_4
        Groups:
        0x804d559:  movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x804D559, "f\xa5")
        mem.write(0x807E031, "\xe0\x07")
        mem.write(0x807F031, "\xf0\x07")
        cpu.DF = False
        cpu.EIP = 0x804D559
        cpu.EDI = 0x807F031
        cpu.ESI = 0x807E031
        cpu.execute()

        self.assertEqual(mem[0x804D559:0x804D55B], [b"f", b"\xa5"])
        self.assertEqual(mem[0x807E031:0x807E033], [b"\xe0", b"\x07"])
        self.assertEqual(mem[0x807F031:0x807F033], [b"\xe0", b"\x07"])
        self.assertEqual(cpu.EIP, 134534491)
        self.assertEqual(cpu.EDI, 134737971)
        self.assertEqual(cpu.ESI, 134733875)

    def test_MOVSW_5(self):
        """Instruction MOVSW_5
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454A, "f\xa5")
        mem.write(0xF7FF5E9B, "ls")
        mem.write(0xF7FFDF29, "\x00\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF454A
        cpu.EDI = 0xF7FFDF29
        cpu.ESI = 0xF7FF5E9B
        cpu.execute()

        self.assertEqual(mem[0xF7FF454A:0xF7FF454C], [b"f", b"\xa5"])
        self.assertEqual(mem[0xF7FF5E9B:0xF7FF5E9D], [b"l", b"s"])
        self.assertEqual(mem[0xF7FFDF29:0xF7FFDF2B], [b"l", b"s"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160741163)
        self.assertEqual(cpu.ESI, 4160708253)

    def test_MOVSW_6(self):
        """Instruction MOVSW_6
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454A, "f\xa5")
        mem.write(0xF7FF5E9B, "ls")
        mem.write(0xF7FFDF3C, "\x00\x00")
        cpu.DF = False
        cpu.EIP = 0xF7FF454A
        cpu.EDI = 0xF7FFDF3C
        cpu.ESI = 0xF7FF5E9B
        cpu.execute()

        self.assertEqual(mem[0xF7FF454A:0xF7FF454C], [b"f", b"\xa5"])
        self.assertEqual(mem[0xF7FF5E9B:0xF7FF5E9D], [b"l", b"s"])
        self.assertEqual(mem[0xF7FFDF3C:0xF7FFDF3E], [b"l", b"s"])
        self.assertEqual(cpu.EIP, 4160701772)
        self.assertEqual(cpu.EDI, 4160741182)
        self.assertEqual(cpu.ESI, 4160708253)

    def test_MOVSW_7(self):
        """Instruction MOVSW_7
        Groups:
        0xf7ff464f: movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD7000, 0x1000, "rwx")
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FD7039, "/l")
        mem.write(0xF7FDA838, "\x00\x00")
        mem.write(0xF7FF464F, "f\xa5")
        cpu.DF = False
        cpu.EIP = 0xF7FF464F
        cpu.EDI = 0xF7FDA838
        cpu.ESI = 0xF7FD7039
        cpu.execute()

        self.assertEqual(mem[0xF7FD7039:0xF7FD703B], [b"/", b"l"])
        self.assertEqual(mem[0xF7FDA838:0xF7FDA83A], [b"/", b"l"])
        self.assertEqual(mem[0xF7FF464F:0xF7FF4651], [b"f", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160702033)
        self.assertEqual(cpu.EDI, 4160596026)
        self.assertEqual(cpu.ESI, 4160581691)

    def test_MOVSW_8(self):
        """Instruction MOVSW_8
        Groups:
        0xf7ff464f: movsw   word ptr es:[edi], word ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0x80481E9, "li")
        mem.write(0xF7FDAAC4, "\x00\x00")
        mem.write(0xF7FF464F, "f\xa5")
        cpu.DF = False
        cpu.EIP = 0xF7FF464F
        cpu.EDI = 0xF7FDAAC4
        cpu.ESI = 0x80481E9
        cpu.execute()

        self.assertEqual(mem[0x80481E9:0x80481EB], [b"l", b"i"])
        self.assertEqual(mem[0xF7FDAAC4:0xF7FDAAC6], [b"l", b"i"])
        self.assertEqual(mem[0xF7FF464F:0xF7FF4651], [b"f", b"\xa5"])
        self.assertEqual(cpu.EIP, 4160702033)
        self.assertEqual(cpu.EDI, 4160596678)
        self.assertEqual(cpu.ESI, 134513131)

    def test_MOVSX_1(self):
        """Instruction MOVSX_1
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = 0x64
        cpu.ECX = 0x63
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C5:0xF7FF06C8], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 4160685768)
        self.assertEqual(cpu.DL, 100)
        self.assertEqual(cpu.ECX, 100)

    def test_MOVSX_10(self):
        """Instruction MOVSX_10
        Groups:
        0x805ba7e:  movsx   cx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA7E, "f\x0f\xbe\xca")
        cpu.EIP = 0x805BA7E
        cpu.DL = 0xEC
        cpu.CX = 0x1
        cpu.execute()

        self.assertEqual(mem[0x805BA7E:0x805BA82], [b"f", b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 134593154)
        self.assertEqual(cpu.DL, 236)
        self.assertEqual(cpu.CX, 65516)

    def test_MOVSX_11(self):
        """Instruction MOVSX_11
        Groups:
        0xf7ff069c: movsx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD6000, 0x1000, "rwx")
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FD6FF2, "\x00")
        mem.write(0xF7FF069C, "\x0f\xbe\x02")
        cpu.EIP = 0xF7FF069C
        cpu.EDX = 0xF7FD6FF2
        cpu.EAX = 0x80481F2
        cpu.execute()

        self.assertEqual(mem[0xF7FD6FF2:0xF7FD6FF3], [b"\x00"])
        self.assertEqual(mem[0xF7FF069C:0xF7FF069F], [b"\x0f", b"\xbe", b"\x02"])
        self.assertEqual(cpu.EIP, 4160685727)
        self.assertEqual(cpu.EDX, 4160581618)
        self.assertEqual(cpu.EAX, 0)

    def test_MOVSX_12(self):
        """Instruction MOVSX_12
        Groups:
        0xf7ff05d7: movsx   esi, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05D7, "\x0f\xbe\xf1")
        cpu.EIP = 0xF7FF05D7
        cpu.ESI = 0x36
        cpu.CL = 0x36
        cpu.execute()

        self.assertEqual(mem[0xF7FF05D7:0xF7FF05DA], [b"\x0f", b"\xbe", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160685530)
        self.assertEqual(cpu.ESI, 54)
        self.assertEqual(cpu.CL, 54)

    def test_MOVSX_13(self):
        """Instruction MOVSX_13
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = 0x61
        cpu.ECX = 0x63
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C5:0xF7FF06C8], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 4160685768)
        self.assertEqual(cpu.DL, 97)
        self.assertEqual(cpu.ECX, 97)

    def test_MOVSX_14(self):
        """Instruction MOVSX_14
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = 0x2E
        cpu.EAX = 0x2E
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C2:0xF7FF06C5], [b"\x0f", b"\xbe", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160685765)
        self.assertEqual(cpu.AL, 46)
        self.assertEqual(cpu.EAX, 46)

    def test_MOVSX_15(self):
        """Instruction MOVSX_15
        Groups:
        0xf7ff05da: movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05DA, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF05DA
        cpu.DL = 0x36
        cpu.ECX = 0x36
        cpu.execute()

        self.assertEqual(mem[0xF7FF05DA:0xF7FF05DD], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 4160685533)
        self.assertEqual(cpu.DL, 54)
        self.assertEqual(cpu.ECX, 54)

    def test_MOVSX_16(self):
        """Instruction MOVSX_16
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = 0x63
        cpu.EAX = 0x63
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C2:0xF7FF06C5], [b"\x0f", b"\xbe", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160685765)
        self.assertEqual(cpu.AL, 99)
        self.assertEqual(cpu.EAX, 99)

    def test_MOVSX_17(self):
        """Instruction MOVSX_17
        Groups:
        0xf7ff05d7: movsx   esi, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05D7, "\x0f\xbe\xf1")
        cpu.EIP = 0xF7FF05D7
        cpu.ESI = 0x36
        cpu.CL = 0x36
        cpu.execute()

        self.assertEqual(mem[0xF7FF05D7:0xF7FF05DA], [b"\x0f", b"\xbe", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160685530)
        self.assertEqual(cpu.ESI, 54)
        self.assertEqual(cpu.CL, 54)

    def test_MOVSX_18(self):
        """Instruction MOVSX_18
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = 0x63
        cpu.EAX = 0x63
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C2:0xF7FF06C5], [b"\x0f", b"\xbe", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160685765)
        self.assertEqual(cpu.AL, 99)
        self.assertEqual(cpu.EAX, 99)

    def test_MOVSX_19(self):
        """Instruction MOVSX_19
        Groups:
        0x805ba82:  movsx   cx, byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA82, "f\x0f\xbeM\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x805BA82
        cpu.CX = 0xFFEC
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BA82:0x805BA87], [b"f", b"\x0f", b"\xbe", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134593159)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_MOVSX_2(self):
        """Instruction MOVSX_2
        Groups:
        0xf7ff069c: movsx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD7000, 0x1000, "rwx")
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FD7038, "\x00")
        mem.write(0xF7FF069C, "\x0f\xbe\x02")
        cpu.EIP = 0xF7FF069C
        cpu.EDX = 0xF7FD7038
        cpu.EAX = 0x80481F2
        cpu.execute()

        self.assertEqual(mem[0xF7FD7038:0xF7FD7039], [b"\x00"])
        self.assertEqual(mem[0xF7FF069C:0xF7FF069F], [b"\x0f", b"\xbe", b"\x02"])
        self.assertEqual(cpu.EIP, 4160685727)
        self.assertEqual(cpu.EDX, 4160581688)
        self.assertEqual(cpu.EAX, 0)

    def test_MOVSX_20(self):
        """Instruction MOVSX_20
        Groups:
        0x805ba91:  movsx   ecx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA91, "\x0f\xbfM\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x805BA91
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805BA91:0x805BA95], [b"\x0f", b"\xbf", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134593173)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSX_21(self):
        """Instruction MOVSX_21
        Groups:
        0xf7ff05da: movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05DA, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF05DA
        cpu.DL = 0x36
        cpu.ECX = 0x36
        cpu.execute()

        self.assertEqual(mem[0xF7FF05DA:0xF7FF05DD], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 4160685533)
        self.assertEqual(cpu.DL, 54)
        self.assertEqual(cpu.ECX, 54)

    def test_MOVSX_3(self):
        """Instruction MOVSX_3
        Groups:
        0x805ba87:  movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA87, "\x0f\xbe\xca")
        cpu.EIP = 0x805BA87
        cpu.DL = 0xEC
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805BA87:0x805BA8A], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 134593162)
        self.assertEqual(cpu.DL, 236)
        self.assertEqual(cpu.ECX, 4294967276)

    def test_MOVSX_4(self):
        """Instruction MOVSX_4
        Groups:
        0x805ba8d:  movsx   ecx, byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA8D, "\x0f\xbeM\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x805BA8D
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0x3EC
        cpu.execute()

        self.assertEqual(mem[0x805BA8D:0x805BA91], [b"\x0f", b"\xbe", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134593169)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 0)

    def test_MOVSX_5(self):
        """Instruction MOVSX_5
        Groups:
        0xf7ff05d7: movsx   esi, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05D7, "\x0f\xbe\xf1")
        cpu.EIP = 0xF7FF05D7
        cpu.ESI = 0x36
        cpu.CL = 0x36
        cpu.execute()

        self.assertEqual(mem[0xF7FF05D7:0xF7FF05DA], [b"\x0f", b"\xbe", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160685530)
        self.assertEqual(cpu.ESI, 54)
        self.assertEqual(cpu.CL, 54)

    def test_MOVSX_6(self):
        """Instruction MOVSX_6
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = 0x61
        cpu.ECX = 0x2E
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C5:0xF7FF06C8], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 4160685768)
        self.assertEqual(cpu.DL, 97)
        self.assertEqual(cpu.ECX, 97)

    def test_MOVSX_7(self):
        """Instruction MOVSX_7
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = 0x63
        cpu.EAX = 0x63
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C2:0xF7FF06C5], [b"\x0f", b"\xbe", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160685765)
        self.assertEqual(cpu.AL, 99)
        self.assertEqual(cpu.EAX, 99)

    def test_MOVSX_8(self):
        """Instruction MOVSX_8
        Groups:
        0xf7ff05da: movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05DA, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF05DA
        cpu.DL = 0x36
        cpu.ECX = 0x36
        cpu.execute()

        self.assertEqual(mem[0xF7FF05DA:0xF7FF05DD], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 4160685533)
        self.assertEqual(cpu.DL, 54)
        self.assertEqual(cpu.ECX, 54)

    def test_MOVSX_9(self):
        """Instruction MOVSX_9
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = 0x6C
        cpu.ECX = 0x2E
        cpu.execute()

        self.assertEqual(mem[0xF7FF06C5:0xF7FF06C8], [b"\x0f", b"\xbe", b"\xca"])
        self.assertEqual(cpu.EIP, 4160685768)
        self.assertEqual(cpu.DL, 108)
        self.assertEqual(cpu.ECX, 108)

    def test_MOVZX_1(self):
        """Instruction MOVZX_1
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E20000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E20B40, "\x11")
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = 0xF7E20B34
        cpu.execute()

        self.assertEqual(mem[0xF7E20B40:0xF7E20B41], [b"\x11"])
        self.assertEqual(mem[0xF7FE7239:0xF7FE723D], [b"\x0f", b"\xb6", b"@", b"\x0c"])
        self.assertEqual(cpu.EIP, 4160647741)
        self.assertEqual(cpu.EAX, 17)

    def test_MOVZX_10(self):
        """Instruction MOVZX_10
        Groups:
        0xf7fe720c: movzx   edx, word ptr [edx + ecx*2]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E287DA, "\x02\x00")
        mem.write(0xF7FE720C, "\x0f\xb7\x14J")
        cpu.EIP = 0xF7FE720C
        cpu.EDX = 0xF7E281C2
        cpu.ECX = 0x30C
        cpu.execute()

        self.assertEqual(mem[0xF7E287DA:0xF7E287DC], [b"\x02", b"\x00"])
        self.assertEqual(mem[0xF7FE720C:0xF7FE7210], [b"\x0f", b"\xb7", b"\x14", b"J"])
        self.assertEqual(cpu.EIP, 4160647696)
        self.assertEqual(cpu.EDX, 2)
        self.assertEqual(cpu.ECX, 780)

    def test_MOVZX_11(self):
        """Instruction MOVZX_11
        Groups:
        0xf7fe57ac: movzx   eax, byte ptr [esi + 0x194]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FDA9EC, "\x15")
        mem.write(0xF7FE57AC, "\x0f\xb6\x86\x94\x01\x00\x00")
        cpu.EIP = 0xF7FE57AC
        cpu.ESI = 0xF7FDA858
        cpu.EAX = 0xF7FDC3BC
        cpu.execute()

        self.assertEqual(mem[0xF7FDA9EC:0xF7FDA9ED], [b"\x15"])
        self.assertEqual(
            mem[0xF7FE57AC:0xF7FE57B3],
            [b"\x0f", b"\xb6", b"\x86", b"\x94", b"\x01", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160640947)
        self.assertEqual(cpu.ESI, 4160596056)
        self.assertEqual(cpu.EAX, 21)

    def test_MOVZX_12(self):
        """Instruction MOVZX_12
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E25000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E25FD3, "t")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E25FD3
        cpu.EAX = 0x72
        cpu.execute()

        self.assertEqual(mem[0xF7E25FD3:0xF7E25FD4], [b"t"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158808019)
        self.assertEqual(cpu.EAX, 116)

    def test_MOVZX_13(self):
        """Instruction MOVZX_13
        Groups:
        0xf7fe5796: movzx   edx, byte ptr [eax + 0xd]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E20000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E202F1, "\x00")
        mem.write(0xF7FE5796, "\x0f\xb6P\r")
        cpu.EIP = 0xF7FE5796
        cpu.EDX = 0x1
        cpu.EAX = 0xF7E202E4
        cpu.execute()

        self.assertEqual(mem[0xF7E202F1:0xF7E202F2], [b"\x00"])
        self.assertEqual(mem[0xF7FE5796:0xF7FE579A], [b"\x0f", b"\xb6", b"P", b"\r"])
        self.assertEqual(cpu.EIP, 4160640922)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.EAX, 4158784228)

    def test_MOVZX_14(self):
        """Instruction MOVZX_14
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E26000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E26A2D, "1")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E26A2D
        cpu.EAX = 0x5F
        cpu.execute()

        self.assertEqual(mem[0xF7E26A2D:0xF7E26A2E], [b"1"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158810669)
        self.assertEqual(cpu.EAX, 49)

    def test_MOVZX_15(self):
        """Instruction MOVZX_15
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E23000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E23345, "\x00")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E23345
        cpu.EAX = 0x65
        cpu.execute()

        self.assertEqual(mem[0xF7E23345:0xF7E23346], [b"\x00"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158796613)
        self.assertEqual(cpu.EAX, 0)

    def test_MOVZX_16(self):
        """Instruction MOVZX_16
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E24000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E24B9E, "r")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E24B9E
        cpu.EAX = 0x6F
        cpu.execute()

        self.assertEqual(mem[0xF7E24B9E:0xF7E24B9F], [b"r"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158802846)
        self.assertEqual(cpu.EAX, 114)

    def test_MOVZX_17(self):
        """Instruction MOVZX_17
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E1B000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E1BD70, "\x11")
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = 0xF7E1BD64
        cpu.execute()

        self.assertEqual(mem[0xF7E1BD70:0xF7E1BD71], [b"\x11"])
        self.assertEqual(mem[0xF7FE7239:0xF7FE723D], [b"\x0f", b"\xb6", b"@", b"\x0c"])
        self.assertEqual(cpu.EIP, 4160647741)
        self.assertEqual(cpu.EAX, 17)

    def test_MOVZX_18(self):
        """Instruction MOVZX_18
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FDC56D, "l")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7FDC56D
        cpu.EAX = 0x64
        cpu.execute()

        self.assertEqual(mem[0xF7FDC56D:0xF7FDC56E], [b"l"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4160603501)
        self.assertEqual(cpu.EAX, 108)

    def test_MOVZX_19(self):
        """Instruction MOVZX_19
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E26000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E26A64, "r")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E26A64
        cpu.EAX = 0x75
        cpu.execute()

        self.assertEqual(mem[0xF7E26A64:0xF7E26A65], [b"r"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158810724)
        self.assertEqual(cpu.EAX, 114)

    def test_MOVZX_2(self):
        """Instruction MOVZX_2
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E24000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E24CB9, "o")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E24CB9
        cpu.EAX = 0x64
        cpu.execute()

        self.assertEqual(mem[0xF7E24CB9:0xF7E24CBA], [b"o"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158803129)
        self.assertEqual(cpu.EAX, 111)

    def test_MOVZX_20(self):
        """Instruction MOVZX_20
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E22000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E22BF1, "_")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E22BF1
        cpu.EAX = 0x5F
        cpu.execute()

        self.assertEqual(mem[0xF7E22BF1:0xF7E22BF2], [b"_"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158794737)
        self.assertEqual(cpu.EAX, 95)

    def test_MOVZX_21(self):
        """Instruction MOVZX_21
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E24000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E247E5, "\x00")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E247E5
        cpu.EAX = 0x6B
        cpu.execute()

        self.assertEqual(mem[0xF7E247E5:0xF7E247E6], [b"\x00"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158801893)
        self.assertEqual(cpu.EAX, 0)

    def test_MOVZX_3(self):
        """Instruction MOVZX_3
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E22000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E22BF6, "c")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E22BF6
        cpu.EAX = 0x65
        cpu.execute()

        self.assertEqual(mem[0xF7E22BF6:0xF7E22BF7], [b"c"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158794742)
        self.assertEqual(cpu.EAX, 99)

    def test_MOVZX_4(self):
        """Instruction MOVZX_4
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E1E000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E1EC70, "\x11")
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = 0xF7E1EC64
        cpu.execute()

        self.assertEqual(mem[0xF7E1EC70:0xF7E1EC71], [b"\x11"])
        self.assertEqual(mem[0xF7FE7239:0xF7FE723D], [b"\x0f", b"\xb6", b"@", b"\x0c"])
        self.assertEqual(cpu.EIP, 4160647741)
        self.assertEqual(cpu.EAX, 17)

    def test_MOVZX_5(self):
        """Instruction MOVZX_5
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E27000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E27850, "s")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E27850
        cpu.EAX = 0x74
        cpu.execute()

        self.assertEqual(mem[0xF7E27850:0xF7E27851], [b"s"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158814288)
        self.assertEqual(cpu.EAX, 115)

    def test_MOVZX_6(self):
        """Instruction MOVZX_6
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E21000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E21A00, "\x11")
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = 0xF7E219F4
        cpu.execute()

        self.assertEqual(mem[0xF7E21A00:0xF7E21A01], [b"\x11"])
        self.assertEqual(mem[0xF7FE7239:0xF7FE723D], [b"\x0f", b"\xb6", b"@", b"\x0c"])
        self.assertEqual(cpu.EIP, 4160647741)
        self.assertEqual(cpu.EAX, 17)

    def test_MOVZX_7(self):
        """Instruction MOVZX_7
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E27000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7E271C0, "y")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = 0xF7E271C0
        cpu.EAX = 0x74
        cpu.execute()

        self.assertEqual(mem[0xF7E271C0:0xF7E271C1], [b"y"])
        self.assertEqual(mem[0xF7FE56AC:0xF7FE56AF], [b"\x0f", b"\xb6", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640687)
        self.assertEqual(cpu.EDX, 4158812608)
        self.assertEqual(cpu.EAX, 121)

    def test_MOVZX_8(self):
        """Instruction MOVZX_8
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FDC3C8, '"')
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = 0xF7FDC3BC
        cpu.execute()

        self.assertEqual(mem[0xF7FDC3C8:0xF7FDC3C9], [b'"'])
        self.assertEqual(mem[0xF7FE7239:0xF7FE723D], [b"\x0f", b"\xb6", b"@", b"\x0c"])
        self.assertEqual(cpu.EIP, 4160647741)
        self.assertEqual(cpu.EAX, 34)

    def test_MOVZX_9(self):
        """Instruction MOVZX_9
        Groups:
        0xf7fec2c2: movzx   edx, word ptr [eax + 4]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E29000, 0x1000, "rwx")
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7E295F8, "\x0c\x00")
        mem.write(0xF7FEC2C2, "\x0f\xb7P\x04")
        cpu.EIP = 0xF7FEC2C2
        cpu.EDX = 0x24
        cpu.EAX = 0xF7E295F4
        cpu.execute()

        self.assertEqual(mem[0xF7E295F8:0xF7E295FA], [b"\x0c", b"\x00"])
        self.assertEqual(mem[0xF7FEC2C2:0xF7FEC2C6], [b"\x0f", b"\xb7", b"P", b"\x04"])
        self.assertEqual(cpu.EIP, 4160668358)
        self.assertEqual(cpu.EDX, 12)
        self.assertEqual(cpu.EAX, 4158821876)

    def test_MOV_1(self):
        """Instruction MOV_1
        Groups:
        0xf7fe22fb: mov     dword ptr [ebp - 0x9c], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0xF7FE22FB, "\x89\x85d\xff\xff\xff")
        mem.write(0xFFFFCFEC, "\xff\x0f\x00\x00")
        cpu.EIP = 0xF7FE22FB
        cpu.EBP = 0xFFFFD088
        cpu.EAX = 0xF7FC3A7C
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE22FB:0xF7FE2301], [b"\x89", b"\x85", b"d", b"\xff", b"\xff", b"\xff"]
        )
        self.assertEqual(mem[0xFFFFCFEC:0xFFFFCFF0], [b"|", b":", b"\xfc", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160627457)
        self.assertEqual(cpu.EBP, 4294955144)
        self.assertEqual(cpu.EAX, 4160502396)

    def test_MOV_10(self):
        """Instruction MOV_10
        Groups:
        0x8057c2f:  mov     esp, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08057000, 0x1000, "rwx")
        mem.write(0x8057C2F, "\x89\xd4")
        cpu.EIP = 0x8057C2F
        cpu.EDX = 0xFFFFC606
        cpu.ESP = 0xFFFFC606
        cpu.execute()

        self.assertEqual(mem[0x8057C2F:0x8057C31], [b"\x89", b"\xd4"])
        self.assertEqual(cpu.EIP, 134577201)
        self.assertEqual(cpu.EDX, 4294952454)
        self.assertEqual(cpu.ESP, 4294952454)

    def test_MOV_11(self):
        """Instruction MOV_11
        Groups:
        0xf7fe56a0: mov     ecx, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A0, "\x89\xf9")
        cpu.EIP = 0xF7FE56A0
        cpu.EDI = 0xC498786F
        cpu.ECX = 0x710FF860
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A0:0xF7FE56A2], [b"\x89", b"\xf9"])
        self.assertEqual(cpu.EIP, 4160640674)
        self.assertEqual(cpu.EDI, 3298326639)
        self.assertEqual(cpu.ECX, 3298326639)

    def test_MOV_12(self):
        """Instruction MOV_12
        Groups:
        0xf7fe71a8: mov     eax, dword ptr [esi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2B000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7E2B33C, "T\xa6\x1a\x00")
        mem.write(0xF7FE71A8, "\x8b\x06")
        cpu.EIP = 0xF7FE71A8
        cpu.ESI = 0xF7E2B33C
        cpu.EAX = 0xF7FBF650
        cpu.execute()

        self.assertEqual(mem[0xF7E2B33C:0xF7E2B340], [b"T", b"\xa6", b"\x1a", b"\x00"])
        self.assertEqual(mem[0xF7FE71A8:0xF7FE71AA], [b"\x8b", b"\x06"])
        self.assertEqual(cpu.EIP, 4160647594)
        self.assertEqual(cpu.ESI, 4158829372)
        self.assertEqual(cpu.EAX, 1746516)

    def test_MOV_13(self):
        """Instruction MOV_13
        Groups:
        0xf7fe4f32: mov     edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F32, "\x89\xc2")
        cpu.EIP = 0xF7FE4F32
        cpu.EDX = 0x3105395
        cpu.EAX = 0x20002000
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F32:0xF7FE4F34], [b"\x89", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160638772)
        self.assertEqual(cpu.EDX, 536879104)
        self.assertEqual(cpu.EAX, 536879104)

    def test_MOV_14(self):
        """Instruction MOV_14
        Groups:
        0xf7fe0b98: mov     esi, dword ptr [ebp - 0x30]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE0B98, "\x8bu\xd0")
        mem.write(0xFFFFD678, "\x10\xd0\xff\xf7")
        cpu.EIP = 0xF7FE0B98
        cpu.EBP = 0xFFFFD6A8
        cpu.ESI = 0xF7FDC44C
        cpu.execute()

        self.assertEqual(mem[0xF7FE0B98:0xF7FE0B9B], [b"\x8b", b"u", b"\xd0"])
        self.assertEqual(mem[0xFFFFD678:0xFFFFD67C], [b"\x10", b"\xd0", b"\xff", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160621467)
        self.assertEqual(cpu.EBP, 4294956712)
        self.assertEqual(cpu.ESI, 4160737296)

    def test_MOV_15(self):
        """Instruction MOV_15
        Groups:
        0xf7ff167f: mov     eax, dword ptr [esp + 0x20]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF167F, "\x8bD$ ")
        mem.write(0xFFFFD4B0, "\x08\x02\x00\x00")
        cpu.EIP = 0xF7FF167F
        cpu.EAX = 0x209
        cpu.ESP = 0xFFFFD490
        cpu.execute()

        self.assertEqual(mem[0xF7FF167F:0xF7FF1683], [b"\x8b", b"D", b"$", b" "])
        self.assertEqual(mem[0xFFFFD4B0:0xFFFFD4B4], [b"\x08", b"\x02", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160689795)
        self.assertEqual(cpu.ESP, 4294956176)
        self.assertEqual(cpu.EAX, 520)

    def test_MOV_16(self):
        """Instruction MOV_16
        Groups:
        0xf7fe576f: mov     dword ptr [esp], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE576F, "\x89\x04$")
        mem.write(0xFFFFD380, "\xe8\xd3\xff\xff")
        cpu.EIP = 0xF7FE576F
        cpu.ESP = 0xFFFFD380
        cpu.EAX = 0xFFFFD3E8
        cpu.execute()

        self.assertEqual(mem[0xF7FE576F:0xF7FE5772], [b"\x89", b"\x04", b"$"])
        self.assertEqual(mem[0xFFFFD380:0xFFFFD384], [b"\xe8", b"\xd3", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160640882)
        self.assertEqual(cpu.EAX, 4294956008)
        self.assertEqual(cpu.ESP, 4294955904)

    def test_MOV_17(self):
        """Instruction MOV_17
        Groups:
        0xf7fe7219: mov     dword ptr [ebp - 0x74], edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE7219, "\x89}\x8c")
        mem.write(0xFFFFD484, "\x88\xab\xfd\xf7")
        cpu.EIP = 0xF7FE7219
        cpu.EDI = 0xF7FDAB88
        cpu.EBP = 0xFFFFD4F8
        cpu.execute()

        self.assertEqual(mem[0xF7FE7219:0xF7FE721C], [b"\x89", b"}", b"\x8c"])
        self.assertEqual(mem[0xFFFFD484:0xFFFFD488], [b"\x88", b"\xab", b"\xfd", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160647708)
        self.assertEqual(cpu.EDI, 4160596872)
        self.assertEqual(cpu.EBP, 4294956280)

    def test_MOV_18(self):
        """Instruction MOV_18
        Groups:
        0xf7fe99cf: mov     dword ptr [ebp - 0x20], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE99CF, "\x89E\xe0")
        mem.write(0xFFFFD478, "\x00\x00\x00\x00")
        cpu.EIP = 0xF7FE99CF
        cpu.EBP = 0xFFFFD498
        cpu.EAX = 0xFFFFFFFE
        cpu.execute()

        self.assertEqual(mem[0xF7FE99CF:0xF7FE99D2], [b"\x89", b"E", b"\xe0"])
        self.assertEqual(mem[0xFFFFD478:0xFFFFD47C], [b"\xfe", b"\xff", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 4160657874)
        self.assertEqual(cpu.EBP, 4294956184)
        self.assertEqual(cpu.EAX, 4294967294)

    def test_MOV_19(self):
        """Instruction MOV_19
        Groups:
        0xf7febbf1: mov     edi, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBBF1, "\x89\xc7")
        cpu.EIP = 0xF7FEBBF1
        cpu.EDI = 0xF7FFD938
        cpu.EAX = 0xF7E28049
        cpu.execute()

        self.assertEqual(mem[0xF7FEBBF1:0xF7FEBBF3], [b"\x89", b"\xc7"])
        self.assertEqual(cpu.EIP, 4160666611)
        self.assertEqual(cpu.EDI, 4158816329)
        self.assertEqual(cpu.EAX, 4158816329)

    def test_MOV_2(self):
        """Instruction MOV_2
        Groups:
        0x8072b02:  mov     eax, 0x137
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072B02, "\xb87\x01\x00\x00")
        cpu.EIP = 0x8072B02
        cpu.EAX = 0x137
        cpu.execute()

        self.assertEqual(mem[0x8072B02:0x8072B07], [b"\xb8", b"7", b"\x01", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134687495)
        self.assertEqual(cpu.EAX, 311)

    def test_MOV_20(self):
        """Instruction MOV_20
        Groups:
        0x8059513:  mov     edx, esp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059513, "\x89\xe2")
        cpu.EIP = 0x8059513
        cpu.EDX = 0xFFFFC606
        cpu.ESP = 0xFFFFC606
        cpu.execute()

        self.assertEqual(mem[0x8059513:0x8059515], [b"\x89", b"\xe2"])
        self.assertEqual(cpu.EIP, 134583573)
        self.assertEqual(cpu.EDX, 4294952454)
        self.assertEqual(cpu.ESP, 4294952454)

    def test_MOV_21(self):
        """Instruction MOV_21
        Groups:
        0x8077737:  mov     edx, 0
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08077000, 0x1000, "rwx")
        mem.write(0x8077737, "\xba\x00\x00\x00\x00")
        cpu.EIP = 0x8077737
        cpu.EDX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8077737:0x807773C], [b"\xba", b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134707004)
        self.assertEqual(cpu.EDX, 0)

    def test_MOV_3(self):
        """Instruction MOV_3
        Groups:
        0xf7ff3e68: mov     al, byte ptr [ecx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7E280A1, "2")
        mem.write(0xF7FF3E68, "\x8a\x01")
        cpu.EIP = 0xF7FF3E68
        cpu.AL = 0x2E
        cpu.ECX = 0xF7E280A1
        cpu.execute()

        self.assertEqual(mem[0xF7E280A1:0xF7E280A2], [b"2"])
        self.assertEqual(mem[0xF7FF3E68:0xF7FF3E6A], [b"\x8a", b"\x01"])
        self.assertEqual(cpu.EIP, 4160700010)
        self.assertEqual(cpu.AL, 50)
        self.assertEqual(cpu.ECX, 4158816417)

    def test_MOV_4(self):
        """Instruction MOV_4
        Groups:
        0x8058801:  mov     ebp, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08058000, 0x1000, "rwx")
        mem.write(0x8058801, "\x89\xdd")
        cpu.EIP = 0x8058801
        cpu.EBP = 0xFFFFB600
        cpu.EBX = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8058801:0x8058803], [b"\x89", b"\xdd"])
        self.assertEqual(cpu.EIP, 134580227)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.EBX, 4294948352)

    def test_MOV_5(self):
        """Instruction MOV_5
        Groups:
        0xf7fe4fcb: mov     eax, dword ptr [esp + 0x5c]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4FCB, "\x8bD$\\")
        mem.write(0xFFFFD34C, "X\xa8\xfd\xf7")
        cpu.EIP = 0xF7FE4FCB
        cpu.EAX = 0xFFFFD3F0
        cpu.ESP = 0xFFFFD2F0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FCB:0xF7FE4FCF], [b"\x8b", b"D", b"$", b"\\"])
        self.assertEqual(mem[0xFFFFD34C:0xFFFFD350], [b"X", b"\xa8", b"\xfd", b"\xf7"])
        self.assertEqual(cpu.EIP, 4160638927)
        self.assertEqual(cpu.ESP, 4294955760)
        self.assertEqual(cpu.EAX, 4160596056)

    def test_MOV_6(self):
        """Instruction MOV_6
        Groups:
        0xf7ff3e68: mov     al, byte ptr [ecx]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FDC4F5, "a")
        mem.write(0xF7FF3E68, "\x8a\x01")
        cpu.EIP = 0xF7FF3E68
        cpu.AL = 0x74
        cpu.ECX = 0xF7FDC4F5
        cpu.execute()

        self.assertEqual(mem[0xF7FDC4F5:0xF7FDC4F6], [b"a"])
        self.assertEqual(mem[0xF7FF3E68:0xF7FF3E6A], [b"\x8a", b"\x01"])
        self.assertEqual(cpu.EIP, 4160700010)
        self.assertEqual(cpu.AL, 97)
        self.assertEqual(cpu.ECX, 4160603381)

    def test_MOV_7(self):
        """Instruction MOV_7
        Groups:
        0x805083b:  mov     eax, 0x137
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08050000, 0x1000, "rwx")
        mem.write(0x805083B, "\xb87\x01\x00\x00")
        cpu.EIP = 0x805083B
        cpu.EAX = 0x137
        cpu.execute()

        self.assertEqual(mem[0x805083B:0x8050840], [b"\xb8", b"7", b"\x01", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134547520)
        self.assertEqual(cpu.EAX, 311)

    def test_MOV_8(self):
        """Instruction MOV_8
        Groups:
        0xf7fe4d09: mov     eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4D09, "\x89\xc8")
        cpu.EIP = 0xF7FE4D09
        cpu.EAX = 0xF7FDC642
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D09:0xF7FE4D0B], [b"\x89", b"\xc8"])
        self.assertEqual(cpu.EIP, 4160638219)
        self.assertEqual(cpu.ECX, 6)
        self.assertEqual(cpu.EAX, 6)

    def test_MOV_9(self):
        """Instruction MOV_9
        Groups:
        0xf7fe9dad: mov     byte ptr [eax], 0x2f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FE9DAD, "\xc6\x00/")
        mem.write(0xF7FFDF2B, "\x00")
        cpu.EIP = 0xF7FE9DAD
        cpu.EAX = 0xF7FFDF2B
        cpu.execute()

        self.assertEqual(mem[0xF7FE9DAD:0xF7FE9DB0], [b"\xc6", b"\x00", b"/"])
        self.assertEqual(mem[0xF7FFDF2B:0xF7FFDF2C], [b"/"])
        self.assertEqual(cpu.EIP, 4160658864)
        self.assertEqual(cpu.EAX, 4160741163)

    def test_NEG_1(self):
        """Instruction NEG_1
        Groups:
        0xf7ff15a4: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = 0xF7FFDC28
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF15A4:0xF7FF15A6], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160689574)
        self.assertEqual(cpu.EDX, 134226904)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_NEG_10(self):
        """Instruction NEG_10
        Groups:
        0xf7ff15a4: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = 0xF7FFDEA8
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF15A4:0xF7FF15A6], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160689574)
        self.assertEqual(cpu.EDX, 134226264)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_NEG_11(self):
        """Instruction NEG_11
        Groups:
        0xf7fdea7d: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDE000, 0x1000, "rwx")
        mem.write(0xF7FDEA7D, "\xf7\xd8")
        cpu.EIP = 0xF7FDEA7D
        cpu.EAX = 0x1
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FDEA7D:0xF7FDEA7F], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160612991)
        self.assertEqual(cpu.EAX, 4294967295)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_12(self):
        """Instruction NEG_12
        Groups:
        0xf7fe270f: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE270F, "\xf7\xd8")
        cpu.EIP = 0xF7FE270F
        cpu.EAX = 0x6FFFFEF5
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE270F:0xF7FE2711], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160628497)
        self.assertEqual(cpu.EAX, 2415919371)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_13(self):
        """Instruction NEG_13
        Groups:
        0x8065f5e:  neg     dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F5E, "\xf7]\x00")
        mem.write(0xFFFFB600, "G\x85\x1f\xfe")
        cpu.EIP = 0x8065F5E
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8065F5E:0x8065F61], [b"\xf7", b"]", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\xb9", b"z", b"\xe0", b"\x01"])
        self.assertEqual(cpu.EIP, 134635361)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_NEG_14(self):
        """Instruction NEG_14
        Groups:
        0xf7fe20a7: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE20A7, "\xf7\xda")
        cpu.EIP = 0xF7FE20A7
        cpu.EDX = 0x1000
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE20A7:0xF7FE20A9], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160626857)
        self.assertEqual(cpu.EDX, 4294963200)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_15(self):
        """Instruction NEG_15
        Groups:
        0xf7fe230f: neg     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE230F, "\xf7\xde")
        cpu.EIP = 0xF7FE230F
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.ESI = 0x1000
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE230F:0xF7FE2311], [b"\xf7", b"\xde"])
        self.assertEqual(cpu.EIP, 4160627473)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.ESI, 4294963200)
        self.assertEqual(cpu.SF, True)

    def test_NEG_16(self):
        """Instruction NEG_16
        Groups:
        0xf7ff06a5: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06A5, "\xf7\xd8")
        cpu.EIP = 0xF7FF06A5
        cpu.EAX = 0x0
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF06A5:0xF7FF06A7], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160685735)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_NEG_17(self):
        """Instruction NEG_17
        Groups:
        0xf7ff1640: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1640, "\xf7\xda")
        cpu.EIP = 0xF7FF1640
        cpu.EDX = 0x1000
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF1640:0xF7FF1642], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160689730)
        self.assertEqual(cpu.EDX, 4294963200)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_18(self):
        """Instruction NEG_18
        Groups:
        0xf7ff1591: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = 0x8
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF1591:0xF7FF1593], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160689555)
        self.assertEqual(cpu.EAX, 4294967288)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_19(self):
        """Instruction NEG_19
        Groups:
        0xf7ff1591: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = 0x8
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF1591:0xF7FF1593], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160689555)
        self.assertEqual(cpu.EAX, 4294967288)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_2(self):
        """Instruction NEG_2
        Groups:
        0xf7ff1591: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = 0x8
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF1591:0xF7FF1593], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160689555)
        self.assertEqual(cpu.EAX, 4294967288)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_20(self):
        """Instruction NEG_20
        Groups:
        0xf7fed337: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED337, "\xf7\xd8")
        cpu.EIP = 0xF7FED337
        cpu.EAX = 0x0
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FED337:0xF7FED339], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160672569)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_NEG_21(self):
        """Instruction NEG_21
        Groups:
        0xf7ff15a4: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = 0xF7FDAAD0
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF15A4:0xF7FF15A6], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160689574)
        self.assertEqual(cpu.EDX, 134370608)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_NEG_3(self):
        """Instruction NEG_3
        Groups:
        0xf7ff1591: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = 0x40
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF1591:0xF7FF1593], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160689555)
        self.assertEqual(cpu.EAX, 4294967232)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_4(self):
        """Instruction NEG_4
        Groups:
        0xf7fe6b73: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6B73, "\xf7\xda")
        cpu.EIP = 0xF7FE6B73
        cpu.EDX = 0x1000
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE6B73:0xF7FE6B75], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160646005)
        self.assertEqual(cpu.EDX, 4294963200)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_5(self):
        """Instruction NEG_5
        Groups:
        0xf7fe20a7: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE20A7, "\xf7\xda")
        cpu.EIP = 0xF7FE20A7
        cpu.EDX = 0x1000
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE20A7:0xF7FE20A9], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160626857)
        self.assertEqual(cpu.EDX, 4294963200)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_6(self):
        """Instruction NEG_6
        Groups:
        0xf7ff1591: neg     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = 0x8
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF1591:0xF7FF1593], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EIP, 4160689555)
        self.assertEqual(cpu.EAX, 4294967288)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_NEG_7(self):
        """Instruction NEG_7
        Groups:
        0xf7ff15a4: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = 0xF7E14240
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF15A4:0xF7FF15A6], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160689574)
        self.assertEqual(cpu.EDX, 136232384)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_NEG_8(self):
        """Instruction NEG_8
        Groups:
        0xf7ff15a4: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = 0xF7FDAB08
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF15A4:0xF7FF15A6], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160689574)
        self.assertEqual(cpu.EDX, 134370552)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_NEG_9(self):
        """Instruction NEG_9
        Groups:
        0xf7ff15a4: neg     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = 0xF7FDA858
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF15A4:0xF7FF15A6], [b"\xf7", b"\xda"])
        self.assertEqual(cpu.EIP, 4160689574)
        self.assertEqual(cpu.EDX, 134371240)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_NOT_1(self):
        """Instruction NOT_1
        Groups:
        0x8065e96:  not     dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065E96, "\xf7U\x00")
        mem.write(0xFFFFB600, "\xef\x00\xff\xff")
        cpu.EIP = 0x8065E96
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8065E96:0x8065E99], [b"\xf7", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x10", b"\xff", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134635161)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_NOT_10(self):
        """Instruction NOT_10
        Groups:
        0x8065e87:  not     cx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065E87, "f\xf7\xd1")
        cpu.EIP = 0x8065E87
        cpu.CX = 0xFF00
        cpu.execute()

        self.assertEqual(mem[0x8065E87:0x8065E8A], [b"f", b"\xf7", b"\xd1"])
        self.assertEqual(cpu.EIP, 134635146)
        self.assertEqual(cpu.CX, 255)

    def test_NOT_11(self):
        """Instruction NOT_11
        Groups:
        0x8065e93:  not     dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065E93, "\xf7U\x00")
        mem.write(0xFFFFB600, "\x10\xff\x00\x00")
        cpu.EIP = 0x8065E93
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8065E93:0x8065E96], [b"\xf7", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\xef", b"\x00", b"\xff", b"\xff"])
        self.assertEqual(cpu.EIP, 134635158)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_NOT_12(self):
        """Instruction NOT_12
        Groups:
        0xf7fe685e: not     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE685E, "\xf7\xd1")
        cpu.EIP = 0xF7FE685E
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FE685E:0xF7FE6860], [b"\xf7", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160645216)
        self.assertEqual(cpu.ECX, 0)

    def test_NOT_13(self):
        """Instruction NOT_13
        Groups:
        0x8065e8a:  not     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065E8A, "\xf7\xd1")
        cpu.EIP = 0x8065E8A
        cpu.ECX = 0x7FFF00FF
        cpu.execute()

        self.assertEqual(mem[0x8065E8A:0x8065E8C], [b"\xf7", b"\xd1"])
        self.assertEqual(cpu.EIP, 134635148)
        self.assertEqual(cpu.ECX, 2147548928)

    def test_NOT_14(self):
        """Instruction NOT_14
        Groups:
        0x8065e85:  not     cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065E85, "\xf6\xd1")
        cpu.EIP = 0x8065E85
        cpu.CL = 0xFF
        cpu.execute()

        self.assertEqual(mem[0x8065E85:0x8065E87], [b"\xf6", b"\xd1"])
        self.assertEqual(cpu.EIP, 134635143)
        self.assertEqual(cpu.CL, 0)

    def test_NOT_15(self):
        """Instruction NOT_15
        Groups:
        0xf7fdd6c3: not     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDD6C3, "\xf7\xd0")
        cpu.EIP = 0xF7FDD6C3
        cpu.EAX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FDD6C3:0xF7FDD6C5], [b"\xf7", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160607941)
        self.assertEqual(cpu.EAX, 0)

    def test_NOT_2(self):
        """Instruction NOT_2
        Groups:
        0x8065e8f:  not     word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065E8F, "f\xf7U\x00")
        mem.write(0xFFFFB600, "\xef\x00")
        cpu.EIP = 0x8065E8F
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8065E8F:0x8065E93], [b"f", b"\xf7", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x10", b"\xff"])
        self.assertEqual(cpu.EIP, 134635155)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_NOT_3(self):
        """Instruction NOT_3
        Groups:
        0xf7fe685e: not     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE685E, "\xf7\xd1")
        cpu.EIP = 0xF7FE685E
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE685E:0xF7FE6860], [b"\xf7", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160645216)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_NOT_4(self):
        """Instruction NOT_4
        Groups:
        0xf7e2e8fb: not     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E8FB, "\xf7\xd0")
        cpu.EIP = 0xF7E2E8FB
        cpu.EAX = 0xFFFFFFE0
        cpu.execute()

        self.assertEqual(mem[0xF7E2E8FB:0xF7E2E8FD], [b"\xf7", b"\xd0"])
        self.assertEqual(cpu.EIP, 4158843133)
        self.assertEqual(cpu.EAX, 31)

    def test_NOT_5(self):
        """Instruction NOT_5
        Groups:
        0xf7fe25d1: not     eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE25D1, "\xf7\xd0")
        cpu.EIP = 0xF7FE25D1
        cpu.EAX = 0x6
        cpu.execute()

        self.assertEqual(mem[0xF7FE25D1:0xF7FE25D3], [b"\xf7", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160628179)
        self.assertEqual(cpu.EAX, 4294967289)

    def test_NOT_6(self):
        """Instruction NOT_6
        Groups:
        0x8065e8c:  not     byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065E8C, "\xf6U\x00")
        mem.write(0xFFFFB600, "\x10")
        cpu.EIP = 0x8065E8C
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8065E8C:0x8065E8F], [b"\xf6", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\xef"])
        self.assertEqual(cpu.EIP, 134635151)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_NOT_7(self):
        """Instruction NOT_7
        Groups:
        0xf7fe685e: not     ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE685E, "\xf7\xd1")
        cpu.EIP = 0xF7FE685E
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0xF7FE685E:0xF7FE6860], [b"\xf7", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160645216)
        self.assertEqual(cpu.ECX, 0)

    def test_NOT_8(self):
        """Instruction NOT_8
        Groups:
        0xf7ff0b0e: not     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0B0E, "\xf7\xd2")
        cpu.EIP = 0xF7FF0B0E
        cpu.EDX = 0x800F0000
        cpu.execute()

        self.assertEqual(mem[0xF7FF0B0E:0xF7FF0B10], [b"\xf7", b"\xd2"])
        self.assertEqual(cpu.EIP, 4160686864)
        self.assertEqual(cpu.EDX, 2146500607)

    def test_NOT_9(self):
        """Instruction NOT_9
        Groups:
        0xf7ff0b1f: not     edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0B1F, "\xf7\xd2")
        cpu.EIP = 0xF7FF0B1F
        cpu.EDX = 0x4008000
        cpu.execute()

        self.assertEqual(mem[0xF7FF0B1F:0xF7FF0B21], [b"\xf7", b"\xd2"])
        self.assertEqual(cpu.EIP, 4160686881)
        self.assertEqual(cpu.EDX, 4227825663)

    def test_OR_1(self):
        """Instruction OR_1
        Groups:
        0x8052945:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08052000, 0x1000, "rwx")
        mem.write(0x8052945, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8052945
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x8052945:0x805294B], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134555979)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_10(self):
        """Instruction OR_10
        Groups:
        0x804fbfd:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804F000, 0x1000, "rwx")
        mem.write(0x804FBFD, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804FBFD
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x804FBFD:0x804FC03], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134544387)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_11(self):
        """Instruction OR_11
        Groups:
        0x804f135:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804F000, 0x1000, "rwx")
        mem.write(0x804F135, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804F135
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x804F135:0x804F13B], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134541627)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_12(self):
        """Instruction OR_12
        Groups:
        0xf7fe99e4: or      edx, dword ptr [ebp - 0x24]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE99E4, "\x0bU\xdc")
        mem.write(0xFFFFD474, "\x00\x00\x00\x04")
        cpu.EIP = 0xF7FE99E4
        cpu.EDX = 0x0
        cpu.EBP = 0xFFFFD498
        cpu.PF = True
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE99E4:0xF7FE99E7], [b"\x0b", b"U", b"\xdc"])
        self.assertEqual(mem[0xFFFFD474:0xFFFFD478], [b"\x00", b"\x00", b"\x00", b"\x04"])
        self.assertEqual(cpu.EIP, 4160657895)
        self.assertEqual(cpu.EDX, 67108864)
        self.assertEqual(cpu.EBP, 4294956184)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_OR_13(self):
        """Instruction OR_13
        Groups:
        0x8072245:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072245, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8072245
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x8072245:0x807224B], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134685259)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_OR_14(self):
        """Instruction OR_14
        Groups:
        0x8053286:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08053000, 0x1000, "rwx")
        mem.write(0x8053286, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8053286
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x8053286:0x805328C], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134558348)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_15(self):
        """Instruction OR_15
        Groups:
        0x80556bb:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08055000, 0x1000, "rwx")
        mem.write(0x80556BB, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80556BB
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x80556BB:0x80556C1], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134567617)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_16(self):
        """Instruction OR_16
        Groups:
        0x8052c25:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08052000, 0x1000, "rwx")
        mem.write(0x8052C25, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8052C25
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x8052C25:0x8052C2B], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134556715)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_17(self):
        """Instruction OR_17
        Groups:
        0x80557fd:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08055000, 0x1000, "rwx")
        mem.write(0x80557FD, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80557FD
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x80557FD:0x8055803], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134567939)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_18(self):
        """Instruction OR_18
        Groups:
        0x80539e4:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08053000, 0x1000, "rwx")
        mem.write(0x80539E4, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80539E4
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x80539E4:0x80539EA], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134560234)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_19(self):
        """Instruction OR_19
        Groups:
        0x8073cc6:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08073000, 0x1000, "rwx")
        mem.write(0x8073CC6, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8073CC6
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x8073CC6:0x8073CCC], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134692044)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_OR_2(self):
        """Instruction OR_2
        Groups:
        0x8072ec2:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072EC2, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8072EC2
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x8072EC2:0x8072EC8], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134688456)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_OR_20(self):
        """Instruction OR_20
        Groups:
        0x8051ddc:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08051000, 0x1000, "rwx")
        mem.write(0x8051DDC, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8051DDC
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x8051DDC:0x8051DE2], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134553058)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_21(self):
        """Instruction OR_21
        Groups:
        0x807523f:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08075000, 0x1000, "rwx")
        mem.write(0x807523F, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x807523F
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x807523F:0x8075245], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134697541)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_OR_3(self):
        """Instruction OR_3
        Groups:
        0x804dfc7:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804DFC7, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804DFC7
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x804DFC7:0x804DFCD], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134537165)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_4(self):
        """Instruction OR_4
        Groups:
        0x80755c0:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08075000, 0x1000, "rwx")
        mem.write(0x80755C0, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80755C0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x80755C0:0x80755C6], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134698438)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_OR_5(self):
        """Instruction OR_5
        Groups:
        0x8072273:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072273, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8072273
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x8072273:0x8072279], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134685305)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_OR_6(self):
        """Instruction OR_6
        Groups:
        0x804f796:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804F000, 0x1000, "rwx")
        mem.write(0x804F796, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804F796
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x3130313
        cpu.execute()

        self.assertEqual(
            mem[0x804F796:0x804F79C], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134543260)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 51577619)

    def test_OR_7(self):
        """Instruction OR_7
        Groups:
        0xf7fe7283: or      eax, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7283, "\t\xc8")
        cpu.EIP = 0xF7FE7283
        cpu.PF = True
        cpu.EAX = 0xFFFFFF00
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF7E1DD00
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE7283:0xF7FE7285], [b"\t", b"\xc8"])
        self.assertEqual(cpu.EIP, 4160647813)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EAX, 4294967040)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4158774528)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_OR_8(self):
        """Instruction OR_8
        Groups:
        0x80713ce:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08071000, 0x1000, "rwx")
        mem.write(0x80713CE, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80713CE
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x80713CE:0x80713D4], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134681556)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_OR_9(self):
        """Instruction OR_9
        Groups:
        0x8078547:  or      ecx, 0x3130313
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08078000, 0x1000, "rwx")
        mem.write(0x8078547, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8078547
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xFF1F731F
        cpu.execute()

        self.assertEqual(
            mem[0x8078547:0x807854D], [b"\x81", b"\xc9", b"\x13", b"\x03", b"\x13", b"\x03"]
        )
        self.assertEqual(cpu.EIP, 134710605)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 4280251167)

    def test_PALIGNR_1(self):
        """Instruction PALIGNR_1
        Groups: ssse3
        0x8059a25:  palignr xmm0, xmm1, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A25, "f\x0f:\x0f\xc1\x02")
        cpu.EIP = 0x8059A25
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8059A25:0x8059A2B], [b"f", b"\x0f", b":", b"\x0f", b"\xc1", b"\x02"])
        self.assertEqual(cpu.EIP, 134584875)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PALIGNR_2(self):
        """Instruction PALIGNR_2
        Groups: ssse3
        0x8059a2b:  palignr xmm0, xmmword ptr [ebp], 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A2B, "f\x0f:\x0fE\x00\x02")
        mem.write(0xFFFFB600, ">0\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8059A2B
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(
            mem[0x8059A2B:0x8059A32], [b"f", b"\x0f", b":", b"\x0f", b"E", b"\x00", b"\x02"]
        )
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b">",
                b"0",
                b"\x00",
                b"\x1e",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134584882)
        self.assertEqual(cpu.XMM0, 7680)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PAND_1(self):
        """Instruction PAND_1
        Groups: sse2
        0x8079492:  pand    xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079492, "f\x0f\xdb\xc1")
        cpu.EIP = 0x8079492
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079492:0x8079496], [b"f", b"\x0f", b"\xdb", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714518)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PAND_2(self):
        """Instruction PAND_2
        Groups: sse2
        0x8079496:  pand    xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079496, "f\x0f\xdbE\x00")
        mem.write(0xFFFFB600, "\x7f\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8079496
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079496:0x807949B], [b"f", b"\x0f", b"\xdb", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x7f",
                b"\x03",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714523)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PAUSE_1(self):
        """Instruction PAUSE_1
        Groups: sse2
        0x8059855:  pause
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059855, "\xf3\x90")
        cpu.EIP = 0x8059855
        cpu.execute()

        self.assertEqual(mem[0x8059855:0x8059857], [b"\xf3", b"\x90"])
        self.assertEqual(cpu.EIP, 134584407)

    def test_PCMPEQB_1(self):
        """Instruction PCMPEQB_1
        Groups: sse2
        0x80565cb:  pcmpeqb xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80565CB, "f\x0ftE\x00")
        mem.write(0xFFFFB600, "7\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x80565CB
        cpu.XMM0 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80565CB:0x80565D0], [b"f", b"\x0f", b"t", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"7",
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134571472)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PCMPEQB_2(self):
        """Instruction PCMPEQB_2
        Groups: sse2
        0x80565c7:  pcmpeqb xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.write(0x80565C7, "f\x0ft\xc1")
        cpu.EIP = 0x80565C7
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80565C7:0x80565CB], [b"f", b"\x0f", b"t", b"\xc1"])
        self.assertEqual(cpu.EIP, 134571467)
        self.assertEqual(cpu.XMM0, 340282366920938463463374607431768211455)
        self.assertEqual(cpu.XMM1, 0)

    def test_PEXTRW_1(self):
        """Instruction PEXTRW_1
        Groups: sse2
        0x80599cf:  pextrw  ecx, xmm1, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599CF, "f\x0f\xc5\xc9\x02")
        cpu.EIP = 0x80599CF
        cpu.XMM1 = 0x0
        cpu.ECX = 0xFF0D9F31
        cpu.execute()

        self.assertEqual(mem[0x80599CF:0x80599D4], [b"f", b"\x0f", b"\xc5", b"\xc9", b"\x02"])
        self.assertEqual(cpu.EIP, 134584788)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ECX, 0)

    def test_PEXTRW_2(self):
        """Instruction PEXTRW_2
        Groups: sse41
        0x80599d4:  pextrw  word ptr [ebp], xmm1, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80599D4, "f\x0f:\x15M\x00\x02")
        mem.write(0xFFFFB600, "\xfb\xb4")
        cpu.EIP = 0x80599D4
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(
            mem[0x80599D4:0x80599DB], [b"f", b"\x0f", b":", b"\x15", b"M", b"\x00", b"\x02"]
        )
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134584795)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PINSRW_1(self):
        """Instruction PINSRW_1
        Groups: sse2
        0x805ba73:  pinsrw  xmm0, edx, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA73, "f\x0f\xc4\xc2\x02")
        cpu.EIP = 0x805BA73
        cpu.XMM0 = 0x1
        cpu.EDX = 0x3EC
        cpu.execute()

        self.assertEqual(mem[0x805BA73:0x805BA78], [b"f", b"\x0f", b"\xc4", b"\xc2", b"\x02"])
        self.assertEqual(cpu.EIP, 134593144)
        self.assertEqual(cpu.XMM0, 4312147165185)
        self.assertEqual(cpu.EDX, 1004)

    def test_PINSRW_2(self):
        """Instruction PINSRW_2
        Groups: sse2
        0x805ba78:  pinsrw  xmm0, word ptr [ebp], 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA78, "f\x0f\xc4E\x00\x02")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x805BA78
        cpu.XMM0 = 0x3EC00000001
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BA78:0x805BA7E], [b"f", b"\x0f", b"\xc4", b"E", b"\x00", b"\x02"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134593150)
        self.assertEqual(cpu.XMM0, 1)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PMINUB_1(self):
        """Instruction PMINUB_1
        Groups: sse2
        0x8065f88:  pminub  xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F88, "f\x0f\xdaE\x00")
        mem.write(0xFFFFB600, "\x00\x85\x1f\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8065F88
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8065F88:0x8065F8D], [b"f", b"\x0f", b"\xda", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x85",
                b"\x1f",
                b"\xfe",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134635405)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PMINUB_2(self):
        """Instruction PMINUB_2
        Groups: sse2
        0x8065f84:  pminub  xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F84, "f\x0f\xda\xc1")
        cpu.EIP = 0x8065F84
        cpu.XMM0 = 0x8000800080000000
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8065F84:0x8065F88], [b"f", b"\x0f", b"\xda", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PADDD(self):
        """Instruction PADDD
        Groups: sse2
        0x8065f84:  paddd    xmm2, xmm7
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F84] = "\x66"
        mem[0x08065F85] = "\x0f"
        mem[0x08065F86] = "\xfe"
        mem[0x08065F87] = "\xd7"
        cpu.EIP = 0x8065F84
        cpu.XMM2 = 0x4000000030000000200000001
        cpu.XMM7 = 0x4000000040000000400000004
        cpu.execute()

        self.assertEqual(mem[0x8065F84], "\x66")
        self.assertEqual(mem[0x8065F85], "\x0f")
        self.assertEqual(mem[0x8065F86], "\xfe")
        self.assertEqual(mem[0x8065F87], "\xd7")
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM2, 0x8000000070000000600000005)
        self.assertEqual(cpu.XMM7, 0x4000000040000000400000004)

    def test_PADDQ(self):
        """Instruction PADDQ
        Groups: sse2
        0x8065f84:  paddq    xmm1, xmm4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F84] = "\x66"
        mem[0x08065F85] = "\x0f"
        mem[0x08065F86] = "\xd4"
        mem[0x08065F87] = "\xcc"
        cpu.EIP = 0x8065F84
        cpu.XMM1 = 0x20000000000000000
        cpu.XMM4 = 0xE000000000000000E
        cpu.execute()

        self.assertEqual(mem[0x8065F84], "\x66")
        self.assertEqual(mem[0x8065F85], "\x0f")
        self.assertEqual(mem[0x8065F86], "\xd4")
        self.assertEqual(mem[0x8065F87], "\xcc")
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM1, 0x10000000000000000E)
        self.assertEqual(cpu.XMM4, 0xE000000000000000E)

    def test_PSLLD(self):
        """Instruction PSLLD
        Groups: sse2
        0x8065f83:  psllq    xmm0, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F83] = "\x66"
        mem[0x08065F84] = "\x0f"
        mem[0x08065F85] = "\x72"
        mem[0x08065F86] = "\xf0"
        mem[0x08065F87] = "\x01"
        cpu.EIP = 0x8065F83
        cpu.XMM0 = 0x7000000060000000500000004
        cpu.execute()

        self.assertEqual(mem[0x8065F83], "\x66")
        self.assertEqual(mem[0x8065F84], "\x0f")
        self.assertEqual(mem[0x8065F85], "\x72")
        self.assertEqual(mem[0x8065F86], "\xf0")
        self.assertEqual(mem[0x8065F87], "\x01")
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM0, 0xE0000000C0000000A00000008)

    def test_PSLLQ(self):
        """Instruction PSLLQ
        Groups: sse2
        0x8065f83:  psllq    xmm1, 3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F83] = "\x66"
        mem[0x08065F84] = "\x0f"
        mem[0x08065F85] = "\x73"
        mem[0x08065F86] = "\xf1"
        mem[0x08065F87] = "\x03"
        cpu.EIP = 0x8065F83
        cpu.XMM1 = 0x10000000000000000E
        cpu.execute()

        self.assertEqual(mem[0x8065F83], "\x66")
        self.assertEqual(mem[0x8065F84], "\x0f")
        self.assertEqual(mem[0x8065F85], "\x73")
        self.assertEqual(mem[0x8065F86], "\xf1")
        self.assertEqual(mem[0x8065F87], "\x03")
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM1, 0x800000000000000070)

    def test_PCMPGTD(self):
        """Instruction PCMPGTD
        Groups: sse2
        0x8065f83:  pcmpgtd    xmm8, xmm0
        """
        mem = Memory32()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F83] = "\x66"
        mem[0x08065F84] = "\x44"
        mem[0x08065F85] = "\x0f"
        mem[0x08065F86] = "\x66"
        mem[0x08065F87] = "\xc0"
        cpu.EIP = 0x8065F83
        cpu.XMM0 = 0x66000000640000006200000060
        cpu.XMM8 = 0
        cpu.execute()

        self.assertEqual(mem[0x8065F83], "\x66")
        self.assertEqual(mem[0x8065F84], "\x44")
        self.assertEqual(mem[0x8065F85], "\x0f")
        self.assertEqual(mem[0x8065F86], "\x66")
        self.assertEqual(mem[0x8065F87], "\xc0")
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM0, 0x66000000640000006200000060)
        self.assertEqual(cpu.XMM8, 0)

    def test_PMAXUB(self):
        """Instruction PMAXUB
        Groups: sse2
        0x8065f84:  pmaxub    xmm4, xmm3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F84] = "\x66"
        mem[0x08065F85] = "\x0f"
        mem[0x08065F86] = "\xde"
        mem[0x08065F87] = "\xe3"
        cpu.EIP = 0x8065F84
        cpu.XMM3 = 0xFF0000000000
        cpu.XMM4 = 0xFF00
        cpu.execute()

        self.assertEqual(mem[0x8065F84], "\x66")
        self.assertEqual(mem[0x8065F85], "\x0f")
        self.assertEqual(mem[0x8065F86], "\xde")
        self.assertEqual(mem[0x8065F87], "\xe3")
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM3, 0xFF0000000000)
        self.assertEqual(cpu.XMM4, 0xFF000000FF00)

    def test_PMAXUB_symbolic(self):
        """Instruction PMAXUB
        Groups: sse2
        0x8065f84:    pmaxub    xmm4, xmm3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F84] = "\x66"
        mem[0x08065F85] = "\x0f"
        mem[0x08065F86] = "\xde"
        mem[0x08065F87] = "\xe3"
        cpu.EIP = 0x8065F84
        cpu.XMM3 = 0xFF0000000000
        cpu.XMM4 = 0xFF00

        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0xFF0000000000)
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0xFF00)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065F84, 8) == ord("\x66"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F85, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F86, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F87, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.EIP == 134635400)
        condition = Operators.AND(condition, cpu.XMM3 == 0xFF0000000000)
        condition = Operators.AND(condition, cpu.XMM4 == 0xFF000000FF00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQD(self):
        """Instruction PCMPEQD
        Groups: sse2
        0x8065f84:  pcmpeqd    xmm6, xmm6
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem[0x08065F84] = "\x66"
        mem[0x08065F85] = "\x0f"
        mem[0x08065F86] = "\x76"
        mem[0x08065F87] = "\xf6"
        cpu.EIP = 0x8065F84
        cpu.XMM6 = 0
        cpu.execute()

        self.assertEqual(mem[0x8065F84], "\x66")
        self.assertEqual(mem[0x8065F85], "\x0f")
        self.assertEqual(mem[0x8065F86], "\x76")
        self.assertEqual(mem[0x8065F87], "\xf6")
        self.assertEqual(cpu.EIP, 134635400)
        self.assertEqual(cpu.XMM6, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)

    def test_PMOVMSKB_1(self):
        """Instruction PMOVMSKB_1
        Groups: sse2
        0x804d5b5:  pmovmskb        ecx, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5B5, "f\x0f\xd7\xc9")
        cpu.EIP = 0x804D5B5
        cpu.XMM1 = 0x0
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D5B5:0x804D5B9], [b"f", b"\x0f", b"\xd7", b"\xc9"])
        self.assertEqual(cpu.EIP, 134534585)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ECX, 0)

    def test_POPCNT_1(self):
        """Instruction POPCNT_1
        Groups:
        0x804d545:  popcnt  ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D545, "\xf3\x0f\xb8\xca")
        cpu.EIP = 0x804D545
        cpu.EDX = 0xF0
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ECX = 0x0
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D545:0x804D549], [b"\xf3", b"\x0f", b"\xb8", b"\xca"])
        self.assertEqual(cpu.EIP, 134534473)
        self.assertEqual(cpu.EDX, 240)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_POPCNT_2(self):
        """Instruction POPCNT_2
        Groups:
        0x804d53a:  popcnt  cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D53A, "f\xf3\x0f\xb8\xca")
        cpu.EIP = 0x804D53A
        cpu.CX = 0x0
        cpu.PF = True
        cpu.DX = 0xF0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D53A:0x804D53F], [b"f", b"\xf3", b"\x0f", b"\xb8", b"\xca"])
        self.assertEqual(cpu.EIP, 134534463)
        self.assertEqual(cpu.CX, 4)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.DX, 240)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_POPCNT_3(self):
        """Instruction POPCNT_3
        Groups:
        0x804d549:  popcnt  ecx, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D549, "\xf3\x0f\xb8M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D549
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D549:0x804D54E], [b"\xf3", b"\x0f", b"\xb8", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534478)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_POPCNT_4(self):
        """Instruction POPCNT_4
        Groups:
        0x804d53f:  popcnt  cx, word ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D53F, "f\xf3\x0f\xb8M\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EBP = 0xFFFFB600
        cpu.EIP = 0x804D53F
        cpu.CX = 0x4
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D53F:0x804D545], [b"f", b"\xf3", b"\x0f", b"\xb8", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.EIP, 134534469)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_POPFD_1(self):
        """Instruction POPFD_1
        Groups: not64bitmode
        0x804840d:  popfd
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0x804840D, "\x9d")
        mem.write(0xFFFFC5FC, "\xeb\xb6n\xeb\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804840D
        cpu.EBP = 0xFFFFB600
        cpu.ESP = 0xFFFFC600
        cpu.execute()

        self.assertEqual(mem[0x804840D:0x804840E], [b"\x9d"])
        self.assertEqual(
            mem[0xFFFFC5FC:0xFFFFC605],
            [b"\xeb", b"\xb6", b"n", b"\xeb", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134513678)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ESP, 4294952452)

    def test_POPF_1(self):
        """Instruction POPF_1
        Groups:
        0x804840e:  popf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0x804840E, "f\x9d")
        mem.write(0xFFFFC600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804840E
        cpu.EBP = 0xFFFFB600
        cpu.ESP = 0xFFFFC604
        cpu.execute()

        self.assertEqual(mem[0x804840E:0x8048410], [b"f", b"\x9d"])
        self.assertEqual(
            mem[0xFFFFC600:0xFFFFC609],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134513680)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ESP, 4294952454)

    def test_POP_1(self):
        """Instruction POP_1
        Groups: not64bitmode
        0xf7fe4d36: pop     ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D36, "[")
        mem.write(0xFFFFD2D8, "\xef\xab\xfe\xf7\x00\xd0\xff\xf7`")
        cpu.EIP = 0xF7FE4D36
        cpu.EBP = 0xF7FDABF8
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD2DC
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D36:0xF7FE4D37], [b"["])
        self.assertEqual(
            mem[0xFFFFD2D8:0xFFFFD2E1],
            [b"\xef", b"\xab", b"\xfe", b"\xf7", b"\x00", b"\xd0", b"\xff", b"\xf7", b"`"],
        )
        self.assertEqual(cpu.EIP, 4160638263)
        self.assertEqual(cpu.EBP, 4160596984)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955744)

    def test_POP_10(self):
        """Instruction POP_10
        Groups: not64bitmode
        0xf7ff43d4: pop     ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF43D4, "[")
        mem.write(0xFFFFD014, "\xd2N\x01\x00\x00\xd0\xff\xf7+")
        cpu.EIP = 0xF7FF43D4
        cpu.EBP = 0xFFFFD308
        cpu.EBX = 0xF7FF4390
        cpu.ESP = 0xFFFFD018
        cpu.execute()

        self.assertEqual(mem[0xF7FF43D4:0xF7FF43D5], [b"["])
        self.assertEqual(
            mem[0xFFFFD014:0xFFFFD01D],
            [b"\xd2", b"N", b"\x01", b"\x00", b"\x00", b"\xd0", b"\xff", b"\xf7", b"+"],
        )
        self.assertEqual(cpu.EIP, 4160701397)
        self.assertEqual(cpu.EBP, 4294955784)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955036)

    def test_POP_11(self):
        """Instruction POP_11
        Groups: not64bitmode
        0xf7fe9129: pop     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE9129, "_")
        mem.write(0xFFFFD4F0, "\x00\x00\x00\x008\xd9\xff\xf7\xc8")
        cpu.EIP = 0xF7FE9129
        cpu.EDI = 0xC
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD4F4
        cpu.execute()

        self.assertEqual(mem[0xF7FE9129:0xF7FE912A], [b"_"])
        self.assertEqual(
            mem[0xFFFFD4F0:0xFFFFD4F9],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"8", b"\xd9", b"\xff", b"\xf7", b"\xc8"],
        )
        self.assertEqual(cpu.EIP, 4160655658)
        self.assertEqual(cpu.EDI, 4160739640)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956280)

    def test_POP_12(self):
        """Instruction POP_12
        Groups: not64bitmode
        0xf7fe4d38: pop     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D38, "_")
        mem.write(0xFFFFD2E0, "\xf0~\xe1\xf7\x01\x00\x00\x00\x18")
        cpu.EIP = 0xF7FE4D38
        cpu.EDI = 0xF7E1E4E4
        cpu.EBP = 0xF7FDABA8
        cpu.ESP = 0xFFFFD2E4
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D38:0xF7FE4D39], [b"_"])
        self.assertEqual(
            mem[0xFFFFD2E0:0xFFFFD2E9],
            [b"\xf0", b"~", b"\xe1", b"\xf7", b"\x01", b"\x00", b"\x00", b"\x00", b"\x18"],
        )
        self.assertEqual(cpu.EIP, 4160638265)
        self.assertEqual(cpu.EDI, 1)
        self.assertEqual(cpu.EBP, 4160596904)
        self.assertEqual(cpu.ESP, 4294955752)

    def test_POP_13(self):
        """Instruction POP_13
        Groups: not64bitmode
        0xf7ff06a2: pop     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF06A2, "^")
        mem.write(0xFFFFD00C, '\x0ep\xfd\xf7"\x03\x00\x00#')
        cpu.EIP = 0xF7FF06A2
        cpu.EBP = 0x80481F2
        cpu.ESI = 0x0
        cpu.ESP = 0xFFFFD010
        cpu.execute()

        self.assertEqual(mem[0xF7FF06A2:0xF7FF06A3], [b"^"])
        self.assertEqual(
            mem[0xFFFFD00C:0xFFFFD015],
            [b"\x0e", b"p", b"\xfd", b"\xf7", b'"', b"\x03", b"\x00", b"\x00", b"#"],
        )
        self.assertEqual(cpu.EIP, 4160685731)
        self.assertEqual(cpu.EBP, 134513138)
        self.assertEqual(cpu.ESI, 802)
        self.assertEqual(cpu.ESP, 4294955028)

    def test_POP_14(self):
        """Instruction POP_14
        Groups: not64bitmode
        0xf7feacad: pop     ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEACAD, "]")
        mem.write(0xFFFFD4F4, "\\\xd5\xff\xf7\xc8\xd5\xff\xff\x11")
        cpu.EIP = 0xF7FEACAD
        cpu.EBP = 0xF7FE0740
        cpu.ESP = 0xFFFFD4F8
        cpu.execute()

        self.assertEqual(mem[0xF7FEACAD:0xF7FEACAE], [b"]"])
        self.assertEqual(
            mem[0xFFFFD4F4:0xFFFFD4FD],
            [b"\\", b"\xd5", b"\xff", b"\xf7", b"\xc8", b"\xd5", b"\xff", b"\xff", b"\x11"],
        )
        self.assertEqual(cpu.EIP, 4160662702)
        self.assertEqual(cpu.EBP, 4294956488)
        self.assertEqual(cpu.ESP, 4294956284)

    def test_POP_15(self):
        """Instruction POP_15
        Groups: not64bitmode
        0xf7fe4d37: pop     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D37, "^")
        mem.write(0xFFFFD2DC, "\x00\xd0\xff\xf7\x8c\xc2\xfd\xf7\x02")
        cpu.EIP = 0xF7FE4D37
        cpu.EBP = 0xF7FDADF8
        cpu.ESI = 0xD696910
        cpu.ESP = 0xFFFFD2E0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D37:0xF7FE4D38], [b"^"])
        self.assertEqual(
            mem[0xFFFFD2DC:0xFFFFD2E5],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x8c", b"\xc2", b"\xfd", b"\xf7", b"\x02"],
        )
        self.assertEqual(cpu.EIP, 4160638264)
        self.assertEqual(cpu.EBP, 4160597496)
        self.assertEqual(cpu.ESI, 4160602764)
        self.assertEqual(cpu.ESP, 4294955748)

    def test_POP_16(self):
        """Instruction POP_16
        Groups: not64bitmode
        0xf7febc56: pop     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEBC56, "^")
        mem.write(0xFFFFD2E0, "\x00\xd0\xff\xf7`j\xe1\xf7\x01")
        cpu.EIP = 0xF7FEBC56
        cpu.EBP = 0xF7FDAB18
        cpu.ESI = 0x0
        cpu.ESP = 0xFFFFD2E4
        cpu.execute()

        self.assertEqual(mem[0xF7FEBC56:0xF7FEBC57], [b"^"])
        self.assertEqual(
            mem[0xFFFFD2E0:0xFFFFD2E9],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"`", b"j", b"\xe1", b"\xf7", b"\x01"],
        )
        self.assertEqual(cpu.EIP, 4160666711)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESI, 4158745184)
        self.assertEqual(cpu.ESP, 4294955752)

    def test_POP_17(self):
        """Instruction POP_17
        Groups: not64bitmode
        0xf7febc56: pop     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEBC56, "^")
        mem.write(0xFFFFD3F0, "\x00\xd0\xff\xf78\xd9\xff\xf7\xe9")
        cpu.EIP = 0xF7FEBC56
        cpu.EBP = 0xFFFFD488
        cpu.ESI = 0x0
        cpu.ESP = 0xFFFFD3F4
        cpu.execute()

        self.assertEqual(mem[0xF7FEBC56:0xF7FEBC57], [b"^"])
        self.assertEqual(
            mem[0xFFFFD3F0:0xFFFFD3F9],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"8", b"\xd9", b"\xff", b"\xf7", b"\xe9"],
        )
        self.assertEqual(cpu.EIP, 4160666711)
        self.assertEqual(cpu.EBP, 4294956168)
        self.assertEqual(cpu.ESI, 4160739640)
        self.assertEqual(cpu.ESP, 4294956024)

    def test_POP_18(self):
        """Instruction POP_18
        Groups: not64bitmode
        0xf7fe4d37: pop     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D37, "^")
        mem.write(0xFFFFD2DC, "\x00\xd0\xff\xf7\x94q\xe1\xf7\x01")
        cpu.EIP = 0xF7FE4D37
        cpu.EBP = 0xF7FDADF8
        cpu.ESI = 0xD696910
        cpu.ESP = 0xFFFFD2E0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D37:0xF7FE4D38], [b"^"])
        self.assertEqual(
            mem[0xFFFFD2DC:0xFFFFD2E5],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x94", b"q", b"\xe1", b"\xf7", b"\x01"],
        )
        self.assertEqual(cpu.EIP, 4160638264)
        self.assertEqual(cpu.EBP, 4160597496)
        self.assertEqual(cpu.ESI, 4158747028)
        self.assertEqual(cpu.ESP, 4294955748)

    def test_POP_19(self):
        """Instruction POP_19
        Groups: not64bitmode
        0xf7fe4d39: pop     ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D39, "]")
        mem.write(0xFFFFD2E4, "\x01\x00\x00\x00\x18\xab\xfd\xf7\xf4")
        cpu.EIP = 0xF7FE4D39
        cpu.EBP = 0xF7FDADF8
        cpu.ESP = 0xFFFFD2E8
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D39:0xF7FE4D3A], [b"]"])
        self.assertEqual(
            mem[0xFFFFD2E4:0xFFFFD2ED],
            [b"\x01", b"\x00", b"\x00", b"\x00", b"\x18", b"\xab", b"\xfd", b"\xf7", b"\xf4"],
        )
        self.assertEqual(cpu.EIP, 4160638266)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955756)

    def test_POP_2(self):
        """Instruction POP_2
        Groups: not64bitmode
        0xf7fe4d36: pop     ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D36, "[")
        mem.write(0xFFFFD2D8, "\xef\xab\xfe\xf7\x00\xd0\xff\xf7\x98")
        cpu.EIP = 0xF7FE4D36
        cpu.EBP = 0xF7FDABA8
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD2DC
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D36:0xF7FE4D37], [b"["])
        self.assertEqual(
            mem[0xFFFFD2D8:0xFFFFD2E1],
            [b"\xef", b"\xab", b"\xfe", b"\xf7", b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x98"],
        )
        self.assertEqual(cpu.EIP, 4160638263)
        self.assertEqual(cpu.EBP, 4160596904)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955744)

    def test_POP_20(self):
        """Instruction POP_20
        Groups: not64bitmode
        0xf7fe4d38: pop     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D38, "_")
        mem.write(0xFFFFD2E0, "\xd0\x80\xe1\xf7\x01\x00\x00\x00\x18")
        cpu.EIP = 0xF7FE4D38
        cpu.EDI = 0xF7E1EC64
        cpu.EBP = 0xF7FDABA8
        cpu.ESP = 0xFFFFD2E4
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D38:0xF7FE4D39], [b"_"])
        self.assertEqual(
            mem[0xFFFFD2E0:0xFFFFD2E9],
            [b"\xd0", b"\x80", b"\xe1", b"\xf7", b"\x01", b"\x00", b"\x00", b"\x00", b"\x18"],
        )
        self.assertEqual(cpu.EIP, 4160638265)
        self.assertEqual(cpu.EDI, 1)
        self.assertEqual(cpu.EBP, 4160596904)
        self.assertEqual(cpu.ESP, 4294955752)

    def test_POP_21(self):
        """Instruction POP_21
        Groups: not64bitmode
        0xf7eaa40c: pop     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7EAA40C, "_")
        mem.write(0xFFFFD5F0, "\x03\x00\x00\x00\x01\x00\x00\x00\xd4")
        cpu.EIP = 0xF7EAA40C
        cpu.EDI = 0xFFFFD5EF
        cpu.EBP = 0xBC
        cpu.ESP = 0xFFFFD5F4
        cpu.execute()

        self.assertEqual(mem[0xF7EAA40C:0xF7EAA40D], [b"_"])
        self.assertEqual(
            mem[0xFFFFD5F0:0xFFFFD5F9],
            [b"\x03", b"\x00", b"\x00", b"\x00", b"\x01", b"\x00", b"\x00", b"\x00", b"\xd4"],
        )
        self.assertEqual(cpu.EIP, 4159349773)
        self.assertEqual(cpu.EDI, 1)
        self.assertEqual(cpu.EBP, 188)
        self.assertEqual(cpu.ESP, 4294956536)

    def test_POP_3(self):
        """Instruction POP_3
        Groups: not64bitmode
        0xf7fe57eb: pop     ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57EB, "[")
        mem.write(0xFFFFD428, "\x04\x99\xe2\xf7\x00\xd0\xff\xf7\x00")
        cpu.EIP = 0xF7FE57EB
        cpu.EBP = 0xFFFFD438
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD42C
        cpu.execute()

        self.assertEqual(mem[0xF7FE57EB:0xF7FE57EC], [b"["])
        self.assertEqual(
            mem[0xFFFFD428:0xFFFFD431],
            [b"\x04", b"\x99", b"\xe2", b"\xf7", b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160641004)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294956080)

    def test_POP_4(self):
        """Instruction POP_4
        Groups: not64bitmode
        0xf7ff06cb: pop     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF06CB, "_")
        mem.write(0xFFFFD010, "A\x03\x00\x00\xb8\x03\x00\x00\xcb")
        cpu.EIP = 0xF7FF06CB
        cpu.EDI = 0x31
        cpu.EBP = 0x61
        cpu.ESP = 0xFFFFD014
        cpu.execute()

        self.assertEqual(mem[0xF7FF06CB:0xF7FF06CC], [b"_"])
        self.assertEqual(
            mem[0xFFFFD010:0xFFFFD019],
            [b"A", b"\x03", b"\x00", b"\x00", b"\xb8", b"\x03", b"\x00", b"\x00", b"\xcb"],
        )
        self.assertEqual(cpu.EIP, 4160685772)
        self.assertEqual(cpu.EDI, 952)
        self.assertEqual(cpu.EBP, 97)
        self.assertEqual(cpu.ESP, 4294955032)

    def test_POP_5(self):
        """Instruction POP_5
        Groups: not64bitmode
        0xf7fe4d39: pop     ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D39, "]")
        mem.write(0xFFFFD2E4, "\x01\x00\x00\x00\x18\xab\xfd\xf7\xf4")
        cpu.EIP = 0xF7FE4D39
        cpu.EBP = 0xF7FDABA8
        cpu.ESP = 0xFFFFD2E8
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D39:0xF7FE4D3A], [b"]"])
        self.assertEqual(
            mem[0xFFFFD2E4:0xFFFFD2ED],
            [b"\x01", b"\x00", b"\x00", b"\x00", b"\x18", b"\xab", b"\xfd", b"\xf7", b"\xf4"],
        )
        self.assertEqual(cpu.EIP, 4160638266)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955756)

    def test_POP_6(self):
        """Instruction POP_6
        Groups: not64bitmode
        0xf7fe4fe2: pop     esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4FE2, "^")
        mem.write(0xFFFFD36C, "\x00\xd0\xff\xf7\xb4\xd4\xff\xff\x10")
        cpu.EIP = 0xF7FE4FE2
        cpu.EBP = 0xF7FDAB18
        cpu.ESI = 0xF7E17EFC
        cpu.ESP = 0xFFFFD370
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FE2:0xF7FE4FE3], [b"^"])
        self.assertEqual(
            mem[0xFFFFD36C:0xFFFFD375],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\xb4", b"\xd4", b"\xff", b"\xff", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160638947)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESI, 4294956212)
        self.assertEqual(cpu.ESP, 4294955892)

    def test_POP_7(self):
        """Instruction POP_7
        Groups: not64bitmode
        0xf7fe4d38: pop     edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D38, "_")
        mem.write(0xFFFFD2E0, "\x18\x8c\xe1\xf7\x01\x00\x00\x00\x18")
        cpu.EIP = 0xF7FE4D38
        cpu.EDI = 0xF7E21984
        cpu.EBP = 0xF7FDABA8
        cpu.ESP = 0xFFFFD2E4
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D38:0xF7FE4D39], [b"_"])
        self.assertEqual(
            mem[0xFFFFD2E0:0xFFFFD2E9],
            [b"\x18", b"\x8c", b"\xe1", b"\xf7", b"\x01", b"\x00", b"\x00", b"\x00", b"\x18"],
        )
        self.assertEqual(cpu.EIP, 4160638265)
        self.assertEqual(cpu.EDI, 1)
        self.assertEqual(cpu.EBP, 4160596904)
        self.assertEqual(cpu.ESP, 4294955752)

    def test_POP_8(self):
        """Instruction POP_8
        Groups: not64bitmode
        0xf7fe4fe4: pop     ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4FE4, "]")
        mem.write(0xFFFFD374, "\x10\xaa\xfd\xf78\xd4\xff\xffz")
        cpu.EIP = 0xF7FE4FE4
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD378
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FE4:0xF7FE4FE5], [b"]"])
        self.assertEqual(
            mem[0xFFFFD374:0xFFFFD37D],
            [b"\x10", b"\xaa", b"\xfd", b"\xf7", b"8", b"\xd4", b"\xff", b"\xff", b"z"],
        )
        self.assertEqual(cpu.EIP, 4160638949)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955900)

    def test_POP_9(self):
        """Instruction POP_9
        Groups: not64bitmode
        0xf7fe57eb: pop     ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57EB, "[")
        mem.write(0xFFFFD428, "\x04\x99\xe2\xf7\x00\xd0\xff\xf7\x00")
        cpu.EIP = 0xF7FE57EB
        cpu.EBP = 0xFFFFD438
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD42C
        cpu.execute()

        self.assertEqual(mem[0xF7FE57EB:0xF7FE57EC], [b"["])
        self.assertEqual(
            mem[0xFFFFD428:0xFFFFD431],
            [b"\x04", b"\x99", b"\xe2", b"\xf7", b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160641004)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294956080)

    def test_POR_1(self):
        """Instruction POR_1
        Groups: sse2
        0x8079357:  por     xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079357, "f\x0f\xebE\x00")
        mem.write(0xFFFFB600, "\x01\x01\x00\x00\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8079357
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079357:0x807935C], [b"f", b"\x0f", b"\xeb", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x01",
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xfc",
                b"\xf1",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714204)
        self.assertEqual(cpu.XMM0, 9291484583172243713)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_POR_2(self):
        """Instruction POR_2
        Groups: sse2
        0x8079353:  por     xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079353, "f\x0f\xeb\xc1")
        cpu.EIP = 0x8079353
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079353:0x8079357], [b"f", b"\x0f", b"\xeb", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714199)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PREFETCHT0_1(self):
        """Instruction PREFETCHT0_1
        Groups: sse1
        0x8070431:  prefetcht0      byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070431, "\x0f\x18M\x00")
        mem.write(0xFFFFB600, "`")
        cpu.EIP = 0x8070431
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8070431:0x8070435], [b"\x0f", b"\x18", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"`"])
        self.assertEqual(cpu.EIP, 134677557)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PREFETCHT1_1(self):
        """Instruction PREFETCHT1_1
        Groups: sse1
        0x807042d:  prefetcht1      byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807042D, "\x0f\x18U\x00")
        mem.write(0xFFFFB600, "`")
        cpu.EIP = 0x807042D
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x807042D:0x8070431], [b"\x0f", b"\x18", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"`"])
        self.assertEqual(cpu.EIP, 134677553)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PREFETCHT2_1(self):
        """Instruction PREFETCHT2_1
        Groups: sse1
        0x8070429:  prefetcht2      byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070429, "\x0f\x18]\x00")
        mem.write(0xFFFFB600, "`")
        cpu.EIP = 0x8070429
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8070429:0x807042D], [b"\x0f", b"\x18", b"]", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"`"])
        self.assertEqual(cpu.EIP, 134677549)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PSHUFD_1(self):
        """Instruction PSHUFD_1
        Groups: sse2
        0x8060d6e:  pshufd  xmm0, xmm1, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060D6E, "f\x0fp\xc1\x02")
        cpu.EIP = 0x8060D6E
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8060D6E:0x8060D73], [b"f", b"\x0f", b"p", b"\xc1", b"\x02"])
        self.assertEqual(cpu.EIP, 134614387)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PSHUFD_2(self):
        """Instruction PSHUFD_2
        Groups: sse2
        0x8060d73:  pshufd  xmm0, xmmword ptr [ebp], 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8060D73, "f\x0fpE\x00\x02")
        mem.write(0xFFFFB600, "\x00\x80\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8060D73
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8060D73:0x8060D79], [b"f", b"\x0f", b"p", b"E", b"\x00", b"\x02"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x80",
                b"\xf0",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134614393)
        self.assertEqual(cpu.XMM0, 1248747394768372704346597415593181184)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PSHUFLW_1(self):
        """Instruction PSHUFLW_1
        Groups: sse2
        0x8060d7e:  pshuflw xmm0, xmmword ptr [ebp], 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8060D7E, "\xf2\x0fpE\x00\x02")
        mem.write(0xFFFFB600, "\x00\x80\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8060D7E
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8060D7E:0x8060D84], [b"\xf2", b"\x0f", b"p", b"E", b"\x00", b"\x02"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x80",
                b"\xf0",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134614404)
        self.assertEqual(cpu.XMM0, 9223512776490614784)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PSHUFLW_2(self):
        """Instruction PSHUFLW_2
        Groups: sse2
        0x8060d79:  pshuflw xmm0, xmm1, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060D79, "\xf2\x0fp\xc1\x02")
        cpu.EIP = 0x8060D79
        cpu.XMM0 = 0xF0800000F0800000F0800000000000
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8060D79:0x8060D7E], [b"\xf2", b"\x0f", b"p", b"\xc1", b"\x02"])
        self.assertEqual(cpu.EIP, 134614398)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PSLLDQ_1(self):
        """Instruction PSLLDQ_1
        Groups: sse2
        0x80701bd:  pslldq  xmm0, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701BD, "f\x0fs\xf8\x04")
        cpu.EIP = 0x80701BD
        cpu.XMM0 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80701BD:0x80701C2], [b"f", b"\x0f", b"s", b"\xf8", b"\x04"])
        self.assertEqual(cpu.EIP, 134676930)
        self.assertEqual(cpu.XMM0, 0)

    def test_PSLLDQ_2(self):
        """Instruction PSLLDQ_2
        Groups: sse2
        0x80701c2:  pslldq  xmm0, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701C2, "f\x0fs\xf8\xff")
        cpu.EIP = 0x80701C2
        cpu.XMM0 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80701C2:0x80701C7], [b"f", b"\x0f", b"s", b"\xf8", b"\xff"])
        self.assertEqual(cpu.EIP, 134676935)
        self.assertEqual(cpu.XMM0, 0)

    def test_PSRLDQ_1(self):
        """Instruction PSRLDQ_1
        Groups: sse2
        0x807948d:  psrldq  xmm0, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807948D, "f\x0fs\xd8\xff")
        cpu.EIP = 0x807948D
        cpu.XMM0 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x807948D:0x8079492], [b"f", b"\x0f", b"s", b"\xd8", b"\xff"])
        self.assertEqual(cpu.EIP, 134714514)
        self.assertEqual(cpu.XMM0, 0)

    def test_PSRLDQ_2(self):
        """Instruction PSRLDQ_2
        Groups: sse2
        0x8079488:  psrldq  xmm0, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079488, "f\x0fs\xd8\x04")
        cpu.EIP = 0x8079488
        cpu.XMM0 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079488:0x807948D], [b"f", b"\x0f", b"s", b"\xd8", b"\x04"])
        self.assertEqual(cpu.EIP, 134714509)
        self.assertEqual(cpu.XMM0, 0)

    def test_PSRLQ_1(self):
        """Instruction PSRLQ_1
        Groups: sse2
        0x80702c5:  psrlq   xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702C5, "f\x0f\xd3\xc1")
        cpu.EIP = 0x80702C5
        cpu.XMM0 = 0x80F1FC0001E18501
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80702C5:0x80702C9], [b"f", b"\x0f", b"\xd3", b"\xc1"])
        self.assertEqual(cpu.EIP, 134677193)
        self.assertEqual(cpu.XMM0, 9291484583203800321)
        self.assertEqual(cpu.XMM1, 0)

    def test_PSRLQ_2(self):
        """Instruction PSRLQ_2
        Groups: sse2
        0x80702c9:  psrlq   xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80702C9, "f\x0f\xd3E\x00")
        mem.write(0xFFFFB600, "\x01\x85\xe1\x01\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x80702C9
        cpu.XMM0 = 0x80F1FC0001E18501
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80702C9:0x80702CE], [b"f", b"\x0f", b"\xd3", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x01",
                b"\x85",
                b"\xe1",
                b"\x01",
                b"\x00",
                b"\xfc",
                b"\xf1",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134677198)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PSRLQ_3(self):
        """Instruction PSRLQ_3
        Groups: sse2
        0x80702ce:  psrlq   xmm0, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702CE, "f\x0fs\xd0\x04")
        cpu.EIP = 0x80702CE
        cpu.XMM0 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80702CE:0x80702D3], [b"f", b"\x0f", b"s", b"\xd0", b"\x04"])
        self.assertEqual(cpu.EIP, 134677203)
        self.assertEqual(cpu.XMM0, 0)

    def test_PSRLQ_4(self):
        """Instruction PSRLQ_4
        Groups: sse2
        0x80702d3:  psrlq   xmm0, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702D3, "f\x0fs\xd0\xff")
        cpu.EIP = 0x80702D3
        cpu.XMM0 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80702D3:0x80702D8], [b"f", b"\x0f", b"s", b"\xd0", b"\xff"])
        self.assertEqual(cpu.EIP, 134677208)
        self.assertEqual(cpu.XMM0, 0)

    def test_PSUBB_1(self):
        """Instruction PSUBB_1
        Groups: sse2
        0x805bb96:  psubb   xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BB96, "f\x0f\xf8\xc1")
        cpu.EIP = 0x805BB96
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805BB96:0x805BB9A], [b"f", b"\x0f", b"\xf8", b"\xc1"])
        self.assertEqual(cpu.EIP, 134593434)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PSUBB_2(self):
        """Instruction PSUBB_2
        Groups: sse2
        0x805bb9a:  psubb   xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BB9A, "f\x0f\xf8E\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x805BB9A
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805BB9A:0x805BB9F], [b"f", b"\x0f", b"\xf8", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134593439)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PTEST_1(self):
        """Instruction PTEST_1
        Groups: sse41
        0x80702df:  ptest   xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702DF, "f\x0f8\x17\xc1")
        cpu.EIP = 0x80702DF
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80702DF:0x80702E4], [b"f", b"\x0f", b"8", b"\x17", b"\xc1"])
        self.assertEqual(cpu.EIP, 134677220)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_PTEST_2(self):
        """Instruction PTEST_2
        Groups: sse41
        0x80702e4:  ptest   xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80702E4, "f\x0f8\x17E\x00")
        mem.write(0xFFFFB600, "\x00\x85\xe1\x01\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x80702E4
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80702E4:0x80702EA], [b"f", b"\x0f", b"8", b"\x17", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x85",
                b"\xe1",
                b"\x01",
                b"\x00",
                b"\xfc",
                b"\xf1",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134677226)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_PUNPCKLBW_1(self):
        """Instruction PUNPCKLBW_1
        Groups: sse2
        0x8079382:  punpcklbw       xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079382, "f\x0f`E\x00")
        mem.write(0xFFFFB600, "\x01\x00\x00\x00\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8079382
        cpu.XMM0 = 0x8000F100FC00000000000000010001
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079382:0x8079387], [b"f", b"\x0f", b"`", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xfc",
                b"\xf1",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714247)
        self.assertEqual(cpu.XMM0, 170146071599173934259238432326383829249)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PUNPCKLBW_2(self):
        """Instruction PUNPCKLBW_2
        Groups: sse2
        0x807937e:  punpcklbw       xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807937E, "f\x0f`\xc1")
        cpu.EIP = 0x807937E
        cpu.XMM0 = 0x80F1FC0000000101
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x807937E:0x8079382], [b"f", b"\x0f", b"`", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714242)
        self.assertEqual(cpu.XMM0, 664633092184273180700150126258225153)
        self.assertEqual(cpu.XMM1, 0)

    def test_PUNPCKLDQ_1(self):
        """Instruction PUNPCKLDQ_1
        Groups: sse2
        0x804d60e:  punpckldq       xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D60E, "f\x0fbE\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D60E
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D60E:0x804D613], [b"f", b"\x0f", b"b", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134534675)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PUNPCKLDQ_2(self):
        """Instruction PUNPCKLDQ_2
        Groups: sse2
        0x804d60a:  punpckldq       xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D60A, "f\x0fb\xc1")
        cpu.EIP = 0x804D60A
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D60A:0x804D60E], [b"f", b"\x0f", b"b", b"\xc1"])
        self.assertEqual(cpu.EIP, 134534670)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PUNPCKLQDQ_1(self):
        """Instruction PUNPCKLQDQ_1
        Groups: sse2
        0x8056673:  punpcklqdq      xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8056673, "f\x0flE\x00")
        mem.write(0xFFFFB600, "\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8056673
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8056673:0x8056678], [b"f", b"\x0f", b"l", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\xff",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134571640)
        self.assertEqual(cpu.XMM0, 79228162495817593519834398720)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PUNPCKLQDQ_2(self):
        """Instruction PUNPCKLQDQ_2
        Groups: sse2
        0x805666f:  punpcklqdq      xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.write(0x805666F, "f\x0fl\xc1")
        cpu.EIP = 0x805666F
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805666F:0x8056673], [b"f", b"\x0f", b"l", b"\xc1"])
        self.assertEqual(cpu.EIP, 134571635)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PUNPCKLWD_1(self):
        """Instruction PUNPCKLWD_1
        Groups: sse2
        0x805985b:  punpcklwd       xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805985B, "f\x0faE\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x805985B
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805985B:0x8059860], [b"f", b"\x0f", b"a", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134584416)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PUNPCKLWD_2(self):
        """Instruction PUNPCKLWD_2
        Groups: sse2
        0x8059857:  punpcklwd       xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059857, "f\x0fa\xc1")
        cpu.EIP = 0x8059857
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8059857:0x805985B], [b"f", b"\x0f", b"a", b"\xc1"])
        self.assertEqual(cpu.EIP, 134584411)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_PUSH_1(self):
        """Instruction PUSH_1
        Groups: not64bitmode
        0xf7febbf3: push    esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEBBF3, "V")
        mem.write(0xFFFFD3F4, "8\xd9\xff\xf7\xe9\x81\x04\x08L")
        cpu.EIP = 0xF7FEBBF3
        cpu.EBP = 0xFFFFD488
        cpu.ESI = 0xF7FFDC28
        cpu.ESP = 0xFFFFD3F8
        cpu.execute()

        self.assertEqual(mem[0xF7FEBBF3:0xF7FEBBF4], [b"V"])
        self.assertEqual(
            mem[0xFFFFD3F4:0xFFFFD3FD],
            [b"(", b"\xdc", b"\xff", b"\xf7", b"\xe9", b"\x81", b"\x04", b"\x08", b"L"],
        )
        self.assertEqual(cpu.EIP, 4160666612)
        self.assertEqual(cpu.EBP, 4294956168)
        self.assertEqual(cpu.ESI, 4160740392)
        self.assertEqual(cpu.ESP, 4294956020)

    def test_PUSH_10(self):
        """Instruction PUSH_10
        Groups: not64bitmode
        0xf7fe4c87: push    ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C87, "S")
        mem.write(0xFFFFD2DC, "\x00\xd0\xff\xf7l\x8a\xe1\xf7\x01")
        cpu.EIP = 0xF7FE4C87
        cpu.EBP = 0xF7FDAB18
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD2E0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C87:0xF7FE4C88], [b"S"])
        self.assertEqual(
            mem[0xFFFFD2DC:0xFFFFD2E5],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"l", b"\x8a", b"\xe1", b"\xf7", b"\x01"],
        )
        self.assertEqual(cpu.EIP, 4160638088)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955740)

    def test_PUSH_11(self):
        """Instruction PUSH_11
        Groups: not64bitmode
        0xf7fe4c87: push    ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C87, "S")
        mem.write(0xFFFFD2DC, "\x00\xd0\xff\xf7\x88v\xe1\xf7\x01")
        cpu.EIP = 0xF7FE4C87
        cpu.EBP = 0xF7FDAB18
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD2E0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C87:0xF7FE4C88], [b"S"])
        self.assertEqual(
            mem[0xFFFFD2DC:0xFFFFD2E5],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x88", b"v", b"\xe1", b"\xf7", b"\x01"],
        )
        self.assertEqual(cpu.EIP, 4160638088)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955740)

    def test_PUSH_12(self):
        """Instruction PUSH_12
        Groups: not64bitmode
        0xf7fe4e15: push    ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4E15, "S")
        mem.write(0xFFFFD36C, "\xf5\x8a\xfe\xf7\xb4\xd4\xff\xff\x10")
        cpu.EIP = 0xF7FE4E15
        cpu.EBP = 0xFFFFD438
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD370
        cpu.execute()

        self.assertEqual(mem[0xF7FE4E15:0xF7FE4E16], [b"S"])
        self.assertEqual(
            mem[0xFFFFD36C:0xFFFFD375],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\xb4", b"\xd4", b"\xff", b"\xff", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160638486)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955884)

    def test_PUSH_13(self):
        """Instruction PUSH_13
        Groups: not64bitmode
        0xf7fe5670: push    ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5670, "U")
        mem.write(0xFFFFD438, "\xf8\xd4\xff\xff\xf8r\xfe\xf7\x10")
        cpu.EIP = 0xF7FE5670
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD43C
        cpu.execute()

        self.assertEqual(mem[0xF7FE5670:0xF7FE5671], [b"U"])
        self.assertEqual(
            mem[0xFFFFD438:0xFFFFD441],
            [b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160640625)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956088)

    def test_PUSH_14(self):
        """Instruction PUSH_14
        Groups: not64bitmode
        0xf7fe5670: push    ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5670, "U")
        mem.write(0xFFFFD438, "\xf8\xd4\xff\xff\xf8r\xfe\xf7\x10")
        cpu.EIP = 0xF7FE5670
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD43C
        cpu.execute()

        self.assertEqual(mem[0xF7FE5670:0xF7FE5671], [b"U"])
        self.assertEqual(
            mem[0xFFFFD438:0xFFFFD441],
            [b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160640625)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956088)

    def test_PUSH_15(self):
        """Instruction PUSH_15
        Groups: not64bitmode
        0xf7fe4c84: push    esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C84, "V")
        mem.write(0xFFFFD2E0, "\xa4\x81\x04\x08\x01\x00\x00\x00\x18")
        cpu.EIP = 0xF7FE4C84
        cpu.EBP = 0xF7FDAB18
        cpu.ESI = 0xF7E17D20
        cpu.ESP = 0xFFFFD2E4
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C84:0xF7FE4C85], [b"V"])
        self.assertEqual(
            mem[0xFFFFD2E0:0xFFFFD2E9],
            [b" ", b"}", b"\xe1", b"\xf7", b"\x01", b"\x00", b"\x00", b"\x00", b"\x18"],
        )
        self.assertEqual(cpu.EIP, 4160638085)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESI, 4158749984)
        self.assertEqual(cpu.ESP, 4294955744)

    def test_PUSH_16(self):
        """Instruction PUSH_16
        Groups: not64bitmode
        0xf7fe4c81: push    edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C81, "W")
        mem.write(0xFFFFD2E4, "\x01\x00\x00\x00\x18\xab\xfd\xf7\xf4")
        cpu.EIP = 0xF7FE4C81
        cpu.EDI = 0x1
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2E8
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C81:0xF7FE4C82], [b"W"])
        self.assertEqual(
            mem[0xFFFFD2E4:0xFFFFD2ED],
            [b"\x01", b"\x00", b"\x00", b"\x00", b"\x18", b"\xab", b"\xfd", b"\xf7", b"\xf4"],
        )
        self.assertEqual(cpu.EIP, 4160638082)
        self.assertEqual(cpu.EDI, 1)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955748)

    def test_PUSH_17(self):
        """Instruction PUSH_17
        Groups: not64bitmode
        0x80482da:  push    edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0x80482DA, "R")
        mem.write(0xFFFFD6A4, "\xb0\xd6\xff\xff\xac\xd6\xff\xff\x1c")
        cpu.EIP = 0x80482DA
        cpu.EDX = 0xF7FEB160
        cpu.EBP = 0x0
        cpu.ESP = 0xFFFFD6A8
        cpu.execute()

        self.assertEqual(mem[0x80482DA:0x80482DB], [b"R"])
        self.assertEqual(
            mem[0xFFFFD6A4:0xFFFFD6AD],
            [b"`", b"\xb1", b"\xfe", b"\xf7", b"\xac", b"\xd6", b"\xff", b"\xff", b"\x1c"],
        )
        self.assertEqual(cpu.EIP, 134513371)
        self.assertEqual(cpu.EDX, 4160663904)
        self.assertEqual(cpu.EBP, 0)
        self.assertEqual(cpu.ESP, 4294956708)

    def test_PUSH_18(self):
        """Instruction PUSH_18
        Groups: not64bitmode
        0xf7fe4c84: push    esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C84, "V")
        mem.write(0xFFFFD2E0, "\xb8j\xe1\xf7\x01\x00\x00\x00\x18")
        cpu.EIP = 0xF7FE4C84
        cpu.EBP = 0xF7FDAB18
        cpu.ESI = 0xF7E16DF0
        cpu.ESP = 0xFFFFD2E4
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C84:0xF7FE4C85], [b"V"])
        self.assertEqual(
            mem[0xFFFFD2E0:0xFFFFD2E9],
            [b"\xf0", b"m", b"\xe1", b"\xf7", b"\x01", b"\x00", b"\x00", b"\x00", b"\x18"],
        )
        self.assertEqual(cpu.EIP, 4160638085)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESI, 4158746096)
        self.assertEqual(cpu.ESP, 4294955744)

    def test_PUSH_19(self):
        """Instruction PUSH_19
        Groups: not64bitmode
        0xf7f00d11: push    esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7F00000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7F00D11, "V")
        mem.write(0xFFFFD5F4, "\x00\x00\x00\x00\xb4\xd6\xff\xff\xac")
        cpu.EIP = 0xF7F00D11
        cpu.EBP = 0xFFFFD6C4
        cpu.ESI = 0x3
        cpu.ESP = 0xFFFFD5F8
        cpu.execute()

        self.assertEqual(mem[0xF7F00D11:0xF7F00D12], [b"V"])
        self.assertEqual(
            mem[0xFFFFD5F4:0xFFFFD5FD],
            [b"\x03", b"\x00", b"\x00", b"\x00", b"\xb4", b"\xd6", b"\xff", b"\xff", b"\xac"],
        )
        self.assertEqual(cpu.EIP, 4159704338)
        self.assertEqual(cpu.EBP, 4294956740)
        self.assertEqual(cpu.ESI, 3)
        self.assertEqual(cpu.ESP, 4294956532)

    def test_PUSH_2(self):
        """Instruction PUSH_2
        Groups: not64bitmode
        0xf7fe5673: push    edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5673, "W")
        mem.write(0xFFFFD434, "\x06\x00\x00\x00\xf8\xd4\xff\xff\xf8")
        cpu.EIP = 0xF7FE5673
        cpu.EDI = 0x6
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD438
        cpu.execute()

        self.assertEqual(mem[0xF7FE5673:0xF7FE5674], [b"W"])
        self.assertEqual(
            mem[0xFFFFD434:0xFFFFD43D],
            [b"\x06", b"\x00", b"\x00", b"\x00", b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xf8"],
        )
        self.assertEqual(cpu.EIP, 4160640628)
        self.assertEqual(cpu.EDI, 6)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294956084)

    def test_PUSH_20(self):
        """Instruction PUSH_20
        Groups: not64bitmode
        0xf7fe4c81: push    edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C81, "W")
        mem.write(0xFFFFD2E4, "\x01\x00\x00\x00\x18\xab\xfd\xf7\xf4")
        cpu.EIP = 0xF7FE4C81
        cpu.EDI = 0x1
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2E8
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C81:0xF7FE4C82], [b"W"])
        self.assertEqual(
            mem[0xFFFFD2E4:0xFFFFD2ED],
            [b"\x01", b"\x00", b"\x00", b"\x00", b"\x18", b"\xab", b"\xfd", b"\xf7", b"\xf4"],
        )
        self.assertEqual(cpu.EIP, 4160638082)
        self.assertEqual(cpu.EDI, 1)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955748)

    def test_PUSH_21(self):
        """Instruction PUSH_21
        Groups: not64bitmode
        0xf7fe4e15: push    ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4E15, "S")
        mem.write(0xFFFFD36C, "\x00\xd0\xff\xf7\xb4\xd4\xff\xff\x10")
        cpu.EIP = 0xF7FE4E15
        cpu.EBP = 0xFFFFD438
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD370
        cpu.execute()

        self.assertEqual(mem[0xF7FE4E15:0xF7FE4E16], [b"S"])
        self.assertEqual(
            mem[0xFFFFD36C:0xFFFFD375],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\xb4", b"\xd4", b"\xff", b"\xff", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160638486)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955884)

    def test_PUSH_3(self):
        """Instruction PUSH_3
        Groups: not64bitmode
        0xf7fec093: push    edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEC093, "W")
        mem.write(0xFFFFD484, "\x00\x00\x00\x00\x00\x00\x00\x009")
        cpu.EIP = 0xF7FEC093
        cpu.EDI = 0x0
        cpu.EBP = 0xFFFFD488
        cpu.ESP = 0xFFFFD488
        cpu.execute()

        self.assertEqual(mem[0xF7FEC093:0xF7FEC094], [b"W"])
        self.assertEqual(
            mem[0xFFFFD484:0xFFFFD48D],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"9"],
        )
        self.assertEqual(cpu.EIP, 4160667796)
        self.assertEqual(cpu.EDI, 0)
        self.assertEqual(cpu.EBP, 4294956168)
        self.assertEqual(cpu.ESP, 4294956164)

    def test_PUSH_4(self):
        """Instruction PUSH_4
        Groups: not64bitmode
        0xf7fe4e10: push    ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4E10, "U")
        mem.write(0xFFFFD378, "8\xd4\xff\xffzW\xfe\xf7\xe8")
        cpu.EIP = 0xF7FE4E10
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD37C
        cpu.execute()

        self.assertEqual(mem[0xF7FE4E10:0xF7FE4E11], [b"U"])
        self.assertEqual(
            mem[0xFFFFD378:0xFFFFD381],
            [b"8", b"\xd4", b"\xff", b"\xff", b"z", b"W", b"\xfe", b"\xf7", b"\xe8"],
        )
        self.assertEqual(cpu.EIP, 4160638481)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955896)

    def test_PUSH_5(self):
        """Instruction PUSH_5
        Groups: not64bitmode
        0xf7fe5673: push    edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5673, "W")
        mem.write(0xFFFFD434, "\x06\x00\x00\x00\xf8\xd4\xff\xff\xf8")
        cpu.EIP = 0xF7FE5673
        cpu.EDI = 0x6
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD438
        cpu.execute()

        self.assertEqual(mem[0xF7FE5673:0xF7FE5674], [b"W"])
        self.assertEqual(
            mem[0xFFFFD434:0xFFFFD43D],
            [b"\x06", b"\x00", b"\x00", b"\x00", b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xf8"],
        )
        self.assertEqual(cpu.EIP, 4160640628)
        self.assertEqual(cpu.EDI, 6)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294956084)

    def test_PUSH_6(self):
        """Instruction PUSH_6
        Groups: not64bitmode
        0xf7febbf3: push    esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEBBF3, "V")
        mem.write(0xFFFFD3F4, "\x03\x00\x00\x00I\x80\xe2\xf7L")
        cpu.EIP = 0xF7FEBBF3
        cpu.EBP = 0xFFFFD488
        cpu.ESI = 0xF7FFD938
        cpu.ESP = 0xFFFFD3F8
        cpu.execute()

        self.assertEqual(mem[0xF7FEBBF3:0xF7FEBBF4], [b"V"])
        self.assertEqual(
            mem[0xFFFFD3F4:0xFFFFD3FD],
            [b"8", b"\xd9", b"\xff", b"\xf7", b"I", b"\x80", b"\xe2", b"\xf7", b"L"],
        )
        self.assertEqual(cpu.EIP, 4160666612)
        self.assertEqual(cpu.EBP, 4294956168)
        self.assertEqual(cpu.ESI, 4160739640)
        self.assertEqual(cpu.ESP, 4294956020)

    def test_PUSH_7(self):
        """Instruction PUSH_7
        Groups: not64bitmode
        0xf7fe6b50: push    ebp
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE6B50, "U")
        mem.write(0xFFFFD438, "\xf8\xd4\xff\xff\xabp\xfe\xf7\xf0")
        cpu.EIP = 0xF7FE6B50
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD43C
        cpu.execute()

        self.assertEqual(mem[0xF7FE6B50:0xF7FE6B51], [b"U"])
        self.assertEqual(
            mem[0xFFFFD438:0xFFFFD441],
            [b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xab", b"p", b"\xfe", b"\xf7", b"\xf0"],
        )
        self.assertEqual(cpu.EIP, 4160645969)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956088)

    def test_PUSH_8(self):
        """Instruction PUSH_8
        Groups: not64bitmode
        0xf7ff41a0: push    ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF41A0, "S")
        mem.write(0xFFFFD038, "\x00\xd0\xff\xf7\x94\x12\xfe\xf7\xf0")
        cpu.EIP = 0xF7FF41A0
        cpu.EBP = 0xFFFFD088
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD03C
        cpu.execute()

        self.assertEqual(mem[0xF7FF41A0:0xF7FF41A1], [b"S"])
        self.assertEqual(
            mem[0xFFFFD038:0xFFFFD041],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x94", b"\x12", b"\xfe", b"\xf7", b"\xf0"],
        )
        self.assertEqual(cpu.EIP, 4160700833)
        self.assertEqual(cpu.EBP, 4294955144)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955064)

    def test_PUSH_9(self):
        """Instruction PUSH_9
        Groups: not64bitmode
        0xf7fe4e15: push    ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4E15, "S")
        mem.write(0xFFFFD36C, "\x00\xd0\xff\xf7\xb4\xd4\xff\xff\x10")
        cpu.EIP = 0xF7FE4E15
        cpu.EBP = 0xFFFFD438
        cpu.EBX = 0xF7FFD000
        cpu.ESP = 0xFFFFD370
        cpu.execute()

        self.assertEqual(mem[0xF7FE4E15:0xF7FE4E16], [b"S"])
        self.assertEqual(
            mem[0xFFFFD36C:0xFFFFD375],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\xb4", b"\xd4", b"\xff", b"\xff", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160638486)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.EBX, 4160737280)
        self.assertEqual(cpu.ESP, 4294955884)

    def test_PXOR_1(self):
        """Instruction PXOR_1
        Groups: sse2
        0x8059a6a:  pxor    xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A6A, "f\x0f\xefE\x00")
        mem.write(0xFFFFB600, "\xec\x03\x03x\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8059A6A
        cpu.XMM0 = 0x1E00
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8059A6A:0x8059A6F], [b"f", b"\x0f", b"\xef", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\xec",
                b"\x03",
                b"\x03",
                b"x",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134584943)
        self.assertEqual(cpu.XMM0, 2013470188)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_PXOR_2(self):
        """Instruction PXOR_2
        Groups: sse2
        0x8059a66:  pxor    xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A66, "f\x0f\xef\xc1")
        cpu.EIP = 0x8059A66
        cpu.XMM0 = 0x1E00
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8059A66:0x8059A6A], [b"f", b"\x0f", b"\xef", b"\xc1"])
        self.assertEqual(cpu.EIP, 134584938)
        self.assertEqual(cpu.XMM0, 7680)
        self.assertEqual(cpu.XMM1, 0)

    def test_RET_1(self):
        """Instruction RET_1
        Groups: ret, not64bitmode
        0xf7ff4256: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF4256, "\xc3")
        mem.write(0xFFFFD2E8, "\x00\xd0\xff\xf7\x86\x13\xff\xf7\xc4")
        cpu.EIP = 0xF7FF4256
        cpu.EBP = 0xF7FDB1C4
        cpu.ESP = 0xFFFFD2EC
        cpu.execute()

        self.assertEqual(mem[0xF7FF4256:0xF7FF4257], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2E8:0xFFFFD2F1],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x86", b"\x13", b"\xff", b"\xf7", b"\xc4"],
        )
        self.assertEqual(cpu.EIP, 4160689030)
        self.assertEqual(cpu.EBP, 4160598468)
        self.assertEqual(cpu.ESP, 4294955760)

    def test_RET_10(self):
        """Instruction RET_10
        Groups: ret, not64bitmode
        0xf7fe57ef: ret     0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57EF, "\xc2\x14\x00")
        mem.write(0xFFFFD438, "\xf8\xd4\xff\xff\xf8r\xfe\xf7\x10")
        cpu.EIP = 0xF7FE57EF
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD43C
        cpu.execute()

        self.assertEqual(mem[0xF7FE57EF:0xF7FE57F2], [b"\xc2", b"\x14", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD438:0xFFFFD441],
            [b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160647928)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956116)

    def test_RET_11(self):
        """Instruction RET_11
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF476B, "\xc3")
        mem.write(0xFFFFD2A8, "\xc0\xd4\xff\xff\x97L\xfe\xf7a")
        cpu.EIP = 0xF7FF476B
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2AC
        cpu.execute()

        self.assertEqual(mem[0xF7FF476B:0xF7FF476C], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2A8:0xFFFFD2B1],
            [b"\xc0", b"\xd4", b"\xff", b"\xff", b"\x97", b"L", b"\xfe", b"\xf7", b"a"],
        )
        self.assertEqual(cpu.EIP, 4160638103)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955696)

    def test_RET_12(self):
        """Instruction RET_12
        Groups: ret, not64bitmode
        0xf7fe4fe5: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4FE5, "\xc3")
        mem.write(0xFFFFD378, "8\xd4\xff\xffzW\xfe\xf7\xe8")
        cpu.EIP = 0xF7FE4FE5
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD37C
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FE5:0xF7FE4FE6], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD378:0xFFFFD381],
            [b"8", b"\xd4", b"\xff", b"\xff", b"z", b"W", b"\xfe", b"\xf7", b"\xe8"],
        )
        self.assertEqual(cpu.EIP, 4160640890)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955904)

    def test_RET_13(self):
        """Instruction RET_13
        Groups: ret, not64bitmode
        0xf7fdcf15: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FDCF15, "\xc3")
        mem.write(0xFFFFD4F8, "\x18\xab\xfd\xf79\xf1\xfd\xf7\x00")
        cpu.EIP = 0xF7FDCF15
        cpu.EBP = 0xFFFFD5C8
        cpu.ESP = 0xFFFFD4FC
        cpu.execute()

        self.assertEqual(mem[0xF7FDCF15:0xF7FDCF16], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD4F8:0xFFFFD501],
            [b"\x18", b"\xab", b"\xfd", b"\xf7", b"9", b"\xf1", b"\xfd", b"\xf7", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160614713)
        self.assertEqual(cpu.EBP, 4294956488)
        self.assertEqual(cpu.ESP, 4294956288)

    def test_RET_14(self):
        """Instruction RET_14
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF476B, "\xc3")
        mem.write(0xFFFFD378, "8\xd4\xff\xff\x91V\xfe\xf7\xe8")
        cpu.EIP = 0xF7FF476B
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD37C
        cpu.execute()

        self.assertEqual(mem[0xF7FF476B:0xF7FF476C], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD378:0xFFFFD381],
            [b"8", b"\xd4", b"\xff", b"\xff", b"\x91", b"V", b"\xfe", b"\xf7", b"\xe8"],
        )
        self.assertEqual(cpu.EIP, 4160640657)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955904)

    def test_RET_15(self):
        """Instruction RET_15
        Groups: ret, not64bitmode
        0xf7fe4fe5: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4FE5, "\xc3")
        mem.write(0xFFFFD378, "8\xd4\xff\xffzW\xfe\xf7\xe8")
        cpu.EIP = 0xF7FE4FE5
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD37C
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FE5:0xF7FE4FE6], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD378:0xFFFFD381],
            [b"8", b"\xd4", b"\xff", b"\xff", b"z", b"W", b"\xfe", b"\xf7", b"\xe8"],
        )
        self.assertEqual(cpu.EIP, 4160640890)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955904)

    def test_RET_16(self):
        """Instruction RET_16
        Groups: ret, not64bitmode
        0xf7fe57ef: ret     0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57EF, "\xc2\x14\x00")
        mem.write(0xFFFFD438, "\xf8\xd4\xff\xff\xf8r\xfe\xf7\x10")
        cpu.EIP = 0xF7FE57EF
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD43C
        cpu.execute()

        self.assertEqual(mem[0xF7FE57EF:0xF7FE57F2], [b"\xc2", b"\x14", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD438:0xFFFFD441],
            [b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160647928)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956116)

    def test_RET_17(self):
        """Instruction RET_17
        Groups: ret, not64bitmode
        0xf7fe4d3a: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D3A, "\xc3")
        mem.write(0xFFFFD2E8, "\x18\xab\xfd\xf7\xf4T\xfe\xf7\xc4")
        cpu.EIP = 0xF7FE4D3A
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2EC
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D3A:0xF7FE4D3B], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2E8:0xFFFFD2F1],
            [b"\x18", b"\xab", b"\xfd", b"\xf7", b"\xf4", b"T", b"\xfe", b"\xf7", b"\xc4"],
        )
        self.assertEqual(cpu.EIP, 4160640244)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955760)

    def test_RET_18(self):
        """Instruction RET_18
        Groups: ret, not64bitmode
        0xf7fe4fe5: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4FE5, "\xc3")
        mem.write(0xFFFFD378, "8\xd4\xff\xffzW\xfe\xf7\xe8")
        cpu.EIP = 0xF7FE4FE5
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD37C
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FE5:0xF7FE4FE6], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD378:0xFFFFD381],
            [b"8", b"\xd4", b"\xff", b"\xff", b"z", b"W", b"\xfe", b"\xf7", b"\xe8"],
        )
        self.assertEqual(cpu.EIP, 4160640890)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955904)

    def test_RET_19(self):
        """Instruction RET_19
        Groups: ret, not64bitmode
        0xf7ff39cc: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF39CC, "\xc3")
        mem.write(0xFFFFD418, "\x00\xd0\xff\xf7\x9bk\xfe\xf7\x00")
        cpu.EIP = 0xF7FF39CC
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD41C
        cpu.execute()

        self.assertEqual(mem[0xF7FF39CC:0xF7FF39CD], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD418:0xFFFFD421],
            [b"\x00", b"\xd0", b"\xff", b"\xf7", b"\x9b", b"k", b"\xfe", b"\xf7", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 4160646043)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294956064)

    def test_RET_2(self):
        """Instruction RET_2
        Groups: ret, not64bitmode
        0xf7ff3e76: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF3E76, "\xc3")
        mem.write(0xFFFFD2A8, "\xc0\xd4\xff\xff\x9dM\xfe\xf7\x99")
        cpu.EIP = 0xF7FF3E76
        cpu.EBP = 0xF7FDABF8
        cpu.ESP = 0xFFFFD2AC
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E76:0xF7FF3E77], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2A8:0xFFFFD2B1],
            [b"\xc0", b"\xd4", b"\xff", b"\xff", b"\x9d", b"M", b"\xfe", b"\xf7", b"\x99"],
        )
        self.assertEqual(cpu.EIP, 4160638365)
        self.assertEqual(cpu.EBP, 4160596984)
        self.assertEqual(cpu.ESP, 4294955696)

    def test_RET_20(self):
        """Instruction RET_20
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF476B, "\xc3")
        mem.write(0xFFFFD378, "8\xd4\xff\xff\x91V\xfe\xf7\xe8")
        cpu.EIP = 0xF7FF476B
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD37C
        cpu.execute()

        self.assertEqual(mem[0xF7FF476B:0xF7FF476C], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD378:0xFFFFD381],
            [b"8", b"\xd4", b"\xff", b"\xff", b"\x91", b"V", b"\xfe", b"\xf7", b"\xe8"],
        )
        self.assertEqual(cpu.EIP, 4160640657)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955904)

    def test_RET_21(self):
        """Instruction RET_21
        Groups: ret, not64bitmode
        0xf7fe4d3a: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D3A, "\xc3")
        mem.write(0xFFFFD2E8, "\x18\xab\xfd\xf7\xf4T\xfe\xf7\xc4")
        cpu.EIP = 0xF7FE4D3A
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2EC
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D3A:0xF7FE4D3B], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2E8:0xFFFFD2F1],
            [b"\x18", b"\xab", b"\xfd", b"\xf7", b"\xf4", b"T", b"\xfe", b"\xf7", b"\xc4"],
        )
        self.assertEqual(cpu.EIP, 4160640244)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955760)

    def test_RET_3(self):
        """Instruction RET_3
        Groups: ret, not64bitmode
        0xf7ff3e76: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF3E76, "\xc3")
        mem.write(0xFFFFD2A8, "\xc0\xd4\xff\xff\x9dM\xfe\xf74")
        cpu.EIP = 0xF7FF3E76
        cpu.EBP = 0xF7FDADB8
        cpu.ESP = 0xFFFFD2AC
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E76:0xF7FF3E77], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2A8:0xFFFFD2B1],
            [b"\xc0", b"\xd4", b"\xff", b"\xff", b"\x9d", b"M", b"\xfe", b"\xf7", b"4"],
        )
        self.assertEqual(cpu.EIP, 4160638365)
        self.assertEqual(cpu.EBP, 4160597432)
        self.assertEqual(cpu.ESP, 4294955696)

    def test_RET_4(self):
        """Instruction RET_4
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF476B, "\xc3")
        mem.write(0xFFFFD378, "8\xd4\xff\xff\x91V\xfe\xf7\xe8")
        cpu.EIP = 0xF7FF476B
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD37C
        cpu.execute()

        self.assertEqual(mem[0xF7FF476B:0xF7FF476C], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD378:0xFFFFD381],
            [b"8", b"\xd4", b"\xff", b"\xff", b"\x91", b"V", b"\xfe", b"\xf7", b"\xe8"],
        )
        self.assertEqual(cpu.EIP, 4160640657)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955904)

    def test_RET_5(self):
        """Instruction RET_5
        Groups: ret, not64bitmode
        0xf7fe57ef: ret     0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57EF, "\xc2\x14\x00")
        mem.write(0xFFFFD438, "\xf8\xd4\xff\xff\xf8r\xfe\xf7\x10")
        cpu.EIP = 0xF7FE57EF
        cpu.EBP = 0xFFFFD4F8
        cpu.ESP = 0xFFFFD43C
        cpu.execute()

        self.assertEqual(mem[0xF7FE57EF:0xF7FE57F2], [b"\xc2", b"\x14", b"\x00"])
        self.assertEqual(
            mem[0xFFFFD438:0xFFFFD441],
            [b"\xf8", b"\xd4", b"\xff", b"\xff", b"\xf8", b"r", b"\xfe", b"\xf7", b"\x10"],
        )
        self.assertEqual(cpu.EIP, 4160647928)
        self.assertEqual(cpu.EBP, 4294956280)
        self.assertEqual(cpu.ESP, 4294956116)

    def test_RET_6(self):
        """Instruction RET_6
        Groups: ret, not64bitmode
        0xf7fe0776: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE0776, "\xc3")
        mem.write(0xFFFFD4C8, "x\xd8\xff\xf7\x97\xac\xfe\xf7\xa0")
        cpu.EIP = 0xF7FE0776
        cpu.EBP = 0xF7FE0740
        cpu.ESP = 0xFFFFD4CC
        cpu.execute()

        self.assertEqual(mem[0xF7FE0776:0xF7FE0777], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD4C8:0xFFFFD4D1],
            [b"x", b"\xd8", b"\xff", b"\xf7", b"\x97", b"\xac", b"\xfe", b"\xf7", b"\xa0"],
        )
        self.assertEqual(cpu.EIP, 4160662679)
        self.assertEqual(cpu.EBP, 4160620352)
        self.assertEqual(cpu.ESP, 4294956240)

    def test_RET_7(self):
        """Instruction RET_7
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF476B, "\xc3")
        mem.write(0xFFFFD2E8, "\x18\xab\xfd\xf74N\xfe\xf7\xc4")
        cpu.EIP = 0xF7FF476B
        cpu.EBP = 0xFFFFD438
        cpu.ESP = 0xFFFFD2EC
        cpu.execute()

        self.assertEqual(mem[0xF7FF476B:0xF7FF476C], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2E8:0xFFFFD2F1],
            [b"\x18", b"\xab", b"\xfd", b"\xf7", b"4", b"N", b"\xfe", b"\xf7", b"\xc4"],
        )
        self.assertEqual(cpu.EIP, 4160638516)
        self.assertEqual(cpu.EBP, 4294956088)
        self.assertEqual(cpu.ESP, 4294955760)

    def test_RET_8(self):
        """Instruction RET_8
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF476B, "\xc3")
        mem.write(0xFFFFD2A8, "\xc0\xd4\xff\xff\x97L\xfe\xf7a")
        cpu.EIP = 0xF7FF476B
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2AC
        cpu.execute()

        self.assertEqual(mem[0xF7FF476B:0xF7FF476C], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2A8:0xFFFFD2B1],
            [b"\xc0", b"\xd4", b"\xff", b"\xff", b"\x97", b"L", b"\xfe", b"\xf7", b"a"],
        )
        self.assertEqual(cpu.EIP, 4160638103)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955696)

    def test_RET_9(self):
        """Instruction RET_9
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF476B, "\xc3")
        mem.write(0xFFFFD2A8, "\xc0\xd4\xff\xff\x97L\xfe\xf7a")
        cpu.EIP = 0xF7FF476B
        cpu.EBP = 0xF7FDAB18
        cpu.ESP = 0xFFFFD2AC
        cpu.execute()

        self.assertEqual(mem[0xF7FF476B:0xF7FF476C], [b"\xc3"])
        self.assertEqual(
            mem[0xFFFFD2A8:0xFFFFD2B1],
            [b"\xc0", b"\xd4", b"\xff", b"\xff", b"\x97", b"L", b"\xfe", b"\xf7", b"a"],
        )
        self.assertEqual(cpu.EIP, 4160638103)
        self.assertEqual(cpu.EBP, 4160596760)
        self.assertEqual(cpu.ESP, 4294955696)

    def test_ROL_1(self):
        """Instruction ROL_1
        Groups:
        0xf7e43469: rol     ecx, 9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E43000, 0x1000, "rwx")
        mem.write(0xF7E43469, "\xc1\xc1\t")
        cpu.EIP = 0xF7E43469
        cpu.CF = False
        cpu.OF = False
        cpu.ECX = 0x57E6423C
        cpu.execute()

        self.assertEqual(mem[0xF7E43469:0xF7E4346C], [b"\xc1", b"\xc1", b"\t"])
        self.assertEqual(cpu.EIP, 4158927980)
        self.assertEqual(cpu.ECX, 3431233711)

    def test_ROL_10(self):
        """Instruction ROL_10
        Groups:
        0x8059a07:  rol     byte ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A07, "\xc0E\x00\xff")
        mem.write(0xFFFFB600, "0")
        cpu.EIP = 0x8059A07
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8059A07:0x8059A0B], [b"\xc0", b"E", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x18"])
        self.assertEqual(cpu.EIP, 134584843)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_11(self):
        """Instruction ROL_11
        Groups:
        0x8059a21:  rol     dword ptr [ebp], -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A21, "\xc1E\x00\xff")
        mem.write(0xFFFFB600, "|`\x00<")
        cpu.EIP = 0x8059A21
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8059A21:0x8059A25], [b"\xc1", b"E", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b">", b"0", b"\x00", b"\x1e"])
        self.assertEqual(cpu.EIP, 134584869)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_12(self):
        """Instruction ROL_12
        Groups:
        0x8059a15:  rol     dword ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A15, "\xc1E\x00\x04")
        mem.write(0xFFFFB600, "\xc0\x00x\xf8")
        cpu.EIP = 0x8059A15
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8059A15:0x8059A19], [b"\xc1", b"E", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x0f", b"\x0c", b"\x80", b"\x87"])
        self.assertEqual(cpu.EIP, 134584857)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_13(self):
        """Instruction ROL_13
        Groups:
        0x80599e0:  rol     ecx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599E0, "\xd1\xc1")
        cpu.EIP = 0x80599E0
        cpu.CF = False
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80599E0:0x80599E2], [b"\xd1", b"\xc1"])
        self.assertEqual(cpu.EIP, 134584802)
        self.assertEqual(cpu.ECX, 0)

    def test_ROL_14(self):
        """Instruction ROL_14
        Groups:
        0x8059a03:  rol     byte ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A03, "\xc0E\x00\x04")
        mem.write(0xFFFFB600, "\x03")
        cpu.EIP = 0x8059A03
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8059A03:0x8059A07], [b"\xc0", b"E", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"0"])
        self.assertEqual(cpu.EIP, 134584839)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_15(self):
        """Instruction ROL_15
        Groups:
        0x80599e5:  rol     word ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80599E5, "f\xd1E\x00")
        mem.write(0xFFFFB600, "\x00\x00")
        cpu.EIP = 0x80599E5
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80599E5:0x80599E9], [b"f", b"\xd1", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134584809)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_16(self):
        """Instruction ROL_16
        Groups:
        0x80599db:  rol     cl, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599DB, "\xd0\xc1")
        cpu.EIP = 0x80599DB
        cpu.CF = False
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80599DB:0x80599DD], [b"\xd0", b"\xc1"])
        self.assertEqual(cpu.EIP, 134584797)
        self.assertEqual(cpu.CL, 0)

    def test_ROL_17(self):
        """Instruction ROL_17
        Groups:
        0xf7e43479: rol     ecx, 9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E43000, 0x1000, "rwx")
        mem.write(0xF7E43479, "\xc1\xc1\t")
        cpu.EIP = 0xF7E43479
        cpu.CF = False
        cpu.OF = False
        cpu.ECX = 0x5FFB7EAE
        cpu.execute()

        self.assertEqual(mem[0xF7E43479:0xF7E4347C], [b"\xc1", b"\xc1", b"\t"])
        self.assertEqual(cpu.EIP, 4158927996)
        self.assertEqual(cpu.ECX, 4143799487)

    def test_ROL_18(self):
        """Instruction ROL_18
        Groups:
        0x8059a19:  rol     dword ptr [ebp], -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A19, "\xc1E\x00\xff")
        mem.write(0xFFFFB600, "\x0f\x0c\x80\x87")
        cpu.EIP = 0x8059A19
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8059A19:0x8059A1D], [b"\xc1", b"E", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x07", b"\x06", b"\xc0", b"\xc3"])
        self.assertEqual(cpu.EIP, 134584861)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_19(self):
        """Instruction ROL_19
        Groups:
        0x80599f2:  rol     cl, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599F2, "\xc0\xc1\xff")
        cpu.EIP = 0x80599F2
        cpu.CF = False
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80599F2:0x80599F5], [b"\xc0", b"\xc1", b"\xff"])
        self.assertEqual(cpu.EIP, 134584821)
        self.assertEqual(cpu.CL, 0)

    def test_ROL_2(self):
        """Instruction ROL_2
        Groups:
        0x80599ef:  rol     cl, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599EF, "\xc0\xc1\x04")
        cpu.EIP = 0x80599EF
        cpu.CF = True
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80599EF:0x80599F2], [b"\xc0", b"\xc1", b"\x04"])
        self.assertEqual(cpu.EIP, 134584818)
        self.assertEqual(cpu.CL, 0)

    def test_ROL_20(self):
        """Instruction ROL_20
        Groups:
        0x8059a1d:  rol     dword ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A1D, "\xc1E\x00\x04")
        mem.write(0xFFFFB600, "\x07\x06\xc0\xc3")
        cpu.EIP = 0x8059A1D
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x8059A1D:0x8059A21], [b"\xc1", b"E", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"|", b"`", b"\x00", b"<"])
        self.assertEqual(cpu.EIP, 134584865)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_21(self):
        """Instruction ROL_21
        Groups:
        0x80599e2:  rol     byte ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80599E2, "\xd0E\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x80599E2
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80599E2:0x80599E5], [b"\xd0", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134584805)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_3(self):
        """Instruction ROL_3
        Groups:
        0x80599ec:  rol     dword ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80599EC, "\xd1E\x00")
        mem.write(0xFFFFB600, "\x01\x00<\xfc")
        cpu.EIP = 0x80599EC
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80599EC:0x80599EF], [b"\xd1", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x03", b"\x00", b"x", b"\xf8"])
        self.assertEqual(cpu.EIP, 134584815)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_4(self):
        """Instruction ROL_4
        Groups:
        0x8059a00:  rol     ecx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A00, "\xc1\xc1\xff")
        cpu.EIP = 0x8059A00
        cpu.CF = False
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8059A00:0x8059A03], [b"\xc1", b"\xc1", b"\xff"])
        self.assertEqual(cpu.EIP, 134584835)
        self.assertEqual(cpu.ECX, 0)

    def test_ROL_5(self):
        """Instruction ROL_5
        Groups:
        0x80599f9:  rol     cx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599F9, "f\xc1\xc1\xff")
        cpu.EIP = 0x80599F9
        cpu.CX = 0x0
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80599F9:0x80599FD], [b"f", b"\xc1", b"\xc1", b"\xff"])
        self.assertEqual(cpu.EIP, 134584829)
        self.assertEqual(cpu.CX, 0)

    def test_ROL_6(self):
        """Instruction ROL_6
        Groups:
        0x80599fd:  rol     ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599FD, "\xc1\xc1\x04")
        cpu.EIP = 0x80599FD
        cpu.CF = False
        cpu.OF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80599FD:0x8059A00], [b"\xc1", b"\xc1", b"\x04"])
        self.assertEqual(cpu.EIP, 134584832)
        self.assertEqual(cpu.ECX, 0)

    def test_ROL_7(self):
        """Instruction ROL_7
        Groups:
        0x80599dd:  rol     cx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599DD, "f\xd1\xc1")
        cpu.EIP = 0x80599DD
        cpu.CX = 0x0
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80599DD:0x80599E0], [b"f", b"\xd1", b"\xc1"])
        self.assertEqual(cpu.EIP, 134584800)
        self.assertEqual(cpu.CX, 0)

    def test_ROL_8(self):
        """Instruction ROL_8
        Groups:
        0x8059a0b:  rol     word ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A0B, "f\xc1E\x00\x04")
        mem.write(0xFFFFB600, "\x18\x00")
        cpu.EIP = 0x8059A0B
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8059A0B:0x8059A10], [b"f", b"\xc1", b"E", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x80", b"\x01"])
        self.assertEqual(cpu.EIP, 134584848)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROL_9(self):
        """Instruction ROL_9
        Groups:
        0xf7e484bc: rol     edx, 9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E48000, 0x1000, "rwx")
        mem.write(0xF7E484BC, "\xc1\xc2\t")
        cpu.EIP = 0xF7E484BC
        cpu.EDX = 0x5FE7257C
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0xF7E484BC:0xF7E484BF], [b"\xc1", b"\xc2", b"\t"])
        self.assertEqual(cpu.EIP, 4158948543)
        self.assertEqual(cpu.EDX, 3461019839)

    def test_ROR_1(self):
        """Instruction ROR_1
        Groups:
        0x805b9c6:  ror     byte ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9C6, "\xc0M\x00\x04")
        mem.write(0xFFFFB600, "\x0f")
        cpu.EIP = 0x805B9C6
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9C6:0x805B9CA], [b"\xc0", b"M", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\xf0"])
        self.assertEqual(cpu.EIP, 134592970)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_10(self):
        """Instruction ROR_10
        Groups:
        0x805b9a3:  ror     ecx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9A3, "\xd1\xc9")
        cpu.EIP = 0x805B9A3
        cpu.CF = False
        cpu.OF = True
        cpu.ECX = 0x78036403
        cpu.execute()

        self.assertEqual(mem[0x805B9A3:0x805B9A5], [b"\xd1", b"\xc9"])
        self.assertEqual(cpu.EIP, 134592933)
        self.assertEqual(cpu.ECX, 3154227713)

    def test_ROR_11(self):
        """Instruction ROR_11
        Groups:
        0x805b9d8:  ror     dword ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9D8, "\xc1M\x00\x04")
        mem.write(0xFFFFB600, "\x1c \x00\x80")
        cpu.EIP = 0x805B9D8
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9D8:0x805B9DC], [b"\xc1", b"M", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x01", b"\x02", b"\x00", b"\xc8"])
        self.assertEqual(cpu.EIP, 134592988)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_12(self):
        """Instruction ROR_12
        Groups:
        0x805b9a8:  ror     word ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9A8, "f\xd1M\x00")
        mem.write(0xFFFFB600, "|\x00")
        cpu.EIP = 0x805B9A8
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x805B9A8:0x805B9AC], [b"f", b"\xd1", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b">", b"\x00"])
        self.assertEqual(cpu.EIP, 134592940)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_13(self):
        """Instruction ROR_13
        Groups:
        0x805b9ac:  ror     dword ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9AC, "\xd1M\x00")
        mem.write(0xFFFFB600, ">\x00\x00\x00")
        cpu.EIP = 0x805B9AC
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9AC:0x805B9AF], [b"\xd1", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x1f", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134592943)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_14(self):
        """Instruction ROR_14
        Groups:
        0x805b9e4:  ror     dword ptr [ebp], -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9E4, "\xc1M\x00\xff")
        mem.write(0xFFFFB600, "@\x00\x009")
        cpu.EIP = 0x805B9E4
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9E4:0x805B9E8], [b"\xc1", b"M", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x80", b"\x00", b"\x00", b"r"])
        self.assertEqual(cpu.EIP, 134593000)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_15(self):
        """Instruction ROR_15
        Groups:
        0x805b9af:  ror     dword ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9AF, "\xd1M\x00")
        mem.write(0xFFFFB600, "\x1f\x00\x00\x00")
        cpu.EIP = 0x805B9AF
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9AF:0x805B9B2], [b"\xd1", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x0f", b"\x00", b"\x00", b"\x80"])
        self.assertEqual(cpu.EIP, 134592946)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_16(self):
        """Instruction ROR_16
        Groups:
        0x805b9ca:  ror     byte ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9CA, "\xc0M\x00\xff")
        mem.write(0xFFFFB600, "\xf0")
        cpu.EIP = 0x805B9CA
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x805B9CA:0x805B9CE], [b"\xc0", b"M", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\xe1"])
        self.assertEqual(cpu.EIP, 134592974)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_17(self):
        """Instruction ROR_17
        Groups:
        0x805b9dc:  ror     dword ptr [ebp], -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9DC, "\xc1M\x00\xff")
        mem.write(0xFFFFB600, "\x01\x02\x00\xc8")
        cpu.EIP = 0x805B9DC
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x805B9DC:0x805B9E0], [b"\xc1", b"M", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x03", b"\x04", b"\x00", b"\x90"])
        self.assertEqual(cpu.EIP, 134592992)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_18(self):
        """Instruction ROR_18
        Groups:
        0x805b9bc:  ror     cx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9BC, "f\xc1\xc9\xff")
        cpu.EIP = 0x805B9BC
        cpu.CX = 0xB22
        cpu.CF = False
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x805B9BC:0x805B9C0], [b"f", b"\xc1", b"\xc9", b"\xff"])
        self.assertEqual(cpu.EIP, 134592960)
        self.assertEqual(cpu.CX, 5700)

    def test_ROR_19(self):
        """Instruction ROR_19
        Groups:
        0x805b9d3:  ror     word ptr [ebp], -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9D3, "f\xc1M\x00\xff")
        mem.write(0xFFFFB600, "\x0e\x10")
        cpu.EIP = 0x805B9D3
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x805B9D3:0x805B9D8], [b"f", b"\xc1", b"M", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x1c", b" "])
        self.assertEqual(cpu.EIP, 134592984)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_2(self):
        """Instruction ROR_2
        Groups:
        0x805b9ce:  ror     word ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9CE, "f\xc1M\x00\x04")
        mem.write(0xFFFFB600, "\xe1\x00")
        cpu.EIP = 0x805B9CE
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x805B9CE:0x805B9D3], [b"f", b"\xc1", b"M", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\x0e", b"\x10"])
        self.assertEqual(cpu.EIP, 134592979)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_20(self):
        """Instruction ROR_20
        Groups:
        0x805b9b2:  ror     cl, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9B2, "\xc0\xc9\x04")
        cpu.EIP = 0x805B9B2
        cpu.CF = True
        cpu.OF = True
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x805B9B2:0x805B9B5], [b"\xc0", b"\xc9", b"\x04"])
        self.assertEqual(cpu.EIP, 134592949)
        self.assertEqual(cpu.CL, 16)

    def test_ROR_21(self):
        """Instruction ROR_21
        Groups:
        0x805b9a5:  ror     byte ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9A5, "\xd0M\x00")
        mem.write(0xFFFFB600, "\xf8")
        cpu.EIP = 0x805B9A5
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = True
        cpu.execute()

        self.assertEqual(mem[0x805B9A5:0x805B9A8], [b"\xd0", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"|"])
        self.assertEqual(cpu.EIP, 134592936)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_3(self):
        """Instruction ROR_3
        Groups:
        0x805b9c0:  ror     ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9C0, "\xc1\xc9\x04")
        cpu.EIP = 0x805B9C0
        cpu.CF = False
        cpu.OF = False
        cpu.ECX = 0xBC011644
        cpu.execute()

        self.assertEqual(mem[0x805B9C0:0x805B9C3], [b"\xc1", b"\xc9", b"\x04"])
        self.assertEqual(cpu.EIP, 134592963)
        self.assertEqual(cpu.ECX, 1270878564)

    def test_ROR_4(self):
        """Instruction ROR_4
        Groups:
        0x805b9b5:  ror     cl, 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9B5, "\xc0\xc9\xff")
        cpu.EIP = 0x805B9B5
        cpu.CF = False
        cpu.OF = True
        cpu.CL = 0x10
        cpu.execute()

        self.assertEqual(mem[0x805B9B5:0x805B9B8], [b"\xc0", b"\xc9", b"\xff"])
        self.assertEqual(cpu.EIP, 134592952)
        self.assertEqual(cpu.CL, 32)

    def test_ROR_5(self):
        """Instruction ROR_5
        Groups:
        0x805b9b8:  ror     cx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9B8, "f\xc1\xc9\x04")
        cpu.EIP = 0x805B9B8
        cpu.CX = 0xB220
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9B8:0x805B9BC], [b"f", b"\xc1", b"\xc9", b"\x04"])
        self.assertEqual(cpu.EIP, 134592956)
        self.assertEqual(cpu.CX, 2850)

    def test_ROR_6(self):
        """Instruction ROR_6
        Groups:
        0x805b9c3:  ror     ecx, -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9C3, "\xc1\xc9\xff")
        cpu.EIP = 0x805B9C3
        cpu.CF = False
        cpu.OF = True
        cpu.ECX = 0x4BC01164
        cpu.execute()

        self.assertEqual(mem[0x805B9C3:0x805B9C6], [b"\xc1", b"\xc9", b"\xff"])
        self.assertEqual(cpu.EIP, 134592966)
        self.assertEqual(cpu.ECX, 2541757128)

    def test_ROR_7(self):
        """Instruction ROR_7
        Groups:
        0x805b9e0:  ror     dword ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9E0, "\xc1M\x00\x04")
        mem.write(0xFFFFB600, "\x03\x04\x00\x90")
        cpu.EIP = 0x805B9E0
        cpu.EBP = 0xFFFFB600
        cpu.CF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9E0:0x805B9E4], [b"\xc1", b"M", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"@", b"\x00", b"\x00", b"9"])
        self.assertEqual(cpu.EIP, 134592996)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_ROR_8(self):
        """Instruction ROR_8
        Groups:
        0x805b99e:  ror     cl, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B99E, "\xd0\xc9")
        cpu.EIP = 0x805B99E
        cpu.CF = False
        cpu.OF = False
        cpu.CL = 0xC
        cpu.execute()

        self.assertEqual(mem[0x805B99E:0x805B9A0], [b"\xd0", b"\xc9"])
        self.assertEqual(cpu.EIP, 134592928)
        self.assertEqual(cpu.CL, 6)

    def test_ROR_9(self):
        """Instruction ROR_9
        Groups:
        0x805b9a0:  ror     cx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9A0, "f\xd1\xc9")
        cpu.EIP = 0x805B9A0
        cpu.CX = 0xC806
        cpu.CF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9A0:0x805B9A3], [b"f", b"\xd1", b"\xc9"])
        self.assertEqual(cpu.EIP, 134592931)
        self.assertEqual(cpu.CX, 25603)

    def test_SAHF_1(self):
        """Instruction SAHF_1
        Groups:
        0x807b5a9:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B5A9, "\x9e")
        cpu.EIP = 0x807B5A9
        cpu.AF = True
        cpu.AH = 0xD7
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807B5A9:0x807B5AA], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134722986)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 215)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_10(self):
        """Instruction SAHF_10
        Groups:
        0x807ab2f:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB2F, "\x9e")
        cpu.EIP = 0x807AB2F
        cpu.AF = False
        cpu.AH = 0xD7
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AB2F:0x807AB30], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134720304)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 215)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_11(self):
        """Instruction SAHF_11
        Groups:
        0x807b032:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B032, "\x9e")
        cpu.EIP = 0x807B032
        cpu.AF = False
        cpu.AH = 0x42
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807B032:0x807B033], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134721587)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 66)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_12(self):
        """Instruction SAHF_12
        Groups:
        0x807b180:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B180, "\x9e")
        cpu.EIP = 0x807B180
        cpu.AF = False
        cpu.AH = 0x52
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807B180:0x807B181], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134721921)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 82)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_13(self):
        """Instruction SAHF_13
        Groups:
        0x807a29d:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A29D, "\x9e")
        cpu.EIP = 0x807A29D
        cpu.AF = False
        cpu.AH = 0x87
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807A29D:0x807A29E], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134718110)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 135)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_14(self):
        """Instruction SAHF_14
        Groups:
        0x807aec9:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEC9, "\x9e")
        cpu.EIP = 0x807AEC9
        cpu.AF = False
        cpu.AH = 0x3
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AEC9:0x807AECA], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134721226)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 3)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_15(self):
        """Instruction SAHF_15
        Groups:
        0x807b328:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B328, "\x9e")
        cpu.EIP = 0x807B328
        cpu.AF = False
        cpu.AH = 0xC6
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807B328:0x807B329], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134722345)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 198)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_16(self):
        """Instruction SAHF_16
        Groups:
        0x807a58b:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A58B, "\x9e")
        cpu.EIP = 0x807A58B
        cpu.AF = False
        cpu.AH = 0x7
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807A58B:0x807A58C], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134718860)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_17(self):
        """Instruction SAHF_17
        Groups:
        0x807ac87:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC87, "\x9e")
        cpu.EIP = 0x807AC87
        cpu.AF = False
        cpu.AH = 0x7
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AC87:0x807AC88], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134720648)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_18(self):
        """Instruction SAHF_18
        Groups:
        0x807b425:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B425, "\x9e")
        cpu.EIP = 0x807B425
        cpu.AF = False
        cpu.AH = 0x93
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807B425:0x807B426], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134722598)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 147)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_19(self):
        """Instruction SAHF_19
        Groups:
        0x807baf9:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BAF9, "\x9e")
        cpu.EIP = 0x807BAF9
        cpu.AF = False
        cpu.AH = 0x53
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807BAF9:0x807BAFA], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134724346)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 83)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_2(self):
        """Instruction SAHF_2
        Groups:
        0x807b558:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B558, "\x9e")
        cpu.EIP = 0x807B558
        cpu.AF = False
        cpu.AH = 0x96
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807B558:0x807B559], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134722905)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 150)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_20(self):
        """Instruction SAHF_20
        Groups:
        0x8079d2e:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D2E, "\x9e")
        cpu.EIP = 0x8079D2E
        cpu.AF = False
        cpu.AH = 0xD6
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8079D2E:0x8079D2F], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134716719)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 214)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_21(self):
        """Instruction SAHF_21
        Groups:
        0x807a5c1:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A5C1, "\x9e")
        cpu.EIP = 0x807A5C1
        cpu.AF = False
        cpu.AH = 0x43
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807A5C1:0x807A5C2], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134718914)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 67)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_3(self):
        """Instruction SAHF_3
        Groups:
        0x80798a2:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798A2, "\x9e")
        cpu.EIP = 0x80798A2
        cpu.AF = True
        cpu.AH = 0x2
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80798A2:0x80798A3], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134715555)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 2)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_4(self):
        """Instruction SAHF_4
        Groups:
        0x807aa96:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA96, "\x9e")
        cpu.EIP = 0x807AA96
        cpu.AF = False
        cpu.AH = 0x56
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AA96:0x807AA97], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134720151)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 86)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_5(self):
        """Instruction SAHF_5
        Groups:
        0x8079b23:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079B23, "\x9e")
        cpu.EIP = 0x8079B23
        cpu.AF = False
        cpu.AH = 0x13
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8079B23:0x8079B24], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134716196)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 19)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_6(self):
        """Instruction SAHF_6
        Groups:
        0x807bb41:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB41, "\x9e")
        cpu.EIP = 0x807BB41
        cpu.AF = False
        cpu.AH = 0x93
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807BB41:0x807BB42], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134724418)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 147)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_7(self):
        """Instruction SAHF_7
        Groups:
        0x807ab81:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB81, "\x9e")
        cpu.EIP = 0x807AB81
        cpu.AF = False
        cpu.AH = 0x17
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807AB81:0x807AB82], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134720386)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 23)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAHF_8(self):
        """Instruction SAHF_8
        Groups:
        0x807a772:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A772, "\x9e")
        cpu.EIP = 0x807A772
        cpu.AF = True
        cpu.AH = 0xC2
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807A772:0x807A773], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134719347)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.AH, 194)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)

    def test_SAHF_9(self):
        """Instruction SAHF_9
        Groups:
        0x807a796:  sahf
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A796, "\x9e")
        cpu.EIP = 0x807A796
        cpu.AF = False
        cpu.AH = 0xD2
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x807A796:0x807A797], [b"\x9e"])
        self.assertEqual(cpu.EIP, 134719383)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.AH, 210)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)

    def test_SAR_1(self):
        """Instruction SAR_1
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x1A48
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1682)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_10(self):
        """Instruction SAR_10
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x172C
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1483)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_11(self):
        """Instruction SAR_11
        Groups:
        0x804d5ec:  sar     byte ptr [ebp], 0xff
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D5EC, "\xc0}\x00\xff")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x804D5EC
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D5EC:0x804D5F0], [b"\xc0", b"}", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134534640)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_SAR_12(self):
        """Instruction SAR_12
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x1E6C
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1947)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_13(self):
        """Instruction SAR_13
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x2184
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 2145)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_14(self):
        """Instruction SAR_14
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x484
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 289)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_15(self):
        """Instruction SAR_15
        Groups:
        0x804d5c7:  sar     byte ptr [ebp], 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D5C7, "\xd0}\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x804D5C7
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D5C7:0x804D5CA], [b"\xd0", b"}", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134534602)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_SAR_16(self):
        """Instruction SAR_16
        Groups:
        0xf7fe2131: sar     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE2131, "\xd3\xfa")
        cpu.EIP = 0xF7FE2131
        cpu.EDX = 0x73516240
        cpu.PF = True
        cpu.CL = 0x18
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE2131:0xF7FE2133], [b"\xd3", b"\xfa"])
        self.assertEqual(cpu.EIP, 4160626995)
        self.assertEqual(cpu.EDX, 115)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 24)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_17(self):
        """Instruction SAR_17
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x1944
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1617)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_18(self):
        """Instruction SAR_18
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x13B4
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1261)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_19(self):
        """Instruction SAR_19
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xBA4
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 745)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_2(self):
        """Instruction SAR_2
        Groups:
        0xf7ff0800: sar     esi, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0800, "\xd1\xfe")
        cpu.EIP = 0xF7FF0800
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ESI = 0x60B
        cpu.execute()

        self.assertEqual(mem[0xF7FF0800:0xF7FF0802], [b"\xd1", b"\xfe"])
        self.assertEqual(cpu.EIP, 4160686082)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 773)

    def test_SAR_20(self):
        """Instruction SAR_20
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x370
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 220)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_21(self):
        """Instruction SAR_21
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x1584
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1377)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_3(self):
        """Instruction SAR_3
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x225C
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 2199)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_4(self):
        """Instruction SAR_4
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x122C
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1163)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_5(self):
        """Instruction SAR_5
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x68
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 26)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SAR_6(self):
        """Instruction SAR_6
        Groups:
        0x804d5fe:  sar     dword ptr [ebp], -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D5FE, "\xc1}\x00\xff")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x804D5FE
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D5FE:0x804D602], [b"\xc1", b"}", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134534658)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, False)

    def test_SAR_7(self):
        """Instruction SAR_7
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x3C
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 15)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_8(self):
        """Instruction SAR_8
        Groups:
        0x804d5d4:  sar     cl, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5D4, "\xc0\xf9\x04")
        cpu.EIP = 0x804D5D4
        cpu.CL = 0x0
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804D5D4:0x804D5D7], [b"\xc0", b"\xf9", b"\x04"])
        self.assertEqual(cpu.EIP, 134534615)
        self.assertEqual(cpu.CL, 0)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_9(self):
        """Instruction SAR_9
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x13D8
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E1:0xF7FE54E4], [b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.EIP, 4160640228)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 1270)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SCASB_1(self):
        """Instruction SCASB_1
        Groups:
        0x8079346:  scasb   al, byte ptr es:[edi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        mem.write(0x8079346, "\xae")
        mem.write(0x807F049, "\xd1")
        cpu.SF = True
        cpu.EIP = 0x8079346
        cpu.PF = False
        cpu.AF = False
        cpu.DF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x807F049
        cpu.AL = 0x37
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8079346:0x8079347], [b"\xae"])
        self.assertEqual(mem[0x807F049:0x807F04A], [b"\xd1"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.EIP, 134714183)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 134737994)
        self.assertEqual(cpu.AL, 55)
        self.assertEqual(cpu.CF, True)

    def test_SCASD_1(self):
        """Instruction SCASD_1
        Groups:
        0x8079349:  scasd   eax, dword ptr es:[edi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        mem.write(0x8079349, "\xaf")
        mem.write(0x807F04C, "\xed\xd1\x1e\xed")
        cpu.EIP = 0x8079349
        cpu.EAX = 0x137
        cpu.PF = False
        cpu.AF = True
        cpu.DF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x807F04C
        cpu.CF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8079349:0x807934A], [b"\xaf"])
        self.assertEqual(mem[0x807F04C:0x807F050], [b"\xed", b"\xd1", b"\x1e", b"\xed"])
        self.assertEqual(cpu.EIP, 134714186)
        self.assertEqual(cpu.EAX, 311)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 134738000)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_SCASW_1(self):
        """Instruction SCASW_1
        Groups:
        0x8079347:  scasw   ax, word ptr es:[edi]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        mem.write(0x8079347, "f\xaf")
        mem.write(0x807F04A, "\x1e\xed")
        cpu.EIP = 0x8079347
        cpu.AX = 0x137
        cpu.PF = True
        cpu.AF = False
        cpu.DF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x807F04A
        cpu.CF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8079347:0x8079349], [b"f", b"\xaf"])
        self.assertEqual(mem[0x807F04A:0x807F04C], [b"\x1e", b"\xed"])
        self.assertEqual(cpu.EIP, 134714185)
        self.assertEqual(cpu.AX, 311)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 134737996)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_SETAE_1(self):
        """Instruction SETAE_1
        Groups:
        0x8079477:  setae   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079477, "\x0f\x93\xc1")
        cpu.EIP = 0x8079477
        cpu.CF = False
        cpu.CL = 0x85
        cpu.execute()

        self.assertEqual(mem[0x8079477:0x807947A], [b"\x0f", b"\x93", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714490)
        self.assertEqual(cpu.CL, 1)

    def test_SETAE_2(self):
        """Instruction SETAE_2
        Groups:
        0x80701a7:  setae   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701A7, "\x0f\x93\xc1")
        cpu.EIP = 0x80701A7
        cpu.CF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80701A7:0x80701AA], [b"\x0f", b"\x93", b"\xc1"])
        self.assertEqual(cpu.EIP, 134676906)
        self.assertEqual(cpu.CL, 1)

    def test_SETAE_3(self):
        """Instruction SETAE_3
        Groups:
        0x807947a:  setae   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807947A, "\x0f\x93E\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x807947A
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x807947A:0x807947E], [b"\x0f", b"\x93", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134714494)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETAE_4(self):
        """Instruction SETAE_4
        Groups:
        0x80794a6:  setae   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794A6, "\x0f\x93\xc1")
        cpu.EIP = 0x80794A6
        cpu.CF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80794A6:0x80794A9], [b"\x0f", b"\x93", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714537)
        self.assertEqual(cpu.CL, 1)

    def test_SETAE_5(self):
        """Instruction SETAE_5
        Groups:
        0x80701aa:  setae   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80701AA, "\x0f\x93E\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x80701AA
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x80701AA:0x80701AE], [b"\x0f", b"\x93", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134676910)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETAE_6(self):
        """Instruction SETAE_6
        Groups:
        0x80794a9:  setae   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794A9, "\x0f\x93E\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x80794A9
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x80794A9:0x80794AD], [b"\x0f", b"\x93", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134714541)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETA_1(self):
        """Instruction SETA_1
        Groups:
        0x8079342:  seta    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079342, "\x0f\x97E\x00")
        mem.write(0xFFFFB600, "7")
        cpu.EIP = 0x8079342
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8079342:0x8079346], [b"\x0f", b"\x97", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134714182)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETA_2(self):
        """Instruction SETA_2
        Groups:
        0x8065f9b:  seta    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F9B, "\x0f\x97\xc1")
        cpu.EIP = 0x8065F9B
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x8065F9B:0x8065F9E], [b"\x0f", b"\x97", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635422)
        self.assertEqual(cpu.CL, 1)

    def test_SETA_3(self):
        """Instruction SETA_3
        Groups:
        0x8065f9e:  seta    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F9E, "\x0f\x97E\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x8065F9E
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8065F9E:0x8065FA2], [b"\x0f", b"\x97", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134635426)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETA_4(self):
        """Instruction SETA_4
        Groups:
        0x807933f:  seta    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807933F, "\x0f\x97\xc1")
        cpu.EIP = 0x807933F
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x1F
        cpu.execute()

        self.assertEqual(mem[0x807933F:0x8079342], [b"\x0f", b"\x97", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714178)
        self.assertEqual(cpu.CL, 1)

    def test_SETBE_1(self):
        """Instruction SETBE_1
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x14
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_10(self):
        """Instruction SETBE_10
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0xF4
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_11(self):
        """Instruction SETBE_11
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0xA4
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_12(self):
        """Instruction SETBE_12
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x74
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_13(self):
        """Instruction SETBE_13
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0xA4
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_14(self):
        """Instruction SETBE_14
        Groups:
        0x80701b8:  setbe   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80701B8, "\x0f\x96E\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x80701B8
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x80701B8:0x80701BC], [b"\x0f", b"\x96", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134676924)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETBE_15(self):
        """Instruction SETBE_15
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x94
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_16(self):
        """Instruction SETBE_16
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x44
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_17(self):
        """Instruction SETBE_17
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x74
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_18(self):
        """Instruction SETBE_18
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x64
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_19(self):
        """Instruction SETBE_19
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0xA4
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_2(self):
        """Instruction SETBE_2
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x34
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_20(self):
        """Instruction SETBE_20
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x34
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_21(self):
        """Instruction SETBE_21
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x54
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_3(self):
        """Instruction SETBE_3
        Groups:
        0xf7fe7f30: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7F30, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7F30
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x64
        cpu.execute()

        self.assertEqual(mem[0xF7FE7F30:0xF7FE7F33], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160651059)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_4(self):
        """Instruction SETBE_4
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x64
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_5(self):
        """Instruction SETBE_5
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x44
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_6(self):
        """Instruction SETBE_6
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x84
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_7(self):
        """Instruction SETBE_7
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x14
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_8(self):
        """Instruction SETBE_8
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0x4C
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETBE_9(self):
        """Instruction SETBE_9
        Groups:
        0xf7fe7263: setbe   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = False
        cpu.CF = False
        cpu.CL = 0xC4
        cpu.execute()

        self.assertEqual(mem[0xF7FE7263:0xF7FE7266], [b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647782)
        self.assertEqual(cpu.CL, 0)

    def test_SETB_1(self):
        """Instruction SETB_1
        Groups:
        0x80701ae:  setb    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701AE, "\x0f\x92\xc1")
        cpu.EIP = 0x80701AE
        cpu.CF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x80701AE:0x80701B1], [b"\x0f", b"\x92", b"\xc1"])
        self.assertEqual(cpu.EIP, 134676913)
        self.assertEqual(cpu.CL, 0)

    def test_SETB_2(self):
        """Instruction SETB_2
        Groups:
        0x8065fa9:  setb    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FA9, "\x0f\x92\xc1")
        cpu.EIP = 0x8065FA9
        cpu.CF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8065FA9:0x8065FAC], [b"\x0f", b"\x92", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635436)
        self.assertEqual(cpu.CL, 0)

    def test_SETB_3(self):
        """Instruction SETB_3
        Groups:
        0x8065fac:  setb    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065FAC, "\x0f\x92E\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x8065FAC
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8065FAC:0x8065FB0], [b"\x0f", b"\x92", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134635440)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETB_4(self):
        """Instruction SETB_4
        Groups:
        0x8065fa2:  setb    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FA2, "\x0f\x92\xc1")
        cpu.EIP = 0x8065FA2
        cpu.CF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x8065FA2:0x8065FA5], [b"\x0f", b"\x92", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635429)
        self.assertEqual(cpu.CL, 0)

    def test_SETB_5(self):
        """Instruction SETB_5
        Groups:
        0x8065fa5:  setb    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065FA5, "\x0f\x92E\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x8065FA5
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8065FA5:0x8065FA9], [b"\x0f", b"\x92", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134635433)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETB_6(self):
        """Instruction SETB_6
        Groups:
        0x80701b1:  setb    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80701B1, "\x0f\x92E\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x80701B1
        cpu.EBP = 0xFFFFB600
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x80701B1:0x80701B5], [b"\x0f", b"\x92", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134676917)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETE_1(self):
        """Instruction SETE_1
        Groups:
        0xf7fe727a: sete    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE727A, "\x0f\x94\xc1")
        cpu.EIP = 0xF7FE727A
        cpu.ZF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE727A:0xF7FE727D], [b"\x0f", b"\x94", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647805)
        self.assertEqual(cpu.CL, 0)

    def test_SETE_10(self):
        """Instruction SETE_10
        Groups:
        0xf7fe7269: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = False
        cpu.AL = 0xE3
        cpu.execute()

        self.assertEqual(mem[0xF7FE7269:0xF7FE726C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647788)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_11(self):
        """Instruction SETE_11
        Groups:
        0xf7fe727a: sete    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE727A, "\x0f\x94\xc1")
        cpu.EIP = 0xF7FE727A
        cpu.ZF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE727A:0xF7FE727D], [b"\x0f", b"\x94", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160647805)
        self.assertEqual(cpu.CL, 0)

    def test_SETE_12(self):
        """Instruction SETE_12
        Groups:
        0xf7fe7269: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = False
        cpu.AL = 0xE3
        cpu.execute()

        self.assertEqual(mem[0xF7FE7269:0xF7FE726C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647788)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_13(self):
        """Instruction SETE_13
        Groups:
        0xf7fe7290: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7290:0xF7FE7293], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647827)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_14(self):
        """Instruction SETE_14
        Groups:
        0xf7fe7269: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = False
        cpu.AL = 0xE3
        cpu.execute()

        self.assertEqual(mem[0xF7FE7269:0xF7FE726C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647788)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_15(self):
        """Instruction SETE_15
        Groups:
        0xf7fe7280: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7280:0xF7FE7283], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647811)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_16(self):
        """Instruction SETE_16
        Groups:
        0xf7fe4caf: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CAF:0xF7FE4CB2], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160638130)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_17(self):
        """Instruction SETE_17
        Groups:
        0xf7fe7290: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7290:0xF7FE7293], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647827)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_18(self):
        """Instruction SETE_18
        Groups:
        0xf7fe7290: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7290:0xF7FE7293], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647827)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_19(self):
        """Instruction SETE_19
        Groups:
        0xf7fe4caf: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CAF:0xF7FE4CB2], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160638130)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_2(self):
        """Instruction SETE_2
        Groups:
        0xf7fe7280: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7280:0xF7FE7283], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647811)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_20(self):
        """Instruction SETE_20
        Groups:
        0xf7fe7269: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = False
        cpu.AL = 0xE3
        cpu.execute()

        self.assertEqual(mem[0xF7FE7269:0xF7FE726C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647788)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_21(self):
        """Instruction SETE_21
        Groups:
        0xf7fe7290: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7290:0xF7FE7293], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647827)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_3(self):
        """Instruction SETE_3
        Groups:
        0xf7fe7269: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = False
        cpu.AL = 0xE3
        cpu.execute()

        self.assertEqual(mem[0xF7FE7269:0xF7FE726C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647788)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_4(self):
        """Instruction SETE_4
        Groups:
        0xf7fe4caf: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CAF:0xF7FE4CB2], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160638130)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_5(self):
        """Instruction SETE_5
        Groups:
        0xf7fe7280: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7280:0xF7FE7283], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647811)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_6(self):
        """Instruction SETE_6
        Groups:
        0xf7fe4caf: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CAF:0xF7FE4CB2], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160638130)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_7(self):
        """Instruction SETE_7
        Groups:
        0xf7fe7269: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = True
        cpu.AL = 0xE4
        cpu.execute()

        self.assertEqual(mem[0xF7FE7269:0xF7FE726C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647788)
        self.assertEqual(cpu.AL, 1)

    def test_SETE_8(self):
        """Instruction SETE_8
        Groups:
        0xf7fe7290: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7290:0xF7FE7293], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647827)
        self.assertEqual(cpu.AL, 0)

    def test_SETE_9(self):
        """Instruction SETE_9
        Groups:
        0xf7fe7280: sete    al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7280:0xF7FE7283], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647811)
        self.assertEqual(cpu.AL, 0)

    def test_SETGE_1(self):
        """Instruction SETGE_1
        Groups:
        0x805b9eb:  setge   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9EB, "\x0f\x9dE\x00")
        mem.write(0xFFFFB600, "\x80")
        cpu.EIP = 0x805B9EB
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805B9EB:0x805B9EF], [b"\x0f", b"\x9d", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134593007)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETGE_2(self):
        """Instruction SETGE_2
        Groups:
        0x805b9e8:  setge   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9E8, "\x0f\x9d\xc1")
        cpu.EIP = 0x805B9E8
        cpu.SF = False
        cpu.OF = False
        cpu.CL = 0xC8
        cpu.execute()

        self.assertEqual(mem[0x805B9E8:0x805B9EB], [b"\x0f", b"\x9d", b"\xc1"])
        self.assertEqual(cpu.EIP, 134593003)
        self.assertEqual(cpu.CL, 1)

    def test_SETGE_3(self):
        """Instruction SETGE_3
        Groups:
        0x8070198:  setge   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070198, "\x0f\x9d\xc1")
        cpu.EIP = 0x8070198
        cpu.SF = False
        cpu.OF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x8070198:0x807019B], [b"\x0f", b"\x9d", b"\xc1"])
        self.assertEqual(cpu.EIP, 134676891)
        self.assertEqual(cpu.CL, 1)

    def test_SETGE_4(self):
        """Instruction SETGE_4
        Groups:
        0x807019b:  setge   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807019B, "\x0f\x9dE\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x807019B
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x807019B:0x807019F], [b"\x0f", b"\x9d", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134676895)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETG_1(self):
        """Instruction SETG_1
        Groups:
        0x8065f97:  setg    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F97, "\x0f\x9fE\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x8065F97
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8065F97:0x8065F9B], [b"\x0f", b"\x9f", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134635419)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETG_2(self):
        """Instruction SETG_2
        Groups:
        0x8065f68:  setg    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F68, "\x0f\x9f\xc1")
        cpu.EIP = 0x8065F68
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.CL = 0x3
        cpu.execute()

        self.assertEqual(mem[0x8065F68:0x8065F6B], [b"\x0f", b"\x9f", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635371)
        self.assertEqual(cpu.CL, 0)

    def test_SETG_3(self):
        """Instruction SETG_3
        Groups:
        0x8065f6b:  setg    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F6B, "\x0f\x9fE\x00")
        mem.write(0xFFFFB600, "G")
        cpu.EIP = 0x8065F6B
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8065F6B:0x8065F6F], [b"\x0f", b"\x9f", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134635375)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETG_4(self):
        """Instruction SETG_4
        Groups:
        0x8065f94:  setg    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F94, "\x0f\x9f\xc1")
        cpu.EIP = 0x8065F94
        cpu.ZF = False
        cpu.SF = False
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8065F94:0x8065F97], [b"\x0f", b"\x9f", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635415)
        self.assertEqual(cpu.CL, 1)

    def test_SETLE_1(self):
        """Instruction SETLE_1
        Groups:
        0x805ba5d:  setle   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA5D, "\x0f\x9e\xc1")
        cpu.EIP = 0x805BA5D
        cpu.ZF = True
        cpu.SF = False
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805BA5D:0x805BA60], [b"\x0f", b"\x9e", b"\xc1"])
        self.assertEqual(cpu.EIP, 134593120)
        self.assertEqual(cpu.CL, 1)

    def test_SETLE_2(self):
        """Instruction SETLE_2
        Groups:
        0x805ba60:  setle   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA60, "\x0f\x9eE\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x805BA60
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x805BA60:0x805BA64], [b"\x0f", b"\x9e", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134593124)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETLE_3(self):
        """Instruction SETLE_3
        Groups:
        0x8079369:  setle   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079369, "\x0f\x9eE\x00")
        mem.write(0xFFFFB600, "\xff")
        cpu.EIP = 0x8079369
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.SF = True
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8079369:0x807936D], [b"\x0f", b"\x9e", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134714221)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETLE_4(self):
        """Instruction SETLE_4
        Groups:
        0x8079366:  setle   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079366, "\x0f\x9e\xc1")
        cpu.EIP = 0x8079366
        cpu.ZF = False
        cpu.SF = True
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079366:0x8079369], [b"\x0f", b"\x9e", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714217)
        self.assertEqual(cpu.CL, 1)

    def test_SETL_1(self):
        """Instruction SETL_1
        Groups:
        0x80702db:  setl    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80702DB, "\x0f\x9cE\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x80702DB
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x80702DB:0x80702DF], [b"\x0f", b"\x9c", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134677215)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETL_2(self):
        """Instruction SETL_2
        Groups:
        0x8065fb0:  setl    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FB0, "\x0f\x9c\xc1")
        cpu.EIP = 0x8065FB0
        cpu.SF = False
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8065FB0:0x8065FB3], [b"\x0f", b"\x9c", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635443)
        self.assertEqual(cpu.CL, 0)

    def test_SETL_3(self):
        """Instruction SETL_3
        Groups:
        0x80702d8:  setl    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702D8, "\x0f\x9c\xc1")
        cpu.EIP = 0x80702D8
        cpu.SF = False
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x80702D8:0x80702DB], [b"\x0f", b"\x9c", b"\xc1"])
        self.assertEqual(cpu.EIP, 134677211)
        self.assertEqual(cpu.CL, 0)

    def test_SETL_4(self):
        """Instruction SETL_4
        Groups:
        0x8065fb3:  setl    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065FB3, "\x0f\x9cE\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x8065FB3
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8065FB3:0x8065FB7], [b"\x0f", b"\x9c", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134635447)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETNE_1(self):
        """Instruction SETNE_1
        Groups:
        0xf7fe9c2f: setne   dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9C2F, "\x0f\x95\xc2")
        cpu.EIP = 0xF7FE9C2F
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE9C2F:0xF7FE9C32], [b"\x0f", b"\x95", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160658482)
        self.assertEqual(cpu.DL, 0)

    def test_SETNE_10(self):
        """Instruction SETNE_10
        Groups:
        0xf7fe42e2: setne   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE42E2, "\x0f\x95\xc1")
        cpu.EIP = 0xF7FE42E2
        cpu.ZF = False
        cpu.CL = 0x38
        cpu.execute()

        self.assertEqual(mem[0xF7FE42E2:0xF7FE42E5], [b"\x0f", b"\x95", b"\xc1"])
        self.assertEqual(cpu.EIP, 4160635621)
        self.assertEqual(cpu.CL, 1)

    def test_SETNE_11(self):
        """Instruction SETNE_11
        Groups:
        0xf7ff08d1: setne   dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF08D1, "\x0f\x95\xc2")
        cpu.EIP = 0xF7FF08D1
        cpu.ZF = False
        cpu.DL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FF08D1:0xF7FF08D4], [b"\x0f", b"\x95", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160686292)
        self.assertEqual(cpu.DL, 1)

    def test_SETNE_12(self):
        """Instruction SETNE_12
        Groups:
        0x80701a0:  setne   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701A0, "\x0f\x95\xc1")
        cpu.EIP = 0x80701A0
        cpu.ZF = True
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x80701A0:0x80701A3], [b"\x0f", b"\x95", b"\xc1"])
        self.assertEqual(cpu.EIP, 134676899)
        self.assertEqual(cpu.CL, 0)

    def test_SETNE_13(self):
        """Instruction SETNE_13
        Groups:
        0xf7fdf397: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDF000, 0x1000, "rwx")
        mem.write(0xF7FDF397, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FDF397
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FDF397:0xF7FDF39A], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160615322)
        self.assertEqual(cpu.AL, 1)

    def test_SETNE_14(self):
        """Instruction SETNE_14
        Groups:
        0xf7fe9c2f: setne   dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9C2F, "\x0f\x95\xc2")
        cpu.EIP = 0xF7FE9C2F
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE9C2F:0xF7FE9C32], [b"\x0f", b"\x95", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160658482)
        self.assertEqual(cpu.DL, 0)

    def test_SETNE_15(self):
        """Instruction SETNE_15
        Groups:
        0x807027e:  setne   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807027E, "\x0f\x95\xc1")
        cpu.EIP = 0x807027E
        cpu.ZF = False
        cpu.CL = 0xF8
        cpu.execute()

        self.assertEqual(mem[0x807027E:0x8070281], [b"\x0f", b"\x95", b"\xc1"])
        self.assertEqual(cpu.EIP, 134677121)
        self.assertEqual(cpu.CL, 1)

    def test_SETNE_16(self):
        """Instruction SETNE_16
        Groups:
        0xf7fe6c5c: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6C5C, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE6C5C
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE6C5C:0xF7FE6C5F], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160646239)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_17(self):
        """Instruction SETNE_17
        Groups:
        0xf7fdf397: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDF000, 0x1000, "rwx")
        mem.write(0xF7FDF397, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FDF397
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FDF397:0xF7FDF39A], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160615322)
        self.assertEqual(cpu.AL, 1)

    def test_SETNE_18(self):
        """Instruction SETNE_18
        Groups:
        0xf7fe6c5c: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6C5C, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE6C5C
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE6C5C:0xF7FE6C5F], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160646239)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_19(self):
        """Instruction SETNE_19
        Groups:
        0xf7fe6c5c: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6C5C, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE6C5C
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE6C5C:0xF7FE6C5F], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160646239)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_2(self):
        """Instruction SETNE_2
        Groups:
        0xf7fec53e: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC53E:0xF7FEC541], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160668993)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_3(self):
        """Instruction SETNE_3
        Groups:
        0xf7fdf32a: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDF000, 0x1000, "rwx")
        mem.write(0xF7FDF32A, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FDF32A
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FDF32A:0xF7FDF32D], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160615213)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_4(self):
        """Instruction SETNE_4
        Groups:
        0xf7fec53e: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC53E:0xF7FEC541], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160668993)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_5(self):
        """Instruction SETNE_5
        Groups:
        0xf7fec53e: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC53E:0xF7FEC541], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160668993)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_6(self):
        """Instruction SETNE_6
        Groups:
        0xf7fec53e: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FEC53E:0xF7FEC541], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160668993)
        self.assertEqual(cpu.AL, 0)

    def test_SETNE_7(self):
        """Instruction SETNE_7
        Groups:
        0x80701a3:  setne   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80701A3, "\x0f\x95E\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x80701A3
        cpu.ZF = True
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80701A3:0x80701A7], [b"\x0f", b"\x95", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134676903)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETNE_8(self):
        """Instruction SETNE_8
        Groups:
        0xf7fe996f: setne   al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE996F, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE996F
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE996F:0xF7FE9972], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160657778)
        self.assertEqual(cpu.AL, 1)

    def test_SETNE_9(self):
        """Instruction SETNE_9
        Groups:
        0x8070281:  setne   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070281, "\x0f\x95E\x00")
        mem.write(0xFFFFB600, "\xf8")
        cpu.EIP = 0x8070281
        cpu.ZF = False
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8070281:0x8070285], [b"\x0f", b"\x95", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134677125)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETNO_1(self):
        """Instruction SETNO_1
        Groups:
        0x8070194:  setno   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070194, "\x0f\x91E\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x8070194
        cpu.EBP = 0xFFFFB600
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8070194:0x8070198], [b"\x0f", b"\x91", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134676888)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETNO_2(self):
        """Instruction SETNO_2
        Groups:
        0x8070191:  setno   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070191, "\x0f\x91\xc1")
        cpu.EIP = 0x8070191
        cpu.OF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x8070191:0x8070194], [b"\x0f", b"\x91", b"\xc1"])
        self.assertEqual(cpu.EIP, 134676884)
        self.assertEqual(cpu.CL, 1)

    def test_SETNP_1(self):
        """Instruction SETNP_1
        Groups:
        0x807949f:  setnp   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807949F, "\x0f\x9b\xc1")
        cpu.EIP = 0x807949F
        cpu.PF = True
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x807949F:0x80794A2], [b"\x0f", b"\x9b", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714530)
        self.assertEqual(cpu.CL, 0)

    def test_SETNP_2(self):
        """Instruction SETNP_2
        Groups:
        0x80794a2:  setnp   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80794A2, "\x0f\x9bE\x00")
        mem.write(0xFFFFB600, "\x7f")
        cpu.EIP = 0x80794A2
        cpu.PF = True
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80794A2:0x80794A6], [b"\x0f", b"\x9b", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134714534)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETNP_3(self):
        """Instruction SETNP_3
        Groups:
        0x8070294:  setnp   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070294, "\x0f\x9b\xc1")
        cpu.EIP = 0x8070294
        cpu.PF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x8070294:0x8070297], [b"\x0f", b"\x9b", b"\xc1"])
        self.assertEqual(cpu.EIP, 134677143)
        self.assertEqual(cpu.CL, 1)

    def test_SETNP_4(self):
        """Instruction SETNP_4
        Groups:
        0x8070297:  setnp   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070297, "\x0f\x9bE\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x8070297
        cpu.PF = False
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8070297:0x807029B], [b"\x0f", b"\x9b", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134677147)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETNS_1(self):
        """Instruction SETNS_1
        Groups:
        0x8070290:  setns   byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070290, "\x0f\x99E\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x8070290
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8070290:0x8070294], [b"\x0f", b"\x99", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134677140)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETNS_2(self):
        """Instruction SETNS_2
        Groups:
        0x807028d:  setns   cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807028D, "\x0f\x99\xc1")
        cpu.EIP = 0x807028D
        cpu.SF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x807028D:0x8070290], [b"\x0f", b"\x99", b"\xc1"])
        self.assertEqual(cpu.EIP, 134677136)
        self.assertEqual(cpu.CL, 1)

    def test_SETO_1(self):
        """Instruction SETO_1
        Groups:
        0x8065fb7:  seto    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FB7, "\x0f\x90\xc1")
        cpu.EIP = 0x8065FB7
        cpu.OF = False
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8065FB7:0x8065FBA], [b"\x0f", b"\x90", b"\xc1"])
        self.assertEqual(cpu.EIP, 134635450)
        self.assertEqual(cpu.CL, 0)

    def test_SETO_2(self):
        """Instruction SETO_2
        Groups:
        0x8065fba:  seto    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065FBA, "\x0f\x90E\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x8065FBA
        cpu.EBP = 0xFFFFB600
        cpu.OF = False
        cpu.execute()

        self.assertEqual(mem[0x8065FBA:0x8065FBE], [b"\x0f", b"\x90", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134635454)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETP_1(self):
        """Instruction SETP_1
        Groups:
        0x806b09d:  setp    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B09D, "\x0f\x9a\xc1")
        cpu.EIP = 0x806B09D
        cpu.PF = True
        cpu.CL = 0x0
        cpu.execute()

        self.assertEqual(mem[0x806B09D:0x806B0A0], [b"\x0f", b"\x9a", b"\xc1"])
        self.assertEqual(cpu.EIP, 134656160)
        self.assertEqual(cpu.CL, 1)

    def test_SETP_2(self):
        """Instruction SETP_2
        Groups:
        0x8079481:  setp    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079481, "\x0f\x9aE\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x8079481
        cpu.PF = True
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079481:0x8079485], [b"\x0f", b"\x9a", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134714501)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETP_3(self):
        """Instruction SETP_3
        Groups:
        0x807947e:  setp    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807947E, "\x0f\x9a\xc1")
        cpu.EIP = 0x807947E
        cpu.PF = True
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x807947E:0x8079481], [b"\x0f", b"\x9a", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714497)
        self.assertEqual(cpu.CL, 1)

    def test_SETP_4(self):
        """Instruction SETP_4
        Groups:
        0x806b0a0:  setp    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806B0A0, "\x0f\x9aE\x00")
        mem.write(0xFFFFB600, "\x00")
        cpu.EIP = 0x806B0A0
        cpu.PF = True
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x806B0A0:0x806B0A4], [b"\x0f", b"\x9a", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x01"])
        self.assertEqual(cpu.EIP, 134656164)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETS_1(self):
        """Instruction SETS_1
        Groups:
        0x806b0a7:  sets    byte ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806B0A7, "\x0f\x98E\x00")
        mem.write(0xFFFFB600, "\x01")
        cpu.EIP = 0x806B0A7
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x806B0A7:0x806B0AB], [b"\x0f", b"\x98", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\x00"])
        self.assertEqual(cpu.EIP, 134656171)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_SETS_2(self):
        """Instruction SETS_2
        Groups:
        0x806b0a4:  sets    cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B0A4, "\x0f\x98\xc1")
        cpu.EIP = 0x806B0A4
        cpu.SF = False
        cpu.CL = 0x1
        cpu.execute()

        self.assertEqual(mem[0x806B0A4:0x806B0A7], [b"\x0f", b"\x98", b"\xc1"])
        self.assertEqual(cpu.EIP, 134656167)
        self.assertEqual(cpu.CL, 0)

    def test_SHLD_1(self):
        """Instruction SHLD_1
        Groups:
        0x8059a5b:  shld    word ptr [ebp], dx, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A5B, "f\x0f\xa4U\x00\x02")
        mem.write(0xFFFFB600, ">0")
        cpu.EIP = 0x8059A5B
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.DX = 0xC8F8
        cpu.EBP = 0xFFFFB600
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8059A5B:0x8059A61], [b"f", b"\x0f", b"\xa4", b"U", b"\x00", b"\x02"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\xfb", b"\xc0"])
        self.assertEqual(cpu.EIP, 134584929)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.DX, 51448)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.SF, True)

    def test_SHLD_2(self):
        """Instruction SHLD_2
        Groups:
        0x8059a42:  shld    cx, dx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A42, "f\x0f\xa5\xd1")
        cpu.EIP = 0x8059A42
        cpu.CX = 0x0
        cpu.PF = False
        cpu.DX = 0xC8F8
        cpu.CL = 0x0
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059A42:0x8059A46], [b"f", b"\x0f", b"\xa5", b"\xd1"])
        self.assertEqual(cpu.EIP, 134584902)
        self.assertEqual(cpu.CX, 0)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.DX, 51448)
        self.assertEqual(cpu.CL, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SHLD_3(self):
        """Instruction SHLD_3
        Groups:
        0x8059a52:  shld    cx, dx, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A52, "f\x0f\xa4\xd1\x02")
        cpu.EIP = 0x8059A52
        cpu.ZF = False
        cpu.CF = False
        cpu.CX = 0x0
        cpu.PF = False
        cpu.DX = 0xC8F8
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059A52:0x8059A57], [b"f", b"\x0f", b"\xa4", b"\xd1", b"\x02"])
        self.assertEqual(cpu.EIP, 134584919)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.CX, 3)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.DX, 51448)
        self.assertEqual(cpu.SF, False)

    def test_SHLD_4(self):
        """Instruction SHLD_4
        Groups:
        0x8059a57:  shld    ecx, edx, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A57, "\x0f\xa4\xd1\x02")
        cpu.EIP = 0x8059A57
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0xC8F8
        cpu.SF = False
        cpu.ECX = 0x3
        cpu.execute()

        self.assertEqual(mem[0x8059A57:0x8059A5B], [b"\x0f", b"\xa4", b"\xd1", b"\x02"])
        self.assertEqual(cpu.EIP, 134584923)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 51448)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 12)

    def test_SHLD_5(self):
        """Instruction SHLD_5
        Groups:
        0x8059a61:  shld    dword ptr [ebp], edx, 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A61, "\x0f\xa4U\x00\x02")
        mem.write(0xFFFFB600, "\xfb\xc0\x00\x1e")
        cpu.EIP = 0x8059A61
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EBP = 0xFFFFB600
        cpu.EDX = 0xC8F8
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059A61:0x8059A66], [b"\x0f", b"\xa4", b"U", b"\x00", b"\x02"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\xec", b"\x03", b"\x03", b"x"])
        self.assertEqual(cpu.EIP, 134584934)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.EDX, 51448)
        self.assertEqual(cpu.SF, False)

    def test_SHLD_6(self):
        """Instruction SHLD_6
        Groups:
        0x8059a49:  shld    word ptr [ebp], dx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A49, "f\x0f\xa5U\x00")
        mem.write(0xFFFFB600, ">0")
        cpu.EIP = 0x8059A49
        cpu.PF = False
        cpu.DX = 0xC8F8
        cpu.CL = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059A49:0x8059A4E], [b"f", b"\x0f", b"\xa5", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b">", b"0"])
        self.assertEqual(cpu.EIP, 134584910)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.DX, 51448)
        self.assertEqual(cpu.CL, 0)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SHLD_7(self):
        """Instruction SHLD_7
        Groups:
        0x8059a4e:  shld    dword ptr [ebp], edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A4E, "\x0f\xa5U\x00")
        mem.write(0xFFFFB600, ">0\x00\x1e")
        cpu.EIP = 0x8059A4E
        cpu.EDX = 0xC8F8
        cpu.PF = False
        cpu.CL = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059A4E:0x8059A52], [b"\x0f", b"\xa5", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b">", b"0", b"\x00", b"\x1e"])
        self.assertEqual(cpu.EIP, 134584914)
        self.assertEqual(cpu.EDX, 51448)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 0)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SHLD_8(self):
        """Instruction SHLD_8
        Groups:
        0x8059a46:  shld    ecx, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A46, "\x0f\xa5\xd1")
        cpu.EIP = 0x8059A46
        cpu.EDX = 0xC8F8
        cpu.PF = False
        cpu.CL = 0x0
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059A46:0x8059A49], [b"\x0f", b"\xa5", b"\xd1"])
        self.assertEqual(cpu.EIP, 134584905)
        self.assertEqual(cpu.EDX, 51448)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SHL_1(self):
        """Instruction SHL_1
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0x2B618
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 5686016)

    def test_SHL_10(self):
        """Instruction SHL_10
        Groups:
        0xf7fe72a0: shl     edx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72A0, "\xc1\xe2\x04")
        cpu.EIP = 0xF7FE72A0
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE72A0:0xF7FE72A3], [b"\xc1", b"\xe2", b"\x04"])
        self.assertEqual(cpu.EIP, 4160647843)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 32)
        self.assertEqual(cpu.SF, False)

    def test_SHL_11(self):
        """Instruction SHL_11
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0x3245563D
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 1219151776)

    def test_SHL_12(self):
        """Instruction SHL_12
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0x5976CD
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 187619744)

    def test_SHL_13(self):
        """Instruction SHL_13
        Groups:
        0xf7fe54e8: shl     eax, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E8, "\xc1\xe0\x04")
        cpu.EIP = 0xF7FE54E8
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x1A5
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E8:0xF7FE54EB], [b"\xc1", b"\xe0", b"\x04"])
        self.assertEqual(cpu.EIP, 4160640235)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 6736)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_14(self):
        """Instruction SHL_14
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0x2152C1C6
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 710424768)

    def test_SHL_15(self):
        """Instruction SHL_15
        Groups:
        0xf7fe7210: shl     ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7210, "\xc1\xe1\x04")
        cpu.EIP = 0xF7FE7210
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7FE7210:0xF7FE7213], [b"\xc1", b"\xe1", b"\x04"])
        self.assertEqual(cpu.EIP, 4160647699)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0)

    def test_SHL_16(self):
        """Instruction SHL_16
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0xB88A6AA
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 1897190720)

    def test_SHL_17(self):
        """Instruction SHL_17
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0x91A1E0D1
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 876354080)

    def test_SHL_18(self):
        """Instruction SHL_18
        Groups:
        0xf7fe54e8: shl     eax, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E8, "\xc1\xe0\x04")
        cpu.EIP = 0xF7FE54E8
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x20A
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54E8:0xF7FE54EB], [b"\xc1", b"\xe0", b"\x04"])
        self.assertEqual(cpu.EIP, 4160640235)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 8352)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_19(self):
        """Instruction SHL_19
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0x7C92C8DA
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 2455313216)

    def test_SHL_2(self):
        """Instruction SHL_2
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xEEC095A
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 3716229952)

    def test_SHL_20(self):
        """Instruction SHL_20
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xBC8E74EF
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 2446237152)

    def test_SHL_21(self):
        """Instruction SHL_21
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0x4E5D1343
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 3416418400)

    def test_SHL_3(self):
        """Instruction SHL_3
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0xEC71E1E0
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 2386312192)

    def test_SHL_4(self):
        """Instruction SHL_4
        Groups:
        0xf7fe7210: shl     ecx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7210, "\xc1\xe1\x04")
        cpu.EIP = 0xF7FE7210
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x536
        cpu.execute()

        self.assertEqual(mem[0xF7FE7210:0xF7FE7213], [b"\xc1", b"\xe1", b"\x04"])
        self.assertEqual(cpu.EIP, 4160647699)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 21344)

    def test_SHL_5(self):
        """Instruction SHL_5
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ECX = 0xE1EF170B
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 1038279008)

    def test_SHL_6(self):
        """Instruction SHL_6
        Groups:
        0xf7fe4d10: shl     eax, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4D10, "\xc1\xe0\x04")
        cpu.EIP = 0xF7FE4D10
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x2
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4D10:0xF7FE4D13], [b"\xc1", b"\xe0", b"\x04"])
        self.assertEqual(cpu.EIP, 4160638227)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 32)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_7(self):
        """Instruction SHL_7
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0x574B7271
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 3916320288)

    def test_SHL_8(self):
        """Instruction SHL_8
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0x797078E1
        cpu.execute()

        self.assertEqual(mem[0xF7FE56A5:0xF7FE56A8], [b"\xc1", b"\xe1", b"\x05"])
        self.assertEqual(cpu.EIP, 4160640680)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 772742176)

    def test_SHL_9(self):
        """Instruction SHL_9
        Groups:
        0xf7fec3e0: shl     edx, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC3E0, "\xc1\xe2\x04")
        cpu.EIP = 0xF7FEC3E0
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EDX = 0x1A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FEC3E0:0xF7FEC3E3], [b"\xc1", b"\xe2", b"\x04"])
        self.assertEqual(cpu.EIP, 4160668643)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 416)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_1(self):
        """Instruction SHRD_1
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x9
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 131136)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 9)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_10(self):
        """Instruction SHRD_10
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x16
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 16)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 22)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_11(self):
        """Instruction SHRD_11
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4000000
        cpu.PF = True
        cpu.CL = 0x18
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 4)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 24)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_12(self):
        """Instruction SHRD_12
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x5
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 2098176)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 5)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_13(self):
        """Instruction SHRD_13
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0xD
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 8196)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 13)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_14(self):
        """Instruction SHRD_14
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4000000
        cpu.PF = True
        cpu.CL = 0x12
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 256)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 18)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_15(self):
        """Instruction SHRD_15
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4000000
        cpu.PF = True
        cpu.CL = 0x1A
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 26)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_16(self):
        """Instruction SHRD_16
        Groups:
        0x805ba45:  shrd    dword ptr [ebp], edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA45, "\x0f\xadU\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x805BA45
        cpu.EDX = 0x3EC
        cpu.PF = True
        cpu.CL = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x805BA45:0x805BA49], [b"\x0f", b"\xad", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134593097)
        self.assertEqual(cpu.EDX, 1004)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 0)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_17(self):
        """Instruction SHRD_17
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x11
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 512)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 17)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_18(self):
        """Instruction SHRD_18
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x9
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 131136)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 9)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_19(self):
        """Instruction SHRD_19
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0xC
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 16392)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 12)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_2(self):
        """Instruction SHRD_2
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0xE
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 4098)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 14)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_20(self):
        """Instruction SHRD_20
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x8
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 262272)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 8)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_21(self):
        """Instruction SHRD_21
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4000000
        cpu.PF = True
        cpu.CL = 0x19
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 25)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_3(self):
        """Instruction SHRD_3
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4000000
        cpu.PF = True
        cpu.CL = 0x16
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 16)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 22)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_4(self):
        """Instruction SHRD_4
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4000000
        cpu.PF = True
        cpu.CL = 0x11
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 512)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 17)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_5(self):
        """Instruction SHRD_5
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x19
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 25)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_6(self):
        """Instruction SHRD_6
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x8
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 262272)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.CL, 8)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_7(self):
        """Instruction SHRD_7
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x7
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BE8:0xF7FE9BEB], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160658411)
        self.assertEqual(cpu.EAX, 524544)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_8(self):
        """Instruction SHRD_8
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x7
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 524544)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHRD_9(self):
        """Instruction SHRD_9
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = 0x4008000
        cpu.PF = True
        cpu.CL = 0x3
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9998:0xF7FE999B], [b"\x0f", b"\xad", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160657819)
        self.assertEqual(cpu.EAX, 8392704)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 3)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHR_1(self):
        """Instruction SHR_1
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = 0xDE
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = True
        cpu.EDX = 0x20002000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F34:0xF7FE4F36], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638774)
        self.assertEqual(cpu.CL, 222)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHR_10(self):
        """Instruction SHR_10
        Groups:
        0xf7fe9beb: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BEB, "\xd3\xea")
        cpu.EIP = 0xF7FE9BEB
        cpu.CL = 0xE
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE9BEB:0xF7FE9BED], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160658413)
        self.assertEqual(cpu.CL, 14)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHR_11(self):
        """Instruction SHR_11
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = 0x71
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x20002000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F34:0xF7FE4F36], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638774)
        self.assertEqual(cpu.CL, 113)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 4096)
        self.assertEqual(cpu.SF, False)

    def test_SHR_12(self):
        """Instruction SHR_12
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = 0xB6
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.EDX = 0xC34CB81E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F34:0xF7FE4F36], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638774)
        self.assertEqual(cpu.CL, 182)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 781)
        self.assertEqual(cpu.SF, False)

    def test_SHR_13(self):
        """Instruction SHR_13
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = 0x23
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x20002000
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F38:0xF7FE4F3A], [b"\xd3", b"\xe8"])
        self.assertEqual(cpu.EIP, 4160638778)
        self.assertEqual(cpu.CL, 35)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 67109888)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_14(self):
        """Instruction SHR_14
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = 0x5B
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.EDX = 0x193220E0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F34:0xF7FE4F36], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638774)
        self.assertEqual(cpu.CL, 91)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 3)
        self.assertEqual(cpu.SF, False)

    def test_SHR_15(self):
        """Instruction SHR_15
        Groups:
        0xf7fe7203: shr     ecx, 8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7203, "\xc1\xe9\x08")
        cpu.EIP = 0xF7FE7203
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0x4EE06
        cpu.execute()

        self.assertEqual(mem[0xF7FE7203:0xF7FE7206], [b"\xc1", b"\xe9", b"\x08"])
        self.assertEqual(cpu.EIP, 4160647686)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 1262)

    def test_SHR_16(self):
        """Instruction SHR_16
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = 0x87
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x193220E0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F38:0xF7FE4F3A], [b"\xd3", b"\xe8"])
        self.assertEqual(cpu.EIP, 4160638778)
        self.assertEqual(cpu.CL, 135)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 3302465)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_17(self):
        """Instruction SHR_17
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = 0xCB
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x20002000
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F38:0xF7FE4F3A], [b"\xd3", b"\xe8"])
        self.assertEqual(cpu.EIP, 4160638778)
        self.assertEqual(cpu.CL, 203)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 262148)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_18(self):
        """Instruction SHR_18
        Groups:
        0x804834f:  shr     edx, 0x1f
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804834F, "\xc1\xea\x1f")
        cpu.EIP = 0x804834F
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x804834F:0x8048352], [b"\xc1", b"\xea", b"\x1f"])
        self.assertEqual(cpu.EIP, 134513490)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHR_19(self):
        """Instruction SHR_19
        Groups:
        0xf7ff4546: shr     ecx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4546, "\xd1\xe9")
        cpu.EIP = 0xF7FF4546
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x2
        cpu.execute()

        self.assertEqual(mem[0xF7FF4546:0xF7FF4548], [b"\xd1", b"\xe9"])
        self.assertEqual(cpu.EIP, 4160701768)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 1)

    def test_SHR_2(self):
        """Instruction SHR_2
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = 0x2
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x1000045E
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F38:0xF7FE4F3A], [b"\xd3", b"\xe8"])
        self.assertEqual(cpu.EIP, 4160638778)
        self.assertEqual(cpu.CL, 2)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 67109143)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_20(self):
        """Instruction SHR_20
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = 0x3E
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = False
        cpu.EDX = 0x40024918
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F34:0xF7FE4F36], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638774)
        self.assertEqual(cpu.CL, 62)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.SF, False)

    def test_SHR_21(self):
        """Instruction SHR_21
        Groups:
        0xf7fe4e71: shr     eax, 5
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4E71, "\xc1\xe8\x05")
        cpu.EIP = 0xF7FE4E71
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xDAD66940
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4E71:0xF7FE4E74], [b"\xc1", b"\xe8", b"\x05"])
        self.assertEqual(cpu.EIP, 4160638580)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 114733898)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_3(self):
        """Instruction SHR_3
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = 0x82
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x2034006
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F38:0xF7FE4F3A], [b"\xd3", b"\xe8"])
        self.assertEqual(cpu.EIP, 4160638778)
        self.assertEqual(cpu.CL, 130)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EAX, 8441857)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_4(self):
        """Instruction SHR_4
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = 0x93
        cpu.ZF = False
        cpu.CF = True
        cpu.PF = True
        cpu.EDX = 0x20002000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F34:0xF7FE4F36], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638774)
        self.assertEqual(cpu.CL, 147)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 1024)
        self.assertEqual(cpu.SF, False)

    def test_SHR_5(self):
        """Instruction SHR_5
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = 0x4E
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x20002000
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F34:0xF7FE4F36], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638774)
        self.assertEqual(cpu.CL, 78)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 32768)
        self.assertEqual(cpu.SF, False)

    def test_SHR_6(self):
        """Instruction SHR_6
        Groups:
        0xf7fe0b13: shr     esi, 8
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0B13, "\xc1\xee\x08")
        cpu.EIP = 0xF7FE0B13
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.ESI = 0x607
        cpu.execute()

        self.assertEqual(mem[0xF7FE0B13:0xF7FE0B16], [b"\xc1", b"\xee", b"\x08"])
        self.assertEqual(cpu.EIP, 4160621334)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 6)

    def test_SHR_7(self):
        """Instruction SHR_7
        Groups:
        0xf7fe54cb: shr     edx, 1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54CB, "\xd1\xea")
        cpu.EIP = 0xF7FE54CB
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EDX = 0x1
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54CB:0xF7FE54CD], [b"\xd1", b"\xea"])
        self.assertEqual(cpu.EIP, 4160640205)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_SHR_8(self):
        """Instruction SHR_8
        Groups:
        0xf7fe4fa4: shr     dl, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FA4, "\xc0\xea\x04")
        cpu.EIP = 0xF7FE4FA4
        cpu.DL = 0x11
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4FA4:0xF7FE4FA7], [b"\xc0", b"\xea", b"\x04"])
        self.assertEqual(cpu.EIP, 4160638887)
        self.assertEqual(cpu.DL, 1)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_9(self):
        """Instruction SHR_9
        Groups:
        0xf7fe4f2e: shr     edx, cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F2E, "\xd3\xea")
        cpu.EIP = 0xF7FE4F2E
        cpu.CL = 0x5
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0xB23C806A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F2E:0xF7FE4F30], [b"\xd3", b"\xea"])
        self.assertEqual(cpu.EIP, 4160638768)
        self.assertEqual(cpu.CL, 5)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 93447171)
        self.assertEqual(cpu.SF, False)

    def test_STC_1(self):
        """Instruction STC_1
        Groups:
        0x8079441:  stc
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079441, "\xf9")
        cpu.EIP = 0x8079441
        cpu.CF = False
        cpu.execute()

        self.assertEqual(mem[0x8079441:0x8079442], [b"\xf9"])
        self.assertEqual(cpu.EIP, 134714434)
        self.assertEqual(cpu.CF, True)

    def test_STD_1(self):
        """Instruction STD_1
        Groups:
        0x8079387:  std
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079387, "\xfd")
        cpu.DF = False
        cpu.EIP = 0x8079387
        cpu.execute()

        self.assertEqual(mem[0x8079387:0x8079388], [b"\xfd"])
        self.assertEqual(cpu.DF, True)
        self.assertEqual(cpu.EIP, 134714248)

    def test_STMXCSR_1(self):
        """Instruction STMXCSR_1
        Groups: sse1
        0x80565d0:  stmxcsr dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80565D0, "\x0f\xae]\x00")
        mem.write(0xFFFFB600, "7\x01\x00\x00")
        cpu.EIP = 0x80565D0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80565D0:0x80565D4], [b"\x0f", b"\xae", b"]", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x80", b"\x1f", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134571476)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_STOSB_1(self):
        """Instruction STOSB_1
        Groups:
        0x8065f64:  stosb   byte ptr es:[edi], al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        mem.write(0x8065F64, "\xaa")
        mem.write(0x807F042, "\x1e")
        cpu.DF = False
        cpu.EIP = 0x8065F64
        cpu.EDI = 0x807F042
        cpu.AL = 0xEB
        cpu.execute()

        self.assertEqual(mem[0x8065F64:0x8065F65], [b"\xaa"])
        self.assertEqual(mem[0x807F042:0x807F043], [b"\xeb"])
        self.assertEqual(cpu.EIP, 134635365)
        self.assertEqual(cpu.EDI, 134737987)
        self.assertEqual(cpu.AL, 235)

    def test_STOSD_1(self):
        """Instruction STOSD_1
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14D20, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x38
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14D20
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14D20:0xF7E14D24], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737700)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 55)

    def test_STOSD_10(self):
        """Instruction STOSD_10
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14B40, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xB0
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14B40
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14B40:0xF7E14B44], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737220)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 175)

    def test_STOSD_11(self):
        """Instruction STOSD_11
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14B14, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xBB
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14B14
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14B14:0xF7E14B18], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737176)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 186)

    def test_STOSD_12(self):
        """Instruction STOSD_12
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14CA0, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x58
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14CA0
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14CA0:0xF7E14CA4], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737572)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 87)

    def test_STOSD_13(self):
        """Instruction STOSD_13
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14A7C, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xE1
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14A7C
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14A7C:0xF7E14A80], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737024)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 224)

    def test_STOSD_14(self):
        """Instruction STOSD_14
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14A30, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xF4
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14A30
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14A30:0xF7E14A34], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158736948)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 243)

    def test_STOSD_15(self):
        """Instruction STOSD_15
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14BC0, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x90
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14BC0
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14BC0:0xF7E14BC4], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737348)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 143)

    def test_STOSD_16(self):
        """Instruction STOSD_16
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14A98, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xDA
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14A98
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14A98:0xF7E14A9C], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737052)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 217)

    def test_STOSD_17(self):
        """Instruction STOSD_17
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14A20, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xF8
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14A20
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14A20:0xF7E14A24], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158736932)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 247)

    def test_STOSD_18(self):
        """Instruction STOSD_18
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14D48, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x2E
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14D48
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14D48:0xF7E14D4C], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737740)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 45)

    def test_STOSD_19(self):
        """Instruction STOSD_19
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14AFC, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xC1
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14AFC
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14AFC:0xF7E14B00], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737152)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 192)

    def test_STOSD_2(self):
        """Instruction STOSD_2
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14A24, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xF7
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14A24
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14A24:0xF7E14A28], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158736936)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 246)

    def test_STOSD_20(self):
        """Instruction STOSD_20
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14A64, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xE7
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14A64
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14A64:0xF7E14A68], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737000)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 230)

    def test_STOSD_21(self):
        """Instruction STOSD_21
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14CF4, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x43
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14CF4
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14CF4:0xF7E14CF8], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737656)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 66)

    def test_STOSD_3(self):
        """Instruction STOSD_3
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14ABC, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xD1
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14ABC
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14ABC:0xF7E14AC0], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737088)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 208)

    def test_STOSD_4(self):
        """Instruction STOSD_4
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14DC4, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0xF
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14DC4
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14DC4:0xF7E14DC8], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737864)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 14)

    def test_STOSD_5(self):
        """Instruction STOSD_5
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14C94, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x5B
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14C94
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14C94:0xF7E14C98], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737560)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 90)

    def test_STOSD_6(self):
        """Instruction STOSD_6
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14CE4, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x47
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14CE4
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14CE4:0xF7E14CE8], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737640)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 70)

    def test_STOSD_7(self):
        """Instruction STOSD_7
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14CD4, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x4B
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14CD4
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14CD4:0xF7E14CD8], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737624)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 74)

    def test_STOSD_8(self):
        """Instruction STOSD_8
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14CE0, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x48
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14CE0
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14CE0:0xF7E14CE4], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737636)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 71)

    def test_STOSD_9(self):
        """Instruction STOSD_9
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7E14940, "\x00\x00\x00\x00")
        mem.write(0xF7E14BB4, "\x00\x00\x00\x00")
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = 0x93
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = 0xF7E14BB4
        cpu.ESI = 0xF7E14940
        cpu.EAX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E14940:0xF7E14944], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7E14BB4:0xF7E14BB8], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(mem[0xF7FED5CC:0xF7FED5CE], [b"\xf3", b"\xab"])
        self.assertEqual(cpu.EIP, 4160673228)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.EDI, 4158737336)
        self.assertEqual(cpu.ESI, 4158736704)
        self.assertEqual(cpu.ECX, 146)

    def test_STOSW_1(self):
        """Instruction STOSW_1
        Groups:
        0x8065f65:  stosw   word ptr es:[edi], ax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        mem.write(0x8065F65, "f\xab")
        mem.write(0x807F043, "\xed\xed")
        cpu.DF = False
        cpu.EIP = 0x8065F65
        cpu.EDI = 0x807F043
        cpu.AX = 0xFFEB
        cpu.execute()

        self.assertEqual(mem[0x8065F65:0x8065F67], [b"f", b"\xab"])
        self.assertEqual(mem[0x807F043:0x807F045], [b"\xeb", b"\xff"])
        self.assertEqual(cpu.EIP, 134635367)
        self.assertEqual(cpu.EDI, 134737989)
        self.assertEqual(cpu.AX, 65515)

    def test_SUB_1(self):
        """Instruction SUB_1
        Groups:
        0xf7ff3ee0: sub     edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE0, ")\xca")
        cpu.EIP = 0xF7FF3EE0
        cpu.EDX = 0x0
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x67
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE0:0xF7FF3EE2], [b")", b"\xca"])
        self.assertEqual(cpu.EIP, 4160700130)
        self.assertEqual(cpu.EDX, 4294967193)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 103)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_SUB_10(self):
        """Instruction SUB_10
        Groups:
        0xf7ff3ee0: sub     edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE0, ")\xca")
        cpu.EIP = 0xF7FF3EE0
        cpu.EDX = 0x0
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x6362696C
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EE0:0xF7FF3EE2], [b")", b"\xca"])
        self.assertEqual(cpu.EIP, 4160700130)
        self.assertEqual(cpu.EDX, 2627573396)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1667393900)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_SUB_11(self):
        """Instruction SUB_11
        Groups:
        0x8065f3a:  sub     dword ptr [ebp], -1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F3A, "\x83m\x00\xff")
        mem.write(0xFFFFB600, "I\xfb\x0f\xff")
        cpu.EIP = 0x8065F3A
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8065F3A:0x8065F3E], [b"\x83", b"m", b"\x00", b"\xff"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"J", b"\xfb", b"\x0f", b"\xff"])
        self.assertEqual(cpu.EIP, 134635326)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, True)

    def test_SUB_12(self):
        """Instruction SUB_12
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ESP = 0xFFFFD454
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7300:0xF7FE7303], [b"\x83", b"\xec", b"\x14"])
        self.assertEqual(cpu.EIP, 4160647939)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956096)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_13(self):
        """Instruction SUB_13
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ESP = 0xFFFFD454
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7300:0xF7FE7303], [b"\x83", b"\xec", b"\x14"])
        self.assertEqual(cpu.EIP, 4160647939)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956096)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_14(self):
        """Instruction SUB_14
        Groups:
        0xf7feae13: sub     ebp, 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEA000, 0x1000, "rwx")
        mem.write(0xF7FEAE13, "\x83\xed\x04")
        cpu.EIP = 0xF7FEAE13
        cpu.EBP = 0x8
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FEAE13:0xF7FEAE16], [b"\x83", b"\xed", b"\x04"])
        self.assertEqual(cpu.EIP, 4160663062)
        self.assertEqual(cpu.EBP, 4)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_SUB_15(self):
        """Instruction SUB_15
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ESP = 0xFFFFD454
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7300:0xF7FE7303], [b"\x83", b"\xec", b"\x14"])
        self.assertEqual(cpu.EIP, 4160647939)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956096)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_16(self):
        """Instruction SUB_16
        Groups:
        0x8065f28:  sub     dword ptr [ebp], 4
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F28, "\x83m\x00\x04")
        mem.write(0xFFFFB600, "L|\x00\x00")
        cpu.EIP = 0x8065F28
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8065F28:0x8065F2C], [b"\x83", b"m", b"\x00", b"\x04"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"H", b"|", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134635308)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_SUB_17(self):
        """Instruction SUB_17
        Groups:
        0xf7fe4c88: sub     esp, 0x2c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4C88, "\x83\xec,")
        cpu.EIP = 0xF7FE4C88
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD2DC
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C88:0xF7FE4C8B], [b"\x83", b"\xec", b","])
        self.assertEqual(cpu.EIP, 4160638091)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955696)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_18(self):
        """Instruction SUB_18
        Groups:
        0xf7fe4c88: sub     esp, 0x2c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4C88, "\x83\xec,")
        cpu.EIP = 0xF7FE4C88
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD2DC
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4C88:0xF7FE4C8B], [b"\x83", b"\xec", b","])
        self.assertEqual(cpu.EIP, 4160638091)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955696)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_19(self):
        """Instruction SUB_19
        Groups:
        0xf7eaa004: sub     esp, 0x2c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA004, "\x83\xec,")
        cpu.EIP = 0xF7EAA004
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ESP = 0xFFFFD5AC
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7EAA004:0xF7EAA007], [b"\x83", b"\xec", b","])
        self.assertEqual(cpu.EIP, 4159348743)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956416)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_2(self):
        """Instruction SUB_2
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ESP = 0xFFFFD454
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7300:0xF7FE7303], [b"\x83", b"\xec", b"\x14"])
        self.assertEqual(cpu.EIP, 4160647939)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956096)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_20(self):
        """Instruction SUB_20
        Groups:
        0xf7fe567b: sub     esp, 0xac
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE567B, "\x81\xec\xac\x00\x00\x00")
        cpu.EIP = 0xF7FE567B
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD42C
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE567B:0xF7FE5681], [b"\x81", b"\xec", b"\xac", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160640641)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955904)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_21(self):
        """Instruction SUB_21
        Groups:
        0xf7ff0e38: sub     edx, 3
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0E38, "\x83\xea\x03")
        cpu.EIP = 0xF7FF0E38
        cpu.EDX = 0xE
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF0E38:0xF7FF0E3B], [b"\x83", b"\xea", b"\x03"])
        self.assertEqual(cpu.EIP, 4160687675)
        self.assertEqual(cpu.EDX, 11)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_SUB_3(self):
        """Instruction SUB_3
        Groups:
        0xf7fe4e16: sub     esp, 0x7c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4E16, "\x83\xec|")
        cpu.EIP = 0xF7FE4E16
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD36C
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4E16:0xF7FE4E19], [b"\x83", b"\xec", b"|"])
        self.assertEqual(cpu.EIP, 4160638489)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955760)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_4(self):
        """Instruction SUB_4
        Groups:
        0xf7fe7437: sub     eax, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7437, ")\xd0")
        cpu.EIP = 0xF7FE7437
        cpu.EAX = 0x10
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EDX = 0x4C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7437:0xF7FE7439], [b")", b"\xd0"])
        self.assertEqual(cpu.EIP, 4160648249)
        self.assertEqual(cpu.EAX, 4294967236)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.EDX, 76)
        self.assertEqual(cpu.SF, True)

    def test_SUB_5(self):
        """Instruction SUB_5
        Groups:
        0xf7fdccc9: sub     esp, 0x20
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.write(0xF7FDCCC9, "\x83\xec ")
        cpu.EIP = 0xF7FDCCC9
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD4F0
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FDCCC9:0xF7FDCCCC], [b"\x83", b"\xec", b" "])
        self.assertEqual(cpu.EIP, 4160605388)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956240)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_6(self):
        """Instruction SUB_6
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ESP = 0xFFFFD454
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7300:0xF7FE7303], [b"\x83", b"\xec", b"\x14"])
        self.assertEqual(cpu.EIP, 4160647939)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294956096)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_7(self):
        """Instruction SUB_7
        Groups:
        0xf7eaa234: sub     eax, 0xb9
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA234, "-\xb9\x00\x00\x00")
        cpu.EIP = 0xF7EAA234
        cpu.EAX = 0xBC
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7EAA234:0xF7EAA239], [b"-", b"\xb9", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4159349305)
        self.assertEqual(cpu.EAX, 3)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_SUB_8(self):
        """Instruction SUB_8
        Groups:
        0xf7fe4e16: sub     esp, 0x7c
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4E16, "\x83\xec|")
        cpu.EIP = 0xF7FE4E16
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD36C
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4E16:0xF7FE4E19], [b"\x83", b"\xec", b"|"])
        self.assertEqual(cpu.EIP, 4160638489)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955760)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_SUB_9(self):
        """Instruction SUB_9
        Groups:
        0xf7ff1671: sub     esp, 0x18
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1671, "\x83\xec\x18")
        cpu.EIP = 0xF7FF1671
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ESP = 0xFFFFD3D8
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF1671:0xF7FF1674], [b"\x83", b"\xec", b"\x18"])
        self.assertEqual(cpu.EIP, 4160689780)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESP, 4294955968)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_TEST_1(self):
        """Instruction TEST_1
        Groups:
        0xf7fe4ec7: test    byte ptr [esi + 0x195], 0x20
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FDA9ED, "@")
        mem.write(0xF7FE4EC7, "\xf6\x86\x95\x01\x00\x00 ")
        cpu.EIP = 0xF7FE4EC7
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.ESI = 0xF7FDA858
        cpu.execute()

        self.assertEqual(mem[0xF7FDA9ED:0xF7FDA9EE], [b"@"])
        self.assertEqual(
            mem[0xF7FE4EC7:0xF7FE4ECE], [b"\xf6", b"\x86", b"\x95", b"\x01", b"\x00", b"\x00", b" "]
        )
        self.assertEqual(cpu.EIP, 4160638670)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ESI, 4160596056)

    def test_TEST_10(self):
        """Instruction TEST_10
        Groups:
        0xf7fe56af: test    al, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = False
        cpu.ZF = False
        cpu.AL = 0x5F
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE56AF:0xF7FE56B1], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160640689)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 95)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_11(self):
        """Instruction TEST_11
        Groups:
        0xf7fe9ea0: test    eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9EA0, "\x85\xc0")
        cpu.EIP = 0xF7FE9EA0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x9
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE9EA0:0xF7FE9EA2], [b"\x85", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160659106)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 9)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_12(self):
        """Instruction TEST_12
        Groups:
        0xf7fe4eb3: test    byte ptr [esp + 0x6c], 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4EB3, "\xf6D$l\x02")
        mem.write(0xFFFFD35C, "\x00")
        cpu.EIP = 0xF7FE4EB3
        cpu.ESP = 0xFFFFD2F0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4EB3:0xF7FE4EB8], [b"\xf6", b"D", b"$", b"l", b"\x02"])
        self.assertEqual(mem[0xFFFFD35C:0xFFFFD35D], [b"\x00"])
        self.assertEqual(cpu.EIP, 4160638648)
        self.assertEqual(cpu.ESP, 4294955760)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_13(self):
        """Instruction TEST_13
        Groups:
        0xf7fe57d4: test    edx, 0x804
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE57D4, "\xf7\xc2\x04\x08\x00\x00")
        cpu.EIP = 0xF7FE57D4
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE57D4:0xF7FE57DA], [b"\xf7", b"\xc2", b"\x04", b"\x08", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160640986)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_TEST_14(self):
        """Instruction TEST_14
        Groups:
        0xf7fe56af: test    al, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = False
        cpu.ZF = False
        cpu.AL = 0x74
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE56AF:0xF7FE56B1], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160640689)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 116)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_15(self):
        """Instruction TEST_15
        Groups:
        0xf7ff3e70: test    al, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E70, "\x84\xc0")
        cpu.EIP = 0xF7FF3E70
        cpu.OF = False
        cpu.ZF = False
        cpu.AL = 0x4F
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E70:0xF7FF3E72], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160700018)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 79)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_16(self):
        """Instruction TEST_16
        Groups:
        0xf7fe56f3: test    eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56F3, "\x85\xc0")
        cpu.EIP = 0xF7FE56F3
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.EAX = 0xF7FFDA94
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE56F3:0xF7FE56F5], [b"\x85", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160640757)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4160739988)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)

    def test_TEST_17(self):
        """Instruction TEST_17
        Groups:
        0xf7fe722e: test    edi, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE722E, "\x85\xff")
        cpu.EIP = 0xF7FE722E
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x6
        cpu.CF = True
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE722E:0xF7FE7230], [b"\x85", b"\xff"])
        self.assertEqual(cpu.EIP, 4160647728)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 6)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_18(self):
        """Instruction TEST_18
        Groups:
        0xf7fe56af: test    al, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = False
        cpu.ZF = False
        cpu.AL = 0x63
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE56AF:0xF7FE56B1], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160640689)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 99)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_19(self):
        """Instruction TEST_19
        Groups:
        0xf7fe56af: test    al, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = False
        cpu.ZF = False
        cpu.AL = 0x0
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE56AF:0xF7FE56B1], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160640689)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_2(self):
        """Instruction TEST_2
        Groups:
        0xf7fe56af: test    al, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = False
        cpu.ZF = False
        cpu.AL = 0x70
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE56AF:0xF7FE56B1], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160640689)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 112)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_20(self):
        """Instruction TEST_20
        Groups:
        0xf7fe4cfa: test    eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFA, "\x85\xc0")
        cpu.EIP = 0xF7FE4CFA
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xF7E281C2
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CFA:0xF7FE4CFC], [b"\x85", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160638204)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4158816706)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)

    def test_TEST_21(self):
        """Instruction TEST_21
        Groups:
        0xf7fe4cfa: test    eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFA, "\x85\xc0")
        cpu.EIP = 0xF7FE4CFA
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xF7E281C2
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4CFA:0xF7FE4CFC], [b"\x85", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160638204)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 4158816706)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, True)

    def test_TEST_3(self):
        """Instruction TEST_3
        Groups:
        0xf7fe9e98: test    dword ptr [ebp - 0x20], eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE9E98, "\x85E\xe0")
        mem.write(0xFFFFD478, "\x01\x00\x00\x00")
        cpu.EIP = 0xF7FE9E98
        cpu.EBP = 0xFFFFD498
        cpu.PF = False
        cpu.EAX = 0xA
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE9E98:0xF7FE9E9B], [b"\x85", b"E", b"\xe0"])
        self.assertEqual(mem[0xFFFFD478:0xFFFFD47C], [b"\x01", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 4160659099)
        self.assertEqual(cpu.EBP, 4294956184)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EAX, 10)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_4(self):
        """Instruction TEST_4
        Groups:
        0xf7ff3e70: test    al, al
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E70, "\x84\xc0")
        cpu.EIP = 0xF7FF3E70
        cpu.OF = False
        cpu.ZF = False
        cpu.AL = 0x5F
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E70:0xF7FF3E72], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160700018)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.AL, 95)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_5(self):
        """Instruction TEST_5
        Groups:
        0xf7fe4eb3: test    byte ptr [esp + 0x6c], 2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4EB3, "\xf6D$l\x02")
        mem.write(0xFFFFD35C, "\x00")
        cpu.EIP = 0xF7FE4EB3
        cpu.ESP = 0xFFFFD2F0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4EB3:0xF7FE4EB8], [b"\xf6", b"D", b"$", b"l", b"\x02"])
        self.assertEqual(mem[0xFFFFD35C:0xFFFFD35D], [b"\x00"])
        self.assertEqual(cpu.EIP, 4160638648)
        self.assertEqual(cpu.ESP, 4294955760)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_6(self):
        """Instruction TEST_6
        Groups:
        0xf7fe4f58: test    eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F58, "\x85\xc0")
        cpu.EIP = 0xF7FE4F58
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.EAX = 0x0
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE4F58:0xF7FE4F5A], [b"\x85", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160638810)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_7(self):
        """Instruction TEST_7
        Groups:
        0xf7fe72b7: test    eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72B7, "\x85\xc0")
        cpu.EIP = 0xF7FE72B7
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xD696910
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE72B7:0xF7FE72B9], [b"\x85", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647865)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 225011984)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_TEST_8(self):
        """Instruction TEST_8
        Groups:
        0xf7fe57d4: test    edx, 0x804
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE57D4, "\xf7\xc2\x04\x08\x00\x00")
        cpu.EIP = 0xF7FE57D4
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EDX = 0x0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(
            mem[0xF7FE57D4:0xF7FE57DA], [b"\xf7", b"\xc2", b"\x04", b"\x08", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.EIP, 4160640986)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_TEST_9(self):
        """Instruction TEST_9
        Groups:
        0xf7fe72b7: test    eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72B7, "\x85\xc0")
        cpu.EIP = 0xF7FE72B7
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xD696910
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE72B7:0xF7FE72B9], [b"\x85", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647865)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 225011984)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_VMOVAPS_1(self):
        """Instruction VMOVAPS_1
        Groups: avx
        0x80795a2:  vmovaps xmmword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80795A2, "\xc5\xf8)M\x00")
        mem.write(0xFFFFB600, "\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x80795A2
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x80795A2:0x80795A7], [b"\xc5", b"\xf8", b")", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714791)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVAPS_2(self):
        """Instruction VMOVAPS_2
        Groups: avx
        0x807959d:  vmovaps xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807959D, "\xc5\xf8(E\x00")
        mem.write(0xFFFFB600, "\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x807959D
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x807959D:0x80795A2], [b"\xc5", b"\xf8", b"(", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x01",
                b"\x03",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714786)
        self.assertEqual(cpu.XMM0, 769)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVAPS_3(self):
        """Instruction VMOVAPS_3
        Groups: avx
        0x8079599:  vmovaps xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079599, "\xc5\xf8(\xc1")
        cpu.EIP = 0x8079599
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079599:0x807959D], [b"\xc5", b"\xf8", b"(", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714781)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_VMOVDQA_1(self):
        """Instruction VMOVDQA_1
        Groups: avx
        0x804d626:  vmovdqa xmmword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D626, "\xc5\xf9\x7fM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D626
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D626:0x804D62B], [b"\xc5", b"\xf9", b"\x7f", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134534699)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVDQA_2(self):
        """Instruction VMOVDQA_2
        Groups: avx
        0x804d621:  vmovdqa xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D621, "\xc5\xf9oE\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D621
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D621:0x804D626], [b"\xc5", b"\xf9", b"o", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134534694)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVDQA_3(self):
        """Instruction VMOVDQA_3
        Groups: avx
        0x804d61d:  vmovdqa xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D61D, "\xc5\xf9o\xc1")
        cpu.EIP = 0x804D61D
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D61D:0x804D621], [b"\xc5", b"\xf9", b"o", b"\xc1"])
        self.assertEqual(cpu.EIP, 134534689)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_VMOVDQU_1(self):
        """Instruction VMOVDQU_1
        Groups: avx
        0x804d661:  vmovdqu xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D661, "\xc5\xfaoE\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D661
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D661:0x804D666], [b"\xc5", b"\xfa", b"o", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134534758)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVDQU_2(self):
        """Instruction VMOVDQU_2
        Groups: avx
        0x804d666:  vmovdqu xmmword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D666, "\xc5\xfa\x7fM\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x804D666
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x804D666:0x804D66B], [b"\xc5", b"\xfa", b"\x7f", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134534763)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVDQU_3(self):
        """Instruction VMOVDQU_3
        Groups: avx
        0x804d65d:  vmovdqu xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D65D, "\xc5\xfao\xc1")
        cpu.EIP = 0x804D65D
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D65D:0x804D661], [b"\xc5", b"\xfa", b"o", b"\xc1"])
        self.assertEqual(cpu.EIP, 134534753)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_VMOVD_1(self):
        """Instruction VMOVD_1
        Groups: avx
        0x8059850:  vmovd   dword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059850, "\xc5\xf9~M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x8059850
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8059850:0x8059855], [b"\xc5", b"\xf9", b"~", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134584405)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVD_2(self):
        """Instruction VMOVD_2
        Groups: avx
        0x8059843:  vmovd   ecx, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059843, "\xc5\xf9~\xc9")
        cpu.EIP = 0x8059843
        cpu.XMM1 = 0x0
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()

        self.assertEqual(mem[0x8059843:0x8059847], [b"\xc5", b"\xf9", b"~", b"\xc9"])
        self.assertEqual(cpu.EIP, 134584391)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ECX, 0)

    def test_VMOVD_3(self):
        """Instruction VMOVD_3
        Groups: avx
        0x8059847:  vmovd   xmm0, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059847, "\xc5\xf9n\xc2")
        cpu.EIP = 0x8059847
        cpu.XMM0 = 0xFFFFFFFF
        cpu.EDX = 0xFFFFC606
        cpu.execute()

        self.assertEqual(mem[0x8059847:0x805984B], [b"\xc5", b"\xf9", b"n", b"\xc2"])
        self.assertEqual(cpu.EIP, 134584395)
        self.assertEqual(cpu.XMM0, 4294952454)
        self.assertEqual(cpu.EDX, 4294952454)

    def test_VMOVD_4(self):
        """Instruction VMOVD_4
        Groups: avx
        0x805984b:  vmovd   xmm0, dword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805984B, "\xc5\xf9nE\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00")
        cpu.EIP = 0x805984B
        cpu.XMM0 = 0xFFFFC606
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x805984B:0x8059850], [b"\xc5", b"\xf9", b"n", b"E", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134584400)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVQ_1(self):
        """Instruction VMOVQ_1
        Groups: avx
        0x805667c:  vmovq   xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.write(0x805667C, "\xc5\xfa~\xc1")
        cpu.EIP = 0x805667C
        cpu.XMM0 = 0xFFFFFFFF0000000000000000
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x805667C:0x8056680], [b"\xc5", b"\xfa", b"~", b"\xc1"])
        self.assertEqual(cpu.EIP, 134571648)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_VMOVQ_2(self):
        """Instruction VMOVQ_2
        Groups: avx
        0x8056680:  vmovq   xmm0, qword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8056680, "\xc5\xfa~E\x00")
        mem.write(0xFFFFB600, "\xff\xff\xff\xff\x00\x00\x00\x00")
        cpu.EIP = 0x8056680
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8056680:0x8056685], [b"\xc5", b"\xfa", b"~", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\xff", b"\xff", b"\xff", b"\xff", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134571653)
        self.assertEqual(cpu.XMM0, 4294967295)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVQ_3(self):
        """Instruction VMOVQ_3
        Groups: avx
        0x8056685:  vmovq   qword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8056685, "\xc5\xf9\xd6M\x00")
        mem.write(0xFFFFB600, "\xff\xff\xff\xff\x00\x00\x00\x00")
        cpu.EIP = 0x8056685
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8056685:0x805668A], [b"\xc5", b"\xf9", b"\xd6", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB608],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.EIP, 134571658)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVUPS_1(self):
        """Instruction VMOVUPS_1
        Groups: avx
        0x8079442:  vmovups xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079442, "\xc5\xf8\x10\xc1")
        cpu.EIP = 0x8079442
        cpu.XMM0 = 0x80F1FC00FFFF80FE
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079442:0x8079446], [b"\xc5", b"\xf8", b"\x10", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714438)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_VMOVUPS_2(self):
        """Instruction VMOVUPS_2
        Groups: avx
        0x8079446:  vmovups xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079446, "\xc5\xf8\x10E\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8079446
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079446:0x807944B], [b"\xc5", b"\xf8", b"\x10", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714443)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VMOVUPS_3(self):
        """Instruction VMOVUPS_3
        Groups: avx
        0x807944b:  vmovups xmmword ptr [ebp], xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x807944B, "\xc5\xf8\x11M\x00")
        mem.write(0xFFFFB600, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x807944B
        cpu.XMM1 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x807944B:0x8079450], [b"\xc5", b"\xf8", b"\x11", b"M", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714448)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VPSHUFB_1(self):
        """Instruction VPSHUFB_1
        Groups: avx
        0x804d5bb:  vpshufb xmm0, xmm1, xmm2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5BB, "\xc4\xe2q\x00\xc2")
        cpu.XMM2 = 0x0
        cpu.EIP = 0x804D5BB
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x804D5BB:0x804D5C0], [b"\xc4", b"\xe2", b"q", b"\x00", b"\xc2"])
        self.assertEqual(cpu.XMM2, 0)
        self.assertEqual(cpu.EIP, 134534592)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_VPTEST_1(self):
        """Instruction VPTEST_1
        Groups: avx
        0x8079371:  vptest  xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079371, "\xc4\xe2y\x17\xc1")
        cpu.EIP = 0x8079371
        cpu.XMM0 = 0x80F1FC0000000101
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8079371:0x8079376], [b"\xc4", b"\xe2", b"y", b"\x17", b"\xc1"])
        self.assertEqual(cpu.EIP, 134714230)
        self.assertEqual(cpu.XMM0, 9291484583172243713)
        self.assertEqual(cpu.XMM1, 0)

    def test_VPTEST_2(self):
        """Instruction VPTEST_2
        Groups: avx
        0x8079376:  vptest  xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079376, "\xc4\xe2y\x17E\x00")
        mem.write(0xFFFFB600, "\x01\x00\x00\x00\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8079376
        cpu.XMM0 = 0x80F1FC0000000101
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8079376:0x807937C], [b"\xc4", b"\xe2", b"y", b"\x17", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xfc",
                b"\xf1",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134714236)
        self.assertEqual(cpu.XMM0, 9291484583172243713)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_VPXOR_1(self):
        """Instruction VPXOR_1
        Groups: avx
        0x807949b:  vpxor   xmm0, xmm1, xmm2
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807949B, "\xc5\xf1\xef\xc2")
        cpu.XMM2 = 0x0
        cpu.EIP = 0x807949B
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x807949B:0x807949F], [b"\xc5", b"\xf1", b"\xef", b"\xc2"])
        self.assertEqual(cpu.XMM2, 0)
        self.assertEqual(cpu.EIP, 134714527)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_VZEROUPPER_1(self):
        """Instruction VZEROUPPER_1
        Groups: avx
        0x807936d:  vzeroupper
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807936D, "\xc5\xf8w")
        cpu.EIP = 0x807936D
        cpu.execute()

        self.assertEqual(mem[0x807936D:0x8079370], [b"\xc5", b"\xf8", b"w"])
        self.assertEqual(cpu.EIP, 134714224)

    def test_XADD_1(self):
        """Instruction XADD_1
        Groups:
        0x805987c:  xadd    byte ptr [ebp], dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805987C, "\x0f\xc0U\x00")
        mem.write(0xFFFFB600, "\xfc")
        cpu.EIP = 0x805987C
        cpu.DL = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x805987C:0x8059880], [b"\x0f", b"\xc0", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\xfc"])
        self.assertEqual(cpu.EIP, 134584448)
        self.assertEqual(cpu.DL, 252)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_XADD_2(self):
        """Instruction XADD_2
        Groups:
        0x8059885:  xadd    dword ptr [ebp], edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059885, "\x0f\xc1U\x00")
        mem.write(0xFFFFB600, "\xf8\xc8\x00\x00")
        cpu.EIP = 0x8059885
        cpu.EDX = 0xFC
        cpu.EBP = 0xFFFFB600
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059885:0x8059889], [b"\x0f", b"\xc1", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\xf4", b"\xc9", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134584457)
        self.assertEqual(cpu.EDX, 51448)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XADD_3(self):
        """Instruction XADD_3
        Groups:
        0x8059875:  xadd    cx, dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059875, "f\x0f\xc1\xd1")
        cpu.EIP = 0x8059875
        cpu.CX = 0x3
        cpu.PF = True
        cpu.DX = 0xC6FD
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8059875:0x8059879], [b"f", b"\x0f", b"\xc1", b"\xd1"])
        self.assertEqual(cpu.EIP, 134584441)
        self.assertEqual(cpu.CX, 50944)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.DX, 3)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_XADD_4(self):
        """Instruction XADD_4
        Groups:
        0x8059880:  xadd    word ptr [ebp], dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059880, "f\x0f\xc1U\x00")
        mem.write(0xFFFFB600, "\xfc\x00")
        cpu.EIP = 0x8059880
        cpu.EBP = 0xFFFFB600
        cpu.PF = True
        cpu.DX = 0xC7FC
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059880:0x8059885], [b"f", b"\x0f", b"\xc1", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\xf8", b"\xc8"])
        self.assertEqual(cpu.EIP, 134584453)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.DX, 252)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_XADD_5(self):
        """Instruction XADD_5
        Groups:
        0x8059872:  xadd    cl, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059872, "\x0f\xc0\xd1")
        cpu.EIP = 0x8059872
        cpu.DL = 0x6
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CL = 0xFD
        cpu.CF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x8059872:0x8059875], [b"\x0f", b"\xc0", b"\xd1"])
        self.assertEqual(cpu.EIP, 134584437)
        self.assertEqual(cpu.DL, 253)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CL, 3)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.SF, False)

    def test_XADD_6(self):
        """Instruction XADD_6
        Groups:
        0x8059879:  xadd    ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059879, "\x0f\xc1\xd1")
        cpu.EIP = 0x8059879
        cpu.EDX = 0xFFFF0003
        cpu.PF = True
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xC700
        cpu.CF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x8059879:0x805987C], [b"\x0f", b"\xc1", b"\xd1"])
        self.assertEqual(cpu.EIP, 134584444)
        self.assertEqual(cpu.EDX, 50944)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4294952707)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_XCHG_1(self):
        """Instruction XCHG_1
        Groups:
        0x805b983:  xchg    cl, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B983, "\x86\xd1")
        cpu.EIP = 0x805B983
        cpu.DL = 0xF8
        cpu.CL = 0xC
        cpu.execute()

        self.assertEqual(mem[0x805B983:0x805B985], [b"\x86", b"\xd1"])
        self.assertEqual(cpu.EIP, 134592901)
        self.assertEqual(cpu.DL, 12)
        self.assertEqual(cpu.CL, 248)

    def test_XCHG_10(self):
        """Instruction XCHG_10
        Groups:
        0xf7eaa1dc: xchg    edi, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1DC, "\x87\xdf")
        cpu.EIP = 0xF7EAA1DC
        cpu.EDI = 0x1
        cpu.EBX = 0xF7FC0000
        cpu.execute()

        self.assertEqual(mem[0xF7EAA1DC:0xF7EAA1DE], [b"\x87", b"\xdf"])
        self.assertEqual(cpu.EIP, 4159349214)
        self.assertEqual(cpu.EDI, 4160487424)
        self.assertEqual(cpu.EBX, 1)

    def test_XCHG_11(self):
        """Instruction XCHG_11
        Groups:
        0x805b98f:  xchg    ecx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B98F, "\x87\xd1")
        cpu.EIP = 0x805B98F
        cpu.EDX = 0xEC
        cpu.ECX = 0x3F8
        cpu.execute()

        self.assertEqual(mem[0x805B98F:0x805B991], [b"\x87", b"\xd1"])
        self.assertEqual(cpu.EIP, 134592913)
        self.assertEqual(cpu.EDX, 1016)
        self.assertEqual(cpu.ECX, 236)

    def test_XCHG_12(self):
        """Instruction XCHG_12
        Groups:
        0xf7e2e752: xchg    esi, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E752, "\x87\xde")
        cpu.EIP = 0xF7E2E752
        cpu.EBX = 0xF7FC0000
        cpu.ESI = 0x1C0003F
        cpu.execute()

        self.assertEqual(mem[0xF7E2E752:0xF7E2E754], [b"\x87", b"\xde"])
        self.assertEqual(cpu.EIP, 4158842708)
        self.assertEqual(cpu.EBX, 29360191)
        self.assertEqual(cpu.ESI, 4160487424)

    def test_XCHG_13(self):
        """Instruction XCHG_13
        Groups:
        0xf7e2ee82: xchg    ebp, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2EE82, "\x87\xdd")
        cpu.EIP = 0xF7E2EE82
        cpu.EBP = 0xF7FC0000
        cpu.EBX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7E2EE82:0xF7E2EE84], [b"\x87", b"\xdd"])
        self.assertEqual(cpu.EIP, 4158844548)
        self.assertEqual(cpu.EBP, 0)
        self.assertEqual(cpu.EBX, 4160487424)

    def test_XCHG_14(self):
        """Instruction XCHG_14
        Groups:
        0x805b991:  xchg    dword ptr [ebp], ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B991, "\x87M\x00")
        mem.write(0xFFFFB600, "\x0c\xc8\x03x")
        cpu.EIP = 0x805B991
        cpu.EBP = 0xFFFFB600
        cpu.ECX = 0xEC
        cpu.execute()

        self.assertEqual(mem[0x805B991:0x805B994], [b"\x87", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB604], [b"\xec", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EIP, 134592916)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.ECX, 2013513740)

    def test_XCHG_15(self):
        """Instruction XCHG_15
        Groups:
        0xf7ff36f4: xchg    ebx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF36F4, "\x87\xd3")
        cpu.EIP = 0xF7FF36F4
        cpu.EDX = 0x3
        cpu.EBX = 0xF7FFD000
        cpu.execute()

        self.assertEqual(mem[0xF7FF36F4:0xF7FF36F6], [b"\x87", b"\xd3"])
        self.assertEqual(cpu.EIP, 4160698102)
        self.assertEqual(cpu.EDX, 4160737280)
        self.assertEqual(cpu.EBX, 3)

    def test_XCHG_16(self):
        """Instruction XCHG_16
        Groups:
        0x805b997:  xchg    word ptr [ebp], dx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B997, "f\x87U\x00")
        mem.write(0xFFFFB600, "\xf8\x00")
        cpu.EIP = 0x805B997
        cpu.EBP = 0xFFFFB600
        cpu.DX = 0x3EC
        cpu.execute()

        self.assertEqual(mem[0x805B997:0x805B99B], [b"f", b"\x87", b"U", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB602], [b"\xec", b"\x03"])
        self.assertEqual(cpu.EIP, 134592923)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.DX, 248)

    def test_XCHG_17(self):
        """Instruction XCHG_17
        Groups:
        0x805b985:  xchg    byte ptr [ebp], cl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B985, "\x86M\x00")
        mem.write(0xFFFFB600, "\xec")
        cpu.EIP = 0x805B985
        cpu.EBP = 0xFFFFB600
        cpu.CL = 0xF8
        cpu.execute()

        self.assertEqual(mem[0x805B985:0x805B988], [b"\x86", b"M", b"\x00"])
        self.assertEqual(mem[0xFFFFB600:0xFFFFB601], [b"\xf8"])
        self.assertEqual(cpu.EIP, 134592904)
        self.assertEqual(cpu.EBP, 4294948352)
        self.assertEqual(cpu.CL, 236)

    def test_XCHG_18(self):
        """Instruction XCHG_18
        Groups:
        0xf7e2e756: xchg    esi, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E756, "\x87\xde")
        cpu.EIP = 0xF7E2E756
        cpu.EBX = 0x1C0003F
        cpu.ESI = 0xF7FC0000
        cpu.execute()

        self.assertEqual(mem[0xF7E2E756:0xF7E2E758], [b"\x87", b"\xde"])
        self.assertEqual(cpu.EIP, 4158842712)
        self.assertEqual(cpu.EBX, 4160487424)
        self.assertEqual(cpu.ESI, 29360191)

    def test_XCHG_19(self):
        """Instruction XCHG_19
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = 0xF7E148FC
        cpu.EAX = 0xF7E14014
        cpu.execute()

        self.assertEqual(mem[0xF7FF454E:0xF7FF454F], [b"\x97"])
        self.assertEqual(cpu.EIP, 4160701775)
        self.assertEqual(cpu.EDI, 4158734356)
        self.assertEqual(cpu.EAX, 4158736636)

    def test_XCHG_2(self):
        """Instruction XCHG_2
        Groups:
        0xf7eaa3c0: xchg    ebp, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA3C0, "\x87\xdd")
        cpu.EIP = 0xF7EAA3C0
        cpu.EBP = 0x1
        cpu.EBX = 0xF7FC0000
        cpu.execute()

        self.assertEqual(mem[0xF7EAA3C0:0xF7EAA3C2], [b"\x87", b"\xdd"])
        self.assertEqual(cpu.EIP, 4159349698)
        self.assertEqual(cpu.EBP, 4160487424)
        self.assertEqual(cpu.EBX, 1)

    def test_XCHG_20(self):
        """Instruction XCHG_20
        Groups:
        0xf7eaa19a: xchg    ebp, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA19A, "\x87\xdd")
        cpu.EIP = 0xF7EAA19A
        cpu.EBP = 0xC2
        cpu.EBX = 0xF7FC0000
        cpu.execute()

        self.assertEqual(mem[0xF7EAA19A:0xF7EAA19C], [b"\x87", b"\xdd"])
        self.assertEqual(cpu.EIP, 4159349148)
        self.assertEqual(cpu.EBP, 4160487424)
        self.assertEqual(cpu.EBX, 194)

    def test_XCHG_21(self):
        """Instruction XCHG_21
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = 0xF7FDAAEE
        cpu.EAX = 0xF7FDAAD0
        cpu.execute()

        self.assertEqual(mem[0xF7FF454E:0xF7FF454F], [b"\x97"])
        self.assertEqual(cpu.EIP, 4160701775)
        self.assertEqual(cpu.EDI, 4160596688)
        self.assertEqual(cpu.EAX, 4160596718)

    def test_XCHG_3(self):
        """Instruction XCHG_3
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = 0xF7FFDF43
        cpu.EAX = 0xFFFFD410
        cpu.execute()

        self.assertEqual(mem[0xF7FF454E:0xF7FF454F], [b"\x97"])
        self.assertEqual(cpu.EIP, 4160701775)
        self.assertEqual(cpu.EDI, 4294956048)
        self.assertEqual(cpu.EAX, 4160741187)

    def test_XCHG_4(self):
        """Instruction XCHG_4
        Groups:
        0xf7ff36fd: xchg    ebx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF36FD, "\x87\xd3")
        cpu.EIP = 0xF7FF36FD
        cpu.EDX = 0xF7FFD000
        cpu.EBX = 0x3
        cpu.execute()

        self.assertEqual(mem[0xF7FF36FD:0xF7FF36FF], [b"\x87", b"\xd3"])
        self.assertEqual(cpu.EIP, 4160698111)
        self.assertEqual(cpu.EDX, 3)
        self.assertEqual(cpu.EBX, 4160737280)

    def test_XCHG_5(self):
        """Instruction XCHG_5
        Groups:
        0xf7e2e752: xchg    esi, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E752, "\x87\xde")
        cpu.EIP = 0xF7E2E752
        cpu.EBX = 0xF7FC0000
        cpu.ESI = 0x1C0003F
        cpu.execute()

        self.assertEqual(mem[0xF7E2E752:0xF7E2E754], [b"\x87", b"\xde"])
        self.assertEqual(cpu.EIP, 4158842708)
        self.assertEqual(cpu.EBX, 29360191)
        self.assertEqual(cpu.ESI, 4160487424)

    def test_XCHG_6(self):
        """Instruction XCHG_6
        Groups:
        0xf7eaa1dc: xchg    edi, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1DC, "\x87\xdf")
        cpu.EIP = 0xF7EAA1DC
        cpu.EDI = 0x0
        cpu.EBX = 0xF7FC0000
        cpu.execute()

        self.assertEqual(mem[0xF7EAA1DC:0xF7EAA1DE], [b"\x87", b"\xdf"])
        self.assertEqual(cpu.EIP, 4159349214)
        self.assertEqual(cpu.EDI, 4160487424)
        self.assertEqual(cpu.EBX, 0)

    def test_XCHG_7(self):
        """Instruction XCHG_7
        Groups:
        0xf7eaa1dc: xchg    edi, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1DC, "\x87\xdf")
        cpu.EIP = 0xF7EAA1DC
        cpu.EDI = 0x1
        cpu.EBX = 0xF7FC0000
        cpu.execute()

        self.assertEqual(mem[0xF7EAA1DC:0xF7EAA1DE], [b"\x87", b"\xdf"])
        self.assertEqual(cpu.EIP, 4159349214)
        self.assertEqual(cpu.EDI, 4160487424)
        self.assertEqual(cpu.EBX, 1)

    def test_XCHG_8(self):
        """Instruction XCHG_8
        Groups:
        0xf7eaa1e0: xchg    edi, ebx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1E0, "\x87\xdf")
        cpu.EIP = 0xF7EAA1E0
        cpu.EDI = 0xF7FC0000
        cpu.EBX = 0x1C0003F
        cpu.execute()

        self.assertEqual(mem[0xF7EAA1E0:0xF7EAA1E2], [b"\x87", b"\xdf"])
        self.assertEqual(cpu.EIP, 4159349218)
        self.assertEqual(cpu.EDI, 29360191)
        self.assertEqual(cpu.EBX, 4160487424)

    def test_XCHG_9(self):
        """Instruction XCHG_9
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = 0xF7FFDF5A
        cpu.EAX = 0xF7FF5E9A
        cpu.execute()

        self.assertEqual(mem[0xF7FF454E:0xF7FF454F], [b"\x97"])
        self.assertEqual(cpu.EIP, 4160701775)
        self.assertEqual(cpu.EDI, 4160708250)
        self.assertEqual(cpu.EAX, 4160741210)

    def test_XORPS_1(self):
        """Instruction XORPS_1
        Groups: sse1
        0x8070288:  xorps   xmm0, xmmword ptr [ebp]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070288, "\x0fWE\x00")
        mem.write(0xFFFFB600, "\x01\x85\xe1\x01\x00\xfc\xf1\x80\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.EIP = 0x8070288
        cpu.XMM0 = 0x0
        cpu.EBP = 0xFFFFB600
        cpu.execute()

        self.assertEqual(mem[0x8070288:0x807028C], [b"\x0f", b"W", b"E", b"\x00"])
        self.assertEqual(
            mem[0xFFFFB600:0xFFFFB610],
            [
                b"\x01",
                b"\x85",
                b"\xe1",
                b"\x01",
                b"\x00",
                b"\xfc",
                b"\xf1",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.EIP, 134677132)
        self.assertEqual(cpu.XMM0, 9291484583203800321)
        self.assertEqual(cpu.EBP, 4294948352)

    def test_XORPS_2(self):
        """Instruction XORPS_2
        Groups: sse1
        0x8070285:  xorps   xmm0, xmm1
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070285, "\x0fW\xc1")
        cpu.EIP = 0x8070285
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.execute()

        self.assertEqual(mem[0x8070285:0x8070288], [b"\x0f", b"W", b"\xc1"])
        self.assertEqual(cpu.EIP, 134677128)
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)

    def test_XOR_1(self):
        """Instruction XOR_1
        Groups:
        0xf7e901e6: xor     edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901E6, "1\xca")
        cpu.EIP = 0xF7E901E6
        cpu.EDX = 0x6C65662F
        cpu.PF = True
        cpu.OF = False
        cpu.ZF = True
        cpu.ECX = 0x2F2F2F2F
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7E901E6:0xF7E901E8], [b"1", b"\xca"])
        self.assertEqual(cpu.EIP, 4159242728)
        self.assertEqual(cpu.EDX, 1128941824)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 791621423)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XOR_10(self):
        """Instruction XOR_10
        Groups:
        0xf7fe54c9: xor     edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54C9, "1\xc2")
        cpu.EIP = 0xF7FE54C9
        cpu.EDX = 0xF54162E5
        cpu.PF = True
        cpu.EAX = 0xF54162E4
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54C9:0xF7FE54CB], [b"1", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160640203)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EAX, 4114703076)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XOR_11(self):
        """Instruction XOR_11
        Groups:
        0xf7ff3f05: xor     edx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F05, "1\xca")
        cpu.EIP = 0xF7FF3F05
        cpu.EDX = 0x8CD19A8B
        cpu.PF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x722D6473
        cpu.CF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3F05:0xF7FF3F07], [b"1", b"\xca"])
        self.assertEqual(cpu.EIP, 4160700167)
        self.assertEqual(cpu.EDX, 4277993208)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1915577459)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, True)

    def test_XOR_12(self):
        """Instruction XOR_12
        Groups:
        0xf7fe7288: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7288, "1\xc0")
        cpu.EIP = 0xF7FE7288
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xFFFFFF00
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE7288:0xF7FE728A], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647818)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_13(self):
        """Instruction XOR_13
        Groups:
        0xf7fe54c9: xor     edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54C9, "1\xc2")
        cpu.EIP = 0xF7FE54C9
        cpu.EDX = 0x7AB03CAB
        cpu.PF = False
        cpu.EAX = 0x77FAEEE0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54C9:0xF7FE54CB], [b"1", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160640203)
        self.assertEqual(cpu.EDX, 223007307)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EAX, 2012933856)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XOR_14(self):
        """Instruction XOR_14
        Groups:
        0xf7febc53: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBC53, "1\xc0")
        cpu.EIP = 0xF7FEBC53
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0x1
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FEBC53:0xF7FEBC55], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160666709)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_15(self):
        """Instruction XOR_15
        Groups:
        0xf7fe7288: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7288, "1\xc0")
        cpu.EIP = 0xF7FE7288
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xFFFFFF01
        cpu.PF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE7288:0xF7FE728A], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647818)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_16(self):
        """Instruction XOR_16
        Groups:
        0xf7fe7288: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7288, "1\xc0")
        cpu.EIP = 0xF7FE7288
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xFFFFFF00
        cpu.PF = True
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FE7288:0xF7FE728A], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160647818)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_17(self):
        """Instruction XOR_17
        Groups:
        0xf7fe54c9: xor     edx, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54C9, "1\xc2")
        cpu.EIP = 0xF7FE54C9
        cpu.EDX = 0xA1338653
        cpu.PF = True
        cpu.EAX = 0xA1338652
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE54C9:0xF7FE54CB], [b"1", b"\xc2"])
        self.assertEqual(cpu.EIP, 4160640203)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EAX, 2704508498)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XOR_18(self):
        """Instruction XOR_18
        Groups:
        0xf7febc53: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBC53, "1\xc0")
        cpu.EIP = 0xF7FEBC53
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xFFFFFFFF
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FEBC53:0xF7FEBC55], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160666709)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_19(self):
        """Instruction XOR_19
        Groups:
        0xf7eaa0f5: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0F5, "1\xc0")
        cpu.EIP = 0xF7EAA0F5
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.EAX = 0x0
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7EAA0F5:0xF7EAA0F7], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4159348983)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_2(self):
        """Instruction XOR_2
        Groups:
        0xf7fe7f50: xor     ecx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7F50, "1\xc9")
        cpu.EIP = 0xF7FE7F50
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.SF = True
        cpu.ECX = 0xF7E1E800
        cpu.execute()

        self.assertEqual(mem[0xF7FE7F50:0xF7FE7F52], [b"1", b"\xc9"])
        self.assertEqual(cpu.EIP, 4160651090)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0)

    def test_XOR_20(self):
        """Instruction XOR_20
        Groups:
        0xf7fed69c: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED69C, "1\xc0")
        cpu.EIP = 0xF7FED69C
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.EAX = 0xF7E14000
        cpu.PF = False
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FED69C:0xF7FED69E], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160673438)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_21(self):
        """Instruction XOR_21
        Groups:
        0xf7e901d7: xor     edi, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901D7, "1\xd7")
        cpu.EIP = 0xF7E901D7
        cpu.EDX = 0x6C65662F
        cpu.PF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.EDI = 0x6B64652E
        cpu.CF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7E901D7:0xF7E901D9], [b"1", b"\xd7"])
        self.assertEqual(cpu.EIP, 4159242713)
        self.assertEqual(cpu.EDX, 1818584623)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDI, 117506817)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XOR_3(self):
        """Instruction XOR_3
        Groups:
        0xf7ff45fe: xor     ecx, esi
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF45FE, "1\xf1")
        cpu.EIP = 0xF7FF45FE
        cpu.PF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF7FDAB08
        cpu.CF = False
        cpu.ESI = 0xF7FDAB18
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF45FE:0xF7FF4600], [b"1", b"\xf1"])
        self.assertEqual(cpu.EIP, 4160701952)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.ESI, 4160596760)
        self.assertEqual(cpu.SF, False)

    def test_XOR_4(self):
        """Instruction XOR_4
        Groups:
        0xf7ff3ccc: xor     cl, dl
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CCC, "0\xd1")
        cpu.EIP = 0xF7FF3CCC
        cpu.DL = 0x24
        cpu.PF = True
        cpu.CL = 0x48
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3CCC:0xF7FF3CCE], [b"0", b"\xd1"])
        self.assertEqual(cpu.EIP, 4160699598)
        self.assertEqual(cpu.DL, 36)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 108)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XOR_5(self):
        """Instruction XOR_5
        Groups:
        0xf7ff3e74: xor     eax, eax
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E74, "1\xc0")
        cpu.EIP = 0xF7FF3E74
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.EAX = 0xF7E28000
        cpu.PF = True
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FF3E74:0xF7FF3E76], [b"1", b"\xc0"])
        self.assertEqual(cpu.EIP, 4160700022)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_6(self):
        """Instruction XOR_6
        Groups:
        0xf7ff3cc4: xor     cl, byte ptr [eax]
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0x80481E9, "l")
        mem.write(0xF7FF3CC4, "2\x08")
        cpu.EIP = 0xF7FF3CC4
        cpu.EAX = 0x80481E9
        cpu.PF = False
        cpu.CL = 0x24
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x80481E9:0x80481EA], [b"l"])
        self.assertEqual(mem[0xF7FF3CC4:0xF7FF3CC6], [b"2", b"\x08"])
        self.assertEqual(cpu.EIP, 4160699590)
        self.assertEqual(cpu.EAX, 134513129)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.CL, 72)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.SF, False)

    def test_XOR_7(self):
        """Instruction XOR_7
        Groups:
        0xf7fe5487: xor     edx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE5487, "1\xd2")
        cpu.EIP = 0xF7FE5487
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = False
        cpu.EDX = 0x1
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0xF7FE5487:0xF7FE5489], [b"1", b"\xd2"])
        self.assertEqual(cpu.EIP, 4160640137)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_XOR_8(self):
        """Instruction XOR_8
        Groups:
        0xf7ff3ebf: xor     edx, edx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EBF, "1\xd2")
        cpu.EIP = 0xF7FF3EBF
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.PF = True
        cpu.EDX = 0x3
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0xF7FF3EBF:0xF7FF3EC1], [b"1", b"\xd2"])
        self.assertEqual(cpu.EIP, 4160700097)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_XOR_9(self):
        """Instruction XOR_9
        Groups:
        0xf7eaa198: xor     ecx, ecx
        """
        mem = Memory32()
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA198, "1\xc9")
        cpu.EIP = 0xF7EAA198
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0xF7EAA198:0xF7EAA19A], [b"1", b"\xc9"])
        self.assertEqual(cpu.EIP, 4159349146)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0)

    def test_AAD_1_symbolic(self):
        """Instruction AAD_1
        Groups: not64bitmode
        0x80702ff:  aad     0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FF, "\xd5\xff")
        cpu.EIP = 0x80702FF
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x30)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070300, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x80702FF, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070301)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.AL == 0x30)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AAD_2_symbolic(self):
        """Instruction AAD_2
        Groups: not64bitmode
        0x8070301:  aad     0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070301, "\xd5\x00")
        cpu.EIP = 0x8070301
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x30)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070301, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0x8070302, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070303)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.AL == 0x30)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AAD_3_symbolic(self):
        """Instruction AAD_3
        Groups: not64bitmode
        0x8070303:  aad     0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070303, "\xd5\x00")
        cpu.EIP = 0x8070303
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x30)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070303, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0x8070304, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070305)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.AL == 0x30)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AAD_4_symbolic(self):
        """Instruction AAD_4
        Groups: not64bitmode
        0x80702fb:  aad
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FB, "\xd5\n")
        cpu.EIP = 0x80702FB
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xEC)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xF8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702FB, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0x80702FC, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702FD)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.AL == 0x30)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AAD_5_symbolic(self):
        """Instruction AAD_5
        Groups: not64bitmode
        0x80702fd:  aad     0xf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FD, "\xd5\x0f")
        cpu.EIP = 0x80702FD
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x30)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702FD, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0x80702FE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702FF)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.AL == 0x30)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AAM_1_symbolic(self):
        """Instruction AAM_1
        Groups: not64bitmode
        0x8070306:  aam
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070306, "\xd4\n")
        cpu.EIP = 0x8070306
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070306, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0x8070307, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070308)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AAM_2_symbolic(self):
        """Instruction AAM_2
        Groups: not64bitmode
        0x807030a:  aam     0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807030A, "\xd4\xff")
        cpu.EIP = 0x807030A
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807030A, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0x807030B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x807030C)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AAM_3_symbolic(self):
        """Instruction AAM_3
        Groups: not64bitmode
        0x8070308:  aam     0xf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070308, "\xd4\x0f")
        cpu.EIP = 0x8070308
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070308, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0x8070309, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x807030A)
        condition = Operators.AND(condition, cpu.AH == 0x0)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_1_symbolic(self):
        """Instruction ADD_1
        Groups:
        0xf7fec387: add     ecx, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC387, "\x01\xf9")
        cpu.EIP = 0xF7FEC387
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x5C6B)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E22474)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC388, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC387, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC389)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E280DF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E22474)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_10_symbolic(self):
        """Instruction ADD_10
        Groups:
        0xf7fe71b9: add     dword ptr [eax], edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FBF000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF780)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF781)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF782)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF783)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE71B9, "\x01\x10")
        cpu.EIP = 0xF7FE71B9
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FBF780)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E15000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF780, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF781, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF782, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF783, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B9, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BA, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BB)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FBF780)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E15000)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_11_symbolic(self):
        """Instruction ADD_11
        Groups:
        0xf7ff41d7: add     ebx, 0x1315
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41D7, "\x81\xc3\x15\x13\x00\x00")
        cpu.EIP = 0xF7FF41D7
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FF41D7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D7, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D8, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D9, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41DA, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41DB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF41DD)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FF54EC)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_12_symbolic(self):
        """Instruction ADD_12
        Groups:
        0xf7fe71b9: add     dword ptr [eax], edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FBF000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBFB0C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBFB0D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBFB0E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBFB0F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE71B9, "\x01\x10")
        cpu.EIP = 0xF7FE71B9
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FBFB0C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E15000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FBFB0C, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBFB0D, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBFB0E, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBFB0F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B9, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BA, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BB)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FBFB0C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E15000)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_13_symbolic(self):
        """Instruction ADD_13
        Groups:
        0xf7fe7299: add     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7299, "\x01\xc0")
        cpu.EIP = 0xF7FE7299
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7299, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE729A, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE729B)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_14_symbolic(self):
        """Instruction ADD_14
        Groups:
        0xf7fe71aa: add     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71AA, "\x01\xd0")
        cpu.EIP = 0xF7FE71AA
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1AACDC)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E15000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AA, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AB, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71AC)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FBFCDC)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E15000)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_15_symbolic(self):
        """Instruction ADD_15
        Groups:
        0xf7fe9c44: add     dword ptr [ebp - 0x20], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE9C44, "\x83E\xe0\x01")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD478)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD479)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD47A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD47B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE9C44
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD498)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C44, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C45, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C46, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C47, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD478, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD479, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD47A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD47B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9C48)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD498)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_16_symbolic(self):
        """Instruction ADD_16
        Groups:
        0xf7fe56a2: add     edx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A2, "\x83\xc2\x01")
        cpu.EIP = 0xF7FE56A2
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E25ACC)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A2, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A3, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A5)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E25ACD)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_17_symbolic(self):
        """Instruction ADD_17
        Groups:
        0xf7fe71b9: add     dword ptr [eax], edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FBF000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B9, "\x01\x10")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF09C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x88)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF09D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF09E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x16)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FBF09F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE71B9
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FBF09C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E15000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B9, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BA, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF09C, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF09D, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF09E, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FBF09F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BB)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FBF09C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E15000)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_18_symbolic(self):
        """Instruction ADD_18
        Groups:
        0xf7fe71aa: add     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71AA, "\x01\xd0")
        cpu.EIP = 0xF7FE71AA
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1AA628)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E15000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AA, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AB, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71AC)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FBF628)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E15000)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_19_symbolic(self):
        """Instruction ADD_19
        Groups:
        0xf7fe4d33: add     esp, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4D33, "\x83\xc4,")
        cpu.EIP = 0xF7FE4D33
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2B0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D33, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D34, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D35, 8) == ord(","))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D36)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2DC)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_2_symbolic(self):
        """Instruction ADD_2
        Groups:
        0xf7fe7213: add     ecx, dword ptr [ebp - 0x78]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD480)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD481)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD482)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD483)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FE7213, "\x03M\x88")
        cpu.EIP = 0xF7FE7213
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD480, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD481, 8) == ord("\x8e"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD482, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD483, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7213, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7214, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7215, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7216)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E18ED4)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_20_symbolic(self):
        """Instruction ADD_20
        Groups:
        0xf7fe71fc: add     esi, dword ptr [edi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2C000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2C18C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2C18D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2C18E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2C18F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE71FC, "\x037")
        cpu.EIP = 0xF7FE71FC
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E2C18C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E15000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2C18C, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2C18D, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2C18E, 8) == ord("\x1a"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2C18F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71FC, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71FD, 8) == ord("7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71FE)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E2C18C)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FBFF18)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_21_symbolic(self):
        """Instruction ADD_21
        Groups:
        0xf7fe56aa: add     edi, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AA, "\x01\xc7")
        cpu.EIP = 0xF7FE56AA
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x72)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x2F2C5D89)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AA, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AB, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AC)
        condition = Operators.AND(condition, cpu.EAX == 0x72)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x2F2C5DFB)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_3_symbolic(self):
        """Instruction ADD_3
        Groups:
        0xf7fe56aa: add     edi, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AA, "\x01\xc7")
        cpu.EIP = 0xF7FE56AA
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x69)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x6F268490)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AA, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AB, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AC)
        condition = Operators.AND(condition, cpu.EAX == 0x69)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x6F2684F9)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_4_symbolic(self):
        """Instruction ADD_4
        Groups:
        0xf7eaa0d9: add     eax, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D9, "\x83\xc0\x01")
        cpu.EIP = 0xF7EAA0D9
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x26)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D9, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0DA, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0DB, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0DC)
        condition = Operators.AND(condition, cpu.EAX == 0x27)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_5_symbolic(self):
        """Instruction ADD_5
        Groups:
        0x8070234:  add     byte ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        mem.write(0x8070234, "\x80E\x00\xff")
        cpu.EIP = 0x8070234
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0x8070234, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x8070235, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8070236, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8070237, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070238)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_6_symbolic(self):
        """Instruction ADD_6
        Groups:
        0xf7fe71b6: add     esi, 8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B6, "\x83\xc6\x08")
        cpu.EIP = 0xF7FE71B6
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E2B534)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B8, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B6, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B7, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71B9)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E2B53C)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_7_symbolic(self):
        """Instruction ADD_7
        Groups:
        0xf7fe71aa: add     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71AA, "\x01\xd0")
        cpu.EIP = 0xF7FE71AA
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1A9498)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E15000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AA, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AB, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71AC)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FBE498)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E15000)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_8_symbolic(self):
        """Instruction ADD_8
        Groups:
        0xf7fe56a2: add     edx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A2, "\x83\xc2\x01")
        cpu.EIP = 0xF7FE56A2
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E23C44)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A2, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A3, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A5)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E23C45)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_9_symbolic(self):
        """Instruction ADD_9
        Groups:
        0xf7fe56a8: add     edi, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A8, "\x01\xcf")
        cpu.EIP = 0xF7FE56A8
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFECF2720)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xC7F67939)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A9, 8) == ord("\xcf"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AA)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFECF2720)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0xC6C5A059)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_1_symbolic(self):
        """Instruction AND_1
        Groups:
        0x806c452:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806C000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x806C452, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x806C452
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806C452, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x806C453, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x806C454, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806C455, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x806C456, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806C457, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806C458, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806C459)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_10_symbolic(self):
        """Instruction AND_10
        Groups:
        0xf7fe88dd: and     edx, 3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.write(0xF7FE88DD, "\x83\xe2\x03")
        cpu.EIP = 0xF7FE88DD
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x21)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE88DD, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE88DE, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE88DF, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE88E0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_11_symbolic(self):
        """Instruction AND_11
        Groups:
        0xf7ff3eed: and     edx, 0x1010100
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EED, "\x81\xe2\x00\x01\x01\x01")
        cpu.EIP = 0xF7FF3EED
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFEFCFEF8)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EED, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EEE, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EEF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EF0, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EF1, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EF2, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EF3)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_12_symbolic(self):
        """Instruction AND_12
        Groups:
        0x804a3e4:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804A000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804A3E4, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x804A3E4
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804A3E4, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x804A3E5, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x804A3E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804A3E7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x804A3E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804A3E9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804A3EA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804A3EB)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_13_symbolic(self):
        """Instruction AND_13
        Groups:
        0x8069701:  and     edx, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08069000, 0x1000, "rwx")
        mem.write(0x8069701, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x8069701
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8069701, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8069702, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x8069703, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8069704, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8069705, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8069706, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8069707)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_14_symbolic(self):
        """Instruction AND_14
        Groups:
        0x8065b70:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065B70, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x8065B70
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065B70, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8065B71, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x8065B72, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065B73, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8065B74, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065B75, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065B76, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065B77)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_15_symbolic(self):
        """Instruction AND_15
        Groups:
        0x8064eb1:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08064000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8064EB1, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x8064EB1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8064EB1, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8064EB2, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x8064EB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8064EB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8064EB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8064EB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8064EB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8064EB8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_16_symbolic(self):
        """Instruction AND_16
        Groups:
        0x806b598:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x806B598, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x806B598
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806B598, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x806B599, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x806B59A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806B59B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x806B59C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806B59D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806B59E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B59F)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_17_symbolic(self):
        """Instruction AND_17
        Groups:
        0x805b447:  and     eax, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B447, "%\xff\x00\x00\x00")
        cpu.EIP = 0x805B447
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xEB)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B448, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x805B449, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B44A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B44B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B447, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B44C)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xEB)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_18_symbolic(self):
        """Instruction AND_18
        Groups:
        0x805a902:  and     eax, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805A000, 0x1000, "rwx")
        mem.write(0x805A902, "%\xff\x00\x00\x00")
        cpu.EIP = 0x805A902
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xEB)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805A902, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.read_int(0x805A903, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x805A904, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805A905, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805A906, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805A907)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xEB)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_19_symbolic(self):
        """Instruction AND_19
        Groups:
        0x806aae2:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806A000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x806AAE2, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x806AAE2
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806AAE2, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x806AAE3, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x806AAE4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806AAE5, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x806AAE6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806AAE7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806AAE8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806AAE9)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_2_symbolic(self):
        """Instruction AND_2
        Groups:
        0x805dc21:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805DC21, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x805DC21
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805DC21, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x805DC22, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x805DC23, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805DC24, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x805DC25, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805DC26, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805DC27, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805DC28)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_20_symbolic(self):
        """Instruction AND_20
        Groups:
        0x805a4fc:  and     eax, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805A000, 0x1000, "rwx")
        mem.write(0x805A4FC, "%\xff\x00\x00\x00")
        cpu.EIP = 0x805A4FC
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xEB)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805A500, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805A4FC, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.read_int(0x805A4FD, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x805A4FE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805A4FF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805A501)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xEB)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_21_symbolic(self):
        """Instruction AND_21
        Groups:
        0x8060799:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8060799, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x8060799
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8060799, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x806079A, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x806079B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806079C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x806079D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806079E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806079F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80607A0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_3_symbolic(self):
        """Instruction AND_3
        Groups:
        0x806e0cf:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806E000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x806E0CF, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x806E0CF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806E0CF, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x806E0D0, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x806E0D1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806E0D2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x806E0D3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806E0D4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806E0D5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806E0D6)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_4_symbolic(self):
        """Instruction AND_4
        Groups:
        0x806cf9f:  and     edx, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806C000, 0x1000, "rwx")
        mem.write(0x806CF9F, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x806CF9F
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFA)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806CFA0, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x806CFA1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x806CFA2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806CFA3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806CFA4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806CF9F, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.EIP == 0x806CFA5)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xFA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_5_symbolic(self):
        """Instruction AND_5
        Groups:
        0x8062394:  and     dword ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08062000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8062394, "\x81e\x00\xff\x00\x00\x00")
        cpu.EIP = 0x8062394
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8062394, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8062395, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x8062396, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8062397, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8062398, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8062399, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806239A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806239B)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_6_symbolic(self):
        """Instruction AND_6
        Groups:
        0xf7fe212b: and     ecx, 7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE212B, "\x83\xe1\x07")
        cpu.EIP = 0xF7FE212B
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE212B, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE212C, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE212D, 8) == ord("\x07"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE212E)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_7_symbolic(self):
        """Instruction AND_7
        Groups:
        0x804bf30:  and     edx, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804B000, 0x1000, "rwx")
        mem.write(0x804BF30, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x804BF30
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804BF30, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x804BF31, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x804BF32, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x804BF33, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804BF34, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804BF35, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804BF36)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xF0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_8_symbolic(self):
        """Instruction AND_8
        Groups:
        0xf7fec3da: and     edx, 0x7fff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC3DA, "\x81\xe2\xff\x7f\x00\x00")
        cpu.EIP = 0xF7FEC3DA
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x19)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3DA, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3DB, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3DC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3DD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3DE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3DF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC3E0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x19)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_9_symbolic(self):
        """Instruction AND_9
        Groups:
        0x80494c9:  and     edx, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08049000, 0x1000, "rwx")
        mem.write(0x80494C9, "\x81\xe2\xff\x00\x00\x00")
        cpu.EIP = 0x80494C9
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80494C9, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x80494CA, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x80494CB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x80494CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80494CD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80494CE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80494CF)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xF0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_1_symbolic(self):
        """Instruction BSF_1
        Groups:
        0x806b25c:  bsf     cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B25C, "f\x0f\xbc\xca")
        cpu.EIP = 0x806B25C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x746E)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xFA)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806B25C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B25D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B25E, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x806B25F, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B260)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CX == 0x1)
        condition = Operators.AND(condition, cpu.DX == 0xFA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_2_symbolic(self):
        """Instruction BSF_2
        Groups:
        0x806b294:  bsf     cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x806B294, "f\x0f\xbcM\x00")
        cpu.EIP = 0x806B294
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x1)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806B294, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B295, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B296, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x806B297, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x806B298, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B299)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CX == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_3_symbolic(self):
        """Instruction BSF_3
        Groups:
        0x806b335:  bsf     ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B335, "\x0f\xbc\xca")
        cpu.EIP = 0x806B335
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFA)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6C650001)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806B335, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B336, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x806B337, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B338)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xFA)
        condition = Operators.AND(condition, cpu.ECX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_4_symbolic(self):
        """Instruction BSF_4
        Groups:
        0x806b36c:  bsf     ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x806B36C, "\x0f\xbcM\x00")
        cpu.EIP = 0x806B36C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806B36C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B36D, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x806B36E, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x806B36F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B370)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_1_symbolic(self):
        """Instruction BSR_1
        Groups:
        0x80661a3:  bsr     cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80661A3, "f\x0f\xbdM\x00")
        cpu.EIP = 0x80661A3
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFC00)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80661A3, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80661A4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80661A5, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x80661A6, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80661A7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80661A8)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CX == 0xFC00)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_2_symbolic(self):
        """Instruction BSR_2
        Groups:
        0xf7e2e8e8: bsr     ecx, dword ptr [esp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7E2E8E8, "\x0f\xbd\x0c$")
        cpu.EIP = 0xF7E2E8E8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x200)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD600, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E8E8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E8E9, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E8EA, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E8EB, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2E8EC)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD600)
        condition = Operators.AND(condition, cpu.ECX == 0x4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_3_symbolic(self):
        """Instruction BSR_3
        Groups:
        0x806627b:  bsr     ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x806627B, "\x0f\xbdM\x00")
        cpu.EIP = 0x806627B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80F1FC00)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806627B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806627C, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x806627D, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x806627E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x806627F)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x80F1FC00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_4_symbolic(self):
        """Instruction BSR_4
        Groups:
        0x8066244:  bsr     ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.write(0x8066244, "\x0f\xbd\xca")
        cpu.EIP = 0x8066244
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80F1FC00)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8066244, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8066245, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x8066246, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x8066247)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x80F1FC00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_5_symbolic(self):
        """Instruction BSR_5
        Groups:
        0x806616b:  bsr     cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08066000, 0x1000, "rwx")
        mem.write(0x806616B, "f\x0f\xbd\xca")
        cpu.EIP = 0x806616B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFC00)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806616B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x806616C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806616D, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x806616E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x806616F)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CX == 0xFC00)
        condition = Operators.AND(condition, cpu.DX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSWAP_1_symbolic(self):
        """Instruction BSWAP_1
        Groups:
        0x807937c:  bswap   ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807937C, "\x0f\xc9")
        cpu.EIP = 0x807937C
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80008001)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807937C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807937D, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0x807937E)
        condition = Operators.AND(condition, cpu.ECX == 0x1800080)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTC_1_symbolic(self):
        """Instruction BTC_1
        Groups:
        0x8061077:  btc     ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08061000, 0x1000, "rwx")
        mem.write(0x8061077, "\x0f\xba\xf9\x04")
        cpu.EIP = 0x8061077
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFEF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8061078, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x8061079, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x806107A, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x8061077, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x806107B)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTC_2_symbolic(self):
        """Instruction BTC_2
        Groups:
        0x8060f33:  btc     cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060F33, "f\x0f\xbb\xd1")
        cpu.EIP = 0x8060F33
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFFFF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xEC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8060F33, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060F34, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060F35, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.read_int(0x8060F36, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8060F37)
        condition = Operators.AND(condition, cpu.CX == 0xEFFF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.DX == 0xEC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTC_3_symbolic(self):
        """Instruction BTC_3
        Groups:
        0x80610a2:  btc     ecx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08061000, 0x1000, "rwx")
        mem.write(0x80610A2, "\x0f\xba\xf9\xff")
        cpu.EIP = 0x80610A2
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80610A2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80610A3, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x80610A4, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x80610A5, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x80610A6)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7FFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTC_4_symbolic(self):
        """Instruction BTC_4
        Groups:
        0x8060fac:  btc     cx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060FAC, "f\x0f\xba\xf9\x04")
        cpu.EIP = 0x8060FAC
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xEFFF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8060FB0, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x8060FAC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060FAD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060FAE, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x8060FAF, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.EIP == 0x8060FB1)
        condition = Operators.AND(condition, cpu.CX == 0xEFEF)
        condition = Operators.AND(condition, cpu.CF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTC_5_symbolic(self):
        """Instruction BTC_5
        Groups:
        0x806100c:  btc     ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08061000, 0x1000, "rwx")
        mem.write(0x806100C, "\x0f\xbb\xd1")
        cpu.EIP = 0x806100C
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xEC)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFEFEF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806100C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806100D, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.read_int(0x806100E, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x806100F)
        condition = Operators.AND(condition, cpu.EDX == 0xEC)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFEF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTR_1_symbolic(self):
        """Instruction BTR_1
        Groups:
        0x805beed:  btr     ecx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BEED, "\x0f\xba\xf1\xff")
        cpu.EIP = 0x805BEED
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80000000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BEF0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x805BEED, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BEEE, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x805BEEF, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BEF1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTR_2_symbolic(self):
        """Instruction BTR_2
        Groups:
        0x805bec2:  btr     ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BEC2, "\x0f\xba\xf1\x04")
        cpu.EIP = 0x805BEC2
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80000000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BEC2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BEC3, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x805BEC4, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0x805BEC5, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BEC6)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x80000000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTR_3_symbolic(self):
        """Instruction BTR_3
        Groups:
        0x805bdf7:  btr     cx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BDF7, "f\x0f\xba\xf1\x04")
        cpu.EIP = 0x805BDF7
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BDF8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BDF9, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x805BDFA, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0x805BDFB, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x805BDF7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BDFC)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTR_4_symbolic(self):
        """Instruction BTR_4
        Groups:
        0x805be57:  btr     ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BE57, "\x0f\xb3\xd1")
        cpu.EIP = 0x805BE57
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xEC)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80000000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BE58, 8) == ord("\xb3"))
        condition = Operators.AND(condition, cpu.read_int(0x805BE59, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805BE57, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BE5A)
        condition = Operators.AND(condition, cpu.EDX == 0xEC)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x80000000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTR_5_symbolic(self):
        """Instruction BTR_5
        Groups:
        0x805bd7e:  btr     cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BD7E, "f\x0f\xb3\xd1")
        cpu.EIP = 0x805BD7E
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x1010)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xEC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BD80, 8) == ord("\xb3"))
        condition = Operators.AND(condition, cpu.read_int(0x805BD81, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805BD7E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BD7F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BD82)
        condition = Operators.AND(condition, cpu.CX == 0x10)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.DX == 0xEC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTS_1_symbolic(self):
        """Instruction BTS_1
        Groups:
        0x805bbab:  bts     ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBAB, "\x0f\xba\xe9\x04")
        cpu.EIP = 0x805BBAB
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1010)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BBAB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBAC, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBAD, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBAE, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BBAF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x1010)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTS_2_symbolic(self):
        """Instruction BTS_2
        Groups:
        0x805bba8:  bts     ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBA8, "\x0f\xab\xd1")
        cpu.EIP = 0x805BBA8
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3EC)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1010)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BBA8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBA9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBAA, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BBAB)
        condition = Operators.AND(condition, cpu.EDX == 0x3EC)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x1010)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTS_3_symbolic(self):
        """Instruction BTS_3
        Groups:
        0x805bba3:  bts     cx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBA3, "f\x0f\xba\xe9\x04")
        cpu.EIP = 0x805BBA3
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x1000)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BBA3, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBA4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBA5, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBA6, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBA7, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BBA8)
        condition = Operators.AND(condition, cpu.CX == 0x1010)
        condition = Operators.AND(condition, cpu.CF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTS_4_symbolic(self):
        """Instruction BTS_4
        Groups:
        0x805bb9f:  bts     cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BB9F, "f\x0f\xab\xd1")
        cpu.EIP = 0x805BB9F
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x3EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BBA0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBA1, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBA2, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB9F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BBA3)
        condition = Operators.AND(condition, cpu.CX == 0x1000)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.DX == 0x3EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BTS_5_symbolic(self):
        """Instruction BTS_5
        Groups:
        0x805bbaf:  bts     ecx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BBAF, "\x0f\xba\xe9\xff")
        cpu.EIP = 0x805BBAF
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1010)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BBB0, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBB1, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBB2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x805BBAF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BBB3)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x80001010)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_1_symbolic(self):
        """Instruction BT_1
        Groups:
        0x80486c3:  bt      ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x80486C3, "\x0f\xa3\xd1")
        cpu.EIP = 0x80486C3
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80486C3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80486C4, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0x80486C5, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x80486C6)
        condition = Operators.AND(condition, cpu.EDX == 0xF0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_10_symbolic(self):
        """Instruction BT_10
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_11_symbolic(self):
        """Instruction BT_11
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x2)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_12_symbolic(self):
        """Instruction BT_12
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_13_symbolic(self):
        """Instruction BT_13
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_14_symbolic(self):
        """Instruction BT_14
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_15_symbolic(self):
        """Instruction BT_15
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_16_symbolic(self):
        """Instruction BT_16
        Groups:
        0x80485ea:  bt      cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x80485EA, "f\x0f\xa3\xd1")
        cpu.EIP = 0x80485EA
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xF0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80485EA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80485EB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80485EC, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0x80485ED, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x80485EE)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.DX == 0xF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_17_symbolic(self):
        """Instruction BT_17
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_18_symbolic(self):
        """Instruction BT_18
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_19_symbolic(self):
        """Instruction BT_19
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_2_symbolic(self):
        """Instruction BT_2
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_20_symbolic(self):
        """Instruction BT_20
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_21_symbolic(self):
        """Instruction BT_21
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_3_symbolic(self):
        """Instruction BT_3
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_4_symbolic(self):
        """Instruction BT_4
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_5_symbolic(self):
        """Instruction BT_5
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_6_symbolic(self):
        """Instruction BT_6
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_7_symbolic(self):
        """Instruction BT_7
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_8_symbolic(self):
        """Instruction BT_8
        Groups:
        0x8048759:  bt      ecx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x8048759, "\x0f\xba\xe1\xff")
        cpu.EIP = 0x8048759
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8048759, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804875A, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x804875B, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0x804875C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x804875D)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_9_symbolic(self):
        """Instruction BT_9
        Groups:
        0xf7fe4cc0: bt      eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC0, "\x0f\xa3\xd0")
        cpu.EIP = 0xF7FE4CC0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC1, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC3)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_1_symbolic(self):
        """Instruction CALL_1
        Groups: call, not64bitmode
        0xf7fec303: call    0xf7fdc820
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD400)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD401)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD402)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FEC303, "\xe8\x18\x05\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD403)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD404)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FEC303
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD488)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD400)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD400, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD401, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD402, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC303, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC304, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC305, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC306, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC307, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD403, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD404, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FC, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FD, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDC820)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD488)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD3FC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_10_symbolic(self):
        """Instruction CALL_10
        Groups: call, not64bitmode
        0xf7ff0819: call    0xf7ff0590
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF0819, "\xe8r\xfd")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD020)
        value = cs.new_bitvec(8)
        cs.add(value == 0xCD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD021)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD022)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD023)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD024)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF081C, "\xff\xff")
        cpu.EIP = 0xF7FF0819
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x306)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD020)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0819, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF081A, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF081B, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF081C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF081D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD020, 8) == ord("\xcd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD021, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD022, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD023, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD024, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01C, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01D, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0590)
        condition = Operators.AND(condition, cpu.EBP == 0x306)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD01C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_11_symbolic(self):
        """Instruction CALL_11
        Groups: call, not64bitmode
        0xf7fe54ef: call    0xf7fe4c80
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FE54F0, "\x8c\xf7")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        mem.write(0xF7FE54EF, "\xe8")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB1)
        mem[addr] = value
        mem.write(0xF7FE54F2, "\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        cpu.EIP = 0xF7FE54EF
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2F0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F0, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F1, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2ED, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54EF, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F0, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F1, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F4, 8) == ord("\xdc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F2, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C80)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_12_symbolic(self):
        """Instruction CALL_12
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD441)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD442)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD443)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD444)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD440)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD441, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD442, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD443, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD444, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F3, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F4, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F5, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5670)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD43C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_13_symbolic(self):
        """Instruction CALL_13
        Groups: call, not64bitmode
        0xf7fe8bc3: call    0xf7ff45f0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE8BC3, "\xe8(\xba\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8B)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD350)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD351)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD352)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD353)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD354)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.EIP = 0xF7FE8BC3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD350)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8BC3, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8BC4, 8) == ord("("))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8BC5, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8BC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8BC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34C, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34D, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD350, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD351, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD352, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD353, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD354, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF45F0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD34C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_14_symbolic(self):
        """Instruction CALL_14
        Groups: call, not64bitmode
        0xf7eaa007: call    0xf7f3b7db
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD580)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD581)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD582)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD583)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD584)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7EAA007, "\xe8\xcf\x17\t\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD57C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD57D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD57E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEA)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD57F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7EAA007
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xC2)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD580)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD580, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD581, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD582, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD583, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD584, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA007, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA008, 8) == ord("\xcf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA009, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA00A, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA00B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD57C, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD57D, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD57E, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD57F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7F3B7DB)
        condition = Operators.AND(condition, cpu.EBP == 0xC2)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD57C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_15_symbolic(self):
        """Instruction CALL_15
        Groups: call, not64bitmode
        0xf7feabc3: call    dword ptr [ebx + 0x558]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEA000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD340)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD341)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD342)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FEABC3, "\xff\x93X\x05\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD344)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD343)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD558)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD559)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD55A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD55B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD33C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD33D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD33E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD33F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FEABC3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD340)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD340, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD341, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD342, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEABC3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEABC4, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEABC5, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEABC6, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEABC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEABC8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD344, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD343, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD558, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD559, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD55A, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD55B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD33C, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD33D, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD33E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD33F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDD120)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD33C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_16_symbolic(self):
        """Instruction CALL_16
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD441)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD442)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD443)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD444)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD440)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD441, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD442, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD443, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD444, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F3, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F4, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F5, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5670)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD43C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_17_symbolic(self):
        """Instruction CALL_17
        Groups: call, not64bitmode
        0xf7fe568c: call    0xf7ff4768
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD381)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD382)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD383)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD384)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        mem.write(0xF7FE568C, "\xe8\xd7\xf0\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE568C
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD380)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD381, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD382, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD383, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD384, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568C, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568D, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568E, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5690, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4768)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD37C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_18_symbolic(self):
        """Instruction CALL_18
        Groups: call, not64bitmode
        0xf7ff0a62: call    0xf7ff0590
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD022)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD023)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD024)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD020)
        value = cs.new_bitvec(8)
        cs.add(value == 0xCD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD021)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5E)
        mem[addr] = value
        mem.write(0xF7FF0A62, "\xe8)\xfb\xff\xff")
        cpu.EIP = 0xF7FF0A62
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x340)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD020)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD022, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD023, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD024, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01C, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01D, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD020, 8) == ord("\xcd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD021, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A62, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A63, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A64, 8) == ord("\xfb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A65, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A66, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0590)
        condition = Operators.AND(condition, cpu.EBP == 0x340)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD01C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_19_symbolic(self):
        """Instruction CALL_19
        Groups: call, not64bitmode
        0xf7fe4d98: call    0xf7ff3e60
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D98, "\xe8\xc3\xf0\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x97)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D98
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABA8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2B0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D98, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D99, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D9A, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D9B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D9C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AC, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AD, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B0, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B1, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B2, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B4, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E60)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2AC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_2_symbolic(self):
        """Instruction CALL_2
        Groups: call, not64bitmode
        0xf7eaa8b1: call    0xf7f3b7db
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        mem.write(0xF7EAA8B1, "\xe8%\x0f\t\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD436)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD437)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD434)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD435)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        cpu.EIP = 0xF7EAA8B1
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD438)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA8B1, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA8B2, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA8B3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA8B4, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA8B5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD436, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD437, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD434, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD435, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7F3B7DB)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD434)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_20_symbolic(self):
        """Instruction CALL_20
        Groups: call, not64bitmode
        0xf7fe9d3c: call    0xf7fdc810
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE9D40, "\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1B)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE9D3C, "\xe8\xcf*\xff")
        cpu.EIP = 0xF7FE9D3C
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD498)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD3F0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9D40, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3EC, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3ED, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3EE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3EF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F0, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9D3C, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9D3D, 8) == ord("\xcf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9D3E, 8) == ord("*"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9D3F, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDC810)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD498)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD3EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_21_symbolic(self):
        """Instruction CALL_21
        Groups: call, not64bitmode
        0xf7fe3b46: call    0xf7fdc810
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE3B46, "\xe8\xc5\x8c\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD49C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x36)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD49D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3B)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD49E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD49F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4A0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x14)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4A1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4A2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4A3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4A4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE3B46
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD4A0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3B46, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3B47, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3B48, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3B49, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3B4A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD49C, 8) == ord("K"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD49D, 8) == ord(";"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD49E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD49F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4A0, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4A1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4A2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4A3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4A4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDC810)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD49C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_3_symbolic(self):
        """Instruction CALL_3
        Groups: call, not64bitmode
        0xf7fe4d98: call    0xf7ff3e60
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4D98, "\xe8\xc3\xf0\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAC)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D98
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDADB8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2B0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D98, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D99, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D9A, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D9B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D9C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AC, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AD, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B0, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B1, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B2, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B4, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E60)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDADB8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2AC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_4_symbolic(self):
        """Instruction CALL_4
        Groups: call, not64bitmode
        0xf7fe54ef: call    0xf7fe4c80
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FE54F0, "\x8c\xf7")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        mem.write(0xF7FE54EF, "\xe8")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB1)
        mem[addr] = value
        mem.write(0xF7FE54F2, "\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        cpu.EIP = 0xF7FE54EF
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2F0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F0, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F1, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2ED, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54EF, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F0, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F1, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F4, 8) == ord("\xdc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F2, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C80)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_5_symbolic(self):
        """Instruction CALL_5
        Groups: call, not64bitmode
        0xf7ff41d2: call    0xf7ff4768
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF41D2, "\xe8\x91\x05\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD030)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD031)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD032)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD033)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD034)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD035)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD036)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD037)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD038)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF41D2
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD088)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD034)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D2, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D3, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D4, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD030, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD031, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD032, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD033, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD034, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD035, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD036, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD037, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD038, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4768)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD088)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD030)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_6_symbolic(self):
        """Instruction CALL_6
        Groups: call, not64bitmode
        0xf7fe568c: call    0xf7ff4768
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD381)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD382)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD383)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD384)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB8)
        mem[addr] = value
        mem.write(0xF7FE568C, "\xe8\xd7\xf0\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE568C
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD380)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD381, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD382, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD383, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD384, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568C, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568D, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568E, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE568F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5690, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4768)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD37C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_7_symbolic(self):
        """Instruction CALL_7
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD441)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD442)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD443)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD444)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD440)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD441, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD442, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD443, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD444, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F3, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F4, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F5, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5670)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD43C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_8_symbolic(self):
        """Instruction CALL_8
        Groups: call, not64bitmode
        0xf7fe5775: call    0xf7fe4e10
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD381)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD382)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD383)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD384)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        mem.write(0xF7FE5775, "\xe8\x96\xf6\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x91)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE5775
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD380)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD381, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD382, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD383, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD384, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5775, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5776, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5777, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5778, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5779, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E10)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD37C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_9_symbolic(self):
        """Instruction CALL_9
        Groups: call, not64bitmode
        0xf7fe72f3: call    0xf7fe5670
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD441)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD442)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD443)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD444)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        mem.write(0xF7FE72F3, "\xe8x\xe3\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE72F3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD440)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD441, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD442, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD443, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD444, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F3, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F4, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F5, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72F7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5670)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD43C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CBW_1_symbolic(self):
        """Instruction CBW_1
        Groups:
        0x8060d84:  cbw
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060D84, "f\x98")
        cpu.EIP = 0x8060D84
        cpu.AX = cs.new_bitvec(16)
        cs.add(cpu.AX == 0xEB)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8060D84, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D85, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.EIP == 0x8060D86)
        condition = Operators.AND(condition, cpu.AX == 0xFFEB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQ_1_symbolic(self):
        """Instruction CDQ_1
        Groups:
        0x804d63b:  cdq
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D63B, "\x99")
        cpu.EIP = 0x804D63B
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xEB6EB6EB)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D63B, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D63C)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0xEB6EB6EB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQ_2_symbolic(self):
        """Instruction CDQ_2
        Groups:
        0x80702fa:  cdq
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702FA, "\x99")
        cpu.EIP = 0x80702FA
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFA)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFECF8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702FA, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702FB)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFECF8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_1_symbolic(self):
        """Instruction CLC_1
        Groups:
        0x80701bc:  clc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701BC, "\xf8")
        cpu.EIP = 0x80701BC
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80701BC, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701BD)
        condition = Operators.AND(condition, cpu.CF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_1_symbolic(self):
        """Instruction CLD_1
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_10_symbolic(self):
        """Instruction CLD_10
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_11_symbolic(self):
        """Instruction CLD_11
        Groups:
        0xf7ff4607: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4607

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4607, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4608)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_12_symbolic(self):
        """Instruction CLD_12
        Groups:
        0xf7ff4607: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4607

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4607, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4608)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_13_symbolic(self):
        """Instruction CLD_13
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_14_symbolic(self):
        """Instruction CLD_14
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_15_symbolic(self):
        """Instruction CLD_15
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_16_symbolic(self):
        """Instruction CLD_16
        Groups:
        0xf7ff4607: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4607

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4607, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4608)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_17_symbolic(self):
        """Instruction CLD_17
        Groups:
        0xf7ff4607: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4607

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4607, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4608)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_18_symbolic(self):
        """Instruction CLD_18
        Groups:
        0xf7ff44e0: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44E0, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF44E0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF44E0, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF44E1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_19_symbolic(self):
        """Instruction CLD_19
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_2_symbolic(self):
        """Instruction CLD_2
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_20_symbolic(self):
        """Instruction CLD_20
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_21_symbolic(self):
        """Instruction CLD_21
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_3_symbolic(self):
        """Instruction CLD_3
        Groups:
        0xf7ff44e0: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44E0, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF44E0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF44E0, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF44E1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_4_symbolic(self):
        """Instruction CLD_4
        Groups:
        0xf7ff4540: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4540, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4540

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4540, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4541)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_5_symbolic(self):
        """Instruction CLD_5
        Groups:
        0xf7ff4607: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4607

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4607, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4608)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_6_symbolic(self):
        """Instruction CLD_6
        Groups:
        0xf7ff44e0: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44E0, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF44E0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF44E0, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF44E1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_7_symbolic(self):
        """Instruction CLD_7
        Groups:
        0xf7ff4607: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4607

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4607, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4608)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_8_symbolic(self):
        """Instruction CLD_8
        Groups:
        0x807019f:  cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807019F, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x807019F

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807019F, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0x80701A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLD_9_symbolic(self):
        """Instruction CLD_9
        Groups:
        0xf7ff4607: cld
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4607, "\xfc")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4607

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4607, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.DF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4608)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_1_symbolic(self):
        """Instruction CMOVAE_1
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D6, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC1D8)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_10_symbolic(self):
        """Instruction CMOVAE_10
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x23)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D6, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC1D8)
        condition = Operators.AND(condition, cpu.ECX == 0x24)
        condition = Operators.AND(condition, cpu.EAX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_11_symbolic(self):
        """Instruction CMOVAE_11
        Groups: cmov
        0xf7fec2ae: cmovae  edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2AE, "\x0fC\xd1")
        cpu.EIP = 0xF7FEC2AE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2B0, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2AE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2AF, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2B1)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_12_symbolic(self):
        """Instruction CMOVAE_12
        Groups: cmov
        0x8048431:  cmovae  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8048431, "f\x0fCM\x00")
        cpu.EIP = 0x8048431
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x6FF0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8048431, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048432, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048433, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x8048434, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8048435, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048436)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_2_symbolic(self):
        """Instruction CMOVAE_2
        Groups: cmov
        0x8048439:  cmovae  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8048439, "\x0fCM\x00")
        cpu.EIP = 0x8048439
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xE6FE6FF0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8048439, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804843A, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x804843B, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804843C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804843D)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_3_symbolic(self):
        """Instruction CMOVAE_3
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x22)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D6, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC1D8)
        condition = Operators.AND(condition, cpu.ECX == 0x24)
        condition = Operators.AND(condition, cpu.EAX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_4_symbolic(self):
        """Instruction CMOVAE_4
        Groups: cmov
        0xf7fec2ae: cmovae  edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2AE, "\x0fC\xd1")
        cpu.EIP = 0xF7FEC2AE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2B0, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2AE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2AF, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2B1)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_5_symbolic(self):
        """Instruction CMOVAE_5
        Groups: cmov
        0xf7fec1d5: cmovae  eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1D5, "\x0fC\xc1")
        cpu.EIP = 0xF7FEC1D5
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x24)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D6, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1D7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC1D8)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_6_symbolic(self):
        """Instruction CMOVAE_6
        Groups: cmov
        0xf7fed76a: cmovae  edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED76A, "\x0fC\xd1")
        cpu.EIP = 0xF7FED76A
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FED76A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED76B, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED76C, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED76D)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_7_symbolic(self):
        """Instruction CMOVAE_7
        Groups: cmov
        0x804842d:  cmovae  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804842D, "f\x0fC\xca")
        cpu.EIP = 0x804842D
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x6FF0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8048430, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x804842D, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804842E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804842F, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048431)
        condition = Operators.AND(condition, cpu.CX == 0x6FF0)
        condition = Operators.AND(condition, cpu.DX == 0x6FF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_8_symbolic(self):
        """Instruction CMOVAE_8
        Groups: cmov
        0xf7fec2ae: cmovae  edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2AE, "\x0fC\xd1")
        cpu.EIP = 0xF7FEC2AE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2B0, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2AE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2AF, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2B1)
        condition = Operators.AND(condition, cpu.EDX == 0x24)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_9_symbolic(self):
        """Instruction CMOVAE_9
        Groups: cmov
        0x8048436:  cmovae  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x8048436, "\x0fC\xca")
        cpu.EIP = 0x8048436
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xE6FE6FF0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8048438, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x8048436, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048437, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048439)
        condition = Operators.AND(condition, cpu.EDX == 0xE6FE6FF0)
        condition = Operators.AND(condition, cpu.ECX == 0xE6FE6FF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_1_symbolic(self):
        """Instruction CMOVA_1
        Groups: cmov
        0xf7fe231d: cmova   edx, dword ptr [ebp - 0x9c]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0xF7FE231D, "\x0fG\x95d\xff\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFEE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFEF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE231D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD088)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FC1000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE231D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE231E, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE231F, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2320, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2321, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2322, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2323, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFEC, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFED, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFEE, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFEF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE2324)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FC1000)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD088)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_2_symbolic(self):
        """Instruction CMOVA_2
        Groups: cmov
        0x804d67b:  cmova   cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D67B, "f\x0fG\xca")
        cpu.EIP = 0x804D67B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D67B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D67C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D67D, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x804D67E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D67F)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0xFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_3_symbolic(self):
        """Instruction CMOVA_3
        Groups: cmov
        0x804d67f:  cmova   cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D680, "\x0fGM\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D67F, "f")
        cpu.EIP = 0x804D67F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D680, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D681, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x804D682, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D683, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D67F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D684)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_4_symbolic(self):
        """Instruction CMOVA_4
        Groups: cmov
        0x804d684:  cmova   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D684, "\x0fG\xca")
        cpu.EIP = 0x804D684
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D684, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D685, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x804D686, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D687)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_5_symbolic(self):
        """Instruction CMOVA_5
        Groups: cmov
        0x804d687:  cmova   ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D687, "\x0fGM\x00")
        cpu.EIP = 0x804D687
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D687, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D688, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x804D689, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D68A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D68B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_1_symbolic(self):
        """Instruction CMOVBE_1
        Groups: cmov
        0x805988d:  cmovbe  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC9)
        mem[addr] = value
        mem.write(0x805988D, "f\x0fFM\x00")
        cpu.EIP = 0x805988D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xC703)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x805988D, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805988E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805988F, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x8059890, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8059891, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059892)
        condition = Operators.AND(condition, cpu.CX == 0xC703)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_2_symbolic(self):
        """Instruction CMOVBE_2
        Groups: cmov
        0x8059889:  cmovbe  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059889, "f\x0fF\xca")
        cpu.EIP = 0x8059889
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xC703)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC8F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059889, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805988A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805988B, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x805988C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x805988D)
        condition = Operators.AND(condition, cpu.CX == 0xC703)
        condition = Operators.AND(condition, cpu.DX == 0xC8F8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_3_symbolic(self):
        """Instruction CMOVBE_3
        Groups: cmov
        0x8059892:  cmovbe  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059892, "\x0fF\xca")
        cpu.EIP = 0x8059892
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC8F8)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFC703)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059892, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059893, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x8059894, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059895)
        condition = Operators.AND(condition, cpu.EDX == 0xC8F8)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFC703)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_4_symbolic(self):
        """Instruction CMOVBE_4
        Groups: cmov
        0xf7fe6d28: cmovbe  edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6D28, "\x0fF\xd1")
        cpu.EIP = 0xF7FE6D28
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x4E5)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x542)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6D28, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6D29, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6D2A, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6D2B)
        condition = Operators.AND(condition, cpu.EDX == 0x4E5)
        condition = Operators.AND(condition, cpu.ECX == 0x542)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_5_symbolic(self):
        """Instruction CMOVBE_5
        Groups: cmov
        0xf7fe6d28: cmovbe  edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6D28, "\x0fF\xd1")
        cpu.EIP = 0xF7FE6D28
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xB)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xE)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6D28, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6D29, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6D2A, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6D2B)
        condition = Operators.AND(condition, cpu.EDX == 0xB)
        condition = Operators.AND(condition, cpu.ECX == 0xE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_6_symbolic(self):
        """Instruction CMOVBE_6
        Groups: cmov
        0xf7fe0a66: cmovbe  eax, esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0A66, "\x0fF\xc6")
        cpu.EIP = 0xF7FE0A66
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xE)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xB)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0A68, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0A66, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0A67, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0A69)
        condition = Operators.AND(condition, cpu.ESI == 0xE)
        condition = Operators.AND(condition, cpu.EAX == 0xB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_7_symbolic(self):
        """Instruction CMOVBE_7
        Groups: cmov
        0x8059895:  cmovbe  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8059895, "\x0fFM\x00")
        cpu.EIP = 0x8059895
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFC703)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059895, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059896, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x8059897, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8059898, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059899)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFC703)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_1_symbolic(self):
        """Instruction CMOVB_1
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_10_symbolic(self):
        """Instruction CMOVB_10
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_11_symbolic(self):
        """Instruction CMOVB_11
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_12_symbolic(self):
        """Instruction CMOVB_12
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_13_symbolic(self):
        """Instruction CMOVB_13
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x9)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x9)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_14_symbolic(self):
        """Instruction CMOVB_14
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_15_symbolic(self):
        """Instruction CMOVB_15
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_16_symbolic(self):
        """Instruction CMOVB_16
        Groups: cmov
        0x804d68f:  cmovb   cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D68F, "f\x0fBM\x00")
        cpu.EIP = 0x804D68F
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D68F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D690, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D691, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x804D692, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D693, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D694)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_17_symbolic(self):
        """Instruction CMOVB_17
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0xC)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_18_symbolic(self):
        """Instruction CMOVB_18
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x12)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x12)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_19_symbolic(self):
        """Instruction CMOVB_19
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x4)
        condition = Operators.AND(condition, cpu.ECX == 0x4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_2_symbolic(self):
        """Instruction CMOVB_2
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1E)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x1E)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_20_symbolic(self):
        """Instruction CMOVB_20
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_21_symbolic(self):
        """Instruction CMOVB_21
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x2)
        condition = Operators.AND(condition, cpu.ECX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_3_symbolic(self):
        """Instruction CMOVB_3
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_4_symbolic(self):
        """Instruction CMOVB_4
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_5_symbolic(self):
        """Instruction CMOVB_5
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x20)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x20)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_6_symbolic(self):
        """Instruction CMOVB_6
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x8)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_7_symbolic(self):
        """Instruction CMOVB_7
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_8_symbolic(self):
        """Instruction CMOVB_8
        Groups: cmov
        0xf7ff3e81: cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E81, "\x0fB\xc1")
        cpu.EIP = 0xF7FF3E81
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E82, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E83, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E84)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_9_symbolic(self):
        """Instruction CMOVB_9
        Groups: cmov
        0xf7fec2ce: cmovb   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2CE, "\x0fB\xca")
        cpu.EIP = 0xF7FEC2CE
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1B)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2CF, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2D1)
        condition = Operators.AND(condition, cpu.EDX == 0x1B)
        condition = Operators.AND(condition, cpu.ECX == 0x24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_1_symbolic(self):
        """Instruction CMOVE_1
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_10_symbolic(self):
        """Instruction CMOVE_10
        Groups: cmov
        0x804d62b:  cmove   cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D62B, "f\x0fD\xca")
        cpu.EIP = 0x804D62B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xF0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D62B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D62C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D62D, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x804D62E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D62F)
        condition = Operators.AND(condition, cpu.CX == 0xF0)
        condition = Operators.AND(condition, cpu.DX == 0xF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_11_symbolic(self):
        """Instruction CMOVE_11
        Groups: cmov
        0x804d637:  cmove   ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D637, "\x0fDM\x00")
        cpu.EIP = 0x804D637
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D637, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D638, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x804D639, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D63A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D63B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_12_symbolic(self):
        """Instruction CMOVE_12
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABF8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABF8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_13_symbolic(self):
        """Instruction CMOVE_13
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDADB8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDADB8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_14_symbolic(self):
        """Instruction CMOVE_14
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_15_symbolic(self):
        """Instruction CMOVE_15
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABB8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABB8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_16_symbolic(self):
        """Instruction CMOVE_16
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_17_symbolic(self):
        """Instruction CMOVE_17
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDADF8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDADF8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_18_symbolic(self):
        """Instruction CMOVE_18
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_19_symbolic(self):
        """Instruction CMOVE_19
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABB8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABB8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_2_symbolic(self):
        """Instruction CMOVE_2
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_20_symbolic(self):
        """Instruction CMOVE_20
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDADF8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDADF8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_21_symbolic(self):
        """Instruction CMOVE_21
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_3_symbolic(self):
        """Instruction CMOVE_3
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_4_symbolic(self):
        """Instruction CMOVE_4
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_5_symbolic(self):
        """Instruction CMOVE_5
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDAE38)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDAE38)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_6_symbolic(self):
        """Instruction CMOVE_6
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_7_symbolic(self):
        """Instruction CMOVE_7
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABA8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_8_symbolic(self):
        """Instruction CMOVE_8
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABB8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABB8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_9_symbolic(self):
        """Instruction CMOVE_9
        Groups: cmov
        0xf7fe72be: cmove   edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72BE, "\x0fD\xd0")
        cpu.EIP = 0xF7FE72BE
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDABF8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72BF, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C1)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDABF8)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVGE_1_symbolic(self):
        """Instruction CMOVGE_1
        Groups: cmov
        0x8079470:  cmovge  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079470, "\x0fM\xca")
        cpu.EIP = 0x8079470
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFE8F0085)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079470, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079471, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8079472, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079473)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0xFE8F0085)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVGE_2_symbolic(self):
        """Instruction CMOVGE_2
        Groups: cmov
        0x8079473:  cmovge  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079473, "\x0fMM\x00")
        cpu.EIP = 0x8079473
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFE8F0085)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079474, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8079473, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079476, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079475, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079477)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0xFE8F0085)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVGE_3_symbolic(self):
        """Instruction CMOVGE_3
        Groups: cmov
        0x807946b:  cmovge  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x807946B, "f\x0fMM\x00")
        cpu.EIP = 0x807946B
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x85)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807946B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807946C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807946D, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x807946E, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x807946F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079470)
        condition = Operators.AND(condition, cpu.CX == 0x85)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVGE_4_symbolic(self):
        """Instruction CMOVGE_4
        Groups: cmov
        0x8079467:  cmovge  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079467, "f\x0fM\xca")
        cpu.EIP = 0x8079467
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x85)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079468, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079469, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x807946A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x8079467, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x807946B)
        condition = Operators.AND(condition, cpu.CX == 0x85)
        condition = Operators.AND(condition, cpu.DX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVG_1_symbolic(self):
        """Instruction CMOVG_1
        Groups: cmov
        0x804d69b:  cmovg   cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D69B, "f\x0fO\xca")
        cpu.EIP = 0x804D69B
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xFFFF)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D69B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D69C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D69D, 8) == ord("O"))
        condition = Operators.AND(condition, cpu.read_int(0x804D69E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D69F)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0xFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVG_2_symbolic(self):
        """Instruction CMOVG_2
        Groups: cmov
        0x804d6a7:  cmovg   ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D6A7, "\x0fOM\x00")
        cpu.EIP = 0x804D6A7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A8, 8) == ord("O"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A9, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6AA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D6AB)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVG_3_symbolic(self):
        """Instruction CMOVG_3
        Groups: cmov
        0x804d6a4:  cmovg   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D6A4, "\x0fO\xca")
        cpu.EIP = 0x804D6A4
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D6A4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A5, 8) == ord("O"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D6A7)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVG_4_symbolic(self):
        """Instruction CMOVG_4
        Groups: cmov
        0x804d69f:  cmovg   cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D6A0, "\x0fOM\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D69F, "f")
        cpu.EIP = 0x804D69F
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D6A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A1, 8) == ord("O"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A2, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D6A3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D69F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D6A4)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVLE_1_symbolic(self):
        """Instruction CMOVLE_1
        Groups: cmov
        0x80702ea:  cmovle  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702EA, "f\x0fN\xca")
        cpu.EIP = 0x80702EA
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xB600)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xFA)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702EA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702EB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702EC, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x80702ED, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702EE)
        condition = Operators.AND(condition, cpu.CX == 0xFA)
        condition = Operators.AND(condition, cpu.DX == 0xFA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVLE_2_symbolic(self):
        """Instruction CMOVLE_2
        Groups: cmov
        0x80702f6:  cmovle  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x80702F6, "\x0fNM\x00")
        cpu.EIP = 0x80702F6
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFA)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F7, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F8, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702FA)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x1E18500)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVLE_3_symbolic(self):
        """Instruction CMOVLE_3
        Groups: cmov
        0x80702ee:  cmovle  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        mem.write(0x80702EE, "f\x0fNM\x00")
        cpu.EIP = 0x80702EE
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFA)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0x80702EE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702EF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F0, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F1, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702F3)
        condition = Operators.AND(condition, cpu.CX == 0x8500)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVLE_4_symbolic(self):
        """Instruction CMOVLE_4
        Groups: cmov
        0x80702f3:  cmovle  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702F3, "\x0fN\xca")
        cpu.EIP = 0x80702F3
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFA)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFF8500)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702F3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F4, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x80702F5, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702F6)
        condition = Operators.AND(condition, cpu.EDX == 0xFA)
        condition = Operators.AND(condition, cpu.ECX == 0xFA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVL_1_symbolic(self):
        """Instruction CMOVL_1
        Groups: cmov
        0x804d64d:  cmovl   cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D64D, "f\x0fL\xca")
        cpu.EIP = 0x804D64D
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xFFFF)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D650, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x804D64D, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D64E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D64F, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D651)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0xFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVL_2_symbolic(self):
        """Instruction CMOVL_2
        Groups: cmov
        0x804d656:  cmovl   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D656, "\x0fL\xca")
        cpu.EIP = 0x804D656
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D658, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x804D656, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D657, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D659)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVL_3_symbolic(self):
        """Instruction CMOVL_3
        Groups: cmov
        0x804d659:  cmovl   ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D659, "\x0fLM\x00")
        cpu.EIP = 0x804D659
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D659, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D65A, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x804D65B, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D65C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D65D)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVL_4_symbolic(self):
        """Instruction CMOVL_4
        Groups: cmov
        0x804d651:  cmovl   cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D651, "f\x0fLM\x00")
        cpu.EIP = 0x804D651
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D651, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D652, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D653, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x804D654, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D655, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D656)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_1_symbolic(self):
        """Instruction CMOVNE_1
        Groups: cmov
        0xf7fe211a: cmovne  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE211A, "\x0fE\xca")
        cpu.EIP = 0xF7FE211A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE211A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE211B, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE211C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE211D)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.ECX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_10_symbolic(self):
        """Instruction CMOVNE_10
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x4008000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_11_symbolic(self):
        """Instruction CMOVNE_11
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8010)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x8010)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_12_symbolic(self):
        """Instruction CMOVNE_12
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x20)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_13_symbolic(self):
        """Instruction CMOVNE_13
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1002000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x1002000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_14_symbolic(self):
        """Instruction CMOVNE_14
        Groups: cmov
        0xf7fe686d: cmovne  ebp, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE686D, "\x0fE\xe8")
        cpu.EIP = 0xF7FE686D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE686D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE686E, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE686F, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6870)
        condition = Operators.AND(condition, cpu.EBP == 0x10)
        condition = Operators.AND(condition, cpu.EAX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_15_symbolic(self):
        """Instruction CMOVNE_15
        Groups: cmov
        0xf7fe66d5: cmovne  eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE66D5, "\x0fE\xc1")
        cpu.EIP = 0xF7FE66D5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FDAACD)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDA838)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D6, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE66D8)
        condition = Operators.AND(condition, cpu.ECX == 0xF7FDA838)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FDA838)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_16_symbolic(self):
        """Instruction CMOVNE_16
        Groups: cmov
        0xf7fe66d5: cmovne  eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE66D5, "\x0fE\xc1")
        cpu.EIP = 0xF7FE66D5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFDC24)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FF5844)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D6, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE66D8)
        condition = Operators.AND(condition, cpu.ECX == 0xF7FF5844)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFDC24)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_17_symbolic(self):
        """Instruction CMOVNE_17
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x40080)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x40080)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_18_symbolic(self):
        """Instruction CMOVNE_18
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x801)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x801)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_19_symbolic(self):
        """Instruction CMOVNE_19
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_2_symbolic(self):
        """Instruction CMOVNE_2
        Groups: cmov
        0x80794b9:  cmovne  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80794B9, "\x0fEM\x00")
        cpu.EIP = 0x80794B9
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80794B9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794BA, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80794BB, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80794BC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794BD)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_20_symbolic(self):
        """Instruction CMOVNE_20
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2004000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x2004000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_21_symbolic(self):
        """Instruction CMOVNE_21
        Groups: cmov
        0x80794ad:  cmovne  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794AD, "f\x0fE\xca")
        cpu.EIP = 0x80794AD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x1)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794B0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x80794AD, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794AE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794AF, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794B1)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_3_symbolic(self):
        """Instruction CMOVNE_3
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_4_symbolic(self):
        """Instruction CMOVNE_4
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_5_symbolic(self):
        """Instruction CMOVNE_5
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_6_symbolic(self):
        """Instruction CMOVNE_6
        Groups: cmov
        0xf7fe66d5: cmovne  eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE66D5, "\x0fE\xc1")
        cpu.EIP = 0xF7FE66D5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFDE94)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FF5844)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D6, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE66D7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE66D8)
        condition = Operators.AND(condition, cpu.ECX == 0xF7FF5844)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFDE94)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_7_symbolic(self):
        """Instruction CMOVNE_7
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1002)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x1002)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_8_symbolic(self):
        """Instruction CMOVNE_8
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_9_symbolic(self):
        """Instruction CMOVNE_9
        Groups: cmov
        0xf7fe99a0: cmovne  eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE99A0, "\x0fE\xc2")
        cpu.EIP = 0xF7FE99A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A1, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99A2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99A3)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0x80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNO_1_symbolic(self):
        """Instruction CMOVNO_1
        Groups: cmov
        0x80794e1:  cmovno  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x80794E1, "f\x0fAM\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        cpu.EIP = 0x80794E1
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E1, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E3, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E4, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794E6)
        condition = Operators.AND(condition, cpu.CX == 0x301)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNO_2_symbolic(self):
        """Instruction CMOVNO_2
        Groups: cmov
        0x80794e6:  cmovno  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794E6, "\x0fA\xca")
        cpu.EIP = 0x80794E6
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794E8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E7, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794E9)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNO_3_symbolic(self):
        """Instruction CMOVNO_3
        Groups: cmov
        0x80794dd:  cmovno  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794DD, "f\x0fA\xca")
        cpu.EIP = 0x80794DD
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x301)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794E0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x80794DD, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794DE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794DF, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794E1)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNO_4_symbolic(self):
        """Instruction CMOVNO_4
        Groups: cmov
        0x80794e9:  cmovno  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80794E9, "\x0fAM\x00")
        cpu.EIP = 0x80794E9
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80794E9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794EA, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x80794EB, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80794EC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794ED)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNP_1_symbolic(self):
        """Instruction CMOVNP_1
        Groups: cmov
        0x80794d1:  cmovnp  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        mem.write(0x80794D1, "f\x0fKM\x00")
        cpu.EIP = 0x80794D1
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x301)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D1, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D3, 8) == ord("K"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D4, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794D6)
        condition = Operators.AND(condition, cpu.CX == 0x301)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNP_2_symbolic(self):
        """Instruction CMOVNP_2
        Groups: cmov
        0x80794cd:  cmovnp  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794CD, "f\x0fK\xca")
        cpu.EIP = 0x80794CD
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x301)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x80794CD, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794CE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794CF, 8) == ord("K"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794D1)
        condition = Operators.AND(condition, cpu.CX == 0x301)
        condition = Operators.AND(condition, cpu.DX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNP_3_symbolic(self):
        """Instruction CMOVNP_3
        Groups: cmov
        0x80794d6:  cmovnp  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794D6, "\x0fK\xca")
        cpu.EIP = 0x80794D6
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794D8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D7, 8) == ord("K"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794D9)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNP_4_symbolic(self):
        """Instruction CMOVNP_4
        Groups: cmov
        0x80794d9:  cmovnp  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80794D9, "\x0fKM\x00")
        cpu.EIP = 0x80794D9
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80794D9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794DA, 8) == ord("K"))
        condition = Operators.AND(condition, cpu.read_int(0x80794DB, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80794DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794DD)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_1_symbolic(self):
        """Instruction CMOVNS_1
        Groups: cmov
        0x80794c1:  cmovns  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x80794C1, "f\x0fIM\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        cpu.EIP = 0x80794C1
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x301)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C1, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C3, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C4, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794C6)
        condition = Operators.AND(condition, cpu.CX == 0x301)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_2_symbolic(self):
        """Instruction CMOVNS_2
        Groups: cmov
        0x80794c9:  cmovns  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80794C9, "\x0fIM\x00")
        cpu.EIP = 0x80794C9
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794CA, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x80794CB, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80794CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794CD)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_3_symbolic(self):
        """Instruction CMOVNS_3
        Groups: cmov
        0x80794bd:  cmovns  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794BD, "f\x0fI\xca")
        cpu.EIP = 0x80794BD
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x301)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794C0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x80794BD, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794BF, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794C1)
        condition = Operators.AND(condition, cpu.CX == 0x301)
        condition = Operators.AND(condition, cpu.DX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_4_symbolic(self):
        """Instruction CMOVNS_4
        Groups: cmov
        0x80794c6:  cmovns  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794C6, "\x0fI\xca")
        cpu.EIP = 0x80794C6
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x301)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794C8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794C7, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794C9)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x301)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVO_1_symbolic(self):
        """Instruction CMOVO_1
        Groups: cmov
        0x804d677:  cmovo   ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D677, "\x0f@M\x00")
        cpu.EIP = 0x804D677
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D677, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D678, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x804D679, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D67A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D67B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVO_2_symbolic(self):
        """Instruction CMOVO_2
        Groups: cmov
        0x804d674:  cmovo   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D674, "\x0f@\xca")
        cpu.EIP = 0x804D674
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D674, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D675, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x804D676, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D677)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVO_3_symbolic(self):
        """Instruction CMOVO_3
        Groups: cmov
        0x804d66b:  cmovo   cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D66B, "f\x0f@\xca")
        cpu.EIP = 0x804D66B
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xFFFF)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D66B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D66C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D66D, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x804D66E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D66F)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0xFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVO_4_symbolic(self):
        """Instruction CMOVO_4
        Groups: cmov
        0x804d66f:  cmovo   cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D66F, "f\x0f@M\x00")
        cpu.EIP = 0x804D66F
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D66F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D670, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D671, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x804D672, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D673, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D674)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVP_1_symbolic(self):
        """Instruction CMOVP_1
        Groups: cmov
        0x804d63c:  cmovp   cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D63C, "f\x0fJ\xca")
        cpu.EIP = 0x804D63C
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D63C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D63D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D63E, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0x804D63F, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D640)
        condition = Operators.AND(condition, cpu.CX == 0xFFFF)
        condition = Operators.AND(condition, cpu.DX == 0xFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVP_2_symbolic(self):
        """Instruction CMOVP_2
        Groups: cmov
        0x804d648:  cmovp   ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D648, "\x0fJM\x00")
        cpu.EIP = 0x804D648
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D648, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D649, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0x804D64A, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D64B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D64C)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVP_3_symbolic(self):
        """Instruction CMOVP_3
        Groups: cmov
        0x804d640:  cmovp   cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D640, "f\x0fJM\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x804D640
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFFFF)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D640, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D641, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D642, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0x804D643, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D644, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D645)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVP_4_symbolic(self):
        """Instruction CMOVP_4
        Groups: cmov
        0x804d645:  cmovp   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D645, "\x0fJ\xca")
        cpu.EIP = 0x804D645
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D645, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D646, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0x804D647, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D648)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVS_1_symbolic(self):
        """Instruction CMOVS_1
        Groups: cmov
        0x8079391:  cmovs   ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079391, "\x0fH\xca")
        cpu.EIP = 0x8079391
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1800080)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079391, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079392, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x8079393, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079394)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x1800080)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVS_2_symbolic(self):
        """Instruction CMOVS_2
        Groups: cmov
        0x8079394:  cmovs   ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079394, "\x0fHM\x00")
        cpu.EIP = 0x8079394
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1800080)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079394, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079395, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x8079396, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8079397, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079398)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x1800080)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVS_3_symbolic(self):
        """Instruction CMOVS_3
        Groups: cmov
        0x807938c:  cmovs   cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x807938C, "f\x0fHM\x00")
        cpu.EIP = 0x807938C
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x80)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807938C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807938D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807938E, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x807938F, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8079390, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079391)
        condition = Operators.AND(condition, cpu.CX == 0x80)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVS_4_symbolic(self):
        """Instruction CMOVS_4
        Groups: cmov
        0x8079388:  cmovs   cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079388, "f\x0fH\xca")
        cpu.EIP = 0x8079388
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x80)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079388, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079389, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807938A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x807938B, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x807938C)
        condition = Operators.AND(condition, cpu.CX == 0x80)
        condition = Operators.AND(condition, cpu.DX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_1_symbolic(self):
        """Instruction CMPSB_1
        Groups:
        0x8056678:  cmpsb   byte ptr [esi], byte ptr es:[edi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x8056678, "\xa6")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E037)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F037)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        cpu.EIP = 0x8056678
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F037)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E037)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8056678, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0x807F037, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0x807E037, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.EIP == 0x8056679)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x807F038)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ESI == 0x807E038)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSD_1_symbolic(self):
        """Instruction CMPSD_1
        Groups:
        0x805667b:  cmpsd   dword ptr [esi], dword ptr es:[edi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E03B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F03B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E03A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E03C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F03A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        mem.write(0x805667B, "\xa7")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F03C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F03D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E03D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        cpu.EIP = 0x805667B
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F03A)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E03A)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807E03B, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x807F03A, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x805667B, 8) == ord("\xa7"))
        condition = Operators.AND(condition, cpu.read_int(0x807E03A, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807F03B, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0x807E03C, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x807E03D, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x807F03D, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x807F03C, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.EIP == 0x805667C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x807F03E)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ESI == 0x807E03E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSW_1_symbolic(self):
        """Instruction CMPSW_1
        Groups:
        0x8056679:  cmpsw   word ptr [esi], word ptr es:[edi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E038)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F039)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD1)
        mem[addr] = value
        mem.write(0x8056679, "f")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F038)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E039)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        mem.write(0x805667A, "\xa7")
        cpu.EIP = 0x8056679
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F038)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E038)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807F038, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0x807E039, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x8056679, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807E038, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x807F039, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805667A, 8) == ord("\xa7"))
        condition = Operators.AND(condition, cpu.EIP == 0x805667B)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x807F03A)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ESI == 0x807E03A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_1_symbolic(self):
        """Instruction CMP_1
        Groups:
        0xf7fe0b35: cmp     edi, 0x23
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0B35, "\x83\xff#")
        cpu.EIP = 0xF7FE0B35
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B35, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B36, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B37, 8) == ord("#"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0B38)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_10_symbolic(self):
        """Instruction CMP_10
        Groups:
        0xf7fe4caa: cmp     word ptr [edi + 0xe], 0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E20000, 0x1000, "rwx")
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAA, "f\x83\x7f\x0e\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E20892)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E20893)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE4CAA
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E20884)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAB, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAC, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAD, 8) == ord("\x0e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E20892, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0xF7E20893, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CAF)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E20884)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_11_symbolic(self):
        """Instruction CMP_11
        Groups:
        0xf7ff41ad: cmp     ecx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41AD, "\x83\xf9\x01")
        cpu.EIP = 0xF7FF41AD
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x14)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41AD, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41AE, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41AF, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF41B0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x14)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_12_symbolic(self):
        """Instruction CMP_12
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6A, ":\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDC4FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDC4FE)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x5F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6B, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC4FE, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6C)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDC4FE)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x5F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_13_symbolic(self):
        """Instruction CMP_13
        Groups:
        0xf7fe71ac: cmp     byte ptr [esi + 4], 8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2A000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2AF60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        mem.write(0xF7FE71AC, "\x80~\x04\x08")
        cpu.EIP = 0xF7FE71AC
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E2AF5C)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2AF60, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AC, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AD, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AE, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71AF, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71B0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E2AF5C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_14_symbolic(self):
        """Instruction CMP_14
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6A, ":\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E28067)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E28067)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x32)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6B, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E28067, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6C)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E28067)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x32)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_15_symbolic(self):
        """Instruction CMP_15
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2C06C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E29F8C)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BB, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BC, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BD)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2C06C)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E29F8C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_16_symbolic(self):
        """Instruction CMP_16
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2C06C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E29F44)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BB, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BC, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BD)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2C06C)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E29F44)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_17_symbolic(self):
        """Instruction CMP_17
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2C06C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E2BAC4)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BB, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BC, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BD)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2C06C)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E2BAC4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_18_symbolic(self):
        """Instruction CMP_18
        Groups:
        0xf7fe4fa7: cmp     dl, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FA7, "\x80\xfa\x02")
        cpu.EIP = 0xF7FE4FA7
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x2)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FA8, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FA9, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FA7, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FAA)
        condition = Operators.AND(condition, cpu.DL == 0x2)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_19_symbolic(self):
        """Instruction CMP_19
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6A, ":\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAC5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDAAC5)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6B, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAC5, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6C)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDAAC5)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.AL == 0x64)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_2_symbolic(self):
        """Instruction CMP_2
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2C06C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E2B12C)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BB, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BC, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BD)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2C06C)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E2B12C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_20_symbolic(self):
        """Instruction CMP_20
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6A, ":\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDC626)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDC626)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x32)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6B, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC626, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6C)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDC626)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x32)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_21_symbolic(self):
        """Instruction CMP_21
        Groups:
        0xf7fe71bb: cmp     ecx, esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BB, "9\xf1")
        cpu.EIP = 0xF7FE71BB
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2C06C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E2B944)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BB, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BC, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71BD)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2C06C)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E2B944)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_3_symbolic(self):
        """Instruction CMP_3
        Groups:
        0xf7ff0681: cmp     cl, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0681, "8\xd1")
        cpu.EIP = 0xF7FF0681
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x62)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x62)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0681, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0682, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0683)
        condition = Operators.AND(condition, cpu.DL == 0x62)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CL == 0x62)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_4_symbolic(self):
        """Instruction CMP_4
        Groups:
        0xf7fe4ea2: cmp     esi, dword ptr [esp + 0xac]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD39C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD39D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD39E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD39F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE4EA2, ";\xb4$\xac\x00\x00\x00")
        cpu.EIP = 0xF7FE4EA2
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2F0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA858)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD39C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD39D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD39E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD39F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EA2, 8) == ord(";"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EA3, 8) == ord("\xb4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EA4, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EA5, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EA8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4EA9)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA858)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_5_symbolic(self):
        """Instruction CMP_5
        Groups:
        0xf7ff3e6a: cmp     al, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E28099)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        mem.write(0xF7FF3E6A, ":\x02")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.EIP = 0xF7FF3E6A
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E28099)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x47)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E28099, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6B, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6C)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E28099)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x47)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_6_symbolic(self):
        """Instruction CMP_6
        Groups:
        0xf7ff0681: cmp     cl, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0681, "8\xd1")
        cpu.EIP = 0xF7FF0681
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x63)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x63)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0681, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0682, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0683)
        condition = Operators.AND(condition, cpu.DL == 0x63)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CL == 0x63)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_7_symbolic(self):
        """Instruction CMP_7
        Groups:
        0xf7fe7f28: cmp     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7F28, "\x83\xf8\x02")
        cpu.EIP = 0xF7FE7F28
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFFDE)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F28, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F29, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F2A, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7F2B)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFDE)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_8_symbolic(self):
        """Instruction CMP_8
        Groups:
        0xf7fe579d: cmp     dl, 3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE579D, "\x80\xfa\x03")
        cpu.EIP = 0xF7FE579D
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE579D, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE579E, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE579F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57A0)
        condition = Operators.AND(condition, cpu.DL == 0x0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_9_symbolic(self):
        """Instruction CMP_9
        Groups:
        0xf7fe0abc: cmp     byte ptr [eax + 4], 8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDC780)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        mem.write(0xF7FE0ABC, "\x80x\x04\x08")
        cpu.EIP = 0xF7FE0ABC
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FDC77C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC780, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0ABC, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0ABD, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0ABE, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0ABF, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0AC0)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FDC77C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CWDE_1_symbolic(self):
        """Instruction CWDE_1
        Groups:
        0x807934a:  cwde
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807934A, "\x98")
        cpu.EIP = 0x807934A
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x137)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807934A, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.EIP == 0x807934B)
        condition = Operators.AND(condition, cpu.EAX == 0x137)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CWDE_2_symbolic(self):
        """Instruction CWDE_2
        Groups:
        0x807028c:  cwde
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807028C, "\x98")
        cpu.EIP = 0x807028C
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xB594ECF8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807028C, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.EIP == 0x807028D)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFECF8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_1_symbolic(self):
        """Instruction DEC_1
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xA0FFC9D2)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE8, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE9)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xA0FFC9D1)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_10_symbolic(self):
        """Instruction DEC_10
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC7CC96D1)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE8, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE9)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xC7CC96D0)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_11_symbolic(self):
        """Instruction DEC_11
        Groups: not64bitmode
        0xf7ff3f1c: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F1C, "J")
        cpu.EIP = 0xF7FF3F1C
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8A9198D3)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3F1C, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3F1D)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x8A9198D2)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_12_symbolic(self):
        """Instruction DEC_12
        Groups: not64bitmode
        0x8059862:  dec     cx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059862, "fI")
        cpu.EIP = 0x8059862
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFF)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059862, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059863, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059864)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CX == 0xFE)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_13_symbolic(self):
        """Instruction DEC_13
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFF99)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE8, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE9)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFF98)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_14_symbolic(self):
        """Instruction DEC_14
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE8, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE9)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_15_symbolic(self):
        """Instruction DEC_15
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x908CD19D)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE8, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE9)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x908CD19C)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_16_symbolic(self):
        """Instruction DEC_16
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x908CD19D)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3ECE, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3ECF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x908CD19C)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_17_symbolic(self):
        """Instruction DEC_17
        Groups: not64bitmode
        0x8059864:  dec     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059864, "I")
        cpu.EIP = 0x8059864
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFE)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059864, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059865)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xFD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_18_symbolic(self):
        """Instruction DEC_18
        Groups: not64bitmode
        0xf7ff3f02: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F02, "J")
        cpu.EIP = 0xF7FF3F02
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x9693D2CA)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3F02, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3F03)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x9693D2C9)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_19_symbolic(self):
        """Instruction DEC_19
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x908CD19D)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3ECE, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3ECF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x908CD19C)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_2_symbolic(self):
        """Instruction DEC_2
        Groups: not64bitmode
        0xf7ff3cea: dec     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CEA, "O")
        cpu.EIP = 0xF7FF3CEA
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CEA, 8) == ord("O"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3CEB)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_20_symbolic(self):
        """Instruction DEC_20
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x9D9693D1)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3ECE, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3ECF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x9D9693D0)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_21_symbolic(self):
        """Instruction DEC_21
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xA0FFC9D2)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE8, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE9)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xA0FFC9D1)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_3_symbolic(self):
        """Instruction DEC_3
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x9A91989B)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3ECE, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3ECF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x9A91989A)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_4_symbolic(self):
        """Instruction DEC_4
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xCC96D09E)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3ECE, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3ECF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xCC96D09D)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_5_symbolic(self):
        """Instruction DEC_5
        Groups: not64bitmode
        0xf7ff3f02: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F02, "J")
        cpu.EIP = 0xF7FF3F02
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8CD19A8C)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3F02, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3F03)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x8CD19A8B)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_6_symbolic(self):
        """Instruction DEC_6
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8A919694)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3ECE, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3ECF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x8A919693)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_7_symbolic(self):
        """Instruction DEC_7
        Groups: not64bitmode
        0xf7ff3ece: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3ECE, "J")
        cpu.EIP = 0xF7FF3ECE
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x9D9693D1)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3ECE, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3ECF)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x9D9693D0)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_8_symbolic(self):
        """Instruction DEC_8
        Groups: not64bitmode
        0xf7ff3cea: dec     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CEA, "O")
        cpu.EIP = 0xF7FF3CEA
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CEA, 8) == ord("O"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3CEB)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_9_symbolic(self):
        """Instruction DEC_9
        Groups: not64bitmode
        0xf7ff3ee8: dec     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE8, "J")
        cpu.EIP = 0xF7FF3EE8
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x93D2C9C8)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE8, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE9)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x93D2C9C7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_EMMS_1_symbolic(self):
        """Instruction EMMS_1
        Groups: mmx
        0x804d5b9:  emms
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5B9, "\x0fw")
        cpu.EIP = 0x804D5B9

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D5B9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5BA, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D5BB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_FNSTCW_1_symbolic(self):
        """Instruction FNSTCW_1
        Groups:
        0x8079485:  fnstcw  word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079485, "\xd9}\x00")
        cpu.EIP = 0x8079485
        cpu.EBP = cs.new_bitvec(32)
        cpu.FPCW = 0x37F
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8079485, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0x8079486, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x8079487, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079488)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_1_symbolic(self):
        """Instruction IMUL_1
        Groups:
        0x8070337:  imul    cx, cx, 0xffff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070337, "fi\xc9\xff\xff")
        cpu.EIP = 0x8070337
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070338, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x8070339, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x807033A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x807033B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8070337, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x807033C)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_10_symbolic(self):
        """Instruction IMUL_10
        Groups:
        0xf7ff16bf: imul    edi, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF16BF, "\x0f\xaf\xf9")
        cpu.EIP = 0xF7FF16BF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x3)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x13)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x2)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF16C0, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF16C1, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF16BF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF16C2)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x30)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x13)
        condition = Operators.AND(condition, cpu.EDX == 0x2)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_11_symbolic(self):
        """Instruction IMUL_11
        Groups:
        0x807037d:  imul    ecx, edx, 0x7fffffff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807037D, "i\xca\xff\xff\xff\x7f")
        cpu.EIP = 0x807037D
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070380, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8070381, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8070382, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807037D, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x807037E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x807037F, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070383)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_12_symbolic(self):
        """Instruction IMUL_12
        Groups:
        0xf7fe6597: imul    edx, edi, 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6597, "k\xd7L")
        cpu.EIP = 0xF7FE6597
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFD51C)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6598, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6599, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6597, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE659A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFD51C)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_13_symbolic(self):
        """Instruction IMUL_13
        Groups:
        0x8070359:  imul    cx, dx, 0x8000
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070359, "fi\xca\x00\x80")
        cpu.EIP = 0x8070359
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070359, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807035A, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x807035B, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x807035C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807035D, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.EIP == 0x807035E)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_14_symbolic(self):
        """Instruction IMUL_14
        Groups:
        0x8070368:  imul    cx, word ptr [ebp], 0x8000
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        mem.write(0x8070368, "fiM\x00\x00\x80")
        cpu.EIP = 0x8070368
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xA00)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0x8070368, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070369, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x807036A, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x807036B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807036C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807036D, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.EIP == 0x807036E)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_15_symbolic(self):
        """Instruction IMUL_15
        Groups:
        0x8070320:  imul    cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070320, "f\x0f\xaf\xca")
        cpu.EIP = 0x8070320
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x8500)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070320, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070321, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070322, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0x8070323, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070324)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_16_symbolic(self):
        """Instruction IMUL_16
        Groups:
        0xf7fe1dc2: imul    eax, dword ptr [ebp + 0x20], 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE1DC2, "kE L")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD0A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD0A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD0AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD0AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE1DC2
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFD040)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD088)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DC2, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DC3, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DC4, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DC5, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD0A8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD0A9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD0AA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD0AB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE1DC6)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD088)
        condition = Operators.AND(condition, cpu.EDX == 0x3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_17_symbolic(self):
        """Instruction IMUL_17
        Groups:
        0x807032d:  imul    cx, cx, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807032D, "fi\xc9\xff\x00")
        cpu.EIP = 0x807032D
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070330, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8070331, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807032D, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807032E, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x807032F, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070332)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_18_symbolic(self):
        """Instruction IMUL_18
        Groups:
        0x8070316:  imul    word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        mem.write(0x8070316, "f\xf7m\x00")
        cpu.EIP = 0x8070316
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x7B000000)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFE1E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0x8070316, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070317, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x8070318, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0x8070319, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807031A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x7B000000)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFF0000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_19_symbolic(self):
        """Instruction IMUL_19
        Groups:
        0x807030c:  imul    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807030C, "\xf6\xe9")
        cpu.EIP = 0x807030C
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFF0000)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807030C, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x807030D, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0x807030E)
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFF0000)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_2_symbolic(self):
        """Instruction IMUL_2
        Groups:
        0x807030e:  imul    cx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807030E, "f\xf7\xe9")
        cpu.EIP = 0x807030E
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFF0000)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x8500)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070310, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0x807030E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807030F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070311)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFF0000)
        condition = Operators.AND(condition, cpu.CX == 0x8500)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFF0000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_20_symbolic(self):
        """Instruction IMUL_20
        Groups:
        0x8070313:  imul    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8070313, "\xf6m\x00")
        cpu.EIP = 0x8070313
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x7B000000)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFE1E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8070313, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x8070314, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0x8070315, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070316)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x7B000000)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFE1E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_21_symbolic(self):
        """Instruction IMUL_21
        Groups:
        0xf7fed3c3: imul    eax, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED3C3, "\x0f\xaf\xc7")
        cpu.EIP = 0xF7FED3C3
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x40)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1C)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xB)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FED3C3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED3C4, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED3C5, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED3C6)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x40)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x700)
        condition = Operators.AND(condition, cpu.EDX == 0xB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_3_symbolic(self):
        """Instruction IMUL_3
        Groups:
        0x807031d:  imul    dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x807031D, "\xf7m\x00")
        cpu.EIP = 0x807031D
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xE75AE7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x807031D, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x807031E, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0x807031F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070320)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_4_symbolic(self):
        """Instruction IMUL_4
        Groups:
        0xf7fe6734: imul    eax, dword ptr [esp + 0x58], 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0xF7FE6734, "kD$XL")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCF88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCF89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCF8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCF8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE6734
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFCF30)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FDAA10)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6738, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6734, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6735, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6736, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6737, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCF88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCF89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCF8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCF8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6739)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFCF30)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_5_symbolic(self):
        """Instruction IMUL_5
        Groups:
        0xf7fe65c5: imul    edx, edi, 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE65C5, "k\xd7L")
        cpu.EIP = 0xF7FE65C5
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFDC28)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FFD040)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE65C5, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE65C6, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE65C7, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE65C8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFDC28)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_6_symbolic(self):
        """Instruction IMUL_6
        Groups:
        0xf7fe6597: imul    edx, edi, 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6597, "k\xd7L")
        cpu.EIP = 0xF7FE6597
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFD51C)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6598, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6599, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6597, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE659A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFD51C)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_7_symbolic(self):
        """Instruction IMUL_7
        Groups:
        0xf7eaa033: imul    edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA033, "\xf7\xea")
        cpu.EIP = 0xF7EAA033
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x55555556)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x3)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA033, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA034, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA035)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_8_symbolic(self):
        """Instruction IMUL_8
        Groups:
        0xf7ff16bf: imul    edi, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF16BF, "\x0f\xaf\xf9")
        cpu.EIP = 0xF7FF16BF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x2ED)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2ED)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x100)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF16C0, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF16C1, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF16BF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF16C2)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x2ED)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x2ED)
        condition = Operators.AND(condition, cpu.EDX == 0x100)
        condition = Operators.AND(condition, cpu.ECX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_9_symbolic(self):
        """Instruction IMUL_9
        Groups:
        0x8070343:  imul    ecx, ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070343, "k\xc9\x04")
        cpu.EIP = 0x8070343
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070343, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0x8070344, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8070345, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070346)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_1_symbolic(self):
        """Instruction INC_1
        Groups: not64bitmode
        0x80798f6:  inc     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798F6, "F")
        cpu.EIP = 0x80798F6
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x9)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80798F6, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.EIP == 0x80798F7)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_10_symbolic(self):
        """Instruction INC_10
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDC639)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7FDC63A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_11_symbolic(self):
        """Instruction INC_11
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E280A2)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6F, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E70)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E280A3)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_12_symbolic(self):
        """Instruction INC_12
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2806A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2806B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_13_symbolic(self):
        """Instruction INC_13
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2806A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2806B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_14_symbolic(self):
        """Instruction INC_14
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2809F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E280A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_15_symbolic(self):
        """Instruction INC_15
        Groups: not64bitmode
        0x807b66d:  inc     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B66D, "G")
        cpu.EIP = 0x807B66D
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xD)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B66D, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B66E)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0xE)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_16_symbolic(self):
        """Instruction INC_16
        Groups: not64bitmode
        0xf7e901c4: inc     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901C4, "G")
        cpu.EIP = 0xF7E901C4
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xFFFFFFFF)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E901C4, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E901C5)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_17_symbolic(self):
        """Instruction INC_17
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80481F3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x80481F4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_18_symbolic(self):
        """Instruction INC_18
        Groups: not64bitmode
        0x807adab:  inc     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ADAB, "F")
        cpu.EIP = 0x807ADAB
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ADAB, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ADAC)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_19_symbolic(self):
        """Instruction INC_19
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E2806E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E2806F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_2_symbolic(self):
        """Instruction INC_2
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E28054)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E28055)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_20_symbolic(self):
        """Instruction INC_20
        Groups: not64bitmode
        0x807a42d:  inc     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A42D, "F")
        cpu.EIP = 0x807A42D
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A42D, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A42E)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_21_symbolic(self):
        """Instruction INC_21
        Groups: not64bitmode
        0x8079cb3:  inc     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CB3, "F")
        cpu.EIP = 0x8079CB3
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CB3, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CB4)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_3_symbolic(self):
        """Instruction INC_3
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E28065)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E28066)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_4_symbolic(self):
        """Instruction INC_4
        Groups: not64bitmode
        0x8079f01:  inc     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079F01, "G")
        cpu.EIP = 0x8079F01
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x7)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079F01, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079F02)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_5_symbolic(self):
        """Instruction INC_5
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E28050)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E28051)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_6_symbolic(self):
        """Instruction INC_6
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E28067)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6F, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E70)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E28068)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_7_symbolic(self):
        """Instruction INC_7
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDC613)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6F, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E70)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDC614)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_8_symbolic(self):
        """Instruction INC_8
        Groups: not64bitmode
        0xf7ff3e6e: inc     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6E, "A")
        cpu.EIP = 0xF7FF3E6E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E28062)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6F)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E28063)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_9_symbolic(self):
        """Instruction INC_9
        Groups: not64bitmode
        0xf7ff3e6f: inc     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6F, "B")
        cpu.EIP = 0xF7FF3E6F
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E27290)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6F, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E70)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E27291)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_1_symbolic(self):
        """Instruction JAE_1
        Groups: jump
        0xf7fddb2d: jae     0xf7fddbb3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDB2D, "\x0f\x83\x80\x00\x00\x00")
        cpu.EIP = 0xF7FDDB2D
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB2D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB2E, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB2F, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB30, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB31, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB32, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDDB33)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_10_symbolic(self):
        """Instruction JAE_10
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC4, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC5, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_11_symbolic(self):
        """Instruction JAE_11
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC4, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC5, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_12_symbolic(self):
        """Instruction JAE_12
        Groups: jump
        0xf7fddb2d: jae     0xf7fddbb3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDB2D, "\x0f\x83\x80\x00\x00\x00")
        cpu.EIP = 0xF7FDDB2D
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB2D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB2E, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB2F, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB30, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB31, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB32, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDDB33)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_13_symbolic(self):
        """Instruction JAE_13
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC4, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC5, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_14_symbolic(self):
        """Instruction JAE_14
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC4, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC5, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_15_symbolic(self):
        """Instruction JAE_15
        Groups: jump
        0x807ab94:  jae     0x807ab99
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB94, "s\x03")
        cpu.EIP = 0x807AB94
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB94, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x807AB95, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB96)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_16_symbolic(self):
        """Instruction JAE_16
        Groups: jump
        0xf7fe1fcd: jae     0xf7fe21e8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.write(0xF7FE1FCD, "\x0f\x83\x15\x02\x00\x00")
        cpu.EIP = 0xF7FE1FCD
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1FCD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1FCE, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1FCF, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1FD0, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1FD1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1FD2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE1FD3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_17_symbolic(self):
        """Instruction JAE_17
        Groups: jump
        0xf7e9019c: jae     0xf7e9027c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E9019C, "\x0f\x83\xda\x00\x00\x00")
        cpu.EIP = 0xF7E9019C
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E901A0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901A1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E9019C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E9019D, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E9019E, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E9019F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E901A2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_18_symbolic(self):
        """Instruction JAE_18
        Groups: jump
        0xf7ff4648: jae     0xf7ff464b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4648, "s\x01")
        cpu.EIP = 0xF7FF4648
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4648, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4649, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF464A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_19_symbolic(self):
        """Instruction JAE_19
        Groups: jump
        0xf7eaa0c6: jae     0xf7eaa0e4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0C6, "s\x1c")
        cpu.EIP = 0xF7EAA0C6
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0C6, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0C7, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0C8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_2_symbolic(self):
        """Instruction JAE_2
        Groups: jump
        0xf7eaa0c6: jae     0xf7eaa0e4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0C6, "s\x1c")
        cpu.EIP = 0xF7EAA0C6
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0C6, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0C7, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0C8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_20_symbolic(self):
        """Instruction JAE_20
        Groups: jump
        0xf7eaa0c6: jae     0xf7eaa0e4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0C6, "s\x1c")
        cpu.EIP = 0xF7EAA0C6
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0C6, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0C7, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0C8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_21_symbolic(self):
        """Instruction JAE_21
        Groups: jump
        0xf7ff3d5f: jae     0xf7ff3e32
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3D5F, "\x0f\x83\xcd\x00\x00\x00")
        cpu.EIP = 0xF7FF3D5F
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3D60, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3D61, 8) == ord("\xcd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3D62, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3D63, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3D64, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3D5F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3D65)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_3_symbolic(self):
        """Instruction JAE_3
        Groups: jump
        0x807b4c9:  jae     0x807b4ce
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B4C9, "s\x03")
        cpu.EIP = 0x807B4C9
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B4C9, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x807B4CA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B4CE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_4_symbolic(self):
        """Instruction JAE_4
        Groups: jump
        0xf7ff15a0: jae     0xf7ff15aa
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A0, "s\x08")
        cpu.EIP = 0xF7FF15A0
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A0, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A1, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF15A2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_5_symbolic(self):
        """Instruction JAE_5
        Groups: jump
        0xf7fe4cc3: jae     0xf7fe4d78
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CC3, "\x0f\x83\xaf\x00\x00\x00")
        cpu.EIP = 0xF7FE4CC3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC4, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC5, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CC8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CC9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_6_symbolic(self):
        """Instruction JAE_6
        Groups: jump
        0x807abb8:  jae     0x807abbd
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ABB8, "s\x03")
        cpu.EIP = 0x807ABB8
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ABB8, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x807ABB9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ABBA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_7_symbolic(self):
        """Instruction JAE_7
        Groups: jump
        0x807a4b3:  jae     0x807a4b8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A4B3, "s\x03")
        cpu.EIP = 0x807A4B3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A4B3, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x807A4B4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A4B8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_8_symbolic(self):
        """Instruction JAE_8
        Groups: jump
        0xf7ff4543: jae     0xf7ff4546
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4543, "s\x01")
        cpu.EIP = 0xF7FF4543
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4543, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4544, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4545)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_9_symbolic(self):
        """Instruction JAE_9
        Groups: jump
        0xf7e901d1: jae     0xf7e90279
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901D1, "\x0f\x83\xa2\x00\x00\x00")
        cpu.EIP = 0xF7E901D1
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D2, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D3, 8) == ord("\xa2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E901D7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_1_symbolic(self):
        """Instruction JA_1
        Groups: jump
        0xf7ff062a: ja      0xf7ff06a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF062A, "w|")
        cpu.EIP = 0xF7FF062A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF062A, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF062B, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_10_symbolic(self):
        """Instruction JA_10
        Groups: jump
        0xf7fe4f87: ja      0xf7fe4e88
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F87, "\x0f\x87\xfb\xfe\xff\xff")
        cpu.EIP = 0xF7FE4F87
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F87, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F88, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F89, 8) == ord("\xfb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F8A, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F8B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F8C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E88)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_11_symbolic(self):
        """Instruction JA_11
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_12_symbolic(self):
        """Instruction JA_12
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_13_symbolic(self):
        """Instruction JA_13
        Groups: jump
        0xf7fe735a: ja      0xf7fe71f0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE735A, "\x0f\x87\x90\xfe\xff\xff")
        cpu.EIP = 0xF7FE735A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE735A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE735B, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE735C, 8) == ord("\x90"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE735D, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE735E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE735F, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_14_symbolic(self):
        """Instruction JA_14
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_15_symbolic(self):
        """Instruction JA_15
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_16_symbolic(self):
        """Instruction JA_16
        Groups: jump
        0xf7fe4f87: ja      0xf7fe4e88
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F87, "\x0f\x87\xfb\xfe\xff\xff")
        cpu.EIP = 0xF7FE4F87
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F87, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F88, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F89, 8) == ord("\xfb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F8A, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F8B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F8C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E88)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_17_symbolic(self):
        """Instruction JA_17
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_18_symbolic(self):
        """Instruction JA_18
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_19_symbolic(self):
        """Instruction JA_19
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_2_symbolic(self):
        """Instruction JA_2
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_20_symbolic(self):
        """Instruction JA_20
        Groups: jump
        0xf7fe732f: ja      0xf7fe74b0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE732F, "\x0f\x87{\x01\x00\x00")
        cpu.EIP = 0xF7FE732F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE732F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7330, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7331, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7332, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7333, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7334, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7335)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_21_symbolic(self):
        """Instruction JA_21
        Groups: jump
        0xf7fe732f: ja      0xf7fe74b0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE732F, "\x0f\x87{\x01\x00\x00")
        cpu.EIP = 0xF7FE732F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE732F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7330, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7331, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7332, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7333, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7334, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7335)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_3_symbolic(self):
        """Instruction JA_3
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_4_symbolic(self):
        """Instruction JA_4
        Groups: jump
        0xf7fe6dd7: ja      0xf7fe6da8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6DD7, "w\xcf")
        cpu.EIP = 0xF7FE6DD7
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6DD8, 8) == ord("\xcf"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6DD7, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6DD9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_5_symbolic(self):
        """Instruction JA_5
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_6_symbolic(self):
        """Instruction JA_6
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_7_symbolic(self):
        """Instruction JA_7
        Groups: jump
        0x8079dd2:  ja      0x8079dd7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079DD2, "w\x03")
        cpu.EIP = 0x8079DD2
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079DD2, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0x8079DD3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079DD4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_8_symbolic(self):
        """Instruction JA_8
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_9_symbolic(self):
        """Instruction JA_9
        Groups: jump
        0xf7fe71bd: ja      0xf7fe71a8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71BD, "w\xe9")
        cpu.EIP = 0xF7FE71BD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BD, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71BE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_1_symbolic(self):
        """Instruction JBE_1
        Groups: jump
        0xf7ff0a21: jbe     0xf7ff0cb3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0A21, "\x0f\x86\x8c\x02\x00\x00")
        cpu.EIP = 0xF7FF0A21
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A21, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A22, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A23, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A24, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A25, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0A26, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0A27)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_10_symbolic(self):
        """Instruction JBE_10
        Groups: jump
        0xf7fddcb8: jbe     0xf7fddca9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDCB8, "v\xef")
        cpu.EIP = 0xF7FDDCB8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDCB8, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDCB9, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDDCA9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_11_symbolic(self):
        """Instruction JBE_11
        Groups: jump
        0xf7fe07fc: jbe     0xf7fe07e9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE07FC, "v\xeb")
        cpu.EIP = 0xF7FE07FC
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE07FC, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE07FD, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE07FE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_12_symbolic(self):
        """Instruction JBE_12
        Groups: jump
        0xf7fe26e0: jbe     0xf7fe26b8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26E0, "v\xd6")
        cpu.EIP = 0xF7FE26E0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26E0, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26E1, 8) == ord("\xd6"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE26B8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_13_symbolic(self):
        """Instruction JBE_13
        Groups: jump
        0xf7fddcc1: jbe     0xf7fddca0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDCC1, "v\xdd")
        cpu.EIP = 0xF7FDDCC1
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDCC1, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDCC2, 8) == ord("\xdd"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDDCC3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_14_symbolic(self):
        """Instruction JBE_14
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067B, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067C, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF067D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_15_symbolic(self):
        """Instruction JBE_15
        Groups: jump
        0x8079c05:  jbe     0x8079c0a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C05, "v\x03")
        cpu.EIP = 0x8079C05
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C05, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C06, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C0A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_16_symbolic(self):
        """Instruction JBE_16
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067B, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067C, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF067D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_17_symbolic(self):
        """Instruction JBE_17
        Groups: jump
        0xf7fe07fc: jbe     0xf7fe07e9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE07FC, "v\xeb")
        cpu.EIP = 0xF7FE07FC
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE07FC, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE07FD, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE07E9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_18_symbolic(self):
        """Instruction JBE_18
        Groups: jump
        0x807b67a:  jbe     0x807b67f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B67A, "v\x03")
        cpu.EIP = 0x807B67A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B67A, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0x807B67B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B67F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_19_symbolic(self):
        """Instruction JBE_19
        Groups: jump
        0x8079b90:  jbe     0x8079b95
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079B90, "v\x03")
        cpu.EIP = 0x8079B90
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079B90, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0x8079B91, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079B95)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_2_symbolic(self):
        """Instruction JBE_2
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067B, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067C, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF067D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_20_symbolic(self):
        """Instruction JBE_20
        Groups: jump
        0xf7fe7427: jbe     0xf7fe7fe5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7427, "\x0f\x86\xb8\x0b\x00\x00")
        cpu.EIP = 0xF7FE7427
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7427, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7428, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7429, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE742A, 8) == ord("\x0b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE742B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE742C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE742D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_21_symbolic(self):
        """Instruction JBE_21
        Groups: jump
        0xf7fddf42: jbe     0xf7fddf30
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDF42, "v\xec")
        cpu.EIP = 0xF7FDDF42
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDF42, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDF43, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDDF44)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_3_symbolic(self):
        """Instruction JBE_3
        Groups: jump
        0xf7fddcb8: jbe     0xf7fddca9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDCB8, "v\xef")
        cpu.EIP = 0xF7FDDCB8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDCB8, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDCB9, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDDCA9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_4_symbolic(self):
        """Instruction JBE_4
        Groups: jump
        0xf7fe080f: jbe     0xf7fe0a08
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE080F, "\x0f\x86\xf3\x01\x00\x00")
        cpu.EIP = 0xF7FE080F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE080F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0810, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0811, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0812, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0813, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0814, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0A08)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_5_symbolic(self):
        """Instruction JBE_5
        Groups: jump
        0xf7fddb3e: jbe     0xf7fddb0c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDDB3E, "v\xcc")
        cpu.EIP = 0xF7FDDB3E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB3E, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDDB3F, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDDB40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_6_symbolic(self):
        """Instruction JBE_6
        Groups: jump
        0xf7fe71dc: jbe     0xf7fe6dd9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71DC, "\x0f\x86\xf7\xfb\xff\xff")
        cpu.EIP = 0xF7FE71DC
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71E0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71E1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71DC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71DD, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71DE, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71DF, 8) == ord("\xfb"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71E2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_7_symbolic(self):
        """Instruction JBE_7
        Groups: jump
        0xf7fe26e0: jbe     0xf7fe26b8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26E0, "v\xd6")
        cpu.EIP = 0xF7FE26E0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26E0, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26E1, 8) == ord("\xd6"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE26B8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_8_symbolic(self):
        """Instruction JBE_8
        Groups: jump
        0xf7fe26d4: jbe     0xf7fe26c1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26D4, "v\xeb")
        cpu.EIP = 0xF7FE26D4
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26D4, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26D5, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE26C1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_9_symbolic(self):
        """Instruction JBE_9
        Groups: jump
        0xf7ff067b: jbe     0xf7ff06b1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF067B, "v4")
        cpu.EIP = 0xF7FF067B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067B, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF067C, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF067D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_1_symbolic(self):
        """Instruction JB_1
        Groups: jump
        0x807a3ec:  jb      0x807a3f1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A3EC, "r\x03")
        cpu.EIP = 0x807A3EC
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A3EC, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A3ED, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A3F1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_10_symbolic(self):
        """Instruction JB_10
        Groups: jump
        0x807a20e:  jb      0x807a213
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A20E, "r\x03")
        cpu.EIP = 0x807A20E
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A20E, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A20F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A213)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_11_symbolic(self):
        """Instruction JB_11
        Groups: jump
        0xf7fe6e0f: jb      0xf7fe6dfc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6E0F, "r\xeb")
        cpu.EIP = 0xF7FE6E0F
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6E10, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6E0F, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6DFC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_12_symbolic(self):
        """Instruction JB_12
        Groups: jump
        0x807a30a:  jb      0x807a30f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A30A, "r\x03")
        cpu.EIP = 0x807A30A
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A30A, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A30B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A30F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_13_symbolic(self):
        """Instruction JB_13
        Groups: jump
        0xf7fe6cef: jb      0xf7fe6cdc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6CEF, "r\xeb")
        cpu.EIP = 0xF7FE6CEF
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6CF0, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6CEF, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6CDC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_14_symbolic(self):
        """Instruction JB_14
        Groups: jump
        0x807a9b5:  jb      0x807a9ba
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A9B5, "r\x03")
        cpu.EIP = 0x807A9B5
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A9B5, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A9B6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A9B7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_15_symbolic(self):
        """Instruction JB_15
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D8, 8) == ord("\xe7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D7, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0C0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_16_symbolic(self):
        """Instruction JB_16
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D8, 8) == ord("\xe7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D7, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0C0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_17_symbolic(self):
        """Instruction JB_17
        Groups: jump
        0x807a91c:  jb      0x807a921
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A91C, "r\x03")
        cpu.EIP = 0x807A91C
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A91C, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A91D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A921)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_18_symbolic(self):
        """Instruction JB_18
        Groups: jump
        0x807a31d:  jb      0x807a322
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A31D, "r\x03")
        cpu.EIP = 0x807A31D
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A31D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A31E, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A31F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_19_symbolic(self):
        """Instruction JB_19
        Groups: jump
        0x807a2b0:  jb      0x807a2b5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A2B0, "r\x03")
        cpu.EIP = 0x807A2B0
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A2B0, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A2B1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A2B5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_2_symbolic(self):
        """Instruction JB_2
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D8, 8) == ord("\xe7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D7, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0C0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_20_symbolic(self):
        """Instruction JB_20
        Groups: jump
        0xf7fe6cef: jb      0xf7fe6cdc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6CEF, "r\xeb")
        cpu.EIP = 0xF7FE6CEF
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6CF0, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6CEF, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6CDC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_21_symbolic(self):
        """Instruction JB_21
        Groups: jump
        0xf7fe6e0f: jb      0xf7fe6dfc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6E0F, "r\xeb")
        cpu.EIP = 0xF7FE6E0F
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6E10, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6E0F, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6DFC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_3_symbolic(self):
        """Instruction JB_3
        Groups: jump
        0x807a220:  jb      0x807a225
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A220, "r\x03")
        cpu.EIP = 0x807A220
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A220, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A221, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A225)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_4_symbolic(self):
        """Instruction JB_4
        Groups: jump
        0x807a39b:  jb      0x807a3a0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A39B, "r\x03")
        cpu.EIP = 0x807A39B
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A39B, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A39C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A39D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_5_symbolic(self):
        """Instruction JB_5
        Groups: jump
        0xf7fe095a: jb      0xf7fe0966
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE095A, "r\n")
        cpu.EIP = 0xF7FE095A
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE095A, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE095B, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE095C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_6_symbolic(self):
        """Instruction JB_6
        Groups: jump
        0xf7eaa0d7: jb      0xf7eaa0c0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0D7, "r\xe7")
        cpu.EIP = 0xF7EAA0D7
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D8, 8) == ord("\xe7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D7, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0C0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_7_symbolic(self):
        """Instruction JB_7
        Groups: jump
        0x807a3bf:  jb      0x807a3c4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A3BF, "r\x03")
        cpu.EIP = 0x807A3BF
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A3C0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807A3BF, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A3C1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_8_symbolic(self):
        """Instruction JB_8
        Groups: jump
        0xf7fe0acd: jb      0xf7fe0ab8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0ACD, "r\xe9")
        cpu.EIP = 0xF7FE0ACD
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0ACD, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0ACE, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0AB8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_9_symbolic(self):
        """Instruction JB_9
        Groups: jump
        0x807a2b9:  jb      0x807a2be
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A2B9, "r\x03")
        cpu.EIP = 0x807A2B9
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A2B9, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x807A2BA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A2BB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_1_symbolic(self):
        """Instruction JCXZ_1
        Groups: not64bitmode, jump
        0x807b741:  jcxz    0x807b747
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B741, "g\xe3\x03")
        cpu.EIP = 0x807B741
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B741, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B742, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B743, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B744)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_10_symbolic(self):
        """Instruction JCXZ_10
        Groups: not64bitmode, jump
        0x807b7eb:  jcxz    0x807b7f1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7EB, "g\xe3\x03")
        cpu.EIP = 0x807B7EB
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B7EB, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7EC, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7ED, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B7EE)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_11_symbolic(self):
        """Instruction JCXZ_11
        Groups: not64bitmode, jump
        0x807b7d7:  jcxz    0x807b7dd
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7D7, "g\xe3\x03")
        cpu.EIP = 0x807B7D7
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B7D8, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7D9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7D7, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B7DA)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_12_symbolic(self):
        """Instruction JCXZ_12
        Groups: not64bitmode, jump
        0x807b723:  jcxz    0x807b729
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B723, "g\xe3\x03")
        cpu.EIP = 0x807B723
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B723, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B724, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B725, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B726)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_13_symbolic(self):
        """Instruction JCXZ_13
        Groups: not64bitmode, jump
        0x807b787:  jcxz    0x807b78d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B787, "g\xe3\x03")
        cpu.EIP = 0x807B787
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B788, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B789, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B787, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B78A)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_14_symbolic(self):
        """Instruction JCXZ_14
        Groups: not64bitmode, jump
        0x807b737:  jcxz    0x807b73d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B737, "g\xe3\x03")
        cpu.EIP = 0x807B737
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B738, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B739, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B737, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B73A)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_15_symbolic(self):
        """Instruction JCXZ_15
        Groups: not64bitmode, jump
        0x807b6fb:  jcxz    0x807b701
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B6FB, "g\xe3\x03")
        cpu.EIP = 0x807B6FB
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B6FB, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B6FC, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B6FD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B6FE)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_16_symbolic(self):
        """Instruction JCXZ_16
        Groups: not64bitmode, jump
        0x807b7f5:  jcxz    0x807b7fb
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7F5, "g\xe3\x03")
        cpu.EIP = 0x807B7F5
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B7F5, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7F6, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7F7, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B7F8)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_17_symbolic(self):
        """Instruction JCXZ_17
        Groups: not64bitmode, jump
        0x807b7af:  jcxz    0x807b7b5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7AF, "g\xe3\x03")
        cpu.EIP = 0x807B7AF
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B7B0, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7B1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7AF, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B7B2)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_18_symbolic(self):
        """Instruction JCXZ_18
        Groups: not64bitmode, jump
        0x807b755:  jcxz    0x807b75b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B755, "g\xe3\x03")
        cpu.EIP = 0x807B755
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B755, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B756, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B757, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B758)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_19_symbolic(self):
        """Instruction JCXZ_19
        Groups: not64bitmode, jump
        0x807b7e1:  jcxz    0x807b7e7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7E1, "g\xe3\x03")
        cpu.EIP = 0x807B7E1
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B7E1, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7E2, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7E3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B7E4)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_2_symbolic(self):
        """Instruction JCXZ_2
        Groups: not64bitmode, jump
        0x807b705:  jcxz    0x807b70b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B705, "g\xe3\x03")
        cpu.EIP = 0x807B705
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B705, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B706, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B707, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B708)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_20_symbolic(self):
        """Instruction JCXZ_20
        Groups: not64bitmode, jump
        0x807b769:  jcxz    0x807b76f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B769, "g\xe3\x03")
        cpu.EIP = 0x807B769
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B769, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B76A, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B76B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B76C)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_21_symbolic(self):
        """Instruction JCXZ_21
        Groups: not64bitmode, jump
        0x807b70f:  jcxz    0x807b715
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B70F, "g\xe3\x03")
        cpu.EIP = 0x807B70F
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B710, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B711, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B70F, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B712)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_3_symbolic(self):
        """Instruction JCXZ_3
        Groups: not64bitmode, jump
        0x807b6f1:  jcxz    0x807b6f7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B6F1, "g\xe3\x03")
        cpu.EIP = 0x807B6F1
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B6F1, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B6F2, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B6F3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B6F4)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_4_symbolic(self):
        """Instruction JCXZ_4
        Groups: not64bitmode, jump
        0x807b7c3:  jcxz    0x807b7c9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7C3, "g\xe3\x03")
        cpu.EIP = 0x807B7C3
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B7C3, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7C4, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7C5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B7C6)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_5_symbolic(self):
        """Instruction JCXZ_5
        Groups: not64bitmode, jump
        0x807b809:  jcxz    0x807b80f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B809, "g\xe3\x03")
        cpu.EIP = 0x807B809
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B809, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B80A, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B80B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B80C)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_6_symbolic(self):
        """Instruction JCXZ_6
        Groups: not64bitmode, jump
        0x807b81d:  jcxz    0x807b823
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B81D, "g\xe3\x03")
        cpu.EIP = 0x807B81D
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B81D, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B81E, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B81F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B820)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_7_symbolic(self):
        """Instruction JCXZ_7
        Groups: not64bitmode, jump
        0x807b813:  jcxz    0x807b819
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B813, "g\xe3\x03")
        cpu.EIP = 0x807B813
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B813, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B814, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B815, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B816)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_8_symbolic(self):
        """Instruction JCXZ_8
        Groups: not64bitmode, jump
        0x807b74b:  jcxz    0x807b751
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B74B, "g\xe3\x03")
        cpu.EIP = 0x807B74B
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B74B, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x807B74C, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B74D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B74E)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JCXZ_9_symbolic(self):
        """Instruction JCXZ_9
        Groups: not64bitmode, jump
        0x807b7ff:  jcxz    0x807b805
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B7FF, "g\xe3\x03")
        cpu.EIP = 0x807B7FF
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x50A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B800, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807B801, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B7FF, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B802)
        condition = Operators.AND(condition, cpu.CX == 0x50A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_1_symbolic(self):
        """Instruction JECXZ_1
        Groups: not64bitmode, jump
        0x807aafa:  jecxz   0x807aaff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAFA, "\xe3\x03")
        cpu.EIP = 0x807AAFA
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AAFA, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AAFB, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AAFC)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_10_symbolic(self):
        """Instruction JECXZ_10
        Groups: not64bitmode, jump
        0x807aa85:  jecxz   0x807aa8a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA85, "\xe3\x03")
        cpu.EIP = 0x807AA85
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA85, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA86, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA87)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_11_symbolic(self):
        """Instruction JECXZ_11
        Groups: not64bitmode, jump
        0x807aabb:  jecxz   0x807aac0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AABB, "\xe3\x03")
        cpu.EIP = 0x807AABB
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AABB, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AABC, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AABD)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_12_symbolic(self):
        """Instruction JECXZ_12
        Groups: not64bitmode, jump
        0x807aa61:  jecxz   0x807aa66
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA61, "\xe3\x03")
        cpu.EIP = 0x807AA61
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA61, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA62, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA63)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_13_symbolic(self):
        """Instruction JECXZ_13
        Groups: not64bitmode, jump
        0x807ab15:  jecxz   0x807ab1a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB15, "\xe3\x03")
        cpu.EIP = 0x807AB15
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB15, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AB16, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB17)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_14_symbolic(self):
        """Instruction JECXZ_14
        Groups: not64bitmode, jump
        0x807aa34:  jecxz   0x807aa39
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA34, "\xe3\x03")
        cpu.EIP = 0x807AA34
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA34, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA35, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA36)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_15_symbolic(self):
        """Instruction JECXZ_15
        Groups: not64bitmode, jump
        0x807ab0c:  jecxz   0x807ab11
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB0C, "\xe3\x03")
        cpu.EIP = 0x807AB0C
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB0C, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AB0D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB0E)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_16_symbolic(self):
        """Instruction JECXZ_16
        Groups: not64bitmode, jump
        0xf7ff44ef: jecxz   0xf7ff451d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF44EF, "\xe3,")
        cpu.EIP = 0xF7FF44EF
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x44)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF44F0, 8) == ord(","))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF44EF, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF44F1)
        condition = Operators.AND(condition, cpu.ECX == 0x44)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_17_symbolic(self):
        """Instruction JECXZ_17
        Groups: not64bitmode, jump
        0x807aa7c:  jecxz   0x807aa81
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA7C, "\xe3\x03")
        cpu.EIP = 0x807AA7C
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA7C, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA7D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA7E)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_18_symbolic(self):
        """Instruction JECXZ_18
        Groups: not64bitmode, jump
        0x807aadf:  jecxz   0x807aae4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AADF, "\xe3\x03")
        cpu.EIP = 0x807AADF
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AAE0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807AADF, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AAE1)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_19_symbolic(self):
        """Instruction JECXZ_19
        Groups: not64bitmode, jump
        0x807aae8:  jecxz   0x807aaed
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAE8, "\xe3\x03")
        cpu.EIP = 0x807AAE8
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AAE8, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AAE9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AAEA)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_2_symbolic(self):
        """Instruction JECXZ_2
        Groups: not64bitmode, jump
        0x807aa19:  jecxz   0x807aa1e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA19, "\xe3\x03")
        cpu.EIP = 0x807AA19
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA19, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA1A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA1B)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_20_symbolic(self):
        """Instruction JECXZ_20
        Groups: not64bitmode, jump
        0x807ab1e:  jecxz   0x807ab23
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB1E, "\xe3\x03")
        cpu.EIP = 0x807AB1E
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB1E, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AB1F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB20)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_21_symbolic(self):
        """Instruction JECXZ_21
        Groups: not64bitmode, jump
        0x807aaa9:  jecxz   0x807aaae
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAA9, "\xe3\x03")
        cpu.EIP = 0x807AAA9
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AAA9, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AAAA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AAAB)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_3_symbolic(self):
        """Instruction JECXZ_3
        Groups: not64bitmode, jump
        0x807aa22:  jecxz   0x807aa27
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA22, "\xe3\x03")
        cpu.EIP = 0x807AA22
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA22, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA23, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA24)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_4_symbolic(self):
        """Instruction JECXZ_4
        Groups: not64bitmode, jump
        0x807ab30:  jecxz   0x807ab35
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB30, "\xe3\x03")
        cpu.EIP = 0x807AB30
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB30, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AB31, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB32)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_5_symbolic(self):
        """Instruction JECXZ_5
        Groups: not64bitmode, jump
        0x807aa46:  jecxz   0x807aa4b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA46, "\xe3\x03")
        cpu.EIP = 0x807AA46
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA46, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA47, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA48)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_6_symbolic(self):
        """Instruction JECXZ_6
        Groups: not64bitmode, jump
        0x807aa58:  jecxz   0x807aa5d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA58, "\xe3\x03")
        cpu.EIP = 0x807AA58
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA58, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA59, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA5A)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_7_symbolic(self):
        """Instruction JECXZ_7
        Groups: not64bitmode, jump
        0x807aab2:  jecxz   0x807aab7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAB2, "\xe3\x03")
        cpu.EIP = 0x807AAB2
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AAB2, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AAB3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AAB4)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_8_symbolic(self):
        """Instruction JECXZ_8
        Groups: not64bitmode, jump
        0x807aac4:  jecxz   0x807aac9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AAC4, "\xe3\x03")
        cpu.EIP = 0x807AAC4
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AAC4, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AAC5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AAC6)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JECXZ_9_symbolic(self):
        """Instruction JECXZ_9
        Groups: not64bitmode, jump
        0x807aa2b:  jecxz   0x807aa30
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA2B, "\xe3\x03")
        cpu.EIP = 0x807AA2B
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF1050A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA2B, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x807AA2C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA2D)
        condition = Operators.AND(condition, cpu.ECX == 0xF1050A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_1_symbolic(self):
        """Instruction JE_1
        Groups: jump
        0xf7fe5498: je      0xf7fe4f45
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE5498, "\x0f\x84\xa7\xfa\xff\xff")
        cpu.EIP = 0xF7FE5498
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5498, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5499, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE549A, 8) == ord("\xa7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE549B, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE549C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE549D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE549E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_10_symbolic(self):
        """Instruction JE_10
        Groups: jump
        0xf7fe26cb: je      0xf7fe2459
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE26CB, "\x0f\x84\x88\xfd\xff\xff")
        cpu.EIP = 0xF7FE26CB
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26CB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26CC, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26CD, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26CE, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26CF, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE26D0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE26D1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_11_symbolic(self):
        """Instruction JE_11
        Groups: jump
        0xf7fe57c8: je      0xf7fe6291
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE57C8, "\x0f\x84\xc3\n\x00\x00")
        cpu.EIP = 0xF7FE57C8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57C8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57C9, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57CA, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57CB, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57CD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57CE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_12_symbolic(self):
        """Instruction JE_12
        Groups: jump
        0xf7fe4eed: je      0xf7fe4f80
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4EED, "\x0f\x84\x8d\x00\x00\x00")
        cpu.EIP = 0xF7FE4EED
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EED, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EEE, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EEF, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EF0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EF1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EF2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4EF3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_13_symbolic(self):
        """Instruction JE_13
        Groups: jump
        0xf7fe4f52: je      0xf7fe4f98
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F52, "tD")
        cpu.EIP = 0xF7FE4F52
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F52, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F53, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F54)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_14_symbolic(self):
        """Instruction JE_14
        Groups: jump
        0xf7fe4cfc: je      0xf7fe4dca
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFC, "\x0f\x84\xc8\x00\x00\x00")
        cpu.EIP = 0xF7FE4CFC
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D00, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D01, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFD, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFE, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D02)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_15_symbolic(self):
        """Instruction JE_15
        Groups: jump
        0xf7fe4cfc: je      0xf7fe4dca
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFC, "\x0f\x84\xc8\x00\x00\x00")
        cpu.EIP = 0xF7FE4CFC
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D00, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D01, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFD, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFE, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D02)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_16_symbolic(self):
        """Instruction JE_16
        Groups: jump
        0xf7fe4cf8: je      0xf7fe4d40
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CF8, "tF")
        cpu.EIP = 0xF7FE4CF8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CF8, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CF9, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CFA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_17_symbolic(self):
        """Instruction JE_17
        Groups: jump
        0xf7fe6ee1: je      0xf7fe79f1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6EE1, "\x0f\x84\n\x0b\x00\x00")
        cpu.EIP = 0xF7FE6EE1
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6EE1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6EE2, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6EE3, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6EE4, 8) == ord("\x0b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6EE5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6EE6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6EE7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_18_symbolic(self):
        """Instruction JE_18
        Groups: jump
        0xf7ff3eb4: je      0xf7ff3ec1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EB4, "t\x0b")
        cpu.EIP = 0xF7FF3EB4
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EB4, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EB5, 8) == ord("\x0b"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EB6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_19_symbolic(self):
        """Instruction JE_19
        Groups: jump
        0xf7fe4ead: je      0xf7fe4f80
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4EAD, "\x0f\x84\xcd\x00\x00\x00")
        cpu.EIP = 0xF7FE4EAD
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EAD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EAE, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EAF, 8) == ord("\xcd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4EB3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_2_symbolic(self):
        """Instruction JE_2
        Groups: jump
        0xf7e2eeb5: je      0xf7e2efc8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2EEB5, "\x0f\x84\r\x01\x00\x00")
        cpu.EIP = 0xF7E2EEB5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EEB5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EEB6, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EEB7, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EEB8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EEB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EEBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2EFC8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_20_symbolic(self):
        """Instruction JE_20
        Groups: jump
        0xf7fe4faa: je      0xf7fe50e8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FAA, "\x0f\x848\x01\x00\x00")
        cpu.EIP = 0xF7FE4FAA
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAB, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAC, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAD, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FB0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_21_symbolic(self):
        """Instruction JE_21
        Groups: jump
        0xf7fe4faa: je      0xf7fe50e8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FAA, "\x0f\x848\x01\x00\x00")
        cpu.EIP = 0xF7FE4FAA
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAB, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAC, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAD, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE50E8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_3_symbolic(self):
        """Instruction JE_3
        Groups: jump
        0xf7fe4f0f: je      0xf7fe54fc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F0F, "\x0f\x84\xe7\x05\x00\x00")
        cpu.EIP = 0xF7FE4F0F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F0F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F10, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F11, 8) == ord("\xe7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F12, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F13, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F14, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F15)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_4_symbolic(self):
        """Instruction JE_4
        Groups: jump
        0xf7fe4ca2: je      0xf7fe4db7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CA2, "\x0f\x84\x0f\x01\x00\x00")
        cpu.EIP = 0xF7FE4CA2
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CA2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CA3, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CA4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CA5, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CA8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_5_symbolic(self):
        """Instruction JE_5
        Groups: jump
        0xf7fe8c4b: je      0xf7fe8a46
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.write(0xF7FE8C4B, "\x0f\x84\xf5\xfd\xff\xff")
        cpu.EIP = 0xF7FE8C4B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8C4B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8C4C, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8C4D, 8) == ord("\xf5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8C4E, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8C4F, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8C50, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE8C51)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_6_symbolic(self):
        """Instruction JE_6
        Groups: jump
        0xf7eaa215: je      0xf7eaa222
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA215, "t\x0b")
        cpu.EIP = 0xF7EAA215
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA215, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA216, 8) == ord("\x0b"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA217)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_7_symbolic(self):
        """Instruction JE_7
        Groups: jump
        0xf7fe72b2: je      0xf7fe72c1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72B2, "t\r")
        cpu.EIP = 0xF7FE72B2
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72B2, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72B3, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72B4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_8_symbolic(self):
        """Instruction JE_8
        Groups: jump
        0xf7fe4cf8: je      0xf7fe4d40
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CF8, "tF")
        cpu.EIP = 0xF7FE4CF8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CF8, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CF9, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CFA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_9_symbolic(self):
        """Instruction JE_9
        Groups: jump
        0xf7fe4faa: je      0xf7fe50e8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FAA, "\x0f\x848\x01\x00\x00")
        cpu.EIP = 0xF7FE4FAA
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAB, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAC, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAD, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FB0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_1_symbolic(self):
        """Instruction JGE_1
        Groups: jump
        0x807a7c5:  jge     0x807a7ca
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7C5, "}\x03")
        cpu.EIP = 0x807A7C5
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A7C5, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A7C6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A7CA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_10_symbolic(self):
        """Instruction JGE_10
        Groups: jump
        0x807bc24:  jge     0x807bc29
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC24, "}\x03")
        cpu.EIP = 0x807BC24
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BC24, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BC25, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BC29)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_11_symbolic(self):
        """Instruction JGE_11
        Groups: jump
        0x807a7d7:  jge     0x807a7dc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7D7, "}\x03")
        cpu.EIP = 0x807A7D7
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A7D8, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807A7D7, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A7DC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_12_symbolic(self):
        """Instruction JGE_12
        Groups: jump
        0xf7ff41cc: jge     0xf7ff43e0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41CC, "\x0f\x8d\x0e\x02\x00\x00")
        cpu.EIP = 0xF7FF41CC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CD, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CE, 8) == ord("\x0e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CF, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF41D2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_13_symbolic(self):
        """Instruction JGE_13
        Groups: jump
        0x807bc99:  jge     0x807bc9e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC99, "}\x03")
        cpu.EIP = 0x807BC99
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BC99, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BC9A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BC9B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_14_symbolic(self):
        """Instruction JGE_14
        Groups: jump
        0x807bc75:  jge     0x807bc7a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC75, "}\x03")
        cpu.EIP = 0x807BC75
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BC75, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BC76, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BC77)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_15_symbolic(self):
        """Instruction JGE_15
        Groups: jump
        0x807a828:  jge     0x807a82d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A828, "}\x03")
        cpu.EIP = 0x807A828
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A828, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A829, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A82D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_16_symbolic(self):
        """Instruction JGE_16
        Groups: jump
        0x807a8a6:  jge     0x807a8ab
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A8A6, "}\x03")
        cpu.EIP = 0x807A8A6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A8A6, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A8A7, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A8A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_17_symbolic(self):
        """Instruction JGE_17
        Groups: jump
        0x807a7f2:  jge     0x807a7f7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7F2, "}\x03")
        cpu.EIP = 0x807A7F2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A7F2, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A7F3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A7F7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_18_symbolic(self):
        """Instruction JGE_18
        Groups: jump
        0x807a7ce:  jge     0x807a7d3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7CE, "}\x03")
        cpu.EIP = 0x807A7CE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A7CE, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A7CF, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A7D3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_19_symbolic(self):
        """Instruction JGE_19
        Groups: jump
        0x807bca2:  jge     0x807bca7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BCA2, "}\x03")
        cpu.EIP = 0x807BCA2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BCA2, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BCA3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BCA4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_2_symbolic(self):
        """Instruction JGE_2
        Groups: jump
        0xf7ff41cc: jge     0xf7ff43e0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41CC, "\x0f\x8d\x0e\x02\x00\x00")
        cpu.EIP = 0xF7FF41CC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CD, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CE, 8) == ord("\x0e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41CF, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41D1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF41D2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_20_symbolic(self):
        """Instruction JGE_20
        Groups: jump
        0x807bc87:  jge     0x807bc8c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC87, "}\x03")
        cpu.EIP = 0x807BC87
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BC88, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807BC87, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BC89)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_21_symbolic(self):
        """Instruction JGE_21
        Groups: jump
        0x807bbd3:  jge     0x807bbd8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BBD3, "}\x03")
        cpu.EIP = 0x807BBD3
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BBD3, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BBD4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BBD8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_3_symbolic(self):
        """Instruction JGE_3
        Groups: jump
        0x807bc63:  jge     0x807bc68
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC63, "}\x03")
        cpu.EIP = 0x807BC63
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BC63, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BC64, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BC65)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_4_symbolic(self):
        """Instruction JGE_4
        Groups: jump
        0x807a870:  jge     0x807a875
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A870, "}\x03")
        cpu.EIP = 0x807A870
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A870, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A871, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A872)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_5_symbolic(self):
        """Instruction JGE_5
        Groups: jump
        0x807a843:  jge     0x807a848
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A843, "}\x03")
        cpu.EIP = 0x807A843
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A843, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A844, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A848)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_6_symbolic(self):
        """Instruction JGE_6
        Groups: jump
        0x807bc6c:  jge     0x807bc71
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC6C, "}\x03")
        cpu.EIP = 0x807BC6C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BC6C, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BC6D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BC6E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_7_symbolic(self):
        """Instruction JGE_7
        Groups: jump
        0x807a867:  jge     0x807a86c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A867, "}\x03")
        cpu.EIP = 0x807A867
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A868, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807A867, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A869)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_8_symbolic(self):
        """Instruction JGE_8
        Groups: jump
        0x807a7e9:  jge     0x807a7ee
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7E9, "}\x03")
        cpu.EIP = 0x807A7E9
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A7E9, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807A7EA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A7EE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_9_symbolic(self):
        """Instruction JGE_9
        Groups: jump
        0x807bc48:  jge     0x807bc4d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BC48, "}\x03")
        cpu.EIP = 0x807BC48
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BC48, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x807BC49, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BC4A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_1_symbolic(self):
        """Instruction JG_1
        Groups: jump
        0x807a76a:  jg      0x807a76f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A76A, "\x7f\x03")
        cpu.EIP = 0x807A76A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A76A, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A76B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A76C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_10_symbolic(self):
        """Instruction JG_10
        Groups: jump
        0x807a746:  jg      0x807a74b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A746, "\x7f\x03")
        cpu.EIP = 0x807A746
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A746, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A747, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A748)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_11_symbolic(self):
        """Instruction JG_11
        Groups: jump
        0x8079fc3:  jg      0x8079fc8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FC3, "\x7f\x03")
        cpu.EIP = 0x8079FC3
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079FC3, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079FC4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079FC8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_12_symbolic(self):
        """Instruction JG_12
        Groups: jump
        0x8079fb1:  jg      0x8079fb6
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FB1, "\x7f\x03")
        cpu.EIP = 0x8079FB1
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079FB1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079FB2, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079FB6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_13_symbolic(self):
        """Instruction JG_13
        Groups: jump
        0x8079fd5:  jg      0x8079fda
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FD5, "\x7f\x03")
        cpu.EIP = 0x8079FD5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079FD5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079FD6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079FDA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_14_symbolic(self):
        """Instruction JG_14
        Groups: jump
        0x807a05c:  jg      0x807a061
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A05C, "\x7f\x03")
        cpu.EIP = 0x807A05C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A05C, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A05D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A05E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_15_symbolic(self):
        """Instruction JG_15
        Groups: jump
        0x807a69b:  jg      0x807a6a0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A69B, "\x7f\x03")
        cpu.EIP = 0x807A69B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A69B, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A69C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A6A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_16_symbolic(self):
        """Instruction JG_16
        Groups: jump
        0x807a761:  jg      0x807a766
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A761, "\x7f\x03")
        cpu.EIP = 0x807A761
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A761, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A762, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A763)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_17_symbolic(self):
        """Instruction JG_17
        Groups: jump
        0x807a785:  jg      0x807a78a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A785, "\x7f\x03")
        cpu.EIP = 0x807A785
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A785, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A786, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A787)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_18_symbolic(self):
        """Instruction JG_18
        Groups: jump
        0x807a7a9:  jg      0x807a7ae
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7A9, "\x7f\x03")
        cpu.EIP = 0x807A7A9
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A7A9, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A7AA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A7AB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_19_symbolic(self):
        """Instruction JG_19
        Groups: jump
        0x807a7b2:  jg      0x807a7b7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A7B2, "\x7f\x03")
        cpu.EIP = 0x807A7B2
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A7B2, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A7B3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A7B4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_2_symbolic(self):
        """Instruction JG_2
        Groups: jump
        0x807a707:  jg      0x807a70c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A707, "\x7f\x03")
        cpu.EIP = 0x807A707
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A708, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807A707, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A709)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_20_symbolic(self):
        """Instruction JG_20
        Groups: jump
        0x807a773:  jg      0x807a778
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A773, "\x7f\x03")
        cpu.EIP = 0x807A773
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A773, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A774, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A775)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_21_symbolic(self):
        """Instruction JG_21
        Groups: jump
        0xf7fde27e: jg      0xf7fde9f9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDE000, 0x1000, "rwx")
        mem.write(0xF7FDE27E, "\x0f\x8fu\x07\x00\x00")
        cpu.EIP = 0xF7FDE27E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE280, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE281, 8) == ord("\x07"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE282, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE283, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE27E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE27F, 8) == ord("\x8f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDE9F9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_3_symbolic(self):
        """Instruction JG_3
        Groups: jump
        0x807a78e:  jg      0x807a793
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A78E, "\x7f\x03")
        cpu.EIP = 0x807A78E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A78E, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A78F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A790)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_4_symbolic(self):
        """Instruction JG_4
        Groups: jump
        0x8079f9f:  jg      0x8079fa4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079F9F, "\x7f\x03")
        cpu.EIP = 0x8079F9F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079FA0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8079F9F, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079FA4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_5_symbolic(self):
        """Instruction JG_5
        Groups: jump
        0x807a6c8:  jg      0x807a6cd
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A6C8, "\x7f\x03")
        cpu.EIP = 0x807A6C8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A6C8, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A6C9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A6CD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_6_symbolic(self):
        """Instruction JG_6
        Groups: jump
        0x807a6a4:  jg      0x807a6a9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A6A4, "\x7f\x03")
        cpu.EIP = 0x807A6A4
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A6A4, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A6A5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A6A9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_7_symbolic(self):
        """Instruction JG_7
        Groups: jump
        0xf7e2e773: jg      0xf7e2e83e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E773, "\x0f\x8f\xc5\x00\x00\x00")
        cpu.EIP = 0xF7E2E773
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E773, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E774, 8) == ord("\x8f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E775, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E776, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E777, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E778, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2E83E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_8_symbolic(self):
        """Instruction JG_8
        Groups: jump
        0x8079fa8:  jg      0x8079fad
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079FA8, "\x7f\x03")
        cpu.EIP = 0x8079FA8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079FA8, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079FA9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079FAD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_9_symbolic(self):
        """Instruction JG_9
        Groups: jump
        0x807a6da:  jg      0x807a6df
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A6DA, "\x7f\x03")
        cpu.EIP = 0x807A6DA
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A6DA, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807A6DB, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A6DF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_1_symbolic(self):
        """Instruction JLE_1
        Groups: jump
        0x807b3b1:  jle     0x807b3b6
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B3B1, "~\x03")
        cpu.EIP = 0x807B3B1
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B3B1, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B3B2, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B3B6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_10_symbolic(self):
        """Instruction JLE_10
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_11_symbolic(self):
        """Instruction JLE_11
        Groups: jump
        0x807b936:  jle     0x807b93b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B936, "~\x03")
        cpu.EIP = 0x807B936
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B936, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B937, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B93B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_12_symbolic(self):
        """Instruction JLE_12
        Groups: jump
        0xf7ff0830: jle     0xf7ff07ef
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0830, "~\xbd")
        cpu.EIP = 0xF7FF0830
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0830, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0831, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF07EF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_13_symbolic(self):
        """Instruction JLE_13
        Groups: jump
        0x807b909:  jle     0x807b90e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B909, "~\x03")
        cpu.EIP = 0x807B909
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B909, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B90A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B90E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_14_symbolic(self):
        """Instruction JLE_14
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_15_symbolic(self):
        """Instruction JLE_15
        Groups: jump
        0x807b879:  jle     0x807b87e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B879, "~\x03")
        cpu.EIP = 0x807B879
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B879, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B87A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B87E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_16_symbolic(self):
        """Instruction JLE_16
        Groups: jump
        0x807b8dc:  jle     0x807b8e1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B8DC, "~\x03")
        cpu.EIP = 0x807B8DC
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B8DC, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B8DD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B8E1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_17_symbolic(self):
        """Instruction JLE_17
        Groups: jump
        0x807b867:  jle     0x807b86c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B867, "~\x03")
        cpu.EIP = 0x807B867
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B868, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B867, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B869)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_18_symbolic(self):
        """Instruction JLE_18
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_19_symbolic(self):
        """Instruction JLE_19
        Groups: jump
        0x807b369:  jle     0x807b36e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B369, "~\x03")
        cpu.EIP = 0x807B369
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B369, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B36A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B36B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_2_symbolic(self):
        """Instruction JLE_2
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_20_symbolic(self):
        """Instruction JLE_20
        Groups: jump
        0x807b3f9:  jle     0x807b3fe
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B3F9, "~\x03")
        cpu.EIP = 0x807B3F9
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B3F9, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B3FA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B3FE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_21_symbolic(self):
        """Instruction JLE_21
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_3_symbolic(self):
        """Instruction JLE_3
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_4_symbolic(self):
        """Instruction JLE_4
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_5_symbolic(self):
        """Instruction JLE_5
        Groups: jump
        0x807b8e5:  jle     0x807b8ea
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B8E5, "~\x03")
        cpu.EIP = 0x807B8E5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B8E5, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B8E6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B8EA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_6_symbolic(self):
        """Instruction JLE_6
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_7_symbolic(self):
        """Instruction JLE_7
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_8_symbolic(self):
        """Instruction JLE_8
        Groups: jump
        0x807b3d5:  jle     0x807b3da
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B3D5, "~\x03")
        cpu.EIP = 0x807B3D5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B3D5, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x807B3D6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B3DA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_9_symbolic(self):
        """Instruction JLE_9
        Groups: jump
        0xf7fe577d: jle     0xf7fe5720
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE577D, "~\xa1")
        cpu.EIP = 0xF7FE577D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE577E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_1_symbolic(self):
        """Instruction JL_1
        Groups: jump
        0x8079aa5:  jl      0x8079aaa
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079AA5, "|\x03")
        cpu.EIP = 0x8079AA5
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079AA5, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x8079AA6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079AAA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_10_symbolic(self):
        """Instruction JL_10
        Groups: jump
        0x807aeca:  jl      0x807aecf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AECA, "|\x03")
        cpu.EIP = 0x807AECA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AECA, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AECB, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AECC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_11_symbolic(self):
        """Instruction JL_11
        Groups: jump
        0x807af87:  jl      0x807af8c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF87, "|\x03")
        cpu.EIP = 0x807AF87
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AF88, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807AF87, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AF8C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_12_symbolic(self):
        """Instruction JL_12
        Groups: jump
        0x8079a27:  jl      0x8079a2c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A27, "|\x03")
        cpu.EIP = 0x8079A27
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079A28, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8079A27, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079A29)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_13_symbolic(self):
        """Instruction JL_13
        Groups: jump
        0x8079a81:  jl      0x8079a86
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A81, "|\x03")
        cpu.EIP = 0x8079A81
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079A81, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x8079A82, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079A86)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_14_symbolic(self):
        """Instruction JL_14
        Groups: jump
        0xf7ff41c4: jl      0xf7ff41b9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41C4, "|\xf3")
        cpu.EIP = 0xF7FF41C4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41C4, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41C5, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF41C6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_15_symbolic(self):
        """Instruction JL_15
        Groups: jump
        0x807af09:  jl      0x807af0e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF09, "|\x03")
        cpu.EIP = 0x807AF09
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AF09, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AF0A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AF0B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_16_symbolic(self):
        """Instruction JL_16
        Groups: jump
        0x807aedc:  jl      0x807aee1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEDC, "|\x03")
        cpu.EIP = 0x807AEDC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AEDC, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AEDD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AEDE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_17_symbolic(self):
        """Instruction JL_17
        Groups: jump
        0x8079a5d:  jl      0x8079a62
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A5D, "|\x03")
        cpu.EIP = 0x8079A5D
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079A5D, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x8079A5E, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079A62)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_18_symbolic(self):
        """Instruction JL_18
        Groups: jump
        0x807aee5:  jl      0x807aeea
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEE5, "|\x03")
        cpu.EIP = 0x807AEE5
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AEE5, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AEE6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AEE7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_19_symbolic(self):
        """Instruction JL_19
        Groups: jump
        0x8079adb:  jl      0x8079ae0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079ADB, "|\x03")
        cpu.EIP = 0x8079ADB
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079ADB, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x8079ADC, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079AE0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_2_symbolic(self):
        """Instruction JL_2
        Groups: jump
        0x807aef7:  jl      0x807aefc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEF7, "|\x03")
        cpu.EIP = 0x807AEF7
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AEF8, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807AEF7, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AEF9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_20_symbolic(self):
        """Instruction JL_20
        Groups: jump
        0x807af63:  jl      0x807af68
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF63, "|\x03")
        cpu.EIP = 0x807AF63
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AF63, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AF64, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AF68)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_21_symbolic(self):
        """Instruction JL_21
        Groups: jump
        0x8079a15:  jl      0x8079a1a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A15, "|\x03")
        cpu.EIP = 0x8079A15
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079A15, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x8079A16, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079A17)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_3_symbolic(self):
        """Instruction JL_3
        Groups: jump
        0xf7ff41c4: jl      0xf7ff41b9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF41C4, "|\xf3")
        cpu.EIP = 0xF7FF41C4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41C4, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41C5, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF41C6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_4_symbolic(self):
        """Instruction JL_4
        Groups: jump
        0x807afbd:  jl      0x807afc2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AFBD, "|\x03")
        cpu.EIP = 0x807AFBD
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AFBD, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AFBE, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AFC2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_5_symbolic(self):
        """Instruction JL_5
        Groups: jump
        0x8079ac0:  jl      0x8079ac5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079AC0, "|\x03")
        cpu.EIP = 0x8079AC0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079AC0, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x8079AC1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079AC5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_6_symbolic(self):
        """Instruction JL_6
        Groups: jump
        0x8079a9c:  jl      0x8079aa1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079A9C, "|\x03")
        cpu.EIP = 0x8079A9C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079A9C, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x8079A9D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079AA1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_7_symbolic(self):
        """Instruction JL_7
        Groups: jump
        0x807af75:  jl      0x807af7a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF75, "|\x03")
        cpu.EIP = 0x807AF75
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AF75, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AF76, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AF7A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_8_symbolic(self):
        """Instruction JL_8
        Groups: jump
        0x807af90:  jl      0x807af95
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF90, "|\x03")
        cpu.EIP = 0x807AF90
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AF90, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AF91, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AF95)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_9_symbolic(self):
        """Instruction JL_9
        Groups: jump
        0x807aed3:  jl      0x807aed8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AED3, "|\x03")
        cpu.EIP = 0x807AED3
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AED3, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x807AED4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AED5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_1_symbolic(self):
        """Instruction JMP_1
        Groups: jump
        0xf7fe7445: jmp     0xf7fe7350
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7445, "\xe9\x06\xff\xff\xff")
        cpu.EIP = 0xF7FE7445

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7448, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7449, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7445, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7446, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7447, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7350)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_10_symbolic(self):
        """Instruction JMP_10
        Groups: jump
        0xf7ff0fa7: jmp     0xf7ff0e58
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0FA7, "\xe9\xac\xfe\xff\xff")
        cpu.EIP = 0xF7FF0FA7

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0FA8, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0FA9, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0FAA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0FAB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0FA7, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0E58)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_11_symbolic(self):
        """Instruction JMP_11
        Groups: jump
        0x807ad1b:  jmp     0x807ad1e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD1B, "\xeb\x01")
        cpu.EIP = 0x807AD1B

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD1B, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD1C, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD1E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_12_symbolic(self):
        """Instruction JMP_12
        Groups: jump
        0x8079c2d:  jmp     0x8079c30
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C2D, "\xeb\x01")
        cpu.EIP = 0x8079C2D

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C2D, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C2E, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_13_symbolic(self):
        """Instruction JMP_13
        Groups: jump
        0xf7fe571c: jmp     0xf7fe5731
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE571C, "\xeb\x13")
        cpu.EIP = 0xF7FE571C

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE571C, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE571D, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5731)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_14_symbolic(self):
        """Instruction JMP_14
        Groups: not64bitmode, jump
        0xf7ff0e4a: jmp     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0E4A, "\xff\xe2")
        cpu.EIP = 0xF7FF0E4A
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FF1018)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E4A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E4B, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1018)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FF1018)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_15_symbolic(self):
        """Instruction JMP_15
        Groups: not64bitmode, jump
        0xf7fdc820: jmp     dword ptr [ebx + 0x14]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FDC820, "\xff\xa3\x14\x00\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD016)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD017)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD014)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFD015)
        value = cs.new_bitvec(8)
        cs.add(value == 0x16)
        mem[addr] = value
        cpu.EIP = 0xF7FDC820
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC820, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC821, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC822, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC823, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC824, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC825, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD016, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD017, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD014, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFD015, 8) == ord("\x16"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF16A0)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_16_symbolic(self):
        """Instruction JMP_16
        Groups: jump
        0x8079830:  jmp     0x8079833
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079830, "\xeb\x01")
        cpu.EIP = 0x8079830

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079830, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x8079831, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079833)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_17_symbolic(self):
        """Instruction JMP_17
        Groups: jump
        0xf7fe74a5: jmp     0xf7fe7350
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE74A5, "\xe9\xa6\xfe\xff\xff")
        cpu.EIP = 0xF7FE74A5

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE74A8, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE74A9, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE74A5, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE74A6, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE74A7, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7350)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_18_symbolic(self):
        """Instruction JMP_18
        Groups: jump
        0xf7fe555e: jmp     0xf7fe4fa0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE555E, "\xe9=\xfa\xff\xff")
        cpu.EIP = 0xF7FE555E

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5560, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5561, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5562, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE555E, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE555F, 8) == ord("="))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FA0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_19_symbolic(self):
        """Instruction JMP_19
        Groups: jump
        0xf7fe7445: jmp     0xf7fe7350
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7445, "\xe9\x06\xff\xff\xff")
        cpu.EIP = 0xF7FE7445

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7448, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7449, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7445, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7446, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7447, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7350)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_2_symbolic(self):
        """Instruction JMP_2
        Groups: jump
        0x8079912:  jmp     0x8079915
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079912, "\xeb\x01")
        cpu.EIP = 0x8079912

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079912, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x8079913, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079915)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_20_symbolic(self):
        """Instruction JMP_20
        Groups: jump
        0xf7fe571c: jmp     0xf7fe5731
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE571C, "\xeb\x13")
        cpu.EIP = 0xF7FE571C

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE571C, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE571D, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5731)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_21_symbolic(self):
        """Instruction JMP_21
        Groups: jump
        0x807af15:  jmp     0x807af18
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AF15, "\xeb\x01")
        cpu.EIP = 0x807AF15

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AF15, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x807AF16, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AF18)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_3_symbolic(self):
        """Instruction JMP_3
        Groups: not64bitmode, jump
        0xf7fe733e: jmp     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE733E, "\xff\xe0")
        cpu.EIP = 0xF7FE733E
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FE7440)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE733E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE733F, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7440)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FE7440)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_4_symbolic(self):
        """Instruction JMP_4
        Groups: jump
        0x8079dc3:  jmp     0x8079dc6
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079DC3, "\xeb\x01")
        cpu.EIP = 0x8079DC3

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079DC3, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x8079DC4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079DC6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_5_symbolic(self):
        """Instruction JMP_5
        Groups: jump
        0x807a0b0:  jmp     0x807a0b3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A0B0, "\xeb\x01")
        cpu.EIP = 0x807A0B0

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A0B0, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x807A0B1, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A0B3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_6_symbolic(self):
        """Instruction JMP_6
        Groups: jump
        0x807ab97:  jmp     0x807ab9a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB97, "\xeb\x01")
        cpu.EIP = 0x807AB97

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB98, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x807AB97, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB9A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_7_symbolic(self):
        """Instruction JMP_7
        Groups: not64bitmode, jump
        0xf7fe733e: jmp     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE733E, "\xff\xe0")
        cpu.EIP = 0xF7FE733E
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FE7440)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE733E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE733F, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7440)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FE7440)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_8_symbolic(self):
        """Instruction JMP_8
        Groups: not64bitmode, jump
        0xf7fe733e: jmp     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE733E, "\xff\xe0")
        cpu.EIP = 0xF7FE733E
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FE74A0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE733E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE733F, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE74A0)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FE74A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_9_symbolic(self):
        """Instruction JMP_9
        Groups: jump
        0xf7fe7445: jmp     0xf7fe7350
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7445, "\xe9\x06\xff\xff\xff")
        cpu.EIP = 0xF7FE7445

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7448, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7449, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7445, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7446, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7447, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7350)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_1_symbolic(self):
        """Instruction JNE_1
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B1, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B2, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B3, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71B6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_10_symbolic(self):
        """Instruction JNE_10
        Groups: jump
        0xf7ff4222: jne     0xf7ff4457
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4222, "\x0f\x85/\x02\x00\x00")
        cpu.EIP = 0xF7FF4222
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4222, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4223, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4224, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4225, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4226, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4227, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4228)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_11_symbolic(self):
        """Instruction JNE_11
        Groups: jump
        0xf7fe54f6: jne     0xf7fe555a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54F6, "ub")
        cpu.EIP = 0xF7FE54F6
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F6, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54F7, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE555A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_12_symbolic(self):
        """Instruction JNE_12
        Groups: jump
        0xf7ff3e72: jne     0xf7ff3e68
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E72, "u\xf4")
        cpu.EIP = 0xF7FF3E72
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E72, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E73, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E68)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_13_symbolic(self):
        """Instruction JNE_13
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B1, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B2, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B3, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71B6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_14_symbolic(self):
        """Instruction JNE_14
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B1, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B2, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B3, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71B6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_15_symbolic(self):
        """Instruction JNE_15
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6C, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6D, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_16_symbolic(self):
        """Instruction JNE_16
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B1, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B2, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B3, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71B6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_17_symbolic(self):
        """Instruction JNE_17
        Groups: jump
        0xf7fe56b1: jne     0xf7fe56a0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56B1, "u\xed")
        cpu.EIP = 0xF7FE56B1
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56B1, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56B2, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56B3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_18_symbolic(self):
        """Instruction JNE_18
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6C, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6D, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_19_symbolic(self):
        """Instruction JNE_19
        Groups: jump
        0xf7ff0b7e: jne     0xf7ff0a90
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0B7E, "\x0f\x85\x0c\xff\xff\xff")
        cpu.EIP = 0xF7FF0B7E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B80, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B81, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B82, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B83, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B7E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B7F, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0B84)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_2_symbolic(self):
        """Instruction JNE_2
        Groups: jump
        0xf7ff3e72: jne     0xf7ff3e68
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E72, "u\xf4")
        cpu.EIP = 0xF7FF3E72
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E72, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E73, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E68)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_20_symbolic(self):
        """Instruction JNE_20
        Groups: jump
        0xf7fe4f3f: jne     0xf7fe5483
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F3F, "\x0f\x85>\x05\x00\x00")
        cpu.EIP = 0xF7FE4F3F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F40, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F41, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F42, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F43, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F44, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F3F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F45)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_21_symbolic(self):
        """Instruction JNE_21
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6C, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6D, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_3_symbolic(self):
        """Instruction JNE_3
        Groups: jump
        0xf7fe8ab3: jne     0xf7fe9164
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.write(0xF7FE8AB3, "\x0f\x85\xab\x06\x00\x00")
        cpu.EIP = 0xF7FE8AB3
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AB3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AB4, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AB5, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AB6, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AB8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9164)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_4_symbolic(self):
        """Instruction JNE_4
        Groups: jump
        0xf7ff3e6c: jne     0xf7ff3e77
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E6C, "u\t")
        cpu.EIP = 0xF7FF3E6C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6C, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E6D, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_5_symbolic(self):
        """Instruction JNE_5
        Groups: jump
        0xf7fe1e7c: jne     0xf7fe2a9e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.write(0xF7FE1E7C, "\x0f\x85\x1c\x0c\x00\x00")
        cpu.EIP = 0xF7FE1E7C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1E80, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1E81, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1E7C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1E7D, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1E7E, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1E7F, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE1E82)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_6_symbolic(self):
        """Instruction JNE_6
        Groups: jump
        0xf7fe7275: jne     0xf7fe7288
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7275, "u\x11")
        cpu.EIP = 0xF7FE7275
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7275, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7276, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7277)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_7_symbolic(self):
        """Instruction JNE_7
        Groups: jump
        0xf7fec1e0: jne     0xf7fec168
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC1E0, "u\x86")
        cpu.EIP = 0xF7FEC1E0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1E0, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC1E1, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC1E2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_8_symbolic(self):
        """Instruction JNE_8
        Groups: jump
        0xf7fe71b0: jne     0xf7fe7eb4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71B0, "\x0f\x85\xfe\x0c\x00\x00")
        cpu.EIP = 0xF7FE71B0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B1, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B2, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B3, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71B5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71B6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_9_symbolic(self):
        """Instruction JNE_9
        Groups: jump
        0xf7ff092d: jne     0xf7ff099c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF092D, "um")
        cpu.EIP = 0xF7FF092D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF092D, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF092E, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF092F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_1_symbolic(self):
        """Instruction JNO_1
        Groups: jump
        0x807bb6f:  jno     0x807bb74
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB6F, "q\x03")
        cpu.EIP = 0x807BB6F
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB70, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB6F, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB74)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_10_symbolic(self):
        """Instruction JNO_10
        Groups: jump
        0x807baa9:  jno     0x807baae
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BAA9, "q\x03")
        cpu.EIP = 0x807BAA9
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BAA9, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BAAA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BAAE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_11_symbolic(self):
        """Instruction JNO_11
        Groups: jump
        0x807bb9c:  jno     0x807bba1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB9C, "q\x03")
        cpu.EIP = 0x807BB9C
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB9C, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB9D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BBA1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_12_symbolic(self):
        """Instruction JNO_12
        Groups: jump
        0x807bb8a:  jno     0x807bb8f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB8A, "q\x03")
        cpu.EIP = 0x807BB8A
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB8A, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB8B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB8F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_13_symbolic(self):
        """Instruction JNO_13
        Groups: jump
        0x807bb5d:  jno     0x807bb62
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB5D, "q\x03")
        cpu.EIP = 0x807BB5D
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB5D, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB5E, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB62)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_14_symbolic(self):
        """Instruction JNO_14
        Groups: jump
        0x807baa0:  jno     0x807baa5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BAA0, "q\x03")
        cpu.EIP = 0x807BAA0
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BAA0, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BAA1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BAA5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_15_symbolic(self):
        """Instruction JNO_15
        Groups: jump
        0x807bb78:  jno     0x807bb7d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB78, "q\x03")
        cpu.EIP = 0x807BB78
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB78, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB79, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB7D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_16_symbolic(self):
        """Instruction JNO_16
        Groups: jump
        0x807bb15:  jno     0x807bb1a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB15, "q\x03")
        cpu.EIP = 0x807BB15
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB15, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB16, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB1A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_17_symbolic(self):
        """Instruction JNO_17
        Groups: jump
        0x807bb66:  jno     0x807bb6b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB66, "q\x03")
        cpu.EIP = 0x807BB66
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB66, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB67, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB6B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_18_symbolic(self):
        """Instruction JNO_18
        Groups: jump
        0x807bb54:  jno     0x807bb59
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB54, "q\x03")
        cpu.EIP = 0x807BB54
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB54, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB55, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB59)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_19_symbolic(self):
        """Instruction JNO_19
        Groups: jump
        0x807bb03:  jno     0x807bb08
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB03, "q\x03")
        cpu.EIP = 0x807BB03
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB03, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB04, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB08)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_2_symbolic(self):
        """Instruction JNO_2
        Groups: jump
        0x807ba85:  jno     0x807ba8a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BA85, "q\x03")
        cpu.EIP = 0x807BA85
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BA85, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BA86, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BA8A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_20_symbolic(self):
        """Instruction JNO_20
        Groups: jump
        0x807bacd:  jno     0x807bad2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BACD, "q\x03")
        cpu.EIP = 0x807BACD
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BACD, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BACE, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BAD2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_21_symbolic(self):
        """Instruction JNO_21
        Groups: jump
        0x807bb0c:  jno     0x807bb11
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB0C, "q\x03")
        cpu.EIP = 0x807BB0C
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB0C, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB0D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_3_symbolic(self):
        """Instruction JNO_3
        Groups: jump
        0x807bb39:  jno     0x807bb3e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB39, "q\x03")
        cpu.EIP = 0x807BB39
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB39, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB3A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB3E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_4_symbolic(self):
        """Instruction JNO_4
        Groups: jump
        0x807bb30:  jno     0x807bb35
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB30, "q\x03")
        cpu.EIP = 0x807BB30
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB30, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB31, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB35)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_5_symbolic(self):
        """Instruction JNO_5
        Groups: jump
        0x807bb4b:  jno     0x807bb50
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB4B, "q\x03")
        cpu.EIP = 0x807BB4B
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB4B, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB4C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB50)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_6_symbolic(self):
        """Instruction JNO_6
        Groups: jump
        0x807badf:  jno     0x807bae4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BADF, "q\x03")
        cpu.EIP = 0x807BADF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BAE0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807BADF, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BAE4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_7_symbolic(self):
        """Instruction JNO_7
        Groups: jump
        0x807babb:  jno     0x807bac0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BABB, "q\x03")
        cpu.EIP = 0x807BABB
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BABB, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BABC, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BAC0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_8_symbolic(self):
        """Instruction JNO_8
        Groups: jump
        0x807bb81:  jno     0x807bb86
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB81, "q\x03")
        cpu.EIP = 0x807BB81
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB81, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB82, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB86)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNO_9_symbolic(self):
        """Instruction JNO_9
        Groups: jump
        0x807bb1e:  jno     0x807bb23
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB1E, "q\x03")
        cpu.EIP = 0x807BB1E
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB1E, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x807BB1F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB23)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_1_symbolic(self):
        """Instruction JNP_1
        Groups: jump
        0x807b006:  jnp     0x807b00b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B006, "{\x03")
        cpu.EIP = 0x807B006
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B006, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B007, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B008)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_10_symbolic(self):
        """Instruction JNP_10
        Groups: jump
        0x807aea5:  jnp     0x807aeaa
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEA5, "{\x03")
        cpu.EIP = 0x807AEA5
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AEA5, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807AEA6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AEA7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_11_symbolic(self):
        """Instruction JNP_11
        Groups: jump
        0x807b09f:  jnp     0x807b0a4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B09F, "{\x03")
        cpu.EIP = 0x807B09F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B0A0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B09F, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B0A4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_12_symbolic(self):
        """Instruction JNP_12
        Groups: jump
        0x807aff4:  jnp     0x807aff9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AFF4, "{\x03")
        cpu.EIP = 0x807AFF4
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AFF4, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807AFF5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AFF9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_13_symbolic(self):
        """Instruction JNP_13
        Groups: jump
        0x807ae39:  jnp     0x807ae3e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE39, "{\x03")
        cpu.EIP = 0x807AE39
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AE39, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807AE3A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AE3B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_14_symbolic(self):
        """Instruction JNP_14
        Groups: jump
        0x807ae27:  jnp     0x807ae2c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE27, "{\x03")
        cpu.EIP = 0x807AE27
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AE28, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807AE27, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AE2C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_15_symbolic(self):
        """Instruction JNP_15
        Groups: jump
        0x807b072:  jnp     0x807b077
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B072, "{\x03")
        cpu.EIP = 0x807B072
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B072, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B073, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B074)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_16_symbolic(self):
        """Instruction JNP_16
        Groups: jump
        0x807b057:  jnp     0x807b05c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B057, "{\x03")
        cpu.EIP = 0x807B057
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B058, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B057, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B05C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_17_symbolic(self):
        """Instruction JNP_17
        Groups: jump
        0x807ae15:  jnp     0x807ae1a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE15, "{\x03")
        cpu.EIP = 0x807AE15
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AE15, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807AE16, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AE17)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_18_symbolic(self):
        """Instruction JNP_18
        Groups: jump
        0x807b021:  jnp     0x807b026
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B021, "{\x03")
        cpu.EIP = 0x807B021
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B021, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B022, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B023)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_19_symbolic(self):
        """Instruction JNP_19
        Groups: jump
        0x807ae9c:  jnp     0x807aea1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE9C, "{\x03")
        cpu.EIP = 0x807AE9C
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AE9C, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807AE9D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AEA1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_2_symbolic(self):
        """Instruction JNP_2
        Groups: jump
        0x807b0de:  jnp     0x807b0e3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B0DE, "{\x03")
        cpu.EIP = 0x807B0DE
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B0DE, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B0DF, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B0E0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_20_symbolic(self):
        """Instruction JNP_20
        Groups: jump
        0x807ad97:  jnp     0x807ad9c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD97, "{\x03")
        cpu.EIP = 0x807AD97
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD98, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD97, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD9C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_21_symbolic(self):
        """Instruction JNP_21
        Groups: jump
        0x807add6:  jnp     0x807addb
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ADD6, "{\x03")
        cpu.EIP = 0x807ADD6
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ADD6, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807ADD7, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ADD8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_3_symbolic(self):
        """Instruction JNP_3
        Groups: jump
        0x807b102:  jnp     0x807b107
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B102, "{\x03")
        cpu.EIP = 0x807B102
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B102, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B103, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B104)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_4_symbolic(self):
        """Instruction JNP_4
        Groups: jump
        0x807addf:  jnp     0x807ade4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ADDF, "{\x03")
        cpu.EIP = 0x807ADDF
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ADE0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807ADDF, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ADE4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_5_symbolic(self):
        """Instruction JNP_5
        Groups: jump
        0x807b096:  jnp     0x807b09b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B096, "{\x03")
        cpu.EIP = 0x807B096
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B096, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B097, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B098)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_6_symbolic(self):
        """Instruction JNP_6
        Groups: jump
        0x807ae81:  jnp     0x807ae86
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE81, "{\x03")
        cpu.EIP = 0x807AE81
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AE81, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807AE82, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AE83)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_7_symbolic(self):
        """Instruction JNP_7
        Groups: jump
        0x807b0cc:  jnp     0x807b0d1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B0CC, "{\x03")
        cpu.EIP = 0x807B0CC
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B0CC, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B0CD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B0D1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_8_symbolic(self):
        """Instruction JNP_8
        Groups: jump
        0x807b08d:  jnp     0x807b092
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B08D, "{\x03")
        cpu.EIP = 0x807B08D
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B08D, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807B08E, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B08F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNP_9_symbolic(self):
        """Instruction JNP_9
        Groups: jump
        0x807ae93:  jnp     0x807ae98
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AE93, "{\x03")
        cpu.EIP = 0x807AE93
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AE93, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x807AE94, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AE98)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_1_symbolic(self):
        """Instruction JNS_1
        Groups: jump
        0x807aceb:  jns     0x807acf0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACEB, "y\x03")
        cpu.EIP = 0x807ACEB
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ACEB, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807ACEC, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ACF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_10_symbolic(self):
        """Instruction JNS_10
        Groups: jump
        0x807ad7b:  jns     0x807ad80
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD7B, "y\x03")
        cpu.EIP = 0x807AD7B
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD7B, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD7C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD7D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_11_symbolic(self):
        """Instruction JNS_11
        Groups: jump
        0x807ad4e:  jns     0x807ad53
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD4E, "y\x03")
        cpu.EIP = 0x807AD4E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD4E, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD4F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD50)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_12_symbolic(self):
        """Instruction JNS_12
        Groups: jump
        0x807acd0:  jns     0x807acd5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACD0, "y\x03")
        cpu.EIP = 0x807ACD0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ACD0, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807ACD1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ACD5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_13_symbolic(self):
        """Instruction JNS_13
        Groups: jump
        0xf7ff0826: jns     0xf7ff07e8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0826, "y\xc0")
        cpu.EIP = 0xF7FF0826
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0826, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0827, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF07E8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_14_symbolic(self):
        """Instruction JNS_14
        Groups: jump
        0x807ad33:  jns     0x807ad38
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD33, "y\x03")
        cpu.EIP = 0x807AD33
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD33, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD34, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD35)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_15_symbolic(self):
        """Instruction JNS_15
        Groups: jump
        0x807ac88:  jns     0x807ac8d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC88, "y\x03")
        cpu.EIP = 0x807AC88
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AC88, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AC89, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AC8D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_16_symbolic(self):
        """Instruction JNS_16
        Groups: jump
        0x807ad3c:  jns     0x807ad41
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD3C, "y\x03")
        cpu.EIP = 0x807AD3C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD3C, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD3D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD3E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_17_symbolic(self):
        """Instruction JNS_17
        Groups: jump
        0x807acfd:  jns     0x807ad02
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACFD, "y\x03")
        cpu.EIP = 0x807ACFD
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ACFD, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807ACFE, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ACFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_18_symbolic(self):
        """Instruction JNS_18
        Groups: jump
        0xf7ff0826: jns     0xf7ff07e8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0826, "y\xc0")
        cpu.EIP = 0xF7FF0826
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0826, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0827, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0828)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_19_symbolic(self):
        """Instruction JNS_19
        Groups: jump
        0x807ac9a:  jns     0x807ac9f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC9A, "y\x03")
        cpu.EIP = 0x807AC9A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AC9A, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AC9B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AC9F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_2_symbolic(self):
        """Instruction JNS_2
        Groups: jump
        0x807ac91:  jns     0x807ac96
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC91, "y\x03")
        cpu.EIP = 0x807AC91
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AC91, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AC92, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AC96)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_20_symbolic(self):
        """Instruction JNS_20
        Groups: jump
        0x807ad72:  jns     0x807ad77
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD72, "y\x03")
        cpu.EIP = 0x807AD72
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD72, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD73, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD74)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_21_symbolic(self):
        """Instruction JNS_21
        Groups: jump
        0x807ad2a:  jns     0x807ad2f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD2A, "y\x03")
        cpu.EIP = 0x807AD2A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD2A, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD2B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD2C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_3_symbolic(self):
        """Instruction JNS_3
        Groups: jump
        0x807ad0f:  jns     0x807ad14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD0F, "y\x03")
        cpu.EIP = 0x807AD0F
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD10, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD0F, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_4_symbolic(self):
        """Instruction JNS_4
        Groups: jump
        0x807aca3:  jns     0x807aca8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACA3, "y\x03")
        cpu.EIP = 0x807ACA3
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ACA3, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807ACA4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ACA8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_5_symbolic(self):
        """Instruction JNS_5
        Groups: jump
        0x807ace2:  jns     0x807ace7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807ACE2, "y\x03")
        cpu.EIP = 0x807ACE2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807ACE2, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807ACE3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807ACE7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_6_symbolic(self):
        """Instruction JNS_6
        Groups: jump
        0x807ad84:  jns     0x807ad89
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD84, "y\x03")
        cpu.EIP = 0x807AD84
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD84, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD85, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD86)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_7_symbolic(self):
        """Instruction JNS_7
        Groups: jump
        0xf7ff0826: jns     0xf7ff07e8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0826, "y\xc0")
        cpu.EIP = 0xF7FF0826
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0826, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0827, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0828)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_8_symbolic(self):
        """Instruction JNS_8
        Groups: jump
        0x807ac6d:  jns     0x807ac72
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC6D, "y\x03")
        cpu.EIP = 0x807AC6D
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AC6D, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AC6E, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AC72)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_9_symbolic(self):
        """Instruction JNS_9
        Groups: jump
        0x807ad69:  jns     0x807ad6e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AD69, "y\x03")
        cpu.EIP = 0x807AD69
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AD69, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x807AD6A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AD6B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_1_symbolic(self):
        """Instruction JO_1
        Groups: jump
        0x8079c60:  jo      0x8079c65
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C60, "p\x03")
        cpu.EIP = 0x8079C60
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C60, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C61, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C62)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_10_symbolic(self):
        """Instruction JO_10
        Groups: jump
        0x8079c7b:  jo      0x8079c80
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C7B, "p\x03")
        cpu.EIP = 0x8079C7B
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C7B, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C7C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C7D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_11_symbolic(self):
        """Instruction JO_11
        Groups: jump
        0x8079cd5:  jo      0x8079cda
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CD5, "p\x03")
        cpu.EIP = 0x8079CD5
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CD5, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079CD6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CD7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_12_symbolic(self):
        """Instruction JO_12
        Groups: jump
        0x8079cba:  jo      0x8079cbf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CBA, "p\x03")
        cpu.EIP = 0x8079CBA
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CBA, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079CBB, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CBC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_13_symbolic(self):
        """Instruction JO_13
        Groups: jump
        0x8079cc3:  jo      0x8079cc8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CC3, "p\x03")
        cpu.EIP = 0x8079CC3
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CC3, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079CC4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CC5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_14_symbolic(self):
        """Instruction JO_14
        Groups: jump
        0x8079ce7:  jo      0x8079cec
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CE7, "p\x03")
        cpu.EIP = 0x8079CE7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CE8, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8079CE7, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CE9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_15_symbolic(self):
        """Instruction JO_15
        Groups: jump
        0x8079c4e:  jo      0x8079c53
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C4E, "p\x03")
        cpu.EIP = 0x8079C4E
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C4E, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C4F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C50)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_16_symbolic(self):
        """Instruction JO_16
        Groups: jump
        0x8079c33:  jo      0x8079c38
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C33, "p\x03")
        cpu.EIP = 0x8079C33
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C33, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C34, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C35)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_17_symbolic(self):
        """Instruction JO_17
        Groups: jump
        0x8079c69:  jo      0x8079c6e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C69, "p\x03")
        cpu.EIP = 0x8079C69
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C69, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C6A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C6B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_18_symbolic(self):
        """Instruction JO_18
        Groups: jump
        0x8079d0b:  jo      0x8079d10
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D0B, "p\x03")
        cpu.EIP = 0x8079D0B
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079D0B, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079D0C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079D0D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_19_symbolic(self):
        """Instruction JO_19
        Groups: jump
        0x8079c96:  jo      0x8079c9b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C96, "p\x03")
        cpu.EIP = 0x8079C96
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C96, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C97, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C98)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_2_symbolic(self):
        """Instruction JO_2
        Groups: jump
        0x8079c9f:  jo      0x8079ca4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C9F, "p\x03")
        cpu.EIP = 0x8079C9F
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CA0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C9F, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CA1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_20_symbolic(self):
        """Instruction JO_20
        Groups: jump
        0x8079d02:  jo      0x8079d07
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D02, "p\x03")
        cpu.EIP = 0x8079D02
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079D02, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079D03, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079D04)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_21_symbolic(self):
        """Instruction JO_21
        Groups: jump
        0x8079c72:  jo      0x8079c77
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C72, "p\x03")
        cpu.EIP = 0x8079C72
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C72, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C73, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C74)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_3_symbolic(self):
        """Instruction JO_3
        Groups: jump
        0x8079d1d:  jo      0x8079d22
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D1D, "p\x03")
        cpu.EIP = 0x8079D1D
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079D1D, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079D1E, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079D1F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_4_symbolic(self):
        """Instruction JO_4
        Groups: jump
        0x8079c45:  jo      0x8079c4a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C45, "p\x03")
        cpu.EIP = 0x8079C45
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C45, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C46, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C47)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_5_symbolic(self):
        """Instruction JO_5
        Groups: jump
        0x8079cde:  jo      0x8079ce3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CDE, "p\x03")
        cpu.EIP = 0x8079CDE
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CDE, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079CDF, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CE0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_6_symbolic(self):
        """Instruction JO_6
        Groups: jump
        0x8079ca8:  jo      0x8079cad
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079CA8, "p\x03")
        cpu.EIP = 0x8079CA8
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079CA8, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079CA9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079CAA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_7_symbolic(self):
        """Instruction JO_7
        Groups: jump
        0x8079c3c:  jo      0x8079c41
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C3C, "p\x03")
        cpu.EIP = 0x8079C3C
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C3C, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C3D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C3E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_8_symbolic(self):
        """Instruction JO_8
        Groups: jump
        0x8079c84:  jo      0x8079c89
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079C84, "p\x03")
        cpu.EIP = 0x8079C84
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079C84, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079C85, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079C86)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JO_9_symbolic(self):
        """Instruction JO_9
        Groups: jump
        0x8079d26:  jo      0x8079d2b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D26, "p\x03")
        cpu.EIP = 0x8079D26
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079D26, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8079D27, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079D28)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_1_symbolic(self):
        """Instruction JP_1
        Groups: jump
        0x807b2ab:  jp      0x807b2b0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2AB, "z\x03")
        cpu.EIP = 0x807B2AB
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B2AB, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B2AC, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B2AD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_10_symbolic(self):
        """Instruction JP_10
        Groups: jump
        0xf7ff3cc2: jp      0xf7ff3ced
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CC2, "z)")
        cpu.EIP = 0xF7FF3CC2
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CC2, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CC3, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3CC4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_11_symbolic(self):
        """Instruction JP_11
        Groups: jump
        0x8079887:  jp      0x807988c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079887, "z\x03")
        cpu.EIP = 0x8079887
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079888, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8079887, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.EIP == 0x807988C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_12_symbolic(self):
        """Instruction JP_12
        Groups: jump
        0x80797d3:  jp      0x80797d8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797D3, "z\x03")
        cpu.EIP = 0x80797D3
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80797D3, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x80797D4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80797D8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_13_symbolic(self):
        """Instruction JP_13
        Groups: jump
        0x807b299:  jp      0x807b29e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B299, "z\x03")
        cpu.EIP = 0x807B299
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B299, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B29A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B29E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_14_symbolic(self):
        """Instruction JP_14
        Groups: jump
        0xf7ff3cc2: jp      0xf7ff3ced
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CC2, "z)")
        cpu.EIP = 0xF7FF3CC2
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CC2, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CC3, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3CC4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_15_symbolic(self):
        """Instruction JP_15
        Groups: jump
        0x80797ca:  jp      0x80797cf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797CA, "z\x03")
        cpu.EIP = 0x80797CA
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80797CA, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x80797CB, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80797CC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_16_symbolic(self):
        """Instruction JP_16
        Groups: jump
        0x80797dc:  jp      0x80797e1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797DC, "z\x03")
        cpu.EIP = 0x80797DC
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80797DC, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x80797DD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80797E1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_17_symbolic(self):
        """Instruction JP_17
        Groups: jump
        0x807b275:  jp      0x807b27a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B275, "z\x03")
        cpu.EIP = 0x807B275
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B275, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B276, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B27A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_18_symbolic(self):
        """Instruction JP_18
        Groups: jump
        0x807b2cf:  jp      0x807b2d4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2CF, "z\x03")
        cpu.EIP = 0x807B2CF
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B2D0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807B2CF, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B2D1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_19_symbolic(self):
        """Instruction JP_19
        Groups: jump
        0x8079809:  jp      0x807980e
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079809, "z\x03")
        cpu.EIP = 0x8079809
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079809, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807980A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807980B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_2_symbolic(self):
        """Instruction JP_2
        Groups: jump
        0x8079782:  jp      0x8079787
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079782, "z\x03")
        cpu.EIP = 0x8079782
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079782, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x8079783, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079784)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_20_symbolic(self):
        """Instruction JP_20
        Groups: jump
        0x80797e5:  jp      0x80797ea
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797E5, "z\x03")
        cpu.EIP = 0x80797E5
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80797E5, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x80797E6, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80797E7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_21_symbolic(self):
        """Instruction JP_21
        Groups: jump
        0x80797a6:  jp      0x80797ab
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80797A6, "z\x03")
        cpu.EIP = 0x80797A6
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80797A6, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x80797A7, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80797A8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_3_symbolic(self):
        """Instruction JP_3
        Groups: jump
        0x807b332:  jp      0x807b337
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B332, "z\x03")
        cpu.EIP = 0x807B332
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B332, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B333, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B337)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_4_symbolic(self):
        """Instruction JP_4
        Groups: jump
        0x807b2d8:  jp      0x807b2dd
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2D8, "z\x03")
        cpu.EIP = 0x807B2D8
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B2D8, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B2D9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B2DA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_5_symbolic(self):
        """Instruction JP_5
        Groups: jump
        0x8079875:  jp      0x807987a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079875, "z\x03")
        cpu.EIP = 0x8079875
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079875, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x8079876, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079877)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_6_symbolic(self):
        """Instruction JP_6
        Groups: jump
        0x807b248:  jp      0x807b24d
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B248, "z\x03")
        cpu.EIP = 0x807B248
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B248, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B249, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B24A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_7_symbolic(self):
        """Instruction JP_7
        Groups: jump
        0x807b2fc:  jp      0x807b301
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B2FC, "z\x03")
        cpu.EIP = 0x807B2FC
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B2FC, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B2FD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B2FE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_8_symbolic(self):
        """Instruction JP_8
        Groups: jump
        0x807b25a:  jp      0x807b25f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B25A, "z\x03")
        cpu.EIP = 0x807B25A
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B25A, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B25B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B25F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JP_9_symbolic(self):
        """Instruction JP_9
        Groups: jump
        0x807b320:  jp      0x807b325
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B320, "z\x03")
        cpu.EIP = 0x807B320
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B320, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x807B321, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B322)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_1_symbolic(self):
        """Instruction JS_1
        Groups: jump
        0x8079945:  js      0x807994a
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079945, "x\x03")
        cpu.EIP = 0x8079945
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079945, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x8079946, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807994A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_10_symbolic(self):
        """Instruction JS_10
        Groups: jump
        0x8079921:  js      0x8079926
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079921, "x\x03")
        cpu.EIP = 0x8079921
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079921, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x8079922, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079923)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_11_symbolic(self):
        """Instruction JS_11
        Groups: jump
        0xf7febaad: js      0xf7febaf0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBAAD, "xA")
        cpu.EIP = 0xF7FEBAAD
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBAAD, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBAAE, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBAAF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_12_symbolic(self):
        """Instruction JS_12
        Groups: jump
        0x80798ac:  js      0x80798b1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798AC, "x\x03")
        cpu.EIP = 0x80798AC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80798AC, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x80798AD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80798AE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_13_symbolic(self):
        """Instruction JS_13
        Groups: jump
        0x80798c7:  js      0x80798cc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798C7, "x\x03")
        cpu.EIP = 0x80798C7
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80798C8, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80798C7, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.EIP == 0x80798C9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_14_symbolic(self):
        """Instruction JS_14
        Groups: jump
        0xf7febac9: js      0xf7febad5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBAC9, "x\n")
        cpu.EIP = 0xF7FEBAC9
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBAC9, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBACA, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBACB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_15_symbolic(self):
        """Instruction JS_15
        Groups: jump
        0xf7ff07ca: js      0xf7ff0838
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF07CA, "xl")
        cpu.EIP = 0xF7FF07CA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF07CA, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF07CB, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF07CC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_16_symbolic(self):
        """Instruction JS_16
        Groups: jump
        0xf7fe3ff8: js      0xf7fe4a54
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE3000, 0x1000, "rwx")
        mem.write(0xF7FE3FF8, "\x0f\x88V\n\x00\x00")
        cpu.EIP = 0xF7FE3FF8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3FF8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3FF9, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3FFA, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3FFB, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3FFC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE3FFD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE3FFE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_17_symbolic(self):
        """Instruction JS_17
        Groups: jump
        0x80799b1:  js      0x80799b6
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80799B1, "x\x03")
        cpu.EIP = 0x80799B1
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80799B1, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x80799B2, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80799B6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_18_symbolic(self):
        """Instruction JS_18
        Groups: jump
        0xf7fde25f: js      0xf7fe0077
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDE000, 0x1000, "rwx")
        mem.write(0xF7FDE25F, "\x0f\x88\x12\x1e\x00\x00")
        cpu.EIP = 0xF7FDE25F
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE260, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE261, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE262, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE263, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE264, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDE25F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDE265)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_19_symbolic(self):
        """Instruction JS_19
        Groups: jump
        0x8079906:  js      0x807990b
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079906, "x\x03")
        cpu.EIP = 0x8079906
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079906, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x8079907, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079908)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_2_symbolic(self):
        """Instruction JS_2
        Groups: jump
        0xf7fe1dae: js      0xf7fe2be9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE1000, 0x1000, "rwx")
        mem.write(0xF7FE1DAE, "\x0f\x885\x0e\x00\x00")
        cpu.EIP = 0xF7FE1DAE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DAE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DAF, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DB0, 8) == ord("5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DB1, 8) == ord("\x0e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE1DB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE1DB4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_20_symbolic(self):
        """Instruction JS_20
        Groups: jump
        0x80799ba:  js      0x80799bf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80799BA, "x\x03")
        cpu.EIP = 0x80799BA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80799BA, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x80799BB, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80799BF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_21_symbolic(self):
        """Instruction JS_21
        Groups: jump
        0x807992a:  js      0x807992f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807992A, "x\x03")
        cpu.EIP = 0x807992A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807992A, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x807992B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807992C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_3_symbolic(self):
        """Instruction JS_3
        Groups: jump
        0x8079972:  js      0x8079977
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079972, "x\x03")
        cpu.EIP = 0x8079972
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079972, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x8079973, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079977)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_4_symbolic(self):
        """Instruction JS_4
        Groups: jump
        0x807990f:  js      0x8079914
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807990F, "x\x03")
        cpu.EIP = 0x807990F
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079910, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807990F, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079911)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_5_symbolic(self):
        """Instruction JS_5
        Groups: jump
        0x807993c:  js      0x8079941
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807993C, "x\x03")
        cpu.EIP = 0x807993C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807993C, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x807993D, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079941)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_6_symbolic(self):
        """Instruction JS_6
        Groups: jump
        0x8079984:  js      0x8079989
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079984, "x\x03")
        cpu.EIP = 0x8079984
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079984, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x8079985, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079989)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_7_symbolic(self):
        """Instruction JS_7
        Groups: jump
        0xf7eaa01c: js      0xf7eaa0f5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA01C, "\x0f\x88\xd3\x00\x00\x00")
        cpu.EIP = 0xF7EAA01C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA020, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA021, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA01C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA01D, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA01E, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA01F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA022)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_8_symbolic(self):
        """Instruction JS_8
        Groups: jump
        0x8079957:  js      0x807995c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079957, "x\x03")
        cpu.EIP = 0x8079957
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079958, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8079957, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.EIP == 0x807995C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_9_symbolic(self):
        """Instruction JS_9
        Groups: jump
        0x80798e2:  js      0x80798e7
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798E2, "x\x03")
        cpu.EIP = 0x80798E2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80798E2, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x80798E3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80798E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LAHF_1_symbolic(self):
        """Instruction LAHF_1
        Groups:
        0x804d64c:  lahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D64C, "\x9f")
        cpu.EIP = 0x804D64C
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xB6)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D64C, 8) == ord("\x9f"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D64D)
        condition = Operators.AND(condition, cpu.AH == 0x46)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_1_symbolic(self):
        """Instruction LEAVE_1
        Groups: not64bitmode
        0x805668e:  leave
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805668E, "\xc9")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB5FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB5FD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB5FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB5FF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x805668E
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFC606)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805668E, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB5FC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB5FD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB5FE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB5FF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805668F)
        condition = Operators.AND(condition, cpu.EBP == 0x0)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFB604)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_1_symbolic(self):
        """Instruction LEA_1
        Groups: not64bitmode
        0xf7e2ea34: lea     edx, dword ptr [ebx + 0x40]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.mmap(0xF7FC0000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FC0040)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FC0041)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FC0042)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FC0043)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7E2EA34, "\x8d\x93@\x00\x00\x00")
        cpu.EIP = 0xF7E2EA34
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FC0040, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FC0041, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FC0042, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FC0043, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EA34, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EA35, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EA36, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EA37, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EA38, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EA39, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2EA3A)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FC0040)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FC0000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_10_symbolic(self):
        """Instruction LEA_10
        Groups: not64bitmode
        0xf7fe54ab: lea     eax, dword ptr [esp + 0x48]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD33B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD338)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD339)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD33A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE54AB, "\x8dD$H")
        cpu.EIP = 0xF7FE54AB
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x741)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2F0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD33B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD338, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD339, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD33A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54AB, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54AC, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54AD, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54AE, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54AF)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFD338)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_11_symbolic(self):
        """Instruction LEA_11
        Groups: not64bitmode
        0xf7fe54a8: lea     esi, dword ptr [edx + eax*4]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E17000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54A8, "\x8d4\x82")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E17598)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E17599)
        value = cs.new_bitvec(8)
        cs.add(value == 0x26)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E1759A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E1759B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7C)
        mem[addr] = value
        cpu.EIP = 0xF7FE54A8
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E1696C)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA858)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x30B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54A8, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54A9, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54AA, 8) == ord("\x82"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E17598, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E17599, 8) == ord("&"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E1759A, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E1759B, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54AB)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E1696C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E17598)
        condition = Operators.AND(condition, cpu.EAX == 0x30B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_12_symbolic(self):
        """Instruction LEA_12
        Groups: not64bitmode
        0xf7fe4e78: lea     eax, dword ptr [ebx - 0x55d4]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xF7FF7000, 0x1000, "rwx")
        mem.write(0xF7FE4E78, "\x8d\x83,\xaa\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x79)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        cpu.EIP = 0xF7FE4E78
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4802C4E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E78, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E79, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7A, 8) == ord(","))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7B, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2C, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2D, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2E, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2F, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E7E)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FF7A2C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_13_symbolic(self):
        """Instruction LEA_13
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE5705
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDABA8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5705, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5706, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5707, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5708)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFD3F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_14_symbolic(self):
        """Instruction LEA_14
        Groups: not64bitmode
        0xf7fe894c: lea     edi, dword ptr [esp + 0x1f]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD441)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD442)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE894C, "\x8d|$\x1f")
        cpu.EIP = 0xF7FE894C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD420)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD441, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD442, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE894C, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE894D, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE894E, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE894F, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE8950)
        condition = Operators.AND(condition, cpu.EDI == 0xFFFFD43F)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD420)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_15_symbolic(self):
        """Instruction LEA_15
        Groups: not64bitmode
        0xf7fe54a8: lea     esi, dword ptr [edx + eax*4]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E18000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54A8, "\x8d4\x82")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E182AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x58)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E182AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E182AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x26)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E182AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x87)
        mem[addr] = value
        cpu.EIP = 0xF7FE54A8
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E1696C)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA858)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x650)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54A8, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54A9, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54AA, 8) == ord("\x82"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E182AC, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E182AD, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E182AE, 8) == ord("&"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E182AF, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54AB)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E1696C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E182AC)
        condition = Operators.AND(condition, cpu.EAX == 0x650)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_16_symbolic(self):
        """Instruction LEA_16
        Groups: not64bitmode
        0xf7fe0b41: lea     edx, dword ptr [edi + ebx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0B41, "\x8d\x14\x1f")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FE0B98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8B)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FE0B99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FE0B9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FE0B9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x89)
        mem[addr] = value
        cpu.EIP = 0xF7FE0B41
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x2)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xFFFE3B98)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B41, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B42, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B43, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B98, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B99, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B9A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B9B, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0B44)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FE0B98)
        condition = Operators.AND(condition, cpu.EDI == 0xFFFE3B98)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_17_symbolic(self):
        """Instruction LEA_17
        Groups: not64bitmode
        0xf7eaa0d0: lea     ecx, dword ptr [edi + eax*8]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xF7F71000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7F714C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7F714C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7F714CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7F714CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7EAA0D0, "\x8d\x0c\xc7")
        cpu.EIP = 0xF7EAA0D0
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7F714C0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7F714D0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7F714C8, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xF7F714C9, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xF7F714CA, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0xF7F714CB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D0, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D1, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0D2, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0D3)
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.EDI == 0xF7F714C0)
        condition = Operators.AND(condition, cpu.ECX == 0xF7F714C8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_18_symbolic(self):
        """Instruction LEA_18
        Groups: not64bitmode
        0xf7fe57e8: lea     esp, dword ptr [ebp - 0xc]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57E8, "\x8de\xf4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE57E8
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD380)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57E8, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57E9, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57EA, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57EB)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD42C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_19_symbolic(self):
        """Instruction LEA_19
        Groups: not64bitmode
        0xf7fe8aea: lea     eax, dword ptr [ebp - 0x34]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE8000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4C4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4C5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4C6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4C7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE8AEA, "\x8dE\xcc")
        cpu.EIP = 0xF7FE8AEA
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4C4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4C5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4C6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4C7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AEA, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AEB, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE8AEC, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE8AED)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFD4C4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_2_symbolic(self):
        """Instruction LEA_2
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE5705
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDABA8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5705, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5706, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5707, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5708)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFD3F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_20_symbolic(self):
        """Instruction LEA_20
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE5705
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDABA8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5705, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5706, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5707, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5708)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFD3F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_21_symbolic(self):
        """Instruction LEA_21
        Groups: not64bitmode
        0xf7fe570b: lea     ecx, dword ptr [ebp - 0x50]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE570B, "\x8d")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0xF7FE570C, "M\xb0")
        cpu.EIP = 0xF7FE570B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFD3F0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3EB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3E8, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3E9, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3EA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE570B, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE570C, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE570D, 8) == ord("\xb0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE570E)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFD3E8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_3_symbolic(self):
        """Instruction LEA_3
        Groups: not64bitmode
        0xf7fe54a8: lea     esi, dword ptr [edx + eax*4]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E18000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54A8, "\x8d4\x82")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E18C0B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E18C08)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E18C09)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E18C0A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        cpu.EIP = 0xF7FE54A8
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E1696C)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA858)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8A7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E18C08, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E18C09, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54AA, 8) == ord("\x82"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E18C0B, 8) == ord("\xa2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54A8, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54A9, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E18C0A, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54AB)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E1696C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E18C08)
        condition = Operators.AND(condition, cpu.EAX == 0x8A7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_4_symbolic(self):
        """Instruction LEA_4
        Groups: not64bitmode
        0xf7fe72c4: lea     eax, dword ptr [ebp - 0x44]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE72C4, "\x8dE\xbc")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x94)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE72C4
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C4, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C5, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72C6, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B4, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B5, 8) == ord("\x9c"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72C7)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFD4B4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_5_symbolic(self):
        """Instruction LEA_5
        Groups: not64bitmode
        0xf7fe5705: lea     ecx, dword ptr [ebp - 0x48]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5705, "\x8dM\xb8")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE5705
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDABA8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5705, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5706, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5707, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5708)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFD3F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_6_symbolic(self):
        """Instruction LEA_6
        Groups: not64bitmode
        0xf7fdd6c8: lea     eax, dword ptr [ebx + eax - 0x8880]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF4780)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF4781)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF4782)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF4783)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        mem.write(0xF7FDD6C8, "\x8d\x84\x03\x80w\xff\xff")
        cpu.EIP = 0xF7FDD6C8
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4780, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4781, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4782, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4783, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6C8, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6C9, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6CA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6CB, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6CC, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6CD, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6CE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDD6CF)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FF4780)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_7_symbolic(self):
        """Instruction LEA_7
        Groups: not64bitmode
        0xf7fe4e78: lea     eax, dword ptr [ebx - 0x55d4]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xF7FF7000, 0x1000, "rwx")
        mem.write(0xF7FE4E78, "\x8d\x83,\xaa\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x79)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF7A2F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        cpu.EIP = 0xF7FE4E78
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x830AAB)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E78, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E79, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7A, 8) == ord(","))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E7B, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2C, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2D, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2E, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF7A2F, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E7E)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FF7A2C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_8_symbolic(self):
        """Instruction LEA_8
        Groups: not64bitmode
        0xf7ff0e47: lea     edx, dword ptr [ecx + ebx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0E47, "\x8d\x14\x19")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF0E58)
        value = cs.new_bitvec(8)
        cs.add(value == 0x83)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF0E59)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF0E5A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF0E5B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8B)
        mem[addr] = value
        cpu.EIP = 0xF7FF0E47
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1C)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFF3E58)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E47, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E48, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E49, 8) == ord("\x19"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E58, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E59, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E5A, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E5B, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0E4A)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FF0E58)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFF3E58)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_9_symbolic(self):
        """Instruction LEA_9
        Groups: not64bitmode
        0xf7fe57e8: lea     esp, dword ptr [ebp - 0xc]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE57E8, "\x8de\xf4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE57E8
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD380)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57E8, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57E9, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57EA, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57EB)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD42C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LODSB_1_symbolic(self):
        """Instruction LODSB_1
        Groups:
        0x8070436:  lodsb   al, byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E042)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        mem.write(0x8070436, "\xac")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x8070436
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E042)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807E042, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x8070436, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070437)
        condition = Operators.AND(condition, cpu.AL == 0x1E)
        condition = Operators.AND(condition, cpu.ESI == 0x807E043)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LODSD_1_symbolic(self):
        """Instruction LODSD_1
        Groups:
        0x8070439:  lodsd   eax, dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E048)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        mem.write(0x8070439, "\xad")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E045)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E046)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E047)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x8070439
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E045)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xE5E5)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807E048, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x8070439, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0x807E045, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x807E046, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807E047, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.EIP == 0x807043A)
        condition = Operators.AND(condition, cpu.ESI == 0x807E049)
        condition = Operators.AND(condition, cpu.EAX == 0xE5E51E51)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LODSW_1_symbolic(self):
        """Instruction LODSW_1
        Groups:
        0x8070437:  lodsw   ax, word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x1000, "rwx")
        mem.write(0x8070438, "\xad")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E043)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E044)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        mem.write(0x8070437, "f")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x8070437
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E043)
        cpu.AX = cs.new_bitvec(16)
        cs.add(cpu.AX == 0x1E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070438, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0x807E043, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x807E044, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x8070437, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070439)
        condition = Operators.AND(condition, cpu.ESI == 0x807E045)
        condition = Operators.AND(condition, cpu.AX == 0xE5E5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LSL_1_symbolic(self):
        """Instruction LSL_1
        Groups:
        0x8059a3e:  lsl     ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A40, "M\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem.write(0x8059A3E, "\x0f\x03")
        cpu.EIP = 0x8059A3E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A40, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A41, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A3E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A3F, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A42)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LSL_2_symbolic(self):
        """Instruction LSL_2
        Groups:
        0x8059a36:  lsl     cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem.write(0x8059A36, "f\x0f\x03M\x00")
        cpu.EIP = 0x8059A36
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A36, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A37, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A38, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A39, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A3A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A3B)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LSL_3_symbolic(self):
        """Instruction LSL_3
        Groups:
        0x8059a3b:  lsl     ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A3B, "\x0f\x03\xca")
        cpu.EIP = 0x8059A3B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC8F8)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A3B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A3C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A3D, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A3E)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0xC8F8)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LSL_4_symbolic(self):
        """Instruction LSL_4
        Groups:
        0x8059a32:  lsl     cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A32, "f\x0f\x03\xca")
        cpu.EIP = 0x8059A32
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC8F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A32, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A33, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A34, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A35, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A36)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.DX == 0xC8F8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVAPS_1_symbolic(self):
        """Instruction MOVAPS_1
        Groups: sse1
        0x8048413:  movaps  xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        mem.write(0x8048413, "\x0f(E\x00")
        cpu.EIP = 0x8048413
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x8048413, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048414, 8) == ord("("))
        condition = Operators.AND(condition, cpu.read_int(0x8048415, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8048416, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048417)
        condition = Operators.AND(condition, cpu.XMM0 == 0xEB6EB6EBEB6EB6EBEB6EB6EBEB6EB6EB)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVAPS_2_symbolic(self):
        """Instruction MOVAPS_2
        Groups: sse1
        0x8048417:  movaps  xmmword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        mem.write(0x8048417, "\x0f)M\x00")
        cpu.EIP = 0x8048417
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8048417, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048418, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0x8048419, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804841A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804841B)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVAPS_3_symbolic(self):
        """Instruction MOVAPS_3
        Groups: sse1
        0x8048410:  movaps  xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x8048410, "\x0f(\xc1")
        cpu.EIP = 0x8048410
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8048410, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048411, 8) == ord("("))
        condition = Operators.AND(condition, cpu.read_int(0x8048412, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048413)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_1_symbolic(self):
        """Instruction MOVDQA_1
        Groups: sse2
        0x8079433:  movdqa  xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079433, "f\x0fo\xc1")
        cpu.EIP = 0x8079433
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x8000F100FC0000000000000100000101)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079433, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079434, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079435, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x8079436, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079437)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_2_symbolic(self):
        """Instruction MOVDQA_2
        Groups: sse2
        0x807943c:  movdqa  xmmword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8079440, "\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x807943C, "f\x0f\x7fM")
        cpu.EIP = 0x807943C
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079440, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807943C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807943D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807943E, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x807943F, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079441)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_3_symbolic(self):
        """Instruction MOVDQA_3
        Groups: sse2
        0x8079437:  movdqa  xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079437, "f\x0foE\x00")
        cpu.EIP = 0x8079437
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079437, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079438, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079439, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x807943A, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807943B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807943C)
        condition = Operators.AND(condition, cpu.XMM0 == 0x80F1FC00FFFF80FE)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_1_symbolic(self):
        """Instruction MOVDQU_1
        Groups: sse2
        0x805bb8c:  movdqu  xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BB8C, "\xf3\x0foE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x805BB8C
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB8C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB8D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB8E, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB8F, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB90, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BB91)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_2_symbolic(self):
        """Instruction MOVDQU_2
        Groups: sse2
        0x805bb91:  movdqu  xmmword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BB91, "\xf3\x0f\x7fM\x00")
        cpu.EIP = 0x805BB91
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB91, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB92, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB93, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB94, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB95, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BB96)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_3_symbolic(self):
        """Instruction MOVDQU_3
        Groups: sse2
        0x805bb88:  movdqu  xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BB88, "\xf3\x0fo\xc1")
        cpu.EIP = 0x805BB88
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BB88, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB89, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB8A, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB8B, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BB8C)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_1_symbolic(self):
        """Instruction MOVD_1
        Groups: sse2
        0x804841b:  movd    ecx, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804841B, "f\x0f~\xc9")
        cpu.EIP = 0x804841B
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xECFECF0F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804841B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804841C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804841D, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x804841E, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0x804841F)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_2_symbolic(self):
        """Instruction MOVD_2
        Groups: sse2
        0x804841f:  movd    xmm0, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804841F, "f\x0fn\xc2")
        cpu.EIP = 0x804841F
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xEB6EB6EBEB6EB6EBEB6EB6EBEB6EB6EB)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xE6FE6FF0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8048420, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048421, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x8048422, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x804841F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048423)
        condition = Operators.AND(condition, cpu.XMM0 == 0xE6FE6FF0)
        condition = Operators.AND(condition, cpu.EDX == 0xE6FE6FF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_3_symbolic(self):
        """Instruction MOVD_3
        Groups: sse2
        0x8048423:  movd    xmm0, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8048423, "f\x0fnE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x8048423
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xE6FE6FF0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8048423, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048424, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048425, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x8048426, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8048427, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048428)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_4_symbolic(self):
        """Instruction MOVD_4
        Groups: sse2
        0x8048428:  movd    dword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8048428, "f\x0f~M\x00")
        cpu.EIP = 0x8048428
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8048428, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8048429, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804842A, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x804842B, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804842C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804842D)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVHPD_1_symbolic(self):
        """Instruction MOVHPD_1
        Groups: sse2
        0x804d613:  movhpd  xmm0, qword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D613, "f\x0f\x16E\x00")
        cpu.EIP = 0x804D613
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D613, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D614, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D615, 8) == ord("\x16"))
        condition = Operators.AND(condition, cpu.read_int(0x804D616, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x804D617, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D618)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVHPD_2_symbolic(self):
        """Instruction MOVHPD_2
        Groups: sse2
        0x804d618:  movhpd  qword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D618, "f\x0f\x17M\x00")
        cpu.EIP = 0x804D618
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D618, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D619, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D61A, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x804D61B, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D61C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D61D)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_1_symbolic(self):
        """Instruction MOVLPD_1
        Groups: sse2
        0x804d553:  movlpd  qword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D553, "f\x0f\x13M\x00")
        cpu.EIP = 0x804D553
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D553, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D554, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D555, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804D556, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D557, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D558)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_2_symbolic(self):
        """Instruction MOVLPD_2
        Groups: sse2
        0x804d54e:  movlpd  xmm0, qword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D54E, "f\x0f\x12E\x00")
        cpu.EIP = 0x804D54E
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D54E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D54F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D550, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0x804D551, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x804D552, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D553)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVQ_1_symbolic(self):
        """Instruction MOVQ_1
        Groups: sse2
        0x804d55c:  movq    xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D55C, "\xf3\x0f~\xc1")
        cpu.EIP = 0x804D55C
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D55C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x804D55D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D55E, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x804D55F, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D560)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVQ_2_symbolic(self):
        """Instruction MOVQ_2
        Groups: sse2
        0x804d560:  movq    xmm0, qword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D560, "\xf3\x0f~E\x00")
        cpu.EIP = 0x804D560
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D560, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x804D561, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D562, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x804D563, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x804D564, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D565)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVQ_3_symbolic(self):
        """Instruction MOVQ_3
        Groups: sse2
        0x804d565:  movq    qword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D565, "f\x0f\xd6M\x00")
        cpu.EIP = 0x804D565
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D565, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D566, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D567, 8) == ord("\xd6"))
        condition = Operators.AND(condition, cpu.read_int(0x804D568, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D569, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D56A)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_1_symbolic(self):
        """Instruction MOVSB_1
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF463B, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF463A, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF463A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAB04)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDAAF8)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB04, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB05, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB06, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB07, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463A, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463B, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF463C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAB04)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDAAF8)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_10_symbolic(self):
        """Instruction MOVSB_10
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF3B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF4545, "\xa4")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4545
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF3B)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9A, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF3B, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4545, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4546)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF3C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_11_symbolic(self):
        """Instruction MOVSB_11
        Groups:
        0xf7ff464a: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDC24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF464A, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5844)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF464A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDC24)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5844)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5844, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF464A, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDC24, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF464B)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDC25)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5845)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_2_symbolic(self):
        """Instruction MOVSB_2
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        mem.write(0xF7FF4545, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF57)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4545
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF57)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9A, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4545, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF57, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4546)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF58)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_3_symbolic(self):
        """Instruction MOVSB_3
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF463B, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB14)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF463A, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF463A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAB14)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDAB24)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB16, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463B, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB24, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB25, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB26, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB27, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB14, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463A, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB17, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB15, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF463C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAB14)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDAB24)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_4_symbolic(self):
        """Instruction MOVSB_4
        Groups:
        0x804d558:  movsb   byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        mem.write(0x804D558, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F030)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E030)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x804D558
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F030)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E030)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D558, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0x807F030, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x807E030, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D559)
        condition = Operators.AND(condition, cpu.EDI == 0x807F031)
        condition = Operators.AND(condition, cpu.ESI == 0x807E031)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_5_symbolic(self):
        """Instruction MOVSB_5
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        mem.write(0xF7FF4545, "\xa4")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4545
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF28)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF28, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9A, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4545, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4546)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF29)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_6_symbolic(self):
        """Instruction MOVSB_6
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDB000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB178)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        mem.write(0xF7FF463B, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB179)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB17B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        mem.write(0xF7FF463A, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB17A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        cpu.EIP = 0xF7FF463A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDEA8)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDB178)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB178, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEAB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB17B, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB179, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEA8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEA9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463B, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463A, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB17A, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF463C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDEA8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDB178)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_7_symbolic(self):
        """Instruction MOVSB_7
        Groups:
        0xf7ff463a: rep movsb       byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF463B, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD388)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD389)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD38A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD38B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF463A, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF463A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAFC)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xFFFFD388)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463B, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD388, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD389, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD38A, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD38B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF463A, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF463C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAFC)
        condition = Operators.AND(condition, cpu.ESI == 0xFFFFD388)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_8_symbolic(self):
        """Instruction MOVSB_8
        Groups:
        0xf7ff464a: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDE94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF464A, "\xa4")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5844)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF464A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDE94)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5844)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5844, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF464A, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDE94, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF464B)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDE95)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5845)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSB_9_symbolic(self):
        """Instruction MOVSB_9
        Groups:
        0xf7ff4545: movsb   byte ptr es:[edi], byte ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF49)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        mem.write(0xF7FF4545, "\xa4")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF4545
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF49)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF49, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9A, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4545, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4546)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF4A)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_1_symbolic(self):
        """Instruction MOVSD_1
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDB000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB176)
        value = cs.new_bitvec(8)
        cs.add(value == 0x31)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEA4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEA5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEA6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDEA7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB174)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        mem.write(0xF7FF4637, "\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB177)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF4636, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDB175)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2E)
        mem[addr] = value
        cpu.EIP = 0xF7FF4636
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDEA4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDB174)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB177, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEA4, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEA5, 8) == ord("."))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEA6, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDEA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB174, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB176, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4637, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4636, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDB175, 8) == ord("."))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4638)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDEA8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDB178)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_10_symbolic(self):
        """Instruction MOVSD_10
        Groups:
        0x805ba6d:  movsd   dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F040)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F041)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E03E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E041)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E040)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F03F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        mem.write(0x805BA6D, "\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F03E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E03F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x805BA6D
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F03E)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E03E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807F040, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x807F041, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x807F03E, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807E041, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x807E040, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x807E03F, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA6D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0x807E03E, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807F03F, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA6E)
        condition = Operators.AND(condition, cpu.EDI == 0x807F042)
        condition = Operators.AND(condition, cpu.ESI == 0x807E042)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_11_symbolic(self):
        """Instruction MOVSD_11
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD7DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x36)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD7DB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD7DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x36)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD7DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454D, "\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF2C)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xFFFFD7DB)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2F, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD7DC, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD7DE, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD7DD, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD7DB, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2C, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2D, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2E, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF30)
        condition = Operators.AND(condition, cpu.ESI == 0xFFFFD7DF)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_12_symbolic(self):
        """Instruction MOVSD_12
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x58)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FF4636, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF4636
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAFC)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDAAF0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF0, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF1, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF2, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4636, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4637, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFC, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFD, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFE, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4636)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAB00)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDAAF4)
        condition = Operators.AND(condition, cpu.ECX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_13_symbolic(self):
        """Instruction MOVSD_13
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA852)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA853)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA854)
        value = cs.new_bitvec(8)
        cs.add(value == 0x36)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA855)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAEA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAEB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAEA)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA852)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA852, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA853, 8) == ord("."))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA854, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA855, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAEA, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAEB, 8) == ord("."))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAEC, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAED, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAEE)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA856)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_14_symbolic(self):
        """Instruction MOVSD_14
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF50)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE44)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE45)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE46)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE47)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF4F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF4D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF4E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454D, "\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF4D)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FFCE44)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF50, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE44, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE45, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE46, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE47, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF4F, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF4D, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF4E, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF51)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFCE48)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_15_symbolic(self):
        """Instruction MOVSD_15
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x36)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA83E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x33)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA83F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAD6)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA83E)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA840, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA841, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD6, 8) == ord("3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD7, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD8, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD9, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA83E, 8) == ord("3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA83F, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAADA)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA842)
        condition = Operators.AND(condition, cpu.ECX == 0x5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_16_symbolic(self):
        """Instruction MOVSD_16
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA844)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA845)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAADC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAADA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAADB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAADD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAADA)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA842)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x5)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA842, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA843, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA844, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA845, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAADC, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAADA, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAADB, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAADD, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAADE)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA846)
        condition = Operators.AND(condition, cpu.ECX == 0x4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_17_symbolic(self):
        """Instruction MOVSD_17
        Groups: sse2
        0x805ba6e:  movsd   qword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BA6E, "\xf2\x0f\x11M\x00")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x805BA6E
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA6E, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA6F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA70, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA71, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA72, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA73)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_18_symbolic(self):
        """Instruction MOVSD_18
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB01)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FF4636, "\xf3\xa5")
        cpu.EIP = 0xF7FF4636
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAB00)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDAAF4)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB00, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB01, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB02, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB03, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF4, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF5, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4636, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4637, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4638)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAB04)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDAAF8)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_19_symbolic(self):
        """Instruction MOVSD_19
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD384)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD385)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD386)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD387)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAF8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF4637, "\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAFA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF4636, "\xf3")
        cpu.EIP = 0xF7FF4636
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAF8)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xFFFFD384)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD384, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD385, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD386, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD387, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAF8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4637, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAFA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4636, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4638)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAFC)
        condition = Operators.AND(condition, cpu.ESI == 0xFFFFD388)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_2_symbolic(self):
        """Instruction MOVSD_2
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF44)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF45)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF46)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF47)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDEF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        mem.write(0xF7FF454D, "\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDEE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6D)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF44)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FFCDEC)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF44, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF45, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF46, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF47, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDEC, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDEF, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDEE, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDED, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF48)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFCDF0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_20_symbolic(self):
        """Instruction MOVSD_20
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF52)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF53)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF54)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF55)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDEF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        mem.write(0xF7FF454D, "\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDEE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCDED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6D)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF52)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FFCDEC)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF52, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF53, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF54, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF55, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDEC, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDEF, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDEE, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCDED, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF56)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFCDF0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_21_symbolic(self):
        """Instruction MOVSD_21
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5EA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF5D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF5C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF5A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF5B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF5A)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9D)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5EA0, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9F, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF5C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF5A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF5B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9E, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF5D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF5A)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9D)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_3_symbolic(self):
        """Instruction MOVSD_3
        Groups:
        0xf7ff4636: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB1B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FF4636, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB0A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB0B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB19)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAB1A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        cpu.EIP = 0xF7FF4636
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAB08)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDAB18)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB18, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB1B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4636, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4637, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB08, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB09, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB0A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB0B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB19, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAB1A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4636)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAB0C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDAB1C)
        condition = Operators.AND(condition, cpu.ECX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_4_symbolic(self):
        """Instruction MOVSD_4
        Groups:
        0xf7ff4651: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD7000, 0x1000, "rwx")
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4651, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD7048)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA846)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA847)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA848)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA849)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD704A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD7047)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD7049)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        cpu.EIP = 0xF7FF4651
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDA846)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FD7047)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4651, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4652, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FD7048, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA846, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA847, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA848, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA849, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FD704A, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FD7047, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FD7049, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4651)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDA84A)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FD704B)
        condition = Operators.AND(condition, cpu.ECX == 0x3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_5_symbolic(self):
        """Instruction MOVSD_5
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAE2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAE3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAE4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAE5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA84A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA84B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA84C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        mem.write(0xF7FF454D, "\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA84D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAE2)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA84A)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAE2, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAE3, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAE4, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAE5, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA84C, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA84A, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA84B, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA84D, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAE6)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA84E)
        condition = Operators.AND(condition, cpu.ECX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_6_symbolic(self):
        """Instruction MOVSD_6
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xF7FFC000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF31)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF32)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF33)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE44)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE45)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE46)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFCE47)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF34)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3\xa5")
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF31)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FFCE44)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF31, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF32, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF33, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE44, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE45, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE46, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFCE47, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF34, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF35)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFCE48)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_7_symbolic(self):
        """Instruction MOVSD_7
        Groups:
        0x804d55b:  movsd   dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F033)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E033)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F034)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F035)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E036)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E034)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE5)
        mem[addr] = value
        mem.write(0x804D55B, "\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F036)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E035)
        value = cs.new_bitvec(8)
        cs.add(value == 0x51)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x804D55B
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F033)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E033)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807E033, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0x807F033, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0x807F034, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x807F035, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x807F036, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807E034, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x804D55B, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0x807E036, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807E035, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D55C)
        condition = Operators.AND(condition, cpu.EDI == 0x807F037)
        condition = Operators.AND(condition, cpu.ESI == 0x807E037)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_8_symbolic(self):
        """Instruction MOVSD_8
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA83C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA83A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA83B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA83D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAD2)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA83A)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD2, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD3, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD4, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD5, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA83C, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA83A, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA83B, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA83D, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAD6)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA83E)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_9_symbolic(self):
        """Instruction MOVSD_9
        Groups:
        0xf7ff454c: rep movsd       dword ptr es:[edi], dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5EA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454C, "\xf3\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FF454C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF2B)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9D)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5EA0, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9F, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9E, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454D, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454E)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF2B)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9D)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSS_1_symbolic(self):
        """Instruction MOVSS_1
        Groups: sse1
        0x805badf:  movss   xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BADF, "\xf3\x0f\x10\xc1")
        cpu.EIP = 0x805BADF
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x1)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BAE0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE1, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE2, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805BADF, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BAE3)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSS_2_symbolic(self):
        """Instruction MOVSS_2
        Groups: sse1
        0x805bae3:  movss   xmm0, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BAE3, "\xf3\x0f\x10E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x805BAE3
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE3, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE5, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE6, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BAE8)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSS_3_symbolic(self):
        """Instruction MOVSS_3
        Groups: sse1
        0x805bae8:  movss   dword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BAE8, "\xf3\x0f\x11M\x00")
        cpu.EIP = 0x805BAE8
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE8, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAE9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAEA, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAEB, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805BAEC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BAED)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_1_symbolic(self):
        """Instruction MOVSW_1
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454A, "f\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF58)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF59)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF454A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF58)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454B, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF58, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF59, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9B, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9C, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF5A)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_2_symbolic(self):
        """Instruction MOVSW_2
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        mem.write(0xF7FF454A, "f\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF4B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF4A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF454A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF4A)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF4B, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454B, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9B, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9C, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF4A, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF4C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_3_symbolic(self):
        """Instruction MOVSW_3
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454A, "f\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAD1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA838)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA839)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF454A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAD0)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA838)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454B, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD0, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAD1, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA838, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA839, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAD2)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA83A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_4_symbolic(self):
        """Instruction MOVSW_4
        Groups:
        0x804d559:  movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0x0807E000, 0x2000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E031)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807E032)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F031)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F032)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7)
        mem[addr] = value
        mem.write(0x804D559, "f\xa5")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x804D559
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F031)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x807E031)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807E031, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x807E032, 8) == ord("\x07"))
        condition = Operators.AND(condition, cpu.read_int(0x807F031, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x807F032, 8) == ord("\x07"))
        condition = Operators.AND(condition, cpu.read_int(0x804D559, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D55A, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D55B)
        condition = Operators.AND(condition, cpu.EDI == 0x807F033)
        condition = Operators.AND(condition, cpu.ESI == 0x807E033)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_5_symbolic(self):
        """Instruction MOVSW_5
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF29)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454A, "f\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF454A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF29)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF29, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454B, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9B, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9C, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2A, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF2B)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_6_symbolic(self):
        """Instruction MOVSW_6
        Groups:
        0xf7ff454a: movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x2000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF3C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF454A, "f\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FF5E9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF3D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF454A
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF3C)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FF5E9B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9C, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454B, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF5E9B, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF3C, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF3D, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFDF3E)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FF5E9D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_7_symbolic(self):
        """Instruction MOVSW_7
        Groups:
        0xf7ff464f: movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD7000, 0x1000, "rwx")
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF464F, "f\xa5")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA839)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA838)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD7039)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD703A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF464F
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDA838)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FD7039)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF464F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4650, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FD7039, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA838, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA839, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FD703A, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4651)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDA83A)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FD703B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSW_8_symbolic(self):
        """Instruction MOVSW_8
        Groups:
        0xf7ff464f: movsw   word ptr es:[edi], word ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAC4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDAAC5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x80481E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x80481EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        mem.write(0xF7FF464F, "f\xa5")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0xF7FF464F
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAC4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x80481E9)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAC4, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDAAC5, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x80481E9, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0x80481EA, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF464F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4650, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4651)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAC6)
        condition = Operators.AND(condition, cpu.ESI == 0x80481EB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_1_symbolic(self):
        """Instruction MOVSX_1
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x64)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x63)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C6, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C7, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C8)
        condition = Operators.AND(condition, cpu.DL == 0x64)
        condition = Operators.AND(condition, cpu.ECX == 0x64)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_10_symbolic(self):
        """Instruction MOVSX_10
        Groups:
        0x805ba7e:  movsx   cx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA7E, "f\x0f\xbe\xca")
        cpu.EIP = 0x805BA7E
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0xEC)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BA80, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA81, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA7E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA7F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA82)
        condition = Operators.AND(condition, cpu.DL == 0xEC)
        condition = Operators.AND(condition, cpu.CX == 0xFFEC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_11_symbolic(self):
        """Instruction MOVSX_11
        Groups:
        0xf7ff069c: movsx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD6000, 0x1000, "rwx")
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD6FF2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF069C, "\x0f\xbe\x02")
        cpu.EIP = 0xF7FF069C
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FD6FF2)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80481F2)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FD6FF2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF069C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF069D, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF069E, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF069F)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FD6FF2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_12_symbolic(self):
        """Instruction MOVSX_12
        Groups:
        0xf7ff05d7: movsx   esi, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05D7, "\x0f\xbe\xf1")
        cpu.EIP = 0xF7FF05D7
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x36)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x36)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D8, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D9, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF05DA)
        condition = Operators.AND(condition, cpu.ESI == 0x36)
        condition = Operators.AND(condition, cpu.CL == 0x36)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_13_symbolic(self):
        """Instruction MOVSX_13
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x61)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x63)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C6, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C7, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C8)
        condition = Operators.AND(condition, cpu.DL == 0x61)
        condition = Operators.AND(condition, cpu.ECX == 0x61)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_14_symbolic(self):
        """Instruction MOVSX_14
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x2E)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C3, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C4, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C5)
        condition = Operators.AND(condition, cpu.AL == 0x2E)
        condition = Operators.AND(condition, cpu.EAX == 0x2E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_15_symbolic(self):
        """Instruction MOVSX_15
        Groups:
        0xf7ff05da: movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05DA, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF05DA
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x36)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x36)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DB, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF05DD)
        condition = Operators.AND(condition, cpu.DL == 0x36)
        condition = Operators.AND(condition, cpu.ECX == 0x36)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_16_symbolic(self):
        """Instruction MOVSX_16
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x63)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x63)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C3, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C4, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C5)
        condition = Operators.AND(condition, cpu.AL == 0x63)
        condition = Operators.AND(condition, cpu.EAX == 0x63)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_17_symbolic(self):
        """Instruction MOVSX_17
        Groups:
        0xf7ff05d7: movsx   esi, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05D7, "\x0f\xbe\xf1")
        cpu.EIP = 0xF7FF05D7
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x36)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x36)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D8, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D9, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF05DA)
        condition = Operators.AND(condition, cpu.ESI == 0x36)
        condition = Operators.AND(condition, cpu.CL == 0x36)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_18_symbolic(self):
        """Instruction MOVSX_18
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x63)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x63)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C3, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C4, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C5)
        condition = Operators.AND(condition, cpu.AL == 0x63)
        condition = Operators.AND(condition, cpu.EAX == 0x63)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_19_symbolic(self):
        """Instruction MOVSX_19
        Groups:
        0x805ba82:  movsx   cx, byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BA82, "f\x0f\xbeM\x00")
        cpu.EIP = 0x805BA82
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFFEC)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA82, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA83, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA84, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA85, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA86, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA87)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_2_symbolic(self):
        """Instruction MOVSX_2
        Groups:
        0xf7ff069c: movsx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FD7000, 0x1000, "rwx")
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FD7038)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF069C, "\x0f\xbe\x02")
        cpu.EIP = 0xF7FF069C
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FD7038)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80481F2)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FD7038, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF069C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF069D, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF069E, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF069F)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FD7038)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_20_symbolic(self):
        """Instruction MOVSX_20
        Groups:
        0x805ba91:  movsx   ecx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BA91, "\x0f\xbfM\x00")
        cpu.EIP = 0x805BA91
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA91, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA92, 8) == ord("\xbf"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA93, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA94, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA95)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_21_symbolic(self):
        """Instruction MOVSX_21
        Groups:
        0xf7ff05da: movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05DA, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF05DA
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x36)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x36)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DB, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF05DD)
        condition = Operators.AND(condition, cpu.DL == 0x36)
        condition = Operators.AND(condition, cpu.ECX == 0x36)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_3_symbolic(self):
        """Instruction MOVSX_3
        Groups:
        0x805ba87:  movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA87, "\x0f\xbe\xca")
        cpu.EIP = 0x805BA87
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0xEC)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BA88, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA89, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA87, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA8A)
        condition = Operators.AND(condition, cpu.DL == 0xEC)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFEC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_4_symbolic(self):
        """Instruction MOVSX_4
        Groups:
        0x805ba8d:  movsx   ecx, byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA90, "\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BA8D, "\x0f\xbeM")
        cpu.EIP = 0x805BA8D
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BA90, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA8D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA8E, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA8F, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA91)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_5_symbolic(self):
        """Instruction MOVSX_5
        Groups:
        0xf7ff05d7: movsx   esi, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05D7, "\x0f\xbe\xf1")
        cpu.EIP = 0xF7FF05D7
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x36)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x36)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D8, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D9, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05D7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF05DA)
        condition = Operators.AND(condition, cpu.ESI == 0x36)
        condition = Operators.AND(condition, cpu.CL == 0x36)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_6_symbolic(self):
        """Instruction MOVSX_6
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x61)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C6, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C7, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C8)
        condition = Operators.AND(condition, cpu.DL == 0x61)
        condition = Operators.AND(condition, cpu.ECX == 0x61)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_7_symbolic(self):
        """Instruction MOVSX_7
        Groups:
        0xf7ff06c2: movsx   eax, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C2, "\x0f\xbe\xc0")
        cpu.EIP = 0xF7FF06C2
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x63)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x63)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C3, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C4, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C5)
        condition = Operators.AND(condition, cpu.AL == 0x63)
        condition = Operators.AND(condition, cpu.EAX == 0x63)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_8_symbolic(self):
        """Instruction MOVSX_8
        Groups:
        0xf7ff05da: movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF05DA, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF05DA
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x36)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x36)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DB, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF05DC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF05DD)
        condition = Operators.AND(condition, cpu.DL == 0x36)
        condition = Operators.AND(condition, cpu.ECX == 0x36)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_9_symbolic(self):
        """Instruction MOVSX_9
        Groups:
        0xf7ff06c5: movsx   ecx, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06C5, "\x0f\xbe\xca")
        cpu.EIP = 0xF7FF06C5
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x6C)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2E)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C6, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06C7, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06C8)
        condition = Operators.AND(condition, cpu.DL == 0x6C)
        condition = Operators.AND(condition, cpu.ECX == 0x6C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_1_symbolic(self):
        """Instruction MOVZX_1
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E20000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E20B40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x11)
        mem[addr] = value
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E20B34)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E20B40, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7239, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723A, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723B, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723C, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE723D)
        condition = Operators.AND(condition, cpu.EAX == 0x11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_10_symbolic(self):
        """Instruction MOVZX_10
        Groups:
        0xf7fe720c: movzx   edx, word ptr [edx + ecx*2]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE720C, "\x0f\xb7\x14J")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E287DA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E287DB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE720C
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E281C2)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x30C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE720C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE720D, 8) == ord("\xb7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE720E, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE720F, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E287DA, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E287DB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7210)
        condition = Operators.AND(condition, cpu.EDX == 0x2)
        condition = Operators.AND(condition, cpu.ECX == 0x30C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_11_symbolic(self):
        """Instruction MOVZX_11
        Groups:
        0xf7fe57ac: movzx   eax, byte ptr [esi + 0x194]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE57AC, "\x0f")
        mem.write(0xF7FE57B0, "\x01\x00\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA9EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x15)
        mem[addr] = value
        mem.write(0xF7FE57AD, "\xb6\x86\x94")
        cpu.EIP = 0xF7FE57AC
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA858)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FDC3BC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57B0, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57B1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57B2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA9EC, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57AE, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57AF, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57B3)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA858)
        condition = Operators.AND(condition, cpu.EAX == 0x15)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_12_symbolic(self):
        """Instruction MOVZX_12
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E25000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E25FD3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E25FD3)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x72)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E25FD3, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E25FD3)
        condition = Operators.AND(condition, cpu.EAX == 0x74)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_13_symbolic(self):
        """Instruction MOVZX_13
        Groups:
        0xf7fe5796: movzx   edx, byte ptr [eax + 0xd]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E20000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE5796, "\x0f\xb6P\r")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E202F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE5796
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E202E4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5798, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5799, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E202F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5796, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5797, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE579A)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.EAX == 0xF7E202E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_14_symbolic(self):
        """Instruction MOVZX_14
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E26000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E26A2D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x31)
        mem[addr] = value
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E26A2D)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x5F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E26A2D, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E26A2D)
        condition = Operators.AND(condition, cpu.EAX == 0x31)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_15_symbolic(self):
        """Instruction MOVZX_15
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E23000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E23345)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E23345)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x65)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E23345, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E23345)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_16_symbolic(self):
        """Instruction MOVZX_16
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E24000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AC, "\x0f\xb6")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E24B9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        mem.write(0xF7FE56AE, "\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E24B9E)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E24B9E, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E24B9E)
        condition = Operators.AND(condition, cpu.EAX == 0x72)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_17_symbolic(self):
        """Instruction MOVZX_17
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E1B000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E1BD70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x11)
        mem[addr] = value
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E1BD64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E1BD70, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7239, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723A, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723B, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723C, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE723D)
        condition = Operators.AND(condition, cpu.EAX == 0x11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_18_symbolic(self):
        """Instruction MOVZX_18
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDC56D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDC56D)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC56D, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FDC56D)
        condition = Operators.AND(condition, cpu.EAX == 0x6C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_19_symbolic(self):
        """Instruction MOVZX_19
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E26000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AC, "\x0f")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E26A64)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        mem.write(0xF7FE56AD, "\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E26A64)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x75)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E26A64, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E26A64)
        condition = Operators.AND(condition, cpu.EAX == 0x72)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_2_symbolic(self):
        """Instruction MOVZX_2
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E24000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E24CB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E24CB9)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E24CB9, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E24CB9)
        condition = Operators.AND(condition, cpu.EAX == 0x6F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_20_symbolic(self):
        """Instruction MOVZX_20
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E22000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E22BF1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E22BF1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x5F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E22BF1, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E22BF1)
        condition = Operators.AND(condition, cpu.EAX == 0x5F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_21_symbolic(self):
        """Instruction MOVZX_21
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E24000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E247E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E247E5)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E247E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E247E5)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_3_symbolic(self):
        """Instruction MOVZX_3
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E22000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AC, "\x0f\xb6")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E22BF6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        mem.write(0xF7FE56AE, "\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E22BF6)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x65)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E22BF6, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E22BF6)
        condition = Operators.AND(condition, cpu.EAX == 0x63)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_4_symbolic(self):
        """Instruction MOVZX_4
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E1E000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E1EC70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x11)
        mem[addr] = value
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E1EC64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E1EC70, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7239, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723A, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723B, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723C, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE723D)
        condition = Operators.AND(condition, cpu.EAX == 0x11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_5_symbolic(self):
        """Instruction MOVZX_5
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E27000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E27850)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E27850)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x74)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E27850, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E27850)
        condition = Operators.AND(condition, cpu.EAX == 0x73)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_6_symbolic(self):
        """Instruction MOVZX_6
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E21000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E21A00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x11)
        mem[addr] = value
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E219F4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E21A00, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7239, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723A, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723B, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723C, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE723D)
        condition = Operators.AND(condition, cpu.EAX == 0x11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_7_symbolic(self):
        """Instruction MOVZX_7
        Groups:
        0xf7fe56ac: movzx   eax, byte ptr [edx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E27000, 0x1000, "rwx")
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E271C0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x79)
        mem[addr] = value
        mem.write(0xF7FE56AC, "\x0f\xb6\x02")
        cpu.EIP = 0xF7FE56AC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E271C0)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x74)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E271C0, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56AF)
        condition = Operators.AND(condition, cpu.EDX == 0xF7E271C0)
        condition = Operators.AND(condition, cpu.EAX == 0x79)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_8_symbolic(self):
        """Instruction MOVZX_8
        Groups:
        0xf7fe7239: movzx   eax, byte ptr [eax + 0xc]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDC3C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x22)
        mem[addr] = value
        mem.write(0xF7FE7239, "\x0f\xb6@\x0c")
        cpu.EIP = 0xF7FE7239
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FDC3BC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC3C8, 8) == ord('"'))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7239, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723A, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723B, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE723C, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE723D)
        condition = Operators.AND(condition, cpu.EAX == 0x22)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_9_symbolic(self):
        """Instruction MOVZX_9
        Groups:
        0xf7fec2c2: movzx   edx, word ptr [eax + 4]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E29000, 0x1000, "rwx")
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC2C2, "\x0f\xb7P\x04")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E295F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E295F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FEC2C2
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x24)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E295F4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2C2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2C3, 8) == ord("\xb7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2C4, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC2C5, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E295F8, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E295F9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC2C6)
        condition = Operators.AND(condition, cpu.EDX == 0xC)
        condition = Operators.AND(condition, cpu.EAX == 0xF7E295F4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_1_symbolic(self):
        """Instruction MOV_1
        Groups:
        0xf7fe22fb: mov     dword ptr [ebp - 0x9c], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        mem.write(0xF7FE22FB, "\x89\x85d\xff\xff\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFED)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFEE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFCFEF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE22FB
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD088)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FC3A7C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2300, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE22FD, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE22FF, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE22FE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE22FC, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE22FB, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFEC, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFED, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFEE, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFCFEF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE2301)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD088)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FC3A7C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_10_symbolic(self):
        """Instruction MOV_10
        Groups:
        0x8057c2f:  mov     esp, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08057000, 0x1000, "rwx")
        mem.write(0x8057C2F, "\x89\xd4")
        cpu.EIP = 0x8057C2F
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFC606)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFC606)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8057C30, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0x8057C2F, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.EIP == 0x8057C31)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFC606)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFC606)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_11_symbolic(self):
        """Instruction MOV_11
        Groups:
        0xf7fe56a0: mov     ecx, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A0, "\x89\xf9")
        cpu.EIP = 0xF7FE56A0
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xC498786F)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x710FF860)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A0, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A1, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A2)
        condition = Operators.AND(condition, cpu.EDI == 0xC498786F)
        condition = Operators.AND(condition, cpu.ECX == 0xC498786F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_12_symbolic(self):
        """Instruction MOV_12
        Groups:
        0xf7fe71a8: mov     eax, dword ptr [esi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2B000, 0x1000, "rwx")
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE71A8, "\x8b\x06")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2B33C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2B33D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2B33E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E2B33F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE71A8
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E2B33C)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FBF650)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71A8, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE71A9, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2B33C, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2B33D, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2B33E, 8) == ord("\x1a"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2B33F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE71AA)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E2B33C)
        condition = Operators.AND(condition, cpu.EAX == 0x1AA654)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_13_symbolic(self):
        """Instruction MOV_13
        Groups:
        0xf7fe4f32: mov     edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F32, "\x89\xc2")
        cpu.EIP = 0xF7FE4F32
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3105395)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x20002000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F32, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F33, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F34)
        condition = Operators.AND(condition, cpu.EDX == 0x20002000)
        condition = Operators.AND(condition, cpu.EAX == 0x20002000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_14_symbolic(self):
        """Instruction MOV_14
        Groups:
        0xf7fe0b98: mov     esi, dword ptr [ebp - 0x30]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE0B98, "\x8bu")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD678)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD679)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        mem.write(0xF7FE0B9A, "\xd0")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD67B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD67A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        cpu.EIP = 0xF7FE0B98
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD6A8)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDC44C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD678, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD679, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B98, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B99, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B9A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD67B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD67A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0B9B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD6A8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFD010)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_15_symbolic(self):
        """Instruction MOV_15
        Groups:
        0xf7ff167f: mov     eax, dword ptr [esp + 0x20]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF1680, "D$ ")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4B2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF167F, "\x8b")
        cpu.EIP = 0xF7FF167F
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x209)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD490)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1680, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1681, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1682, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B1, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B0, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4B2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF167F, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1683)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD490)
        condition = Operators.AND(condition, cpu.EAX == 0x208)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_16_symbolic(self):
        """Instruction MOV_16
        Groups:
        0xf7fe576f: mov     dword ptr [esp], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD381)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD382)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD383)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0xF7FE576F, "\x89\x04$")
        cpu.EIP = 0xF7FE576F
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD380)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFD3E8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD381, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD382, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD383, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE576F, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5770, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5771, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5772)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFD3E8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_17_symbolic(self):
        """Instruction MOV_17
        Groups:
        0xf7fe7219: mov     dword ptr [ebp - 0x74], edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD484)
        value = cs.new_bitvec(8)
        cs.add(value == 0x88)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD485)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD486)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD487)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FE7219, "\x89}\x8c")
        cpu.EIP = 0xF7FE7219
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAB88)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD484, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD485, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD486, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD487, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7219, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE721A, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE721B, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE721C)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAB88)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_18_symbolic(self):
        """Instruction MOV_18
        Groups:
        0xf7fe99cf: mov     dword ptr [ebp - 0x20], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE99CF, "\x89E\xe0")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD478)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD479)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD47A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD47B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE99CF
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD498)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFFFE)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99CF, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99D0, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99D1, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD478, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD479, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD47A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD47B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99D2)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD498)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFFE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_19_symbolic(self):
        """Instruction MOV_19
        Groups:
        0xf7febbf1: mov     edi, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBBF1, "\x89\xc7")
        cpu.EIP = 0xF7FEBBF1
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFD938)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E28049)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBBF1, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBBF2, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBBF3)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E28049)
        condition = Operators.AND(condition, cpu.EAX == 0xF7E28049)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_2_symbolic(self):
        """Instruction MOV_2
        Groups:
        0x8072b02:  mov     eax, 0x137
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072B02, "\xb87\x01\x00\x00")
        cpu.EIP = 0x8072B02
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x137)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8072B02, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x8072B03, 8) == ord("7"))
        condition = Operators.AND(condition, cpu.read_int(0x8072B04, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8072B05, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8072B06, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8072B07)
        condition = Operators.AND(condition, cpu.EAX == 0x137)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_20_symbolic(self):
        """Instruction MOV_20
        Groups:
        0x8059513:  mov     edx, esp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059513, "\x89\xe2")
        cpu.EIP = 0x8059513
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFC606)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFC606)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059513, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0x8059514, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059515)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFC606)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFC606)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_21_symbolic(self):
        """Instruction MOV_21
        Groups:
        0x8077737:  mov     edx, 0
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08077000, 0x1000, "rwx")
        mem.write(0x8077737, "\xba\x00\x00\x00\x00")
        cpu.EIP = 0x8077737
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8077738, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8077739, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807773A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807773B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8077737, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.EIP == 0x807773C)
        condition = Operators.AND(condition, cpu.EDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_3_symbolic(self):
        """Instruction MOV_3
        Groups:
        0xf7ff3e68: mov     al, byte ptr [ecx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E28000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E68, "\x8a\x01")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E280A1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        cpu.EIP = 0xF7FF3E68
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x2E)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E280A1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E68, 8) == ord("\x8a"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E69, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E280A1, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6A)
        condition = Operators.AND(condition, cpu.AL == 0x32)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E280A1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_4_symbolic(self):
        """Instruction MOV_4
        Groups:
        0x8058801:  mov     ebp, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08058000, 0x1000, "rwx")
        mem.write(0x8058801, "\x89\xdd")
        cpu.EIP = 0x8058801
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8058801, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0x8058802, 8) == ord("\xdd"))
        condition = Operators.AND(condition, cpu.EIP == 0x8058803)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.EBX == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_5_symbolic(self):
        """Instruction MOV_5
        Groups:
        0xf7fe4fcb: mov     eax, dword ptr [esp + 0x5c]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x58)
        mem[addr] = value
        mem.write(0xF7FE4FCB, "\x8bD$\\")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD34D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        cpu.EIP = 0xF7FE4FCB
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFD3F0)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2F0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34E, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FCC, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FCB, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34C, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FCD, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FCE, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD34D, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FCF)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FDA858)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_6_symbolic(self):
        """Instruction MOV_6
        Groups:
        0xf7ff3e68: mov     al, byte ptr [ecx]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E68, "\x8a\x01")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDC4F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        cpu.EIP = 0xF7FF3E68
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x74)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDC4F5)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E68, 8) == ord("\x8a"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E69, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDC4F5, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E6A)
        condition = Operators.AND(condition, cpu.AL == 0x61)
        condition = Operators.AND(condition, cpu.ECX == 0xF7FDC4F5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_7_symbolic(self):
        """Instruction MOV_7
        Groups:
        0x805083b:  mov     eax, 0x137
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08050000, 0x1000, "rwx")
        mem.write(0x805083B, "\xb87\x01\x00\x00")
        cpu.EIP = 0x805083B
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x137)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805083B, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x805083C, 8) == ord("7"))
        condition = Operators.AND(condition, cpu.read_int(0x805083D, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x805083E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805083F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8050840)
        condition = Operators.AND(condition, cpu.EAX == 0x137)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_8_symbolic(self):
        """Instruction MOV_8
        Groups:
        0xf7fe4d09: mov     eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4D09, "\x89\xc8")
        cpu.EIP = 0xF7FE4D09
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FDC642)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D09, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D0A, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D0B)
        condition = Operators.AND(condition, cpu.ECX == 0x6)
        condition = Operators.AND(condition, cpu.EAX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_9_symbolic(self):
        """Instruction MOV_9
        Groups:
        0xf7fe9dad: mov     byte ptr [eax], 0x2f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xF7FFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FFDF2B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE9DAD, "\xc6\x00/")
        cpu.EIP = 0xF7FE9DAD
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFDF2B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FFDF2B, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9DAD, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9DAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9DAF, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9DB0)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFDF2B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_1_symbolic(self):
        """Instruction NEG_1
        Groups:
        0xf7ff15a4: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FFDC28)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A5, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF15A6)
        condition = Operators.AND(condition, cpu.EDX == 0x80023D8)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_10_symbolic(self):
        """Instruction NEG_10
        Groups:
        0xf7ff15a4: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FFDEA8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A5, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF15A6)
        condition = Operators.AND(condition, cpu.EDX == 0x8002158)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_11_symbolic(self):
        """Instruction NEG_11
        Groups:
        0xf7fdea7d: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDE000, 0x1000, "rwx")
        mem.write(0xF7FDEA7D, "\xf7\xd8")
        cpu.EIP = 0xF7FDEA7D
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDEA7D, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDEA7E, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDEA7F)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_12_symbolic(self):
        """Instruction NEG_12
        Groups:
        0xf7fe270f: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE270F, "\xf7\xd8")
        cpu.EIP = 0xF7FE270F
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6FFFFEF5)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2710, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE270F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE2711)
        condition = Operators.AND(condition, cpu.EAX == 0x9000010B)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_13_symbolic(self):
        """Instruction NEG_13
        Groups:
        0x8065f5e:  neg     dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F60, "\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        mem.write(0x8065F5E, "\xf7]")
        cpu.EIP = 0x8065F5E
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065F60, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xb9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F5E, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F5F, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F61)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_14_symbolic(self):
        """Instruction NEG_14
        Groups:
        0xf7fe20a7: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE20A7, "\xf7\xda")
        cpu.EIP = 0xF7FE20A7
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE20A8, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE20A7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE20A9)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFF000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_15_symbolic(self):
        """Instruction NEG_15
        Groups:
        0xf7fe230f: neg     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE230F, "\xf7\xde")
        cpu.EIP = 0xF7FE230F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2310, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE230F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE2311)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.ESI == 0xFFFFF000)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_16_symbolic(self):
        """Instruction NEG_16
        Groups:
        0xf7ff06a5: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF06A5, "\xf7\xd8")
        cpu.EIP = 0xF7FF06A5
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06A5, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06A6, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06A7)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_17_symbolic(self):
        """Instruction NEG_17
        Groups:
        0xf7ff1640: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1640, "\xf7\xda")
        cpu.EIP = 0xF7FF1640
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1640, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1641, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1642)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFF000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_18_symbolic(self):
        """Instruction NEG_18
        Groups:
        0xf7ff1591: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1591, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1592, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1593)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFF8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_19_symbolic(self):
        """Instruction NEG_19
        Groups:
        0xf7ff1591: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1591, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1592, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1593)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFF8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_2_symbolic(self):
        """Instruction NEG_2
        Groups:
        0xf7ff1591: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1591, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1592, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1593)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFF8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_20_symbolic(self):
        """Instruction NEG_20
        Groups:
        0xf7fed337: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED337, "\xf7\xd8")
        cpu.EIP = 0xF7FED337
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FED338, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED337, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED339)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_21_symbolic(self):
        """Instruction NEG_21
        Groups:
        0xf7ff15a4: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDAAD0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A5, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF15A6)
        condition = Operators.AND(condition, cpu.EDX == 0x8025530)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_3_symbolic(self):
        """Instruction NEG_3
        Groups:
        0xf7ff1591: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x40)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1591, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1592, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1593)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFC0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_4_symbolic(self):
        """Instruction NEG_4
        Groups:
        0xf7fe6b73: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6B73, "\xf7\xda")
        cpu.EIP = 0xF7FE6B73
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6B73, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6B74, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6B75)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFF000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_5_symbolic(self):
        """Instruction NEG_5
        Groups:
        0xf7fe20a7: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE20A7, "\xf7\xda")
        cpu.EIP = 0xF7FE20A7
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE20A8, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE20A7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE20A9)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFF000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_6_symbolic(self):
        """Instruction NEG_6
        Groups:
        0xf7ff1591: neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1591, "\xf7\xd8")
        cpu.EIP = 0xF7FF1591
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1591, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1592, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1593)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFF8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_7_symbolic(self):
        """Instruction NEG_7
        Groups:
        0xf7ff15a4: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7E14240)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A5, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF15A6)
        condition = Operators.AND(condition, cpu.EDX == 0x81EBDC0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_8_symbolic(self):
        """Instruction NEG_8
        Groups:
        0xf7ff15a4: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDAB08)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A5, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF15A6)
        condition = Operators.AND(condition, cpu.EDX == 0x80254F8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_9_symbolic(self):
        """Instruction NEG_9
        Groups:
        0xf7ff15a4: neg     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF15A4, "\xf7\xda")
        cpu.EIP = 0xF7FF15A4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FDA858)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF15A5, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF15A6)
        condition = Operators.AND(condition, cpu.EDX == 0x80257A8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_1_symbolic(self):
        """Instruction NOT_1
        Groups:
        0x8065e96:  not     dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x8065E96, "\xf7U\x00")
        cpu.EIP = 0x8065E96
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E96, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E97, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E98, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065E99)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_10_symbolic(self):
        """Instruction NOT_10
        Groups:
        0x8065e87:  not     cx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065E87, "f\xf7\xd1")
        cpu.EIP = 0x8065E87
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xFF00)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065E88, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E89, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E87, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065E8A)
        condition = Operators.AND(condition, cpu.CX == 0xFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_11_symbolic(self):
        """Instruction NOT_11
        Groups:
        0x8065e93:  not     dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065E93, "\xf7U\x00")
        cpu.EIP = 0x8065E93
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E93, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E94, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E95, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065E96)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_12_symbolic(self):
        """Instruction NOT_12
        Groups:
        0xf7fe685e: not     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE685E, "\xf7\xd1")
        cpu.EIP = 0xF7FE685E
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE685E, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE685F, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6860)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_13_symbolic(self):
        """Instruction NOT_13
        Groups:
        0x8065e8a:  not     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065E8A, "\xf7\xd1")
        cpu.EIP = 0x8065E8A
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7FFF00FF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065E8A, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E8B, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065E8C)
        condition = Operators.AND(condition, cpu.ECX == 0x8000FF00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_14_symbolic(self):
        """Instruction NOT_14
        Groups:
        0x8065e85:  not     cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065E85, "\xf6\xd1")
        cpu.EIP = 0x8065E85
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065E85, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E86, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065E87)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_15_symbolic(self):
        """Instruction NOT_15
        Groups:
        0xf7fdd6c3: not     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDD000, 0x1000, "rwx")
        mem.write(0xF7FDD6C3, "\xf7\xd0")
        cpu.EIP = 0xF7FDD6C3
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6C3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDD6C4, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDD6C5)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_2_symbolic(self):
        """Instruction NOT_2
        Groups:
        0x8065e8f:  not     word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065E8F, "f\xf7U\x00")
        cpu.EIP = 0x8065E8F
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E8F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E90, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E91, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E92, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065E93)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_3_symbolic(self):
        """Instruction NOT_3
        Groups:
        0xf7fe685e: not     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE685E, "\xf7\xd1")
        cpu.EIP = 0xF7FE685E
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE685E, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE685F, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6860)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_4_symbolic(self):
        """Instruction NOT_4
        Groups:
        0xf7e2e8fb: not     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E8FB, "\xf7\xd0")
        cpu.EIP = 0xF7E2E8FB
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFFE0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E8FB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E8FC, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2E8FD)
        condition = Operators.AND(condition, cpu.EAX == 0x1F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_5_symbolic(self):
        """Instruction NOT_5
        Groups:
        0xf7fe25d1: not     eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE25D1, "\xf7\xd0")
        cpu.EIP = 0xF7FE25D1
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE25D1, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE25D2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE25D3)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFF9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_6_symbolic(self):
        """Instruction NOT_6
        Groups:
        0x8065e8c:  not     byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0x8065E8C, "\xf6U\x00")
        cpu.EIP = 0x8065E8C
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E8C, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E8D, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8065E8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065E8F)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_7_symbolic(self):
        """Instruction NOT_7
        Groups:
        0xf7fe685e: not     ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE685E, "\xf7\xd1")
        cpu.EIP = 0xF7FE685E
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE685E, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE685F, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6860)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_8_symbolic(self):
        """Instruction NOT_8
        Groups:
        0xf7ff0b0e: not     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0B0E, "\xf7\xd2")
        cpu.EIP = 0xF7FF0B0E
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x800F0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B0E, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B0F, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0B10)
        condition = Operators.AND(condition, cpu.EDX == 0x7FF0FFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_9_symbolic(self):
        """Instruction NOT_9
        Groups:
        0xf7ff0b1f: not     edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0B1F, "\xf7\xd2")
        cpu.EIP = 0xF7FF0B1F
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x4008000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B20, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0B1F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0B21)
        condition = Operators.AND(condition, cpu.EDX == 0xFBFF7FFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_1_symbolic(self):
        """Instruction OR_1
        Groups:
        0x8052945:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08052000, 0x1000, "rwx")
        mem.write(0x8052945, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8052945
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8052945, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8052946, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8052947, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8052948, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8052949, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x805294A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x805294B)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_10_symbolic(self):
        """Instruction OR_10
        Groups:
        0x804fbfd:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804F000, 0x1000, "rwx")
        mem.write(0x804FBFD, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804FBFD
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804FC00, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x804FC01, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804FC02, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x804FBFD, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x804FBFE, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x804FBFF, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.EIP == 0x804FC03)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_11_symbolic(self):
        """Instruction OR_11
        Groups:
        0x804f135:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804F000, 0x1000, "rwx")
        mem.write(0x804F135, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804F135
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804F135, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x804F136, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x804F137, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804F138, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x804F139, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804F13A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x804F13B)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_12_symbolic(self):
        """Instruction OR_12
        Groups:
        0xf7fe99e4: or      edx, dword ptr [ebp - 0x24]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE99E4, "\x0bU\xdc")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD474)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD475)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD476)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD477)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        cpu.EIP = 0xF7FE99E4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD498)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99E4, 8) == ord("\x0b"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99E5, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE99E6, 8) == ord("\xdc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD474, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD475, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD476, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD477, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE99E7)
        condition = Operators.AND(condition, cpu.EDX == 0x4000000)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD498)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_13_symbolic(self):
        """Instruction OR_13
        Groups:
        0x8072245:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072245, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8072245
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8072245, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8072246, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8072247, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8072248, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8072249, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x807224A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807224B)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_14_symbolic(self):
        """Instruction OR_14
        Groups:
        0x8053286:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08053000, 0x1000, "rwx")
        mem.write(0x8053286, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8053286
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8053286, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8053287, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8053288, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8053289, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x805328A, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x805328B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x805328C)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_15_symbolic(self):
        """Instruction OR_15
        Groups:
        0x80556bb:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08055000, 0x1000, "rwx")
        mem.write(0x80556BB, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80556BB
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80556C0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80556BB, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x80556BC, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x80556BD, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x80556BE, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80556BF, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.EIP == 0x80556C1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_16_symbolic(self):
        """Instruction OR_16
        Groups:
        0x8052c25:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08052000, 0x1000, "rwx")
        mem.write(0x8052C25, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8052C25
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8052C25, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8052C26, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8052C27, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8052C28, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8052C29, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8052C2A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8052C2B)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_17_symbolic(self):
        """Instruction OR_17
        Groups:
        0x80557fd:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08055000, 0x1000, "rwx")
        mem.write(0x80557FD, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80557FD
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8055800, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8055801, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8055802, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80557FD, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x80557FE, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x80557FF, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.EIP == 0x8055803)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_18_symbolic(self):
        """Instruction OR_18
        Groups:
        0x80539e4:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08053000, 0x1000, "rwx")
        mem.write(0x80539E4, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80539E4
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80539E4, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x80539E5, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x80539E6, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x80539E7, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80539E8, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x80539E9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80539EA)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_19_symbolic(self):
        """Instruction OR_19
        Groups:
        0x8073cc6:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08073000, 0x1000, "rwx")
        mem.write(0x8073CC6, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8073CC6
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8073CC6, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8073CC7, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8073CC8, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8073CC9, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8073CCA, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8073CCB, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8073CCC)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_2_symbolic(self):
        """Instruction OR_2
        Groups:
        0x8072ec2:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072EC2, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8072EC2
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8072EC2, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8072EC3, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8072EC4, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8072EC5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8072EC6, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8072EC7, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8072EC8)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_20_symbolic(self):
        """Instruction OR_20
        Groups:
        0x8051ddc:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08051000, 0x1000, "rwx")
        mem.write(0x8051DDC, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8051DDC
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8051DE0, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8051DE1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8051DDC, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8051DDD, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8051DDE, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8051DDF, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8051DE2)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_21_symbolic(self):
        """Instruction OR_21
        Groups:
        0x807523f:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08075000, 0x1000, "rwx")
        mem.write(0x807523F, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x807523F
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8075240, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8075241, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8075242, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8075243, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8075244, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807523F, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.EIP == 0x8075245)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_3_symbolic(self):
        """Instruction OR_3
        Groups:
        0x804dfc7:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804DFC7, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804DFC7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804DFC7, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x804DFC8, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x804DFC9, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804DFCA, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x804DFCB, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804DFCC, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x804DFCD)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_4_symbolic(self):
        """Instruction OR_4
        Groups:
        0x80755c0:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08075000, 0x1000, "rwx")
        mem.write(0x80755C0, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80755C0
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80755C0, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x80755C1, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x80755C2, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x80755C3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80755C4, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x80755C5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80755C6)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_5_symbolic(self):
        """Instruction OR_5
        Groups:
        0x8072273:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08072000, 0x1000, "rwx")
        mem.write(0x8072273, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8072273
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8072273, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8072274, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8072275, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8072276, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x8072277, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x8072278, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x8072279)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_6_symbolic(self):
        """Instruction OR_6
        Groups:
        0x804f796:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804F000, 0x1000, "rwx")
        mem.write(0x804F796, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x804F796
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3130313)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804F796, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x804F797, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x804F798, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804F799, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x804F79A, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x804F79B, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x804F79C)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3130313)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_7_symbolic(self):
        """Instruction OR_7
        Groups:
        0xf7fe7283: or      eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7283, "\t\xc8")
        cpu.EIP = 0xF7FE7283
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFF00)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E1DD00)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7283, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7284, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7285)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFF00)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF7E1DD00)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_8_symbolic(self):
        """Instruction OR_8
        Groups:
        0x80713ce:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08071000, 0x1000, "rwx")
        mem.write(0x80713CE, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x80713CE
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80713CE, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x80713CF, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x80713D0, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x80713D1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x80713D2, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x80713D3, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x80713D4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_9_symbolic(self):
        """Instruction OR_9
        Groups:
        0x8078547:  or      ecx, 0x3130313
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08078000, 0x1000, "rwx")
        mem.write(0x8078547, "\x81\xc9\x13\x03\x13\x03")
        cpu.EIP = 0x8078547
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF1F731F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8078547, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x8078548, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x8078549, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x807854A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x807854B, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x807854C, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0x807854D)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xFF1F731F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PALIGNR_1_symbolic(self):
        """Instruction PALIGNR_1
        Groups: ssse3
        0x8059a25:  palignr xmm0, xmm1, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A25, "f\x0f:\x0f\xc1\x02")
        cpu.EIP = 0x8059A25
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A25, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A26, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A27, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A28, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A29, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A2A, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A2B)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PALIGNR_2_symbolic(self):
        """Instruction PALIGNR_2
        Groups: ssse3
        0x8059a2b:  palignr xmm0, xmmword ptr [ebp], 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8059A2B, "f\x0f:\x0fE\x00\x02")
        cpu.EIP = 0x8059A2B
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A2B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A2C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A2D, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A2E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A2F, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A30, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A31, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A32)
        condition = Operators.AND(condition, cpu.XMM0 == 0x1E00)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PAND_1_symbolic(self):
        """Instruction PAND_1
        Groups: sse2
        0x8079492:  pand    xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079492, "f\x0f\xdb\xc1")
        cpu.EIP = 0x8079492
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079492, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079493, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079494, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x8079495, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079496)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PAND_2_symbolic(self):
        """Instruction PAND_2
        Groups: sse2
        0x8079496:  pand    xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079496, "f\x0f\xdbE\x00")
        cpu.EIP = 0x8079496
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079496, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079497, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079498, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x8079499, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807949A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807949B)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PAUSE_1_symbolic(self):
        """Instruction PAUSE_1
        Groups: sse2
        0x8059855:  pause
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059855, "\xf3\x90")
        cpu.EIP = 0x8059855

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059855, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x8059856, 8) == ord("\x90"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059857)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_1_symbolic(self):
        """Instruction PCMPEQB_1
        Groups: sse2
        0x80565cb:  pcmpeqb xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x37)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80565CB, "f\x0ftE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x80565CB
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80565CB, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80565CC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80565CD, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x80565CE, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80565CF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80565D0)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_2_symbolic(self):
        """Instruction PCMPEQB_2
        Groups: sse2
        0x80565c7:  pcmpeqb xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.write(0x80565C7, "f\x0ft\xc1")
        cpu.EIP = 0x80565C7
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80565C8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80565C9, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x80565CA, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80565C7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x80565CB)
        condition = Operators.AND(condition, cpu.XMM0 == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PEXTRW_1_symbolic(self):
        """Instruction PEXTRW_1
        Groups: sse2
        0x80599cf:  pextrw  ecx, xmm1, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599CF, "f\x0f\xc5\xc9\x02")
        cpu.EIP = 0x80599CF
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFF0D9F31)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599D0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D1, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D2, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x80599CF, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599D4)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PEXTRW_2_symbolic(self):
        """Instruction PEXTRW_2
        Groups: sse41
        0x80599d4:  pextrw  word ptr [ebp], xmm1, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB4)
        mem[addr] = value
        mem.write(0x80599D4, "f\x0f:\x15M\x00\x02")
        cpu.EIP = 0x80599D4
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D7, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D8, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x80599D9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80599DA, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599DB)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PINSRW_1_symbolic(self):
        """Instruction PINSRW_1
        Groups: sse2
        0x805ba73:  pinsrw  xmm0, edx, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA73, "f\x0f\xc4\xc2\x02")
        cpu.EIP = 0x805BA73
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x1)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BA73, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA74, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA75, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA76, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA77, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA78)
        condition = Operators.AND(condition, cpu.XMM0 == 0x3EC00000001)
        condition = Operators.AND(condition, cpu.EDX == 0x3EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PINSRW_2_symbolic(self):
        """Instruction PINSRW_2
        Groups: sse2
        0x805ba78:  pinsrw  xmm0, word ptr [ebp], 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BA78, "f\x0f\xc4E\x00\x02")
        cpu.EIP = 0x805BA78
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x3EC00000001)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA78, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA79, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA7A, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA7B, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA7C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA7D, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA7E)
        condition = Operators.AND(condition, cpu.XMM0 == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_1_symbolic(self):
        """Instruction PMINUB_1
        Groups: sse2
        0x8065f88:  pminub  xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065F88, "f\x0f\xdaE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x8065F88
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F88, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F89, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F8A, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F8B, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F8D)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_2_symbolic(self):
        """Instruction PMINUB_2
        Groups: sse2
        0x8065f84:  pminub  xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F84, "f\x0f\xda\xc1")
        cpu.EIP = 0x8065F84
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x8000800080000000)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065F84, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F85, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F86, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F87, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F88)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_1_symbolic(self):
        """Instruction PMOVMSKB_1
        Groups: sse2
        0x804d5b5:  pmovmskb        ecx, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5B5, "f\x0f\xd7\xc9")
        cpu.EIP = 0x804D5B5
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D5B8, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5B5, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5B6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5B7, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D5B9)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POPCNT_1_symbolic(self):
        """Instruction POPCNT_1
        Groups:
        0x804d545:  popcnt  ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D545, "\xf3\x0f\xb8\xca")
        cpu.EIP = 0x804D545
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D548, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x804D545, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x804D546, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D547, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D549)
        condition = Operators.AND(condition, cpu.EDX == 0xF0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POPCNT_2_symbolic(self):
        """Instruction POPCNT_2
        Groups:
        0x804d53a:  popcnt  cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D53A, "f\xf3\x0f\xb8\xca")
        cpu.EIP = 0x804D53A
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xF0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D53A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D53B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x804D53C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D53D, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x804D53E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D53F)
        condition = Operators.AND(condition, cpu.CX == 0x4)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.DX == 0xF0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POPCNT_3_symbolic(self):
        """Instruction POPCNT_3
        Groups:
        0x804d549:  popcnt  ecx, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D549, "\xf3\x0f\xb8M\x00")
        cpu.EIP = 0x804D549
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D549, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x804D54A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D54B, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x804D54C, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D54D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D54E)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POPCNT_4_symbolic(self):
        """Instruction POPCNT_4
        Groups:
        0x804d53f:  popcnt  cx, word ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D540, "\xf3\x0f\xb8M\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D53F, "f")
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.EIP = 0x804D53F
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x4)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D540, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x804D541, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D542, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x804D543, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D544, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D53F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.EIP == 0x804D545)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POPFD_1_symbolic(self):
        """Instruction POPFD_1
        Groups: not64bitmode
        0x804840d:  popfd
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC5FF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC5FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEB)
        mem[addr] = value
        mem.write(0x804840D, "\x9d")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC5FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC5FD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB6)
        mem[addr] = value
        cpu.EIP = 0x804840D
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFC600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC5FF, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC5FC, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x804840D, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC5FE, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC5FD, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.EIP == 0x804840E)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFC604)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POPF_1_symbolic(self):
        """Instruction POPF_1
        Groups:
        0x804840e:  popf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFC608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804840E, "f\x9d")
        cpu.EIP = 0x804840E
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFC604)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFC608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804840E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804840F, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048410)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFC606)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_1_symbolic(self):
        """Instruction POP_1
        Groups: not64bitmode
        0xf7fe4d36: pop     ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        mem.write(0xF7FE4D36, "[")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2D8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2D9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D36
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABF8)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2DC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D36, 8) == ord("["))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2D8, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2D9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DA, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DD, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D37)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDABF8)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_10_symbolic(self):
        """Instruction POP_10
        Groups: not64bitmode
        0xf7ff43d4: pop     ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD014)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD015)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD016)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD017)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD018)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FF43D4, "[")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD01C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2B)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD019)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        cpu.EIP = 0xF7FF43D4
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD308)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FF4390)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD018)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD014, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD015, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD016, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD017, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD018, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF43D4, 8) == ord("["))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD01C, 8) == ord("+"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD019, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF43D5)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD308)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD01C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_11_symbolic(self):
        """Instruction POP_11
        Groups: not64bitmode
        0xf7fe9129: pop     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC8)
        mem[addr] = value
        mem.write(0xF7FE9129, "_")
        cpu.EIP = 0xF7FE9129
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xC)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD4F4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F4, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F5, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F8, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9129, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE912A)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FFD938)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD4F8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_12_symbolic(self):
        """Instruction POP_12
        Groups: not64bitmode
        0xf7fe4d38: pop     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        mem.write(0xF7FE4D38, "_")
        cpu.EIP = 0xF7FE4D38
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E1E4E4)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABA8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D38, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D39)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_13_symbolic(self):
        """Instruction POP_13
        Groups: not64bitmode
        0xf7ff06a2: pop     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD010)
        value = cs.new_bitvec(8)
        cs.add(value == 0x22)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD011)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        mem.write(0xF7FF06A2, "^")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD013)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD014)
        value = cs.new_bitvec(8)
        cs.add(value == 0x23)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD012)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD00C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD00D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD00E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD00F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF06A2
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x80481F2)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD010)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD010, 8) == ord('"'))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD011, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06A2, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD013, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD014, 8) == ord("#"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD012, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD00C, 8) == ord("\x0e"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD00D, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD00E, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD00F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06A3)
        condition = Operators.AND(condition, cpu.EBP == 0x80481F2)
        condition = Operators.AND(condition, cpu.ESI == 0x322)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD014)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_14_symbolic(self):
        """Instruction POP_14
        Groups: not64bitmode
        0xf7feacad: pop     ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x11)
        mem[addr] = value
        mem.write(0xF7FEACAD, "]")
        cpu.EIP = 0xF7FEACAD
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FE0740)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD4F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F4, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F5, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F8, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F9, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FC, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEACAD, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEACAE)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD5C8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD4FC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_15_symbolic(self):
        """Instruction POP_15
        Groups: not64bitmode
        0xf7fe4d37: pop     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        mem.write(0xF7FE4D37, "^")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D37
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDADF8)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xD696910)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D37, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DD, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D38)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDADF8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDC28C)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_16_symbolic(self):
        """Instruction POP_16
        Groups: not64bitmode
        0xf7febc56: pop     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0xF7FEBC56, "^")
        cpu.EIP = 0xF7FEBC56
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("j"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBC56, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBC57)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E16A60)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_17_symbolic(self):
        """Instruction POP_17
        Groups: not64bitmode
        0xf7febc56: pop     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE9)
        mem[addr] = value
        mem.write(0xF7FEBC56, "^")
        cpu.EIP = 0xF7FEBC56
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD488)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD3F4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F1, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F4, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F5, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBC56, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F8, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBC57)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD488)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFD938)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD3F8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_18_symbolic(self):
        """Instruction POP_18
        Groups: not64bitmode
        0xf7fe4d37: pop     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x94)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x71)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0xF7FE4D37, "^")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D37
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDADF8)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xD696910)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D37, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DD, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D38)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDADF8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E17194)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_19_symbolic(self):
        """Instruction POP_19
        Groups: not64bitmode
        0xf7fe4d39: pop     ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        mem.write(0xF7FE4D39, "]")
        cpu.EIP = 0xF7FE4D39
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDADF8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D39, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D3A)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_2_symbolic(self):
        """Instruction POP_2
        Groups: not64bitmode
        0xf7fe4d36: pop     ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x98)
        mem[addr] = value
        mem.write(0xF7FE4D36, "[")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2D8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2D9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D36
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABA8)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2DC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D36, 8) == ord("["))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2D8, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2D9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DA, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DD, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D37)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_20_symbolic(self):
        """Instruction POP_20
        Groups: not64bitmode
        0xf7fe4d38: pop     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        mem.write(0xF7FE4D38, "_")
        cpu.EIP = 0xF7FE4D38
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E1EC64)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABA8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D38, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D39)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_21_symbolic(self):
        """Instruction POP_21
        Groups: not64bitmode
        0xf7eaa40c: pop     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        mem.write(0xF7EAA40C, "_")
        cpu.EIP = 0xF7EAA40C
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xFFFFD5EF)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xBC)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD5F4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F0, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F8, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA40C, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA40D)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xBC)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD5F8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_3_symbolic(self):
        """Instruction POP_3
        Groups: not64bitmode
        0xf7fe57eb: pop     ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD430)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE57EB, "[")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD428)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD429)
        value = cs.new_bitvec(8)
        cs.add(value == 0x99)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE57EB
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD42C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD430, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD428, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD429, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42A, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57EB, 8) == ord("["))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57EC)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD430)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_4_symbolic(self):
        """Instruction POP_4
        Groups: not64bitmode
        0xf7ff06cb: pop     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD010)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD011)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD012)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD013)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD014)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD015)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD016)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD017)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD018)
        value = cs.new_bitvec(8)
        cs.add(value == 0xCB)
        mem[addr] = value
        mem.write(0xF7FF06CB, "_")
        cpu.EIP = 0xF7FF06CB
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x31)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x61)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD014)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD010, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD011, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD012, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD013, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD014, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD015, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD016, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD017, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD018, 8) == ord("\xcb"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF06CB, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF06CC)
        condition = Operators.AND(condition, cpu.EDI == 0x3B8)
        condition = Operators.AND(condition, cpu.EBP == 0x61)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD018)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_5_symbolic(self):
        """Instruction POP_5
        Groups: not64bitmode
        0xf7fe4d39: pop     ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        mem.write(0xF7FE4D39, "]")
        cpu.EIP = 0xF7FE4D39
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABA8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D39, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D3A)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_6_symbolic(self):
        """Instruction POP_6
        Groups: not64bitmode
        0xf7fe4fe2: pop     esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD370)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD371)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        mem.write(0xF7FE4FE2, "^")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD373)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD374)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD372)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4FE2
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E17EFC)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD370)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD370, 8) == ord("\xb4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD371, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FE2, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD373, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD374, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD372, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FE3)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESI == 0xFFFFD4B4)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD374)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_7_symbolic(self):
        """Instruction POP_7
        Groups: not64bitmode
        0xf7fe4d38: pop     edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        mem.write(0xF7FE4D38, "_")
        cpu.EIP = 0xF7FE4D38
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E21984)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABA8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D38, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D39)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDABA8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_8_symbolic(self):
        """Instruction POP_8
        Groups: not64bitmode
        0xf7fe4fe4: pop     ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4FE4, "]")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD375)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD376)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD377)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD374)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        cpu.EIP = 0xF7FE4FE4
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD378)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FE4, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD375, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD376, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD377, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD374, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FE5)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD37C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_9_symbolic(self):
        """Instruction POP_9
        Groups: not64bitmode
        0xf7fe57eb: pop     ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD430)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE57EB, "[")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD428)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD429)
        value = cs.new_bitvec(8)
        cs.add(value == 0x99)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD42F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE57EB
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD42C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD430, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD428, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD429, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42A, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57EB, 8) == ord("["))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD42F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57EC)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD430)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_1_symbolic(self):
        """Instruction POR_1
        Groups: sse2
        0x8079357:  por     xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079357, "f\x0f\xebE\x00")
        cpu.EIP = 0x8079357
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079357, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079358, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079359, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x807935A, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807935B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807935C)
        condition = Operators.AND(condition, cpu.XMM0 == 0x80F1FC0000000101)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_2_symbolic(self):
        """Instruction POR_2
        Groups: sse2
        0x8079353:  por     xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079353, "f\x0f\xeb\xc1")
        cpu.EIP = 0x8079353
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079353, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079354, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079355, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x8079356, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079357)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PREFETCHT0_1_symbolic(self):
        """Instruction PREFETCHT0_1
        Groups: sse1
        0x8070431:  prefetcht0      byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        mem.write(0x8070431, "\x0f\x18M\x00")
        cpu.EIP = 0x8070431
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x8070431, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070432, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0x8070433, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8070434, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070435)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PREFETCHT1_1_symbolic(self):
        """Instruction PREFETCHT1_1
        Groups: sse1
        0x807042d:  prefetcht1      byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070430, "\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        mem.write(0x807042D, "\x0f\x18U")
        cpu.EIP = 0x807042D
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070430, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x807042D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807042E, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0x807042F, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070431)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PREFETCHT2_1_symbolic(self):
        """Instruction PREFETCHT2_1
        Groups: sse1
        0x8070429:  prefetcht2      byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        mem.write(0x8070429, "\x0f\x18]\x00")
        cpu.EIP = 0x8070429
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x8070429, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807042A, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0x807042B, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.read_int(0x807042C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807042D)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_1_symbolic(self):
        """Instruction PSHUFD_1
        Groups: sse2
        0x8060d6e:  pshufd  xmm0, xmm1, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060D6E, "f\x0fp\xc1\x02")
        cpu.EIP = 0x8060D6E
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8060D70, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D71, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D72, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D6E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D6F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8060D73)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_2_symbolic(self):
        """Instruction PSHUFD_2
        Groups: sse2
        0x8060d73:  pshufd  xmm0, xmmword ptr [ebp], 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8060D73, "f\x0fpE\x00\x02")
        cpu.EIP = 0x8060D73
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D73, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D74, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D75, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D76, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D77, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D78, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x8060D79)
        condition = Operators.AND(condition, cpu.XMM0 == 0xF0800000F0800000F0800000000000)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFLW_1_symbolic(self):
        """Instruction PSHUFLW_1
        Groups: sse2
        0x8060d7e:  pshuflw xmm0, xmmword ptr [ebp], 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8060D80, "pE\x00\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8060D7E, "\xf2\x0f")
        cpu.EIP = 0x8060D7E
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8060D80, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D81, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D82, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D83, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D7E, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D7F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8060D84)
        condition = Operators.AND(condition, cpu.XMM0 == 0x8000800080000000)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFLW_2_symbolic(self):
        """Instruction PSHUFLW_2
        Groups: sse2
        0x8060d79:  pshuflw xmm0, xmm1, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08060000, 0x1000, "rwx")
        mem.write(0x8060D79, "\xf2\x0fp\xc1\x02")
        cpu.EIP = 0x8060D79
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xF0800000F0800000F0800000000000)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8060D79, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D7A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D7B, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D7C, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8060D7D, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x8060D7E)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSLLDQ_1_symbolic(self):
        """Instruction PSLLDQ_1
        Groups: sse2
        0x80701bd:  pslldq  xmm0, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701BD, "f\x0fs\xf8\x04")
        cpu.EIP = 0x80701BD
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80701C0, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x80701C1, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x80701BD, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701BF, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701C2)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSLLDQ_2_symbolic(self):
        """Instruction PSLLDQ_2
        Groups: sse2
        0x80701c2:  pslldq  xmm0, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701C2, "f\x0fs\xf8\xff")
        cpu.EIP = 0x80701C2
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80701C2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701C3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701C4, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x80701C5, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x80701C6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701C7)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSRLDQ_1_symbolic(self):
        """Instruction PSRLDQ_1
        Groups: sse2
        0x807948d:  psrldq  xmm0, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807948D, "f\x0fs\xd8\xff")
        cpu.EIP = 0x807948D
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079490, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x8079491, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x807948D, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807948E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807948F, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079492)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSRLDQ_2_symbolic(self):
        """Instruction PSRLDQ_2
        Groups: sse2
        0x8079488:  psrldq  xmm0, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079488, "f\x0fs\xd8\x04")
        cpu.EIP = 0x8079488
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079488, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079489, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807948A, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x807948B, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x807948C, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x807948D)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSRLQ_1_symbolic(self):
        """Instruction PSRLQ_1
        Groups: sse2
        0x80702c5:  psrlq   xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702C5, "f\x0f\xd3\xc1")
        cpu.EIP = 0x80702C5
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x80F1FC0001E18501)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702C8, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80702C5, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702C6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702C7, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702C9)
        condition = Operators.AND(condition, cpu.XMM0 == 0x80F1FC0001E18501)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSRLQ_2_symbolic(self):
        """Instruction PSRLQ_2
        Groups: sse2
        0x80702c9:  psrlq   xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80702C9, "f\x0f\xd3E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x80702C9
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x80F1FC0001E18501)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80702C9, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702CA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702CB, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0x80702CC, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80702CD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702CE)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSRLQ_3_symbolic(self):
        """Instruction PSRLQ_3
        Groups: sse2
        0x80702ce:  psrlq   xmm0, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702CE, "f\x0fs\xd0\x04")
        cpu.EIP = 0x80702CE
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702D0, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x80702D1, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x80702D2, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x80702CE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702CF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702D3)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSRLQ_4_symbolic(self):
        """Instruction PSRLQ_4
        Groups: sse2
        0x80702d3:  psrlq   xmm0, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702D3, "f\x0fs\xd0\xff")
        cpu.EIP = 0x80702D3
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702D3, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702D4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702D5, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x80702D6, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x80702D7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702D8)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSUBB_1_symbolic(self):
        """Instruction PSUBB_1
        Groups: sse2
        0x805bb96:  psubb   xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BB96, "f\x0f\xf8\xc1")
        cpu.EIP = 0x805BB96
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BB98, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB99, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB96, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB97, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BB9A)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSUBB_2_symbolic(self):
        """Instruction PSUBB_2
        Groups: sse2
        0x805bb9a:  psubb   xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BB9A, "f\x0f\xf8E\x00")
        cpu.EIP = 0x805BB9A
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB9A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB9B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB9C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB9D, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805BB9E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BB9F)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PTEST_1_symbolic(self):
        """Instruction PTEST_1
        Groups: sse41
        0x80702df:  ptest   xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702DF, "f\x0f8\x17\xc1")
        cpu.EIP = 0x80702DF
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702E0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E1, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E2, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E3, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80702DF, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702E4)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PTEST_2_symbolic(self):
        """Instruction PTEST_2
        Groups: sse41
        0x80702e4:  ptest   xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80702E4, "f\x0f8\x17E\x00")
        cpu.EIP = 0x80702E4
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E6, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E7, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E8, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80702E9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702EA)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_1_symbolic(self):
        """Instruction PUNPCKLBW_1
        Groups: sse2
        0x8079382:  punpcklbw       xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079382, "f\x0f`E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        cpu.EIP = 0x8079382
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x8000F100FC00000000000000010001)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079382, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079383, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079384, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x8079385, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8079386, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079387)
        condition = Operators.AND(condition, cpu.XMM0 == 0x8000F100FC0000000000000100000101)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_2_symbolic(self):
        """Instruction PUNPCKLBW_2
        Groups: sse2
        0x807937e:  punpcklbw       xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807937E, "f\x0f`\xc1")
        cpu.EIP = 0x807937E
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x80F1FC0000000101)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079380, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x8079381, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x807937E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x807937F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079382)
        condition = Operators.AND(condition, cpu.XMM0 == 0x8000F100FC00000000000000010001)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLDQ_1_symbolic(self):
        """Instruction PUNPCKLDQ_1
        Groups: sse2
        0x804d60e:  punpckldq       xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D60E, "f\x0fbE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x804D60E
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D60E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D60F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D610, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x804D611, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x804D612, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D613)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLDQ_2_symbolic(self):
        """Instruction PUNPCKLDQ_2
        Groups: sse2
        0x804d60a:  punpckldq       xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D60A, "f\x0fb\xc1")
        cpu.EIP = 0x804D60A
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D60A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D60B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D60C, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x804D60D, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D60E)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLQDQ_1_symbolic(self):
        """Instruction PUNPCKLQDQ_1
        Groups: sse2
        0x8056673:  punpcklqdq      xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8056673, "f\x0flE\x00")
        cpu.EIP = 0x8056673
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8056673, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8056674, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8056675, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0x8056676, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8056677, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8056678)
        condition = Operators.AND(condition, cpu.XMM0 == 0xFFFFFFFF0000000000000000)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLQDQ_2_symbolic(self):
        """Instruction PUNPCKLQDQ_2
        Groups: sse2
        0x805666f:  punpcklqdq      xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.write(0x805666F, "f\x0fl\xc1")
        cpu.EIP = 0x805666F
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8056670, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8056671, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0x8056672, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805666F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8056673)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_1_symbolic(self):
        """Instruction PUNPCKLWD_1
        Groups: sse2
        0x805985b:  punpcklwd       xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805985B, "f\x0faE\x00")
        cpu.EIP = 0x805985B
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805985B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805985C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805985D, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x805985E, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805985F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059860)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_2_symbolic(self):
        """Instruction PUNPCKLWD_2
        Groups: sse2
        0x8059857:  punpcklwd       xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059857, "f\x0fa\xc1")
        cpu.EIP = 0x8059857
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059858, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059859, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x805985A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059857, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x805985B)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_1_symbolic(self):
        """Instruction PUSH_1
        Groups: not64bitmode
        0xf7febbf3: push    esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEBBF3, "V")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE9)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x81)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        cpu.EIP = 0xF7FEBBF3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD488)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FFDC28)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD3F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBBF3, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F4, 8) == ord("("))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F5, 8) == ord("\xdc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F8, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F9, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FA, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FB, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FC, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBBF4)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD488)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFDC28)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD3F4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_10_symbolic(self):
        """Instruction PUSH_10
        Groups: not64bitmode
        0xf7fe4c87: push    ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0xF7FE4C87, "S")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4C87
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("\x8a"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C87, 8) == ord("S"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DD, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C88)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2DC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_11_symbolic(self):
        """Instruction PUSH_11
        Groups: not64bitmode
        0xf7fe4c87: push    ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x88)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0xF7FE4C87, "S")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2DF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4C87
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C87, 8) == ord("S"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DD, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2DF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C88)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2DC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_12_symbolic(self):
        """Instruction PUSH_12
        Groups: not64bitmode
        0xf7fe4e15: push    ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD370)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD371)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD372)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD373)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD374)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE4E15, "S")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF5)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4E15
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD370)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD370, 8) == ord("\xb4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD371, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD372, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD373, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD374, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E15, 8) == ord("S"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E16)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD36C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_13_symbolic(self):
        """Instruction PUSH_13
        Groups: not64bitmode
        0xf7fe5670: push    ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE5670, "U")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE5670
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD43C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5670, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5671)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD438)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_14_symbolic(self):
        """Instruction PUSH_14
        Groups: not64bitmode
        0xf7fe5670: push    ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE5670, "U")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE5670
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD43C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5670, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5671)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD438)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_15_symbolic(self):
        """Instruction PUSH_15
        Groups: not64bitmode
        0xf7fe4c84: push    esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x81)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8)
        mem[addr] = value
        mem.write(0xF7FE4C84, "V")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        cpu.EIP = 0xF7FE4C84
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E17D20)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C84, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C85)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E17D20)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_16_symbolic(self):
        """Instruction PUSH_16
        Groups: not64bitmode
        0xf7fe4c81: push    edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C81, "W")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        cpu.EIP = 0xF7FE4C81
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x1)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C81, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C82)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_17_symbolic(self):
        """Instruction PUSH_17
        Groups: not64bitmode
        0x80482da:  push    edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6A4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6A5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6A6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6A7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD6AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1C)
        mem[addr] = value
        mem.write(0x80482DA, "R")
        cpu.EIP = 0x80482DA
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FEB160)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x0)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD6A8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6A4, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6A5, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6A6, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6A7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6A8, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6A9, 8) == ord("\xd6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6AB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD6AC, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.read_int(0x80482DA, 8) == ord("R"))
        condition = Operators.AND(condition, cpu.EIP == 0x80482DB)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FEB160)
        condition = Operators.AND(condition, cpu.EBP == 0x0)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD6A4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_18_symbolic(self):
        """Instruction PUSH_18
        Groups: not64bitmode
        0xf7fe4c84: push    esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FE4C84, "V")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        cpu.EIP = 0xF7FE4C84
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E16DF0)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E0, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E1, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E2, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C84, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C85)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E16DF0)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_19_symbolic(self):
        """Instruction PUSH_19
        Groups: not64bitmode
        0xf7f00d11: push    esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7F00000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7F00D11, "V")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD5FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAC)
        mem[addr] = value
        cpu.EIP = 0xF7F00D11
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD6C4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x3)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD5F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7F00D11, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F4, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F8, 8) == ord("\xb4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5F9, 8) == ord("\xd6"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5FA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5FB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD5FC, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7F00D12)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD6C4)
        condition = Operators.AND(condition, cpu.ESI == 0x3)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD5F4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_2_symbolic(self):
        """Instruction PUSH_2
        Groups: not64bitmode
        0xf7fe5673: push    edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5673, "W")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD434)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD435)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD436)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD437)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        cpu.EIP = 0xF7FE5673
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x6)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD438)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5673, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD434, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD435, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD436, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD437, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5674)
        condition = Operators.AND(condition, cpu.EDI == 0x6)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD434)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_20_symbolic(self):
        """Instruction PUSH_20
        Groups: not64bitmode
        0xf7fe4c81: push    edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4C81, "W")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        cpu.EIP = 0xF7FE4C81
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x1)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2E8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C81, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C82)
        condition = Operators.AND(condition, cpu.EDI == 0x1)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_21_symbolic(self):
        """Instruction PUSH_21
        Groups: not64bitmode
        0xf7fe4e15: push    ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD370)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD371)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD372)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD373)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD374)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE4E15, "S")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4E15
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD370)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD370, 8) == ord("\xb4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD371, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD372, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD373, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD374, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E15, 8) == ord("S"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E16)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD36C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_3_symbolic(self):
        """Instruction PUSH_3
        Groups: not64bitmode
        0xf7fec093: push    edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEC093, "W")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD484)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD485)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD486)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD487)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD488)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD489)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD48A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD48B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD48C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x39)
        mem[addr] = value
        cpu.EIP = 0xF7FEC093
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD488)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD488)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC093, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD484, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD485, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD486, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD487, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD488, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD489, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD48A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD48B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD48C, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC094)
        condition = Operators.AND(condition, cpu.EDI == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD488)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD484)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_4_symbolic(self):
        """Instruction PUSH_4
        Groups: not64bitmode
        0xf7fe4e10: push    ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        mem.write(0xF7FE4E10, "U")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4E10
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD37C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E10, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E11)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD378)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_5_symbolic(self):
        """Instruction PUSH_5
        Groups: not64bitmode
        0xf7fe5673: push    edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE5673, "W")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD434)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD435)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD436)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD437)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        cpu.EIP = 0xF7FE5673
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x6)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD438)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5673, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD434, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD435, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD436, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD437, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5674)
        condition = Operators.AND(condition, cpu.EDI == 0x6)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD434)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_6_symbolic(self):
        """Instruction PUSH_6
        Groups: not64bitmode
        0xf7febbf3: push    esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FEBBF3, "V")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD3FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        cpu.EIP = 0xF7FEBBF3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD488)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FFD938)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD3F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBBF3, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F4, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F5, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F8, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3F9, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FA, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD3FC, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBBF4)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD488)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FFD938)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD3F4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_7_symbolic(self):
        """Instruction PUSH_7
        Groups: not64bitmode
        0xf7fe6b50: push    ebp
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        mem.write(0xF7FE6B50, "U")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE6B50
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD43C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6B50, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6B51)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD438)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_8_symbolic(self):
        """Instruction PUSH_8
        Groups: not64bitmode
        0xf7ff41a0: push    ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FF41A0, "S")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD040)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD038)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD039)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD03A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD03B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD03C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x94)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD03D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD03E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD03F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF41A0
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD088)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD03C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF41A0, 8) == ord("S"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD040, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD038, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD039, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD03A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD03B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD03C, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD03D, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD03E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD03F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF41A1)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD088)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD038)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_9_symbolic(self):
        """Instruction PUSH_9
        Groups: not64bitmode
        0xf7fe4e15: push    ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD370)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD371)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD372)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD373)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD374)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE4E15, "S")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD36F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4E15
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD370)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD370, 8) == ord("\xb4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD371, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD372, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD373, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD374, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E15, 8) == ord("S"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD36F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E16)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD36C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_1_symbolic(self):
        """Instruction PXOR_1
        Groups: sse2
        0x8059a6a:  pxor    xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8059A6A, "f\x0f\xefE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x8059A6A
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x1E00)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A6C, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A6E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A6B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A6A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A6D, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A6F)
        condition = Operators.AND(condition, cpu.XMM0 == 0x78031DEC)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_2_symbolic(self):
        """Instruction PXOR_2
        Groups: sse2
        0x8059a66:  pxor    xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A66, "f\x0f\xef\xc1")
        cpu.EIP = 0x8059A66
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x1E00)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A68, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A69, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A66, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A67, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A6A)
        condition = Operators.AND(condition, cpu.XMM0 == 0x1E00)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_1_symbolic(self):
        """Instruction RET_1
        Groups: ret, not64bitmode
        0xf7ff4256: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC4)
        mem[addr] = value
        mem.write(0xF7FF4256, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x86)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x13)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF4256
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDB1C4)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F0, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4256, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2ED, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1386)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDB1C4)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_10_symbolic(self):
        """Instruction RET_10
        Groups: ret, not64bitmode
        0xf7fe57ef: ret     0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE57EF, "\xc2\x14\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE57EF
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD43C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57EF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57F0, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72F8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD454)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_11_symbolic(self):
        """Instruction RET_11
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        mem.write(0xF7FF476B, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x97)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF476B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2AC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B0, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A9, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF476B, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AC, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AD, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C97)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_12_symbolic(self):
        """Instruction RET_12
        Groups: ret, not64bitmode
        0xf7fe4fe5: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        mem.write(0xF7FE4FE5, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4FE5
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD37C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FE5, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577A)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_13_symbolic(self):
        """Instruction RET_13
        Groups: ret, not64bitmode
        0xf7fdcf15: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD500)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FDCF15, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x39)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4FF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FDCF15
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD5C8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD4FC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD500, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDCF15, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4F9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FC, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FD, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FE, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4FF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDF139)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD5C8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD500)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_14_symbolic(self):
        """Instruction RET_14
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0xF7FF476B, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x91)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF476B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD37C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF476B, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5691)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_15_symbolic(self):
        """Instruction RET_15
        Groups: ret, not64bitmode
        0xf7fe4fe5: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        mem.write(0xF7FE4FE5, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4FE5
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD37C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FE5, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577A)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_16_symbolic(self):
        """Instruction RET_16
        Groups: ret, not64bitmode
        0xf7fe57ef: ret     0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE57EF, "\xc2\x14\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE57EF
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD43C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57EF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57F0, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72F8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD454)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_17_symbolic(self):
        """Instruction RET_17
        Groups: ret, not64bitmode
        0xf7fe4d3a: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC4)
        mem[addr] = value
        mem.write(0xF7FE4D3A, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D3A
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F0, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D3A, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2ED, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54F4)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_18_symbolic(self):
        """Instruction RET_18
        Groups: ret, not64bitmode
        0xf7fe4fe5: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        mem.write(0xF7FE4FE5, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4FE5
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD37C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FE5, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE577A)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_19_symbolic(self):
        """Instruction RET_19
        Groups: ret, not64bitmode
        0xf7ff39cc: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD420)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD41E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD418)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD419)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD41A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD41B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        mem.write(0xF7FF39CC, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD41D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6B)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD41C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9B)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD41F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF39CC
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD41C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD420, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD41E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD418, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD419, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD41A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD41B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF39CC, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD41D, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD41C, 8) == ord("\x9b"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD41F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6B9B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD420)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_2_symbolic(self):
        """Instruction RET_2
        Groups: ret, not64bitmode
        0xf7ff3e76: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x99)
        mem[addr] = value
        mem.write(0xF7FF3E76, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF3E76
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDABF8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2AC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B0, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E76, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A9, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AC, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AD, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D9D)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDABF8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_20_symbolic(self):
        """Instruction RET_20
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0xF7FF476B, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x91)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF476B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD37C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF476B, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5691)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_21_symbolic(self):
        """Instruction RET_21
        Groups: ret, not64bitmode
        0xf7fe4d3a: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC4)
        mem[addr] = value
        mem.write(0xF7FE4D3A, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE4D3A
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F0, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D3A, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2ED, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54F4)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_3_symbolic(self):
        """Instruction RET_3
        Groups: ret, not64bitmode
        0xf7ff3e76: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        mem.write(0xF7FF3E76, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x9D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF3E76
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDADB8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2AC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B0, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E76, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A9, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AC, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AD, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D9D)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDADB8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_4_symbolic(self):
        """Instruction RET_4
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD378)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD379)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0xF7FF476B, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x91)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD37F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF476B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD37C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD380, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD378, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD379, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF476B, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37C, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37D, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD37F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5691)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_5_symbolic(self):
        """Instruction RET_5
        Groups: ret, not64bitmode
        0xf7fe57ef: ret     0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD440)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0xF7FE57EF, "\xc2\x14\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD438)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD439)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD43F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE57EF
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD4F8)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD43C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD440, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57EF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57F0, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57F1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD438, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD439, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43D, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD43F, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72F8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD4F8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD454)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_6_symbolic(self):
        """Instruction RET_6
        Groups: ret, not64bitmode
        0xf7fe0776: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4D0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA0)
        mem[addr] = value
        mem.write(0xF7FE0776, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4CC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x97)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4CD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4CE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD4CF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FE0776
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FE0740)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD4CC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4D0, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0776, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4C8, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4C9, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4CA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4CB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4CC, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4CD, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4CE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD4CF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEAC97)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FE0740)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD4D0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_7_symbolic(self):
        """Instruction RET_7
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC4)
        mem[addr] = value
        mem.write(0xF7FF476B, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFD)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF476B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD438)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2F0, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E8, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2E9, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EA, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF476B, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EC, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2ED, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2EF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E34)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD438)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_8_symbolic(self):
        """Instruction RET_8
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        mem.write(0xF7FF476B, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x97)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF476B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2AC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B0, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A9, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF476B, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AC, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AD, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C97)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_9_symbolic(self):
        """Instruction RET_9
        Groups: ret, not64bitmode
        0xf7ff476b: ret
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        mem.write(0xF7FF476B, "\xc3")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x97)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD2AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        cpu.EIP = 0xF7FF476B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FDAB18)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2AC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2B0, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2A9, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF476B, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AC, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AD, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AE, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD2AF, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C97)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_1_symbolic(self):
        """Instruction ROL_1
        Groups:
        0xf7e43469: rol     ecx, 9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E43000, 0x1000, "rwx")
        mem.write(0xF7E43469, "\xc1\xc1\t")
        cpu.EIP = 0xF7E43469
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x57E6423C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E43469, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E4346A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E4346B, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E4346C)
        condition = Operators.AND(condition, cpu.ECX == 0xCC8478AF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_10_symbolic(self):
        """Instruction ROL_10
        Groups:
        0x8059a07:  rol     byte ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A08, "E\x00\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem.write(0x8059A07, "\xc0")
        cpu.EIP = 0x8059A07
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A08, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A09, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A0A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A07, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A0B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_11_symbolic(self):
        """Instruction ROL_11
        Groups:
        0x8059a21:  rol     dword ptr [ebp], -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7C)
        mem[addr] = value
        mem.write(0x8059A21, "\xc1E\x00\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3C)
        mem[addr] = value
        cpu.EIP = 0x8059A21
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A21, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A22, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A23, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A24, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A25)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_12_symbolic(self):
        """Instruction ROL_12
        Groups:
        0x8059a15:  rol     dword ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        mem.write(0x8059A15, "\xc1E\x00\x04")
        cpu.EIP = 0x8059A15
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A15, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A16, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A17, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A18, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A19)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_13_symbolic(self):
        """Instruction ROL_13
        Groups:
        0x80599e0:  rol     ecx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599E0, "\xd1\xc1")
        cpu.EIP = 0x80599E0
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599E0, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599E2)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_14_symbolic(self):
        """Instruction ROL_14
        Groups:
        0x8059a03:  rol     byte ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        mem.write(0x8059A03, "\xc0E\x00\x04")
        cpu.EIP = 0x8059A03
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A03, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A04, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A05, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A06, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A07)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_15_symbolic(self):
        """Instruction ROL_15
        Groups:
        0x80599e5:  rol     word ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80599E5, "f\xd1E\x00")
        cpu.EIP = 0x80599E5
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E5, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E6, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E7, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599E9)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_16_symbolic(self):
        """Instruction ROL_16
        Groups:
        0x80599db:  rol     cl, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599DB, "\xd0\xc1")
        cpu.EIP = 0x80599DB
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599DB, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x80599DC, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599DD)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_17_symbolic(self):
        """Instruction ROL_17
        Groups:
        0xf7e43479: rol     ecx, 9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E43000, 0x1000, "rwx")
        mem.write(0xF7E43479, "\xc1\xc1\t")
        cpu.EIP = 0xF7E43479
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x5FFB7EAE)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E43479, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E4347A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E4347B, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E4347C)
        condition = Operators.AND(condition, cpu.ECX == 0xF6FD5CBF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_18_symbolic(self):
        """Instruction ROL_18
        Groups:
        0x8059a19:  rol     dword ptr [ebp], -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x87)
        mem[addr] = value
        mem.write(0x8059A19, "\xc1E\x00\xff")
        cpu.EIP = 0x8059A19
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x07"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A19, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A1A, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A1B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A1C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A1D)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_19_symbolic(self):
        """Instruction ROL_19
        Groups:
        0x80599f2:  rol     cl, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599F2, "\xc0\xc1\xff")
        cpu.EIP = 0x80599F2
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599F2, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x80599F3, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599F4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599F5)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_2_symbolic(self):
        """Instruction ROL_2
        Groups:
        0x80599ef:  rol     cl, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599EF, "\xc0\xc1\x04")
        cpu.EIP = 0x80599EF
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599F0, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599F1, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x80599EF, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599F2)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_20_symbolic(self):
        """Instruction ROL_20
        Groups:
        0x8059a1d:  rol     dword ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A20, "\x04")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        mem.write(0x8059A1D, "\xc1E\x00")
        cpu.EIP = 0x8059A1D
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A20, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("<"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A1D, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A1E, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A1F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A21)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_21_symbolic(self):
        """Instruction ROL_21
        Groups:
        0x80599e2:  rol     byte ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80599E2, "\xd0E\x00")
        cpu.EIP = 0x80599E2
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E2, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E3, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80599E4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599E5)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_3_symbolic(self):
        """Instruction ROL_3
        Groups:
        0x80599ec:  rol     dword ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        mem.write(0x80599EC, "\xd1E\x00")
        cpu.EIP = 0x80599EC
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x80599EC, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599ED, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80599EE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599EF)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_4_symbolic(self):
        """Instruction ROL_4
        Groups:
        0x8059a00:  rol     ecx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A00, "\xc1\xc1\xff")
        cpu.EIP = 0x8059A00
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A00, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A01, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A02, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A03)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_5_symbolic(self):
        """Instruction ROL_5
        Groups:
        0x80599f9:  rol     cx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599F9, "f\xc1\xc1\xff")
        cpu.EIP = 0x80599F9
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599F9, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80599FA, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599FB, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599FC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599FD)
        condition = Operators.AND(condition, cpu.CX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_6_symbolic(self):
        """Instruction ROL_6
        Groups:
        0x80599fd:  rol     ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599FD, "\xc1\xc1\x04")
        cpu.EIP = 0x80599FD
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599FD, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599FE, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599FF, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A00)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_7_symbolic(self):
        """Instruction ROL_7
        Groups:
        0x80599dd:  rol     cx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x80599DD, "f\xd1\xc1")
        cpu.EIP = 0x80599DD
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80599DD, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x80599DE, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x80599DF, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x80599E0)
        condition = Operators.AND(condition, cpu.CX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_8_symbolic(self):
        """Instruction ROL_8
        Groups:
        0x8059a0b:  rol     word ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x18)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8059A0B, "f\xc1E\x00\x04")
        cpu.EIP = 0x8059A0B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A0B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A0C, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A0D, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A0E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A0F, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A10)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_9_symbolic(self):
        """Instruction ROL_9
        Groups:
        0xf7e484bc: rol     edx, 9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E48000, 0x1000, "rwx")
        mem.write(0xF7E484BC, "\xc1\xc2\t")
        cpu.EIP = 0xF7E484BC
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x5FE7257C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E484BC, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E484BD, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E484BE, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E484BF)
        condition = Operators.AND(condition, cpu.EDX == 0xCE4AF8BF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_1_symbolic(self):
        """Instruction ROR_1
        Groups:
        0x805b9c6:  ror     byte ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9C6, "\xc0")
        mem.write(0x805B9C8, "\x00\x04")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF)
        mem[addr] = value
        mem.write(0x805B9C7, "M")
        cpu.EIP = 0x805B9C6
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9C8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9C9, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9C6, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9C7, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9CA)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_10_symbolic(self):
        """Instruction ROR_10
        Groups:
        0x805b9a3:  ror     ecx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9A3, "\xd1\xc9")
        cpu.EIP = 0x805B9A3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x78036403)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9A3, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A4, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9A5)
        condition = Operators.AND(condition, cpu.ECX == 0xBC01B201)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_11_symbolic(self):
        """Instruction ROR_11
        Groups:
        0x805b9d8:  ror     dword ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        mem.write(0x805B9D8, "\xc1M\x00\x04")
        cpu.EIP = 0x805B9D8
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D8, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D9, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9DA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9DB, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9DC)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_12_symbolic(self):
        """Instruction ROR_12
        Groups:
        0x805b9a8:  ror     word ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805B9A8, "f\xd1M\x00")
        cpu.EIP = 0x805B9A8
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A9, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9AA, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9AB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9AC)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_13_symbolic(self):
        """Instruction ROR_13
        Groups:
        0x805b9ac:  ror     dword ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805B9AC, "\xd1M\x00")
        cpu.EIP = 0x805B9AC
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9AC, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9AD, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9AE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9AF)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_14_symbolic(self):
        """Instruction ROR_14
        Groups:
        0x805b9e4:  ror     dword ptr [ebp], -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x39)
        mem[addr] = value
        mem.write(0x805B9E4, "\xc1M\x00\xff")
        cpu.EIP = 0x805B9E4
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E4, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E5, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9E8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_15_symbolic(self):
        """Instruction ROR_15
        Groups:
        0x805b9af:  ror     dword ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1F)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805B9AF, "\xd1M\x00")
        cpu.EIP = 0x805B9AF
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9AF, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9B0, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9B1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9B2)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_16_symbolic(self):
        """Instruction ROR_16
        Groups:
        0x805b9ca:  ror     byte ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        mem.write(0x805B9CA, "\xc0M\x00\xff")
        cpu.EIP = 0x805B9CA
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9CA, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9CB, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9CD, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9CE)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_17_symbolic(self):
        """Instruction ROR_17
        Groups:
        0x805b9dc:  ror     dword ptr [ebp], -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC8)
        mem[addr] = value
        mem.write(0x805B9DC, "\xc1M\x00\xff")
        cpu.EIP = 0x805B9DC
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x90"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9DC, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9DD, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9DE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9DF, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9E0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_18_symbolic(self):
        """Instruction ROR_18
        Groups:
        0x805b9bc:  ror     cx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9BC, "f\xc1\xc9\xff")
        cpu.EIP = 0x805B9BC
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xB22)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9BC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9BD, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9BE, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9BF, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9C0)
        condition = Operators.AND(condition, cpu.CX == 0x1644)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_19_symbolic(self):
        """Instruction ROR_19
        Groups:
        0x805b9d3:  ror     word ptr [ebp], -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        mem.write(0x805B9D3, "f\xc1M\x00\xff")
        cpu.EIP = 0x805B9D3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D3, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D4, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D5, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9D8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_2_symbolic(self):
        """Instruction ROR_2
        Groups:
        0x805b9ce:  ror     word ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805B9CE, "f\xc1M\x00\x04")
        cpu.EIP = 0x805B9CE
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x0e"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9CE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9CF, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D0, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9D2, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9D3)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_20_symbolic(self):
        """Instruction ROR_20
        Groups:
        0x805b9b2:  ror     cl, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9B2, "\xc0\xc9\x04")
        cpu.EIP = 0x805B9B2
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9B2, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9B3, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9B4, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9B5)
        condition = Operators.AND(condition, cpu.CL == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_21_symbolic(self):
        """Instruction ROR_21
        Groups:
        0x805b9a5:  ror     byte ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        mem.write(0x805B9A5, "\xd0M\x00")
        cpu.EIP = 0x805B9A5
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A5, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A6, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9A8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_3_symbolic(self):
        """Instruction ROR_3
        Groups:
        0x805b9c0:  ror     ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9C0, "\xc1\xc9\x04")
        cpu.EIP = 0x805B9C0
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xBC011644)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9C0, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9C1, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9C2, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9C3)
        condition = Operators.AND(condition, cpu.ECX == 0x4BC01164)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_4_symbolic(self):
        """Instruction ROR_4
        Groups:
        0x805b9b5:  ror     cl, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9B5, "\xc0\xc9\xff")
        cpu.EIP = 0x805B9B5
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9B5, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9B6, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9B7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9B8)
        condition = Operators.AND(condition, cpu.CL == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_5_symbolic(self):
        """Instruction ROR_5
        Groups:
        0x805b9b8:  ror     cx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9B8, "f\xc1\xc9\x04")
        cpu.EIP = 0x805B9B8
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xB220)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9B8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9B9, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9BA, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9BB, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9BC)
        condition = Operators.AND(condition, cpu.CX == 0xB22)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_6_symbolic(self):
        """Instruction ROR_6
        Groups:
        0x805b9c3:  ror     ecx, -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9C3, "\xc1\xc9\xff")
        cpu.EIP = 0x805B9C3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4BC01164)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9C3, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9C4, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9C5, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9C6)
        condition = Operators.AND(condition, cpu.ECX == 0x978022C8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_7_symbolic(self):
        """Instruction ROR_7
        Groups:
        0x805b9e0:  ror     dword ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805B9E0, "\xc1M\x00\x04")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        cpu.EIP = 0x805B9E0
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9E0, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E1, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E3, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9E4)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_8_symbolic(self):
        """Instruction ROR_8
        Groups:
        0x805b99e:  ror     cl, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B99E, "\xd0\xc9")
        cpu.EIP = 0x805B99E
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B99E, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x805B99F, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9A0)
        condition = Operators.AND(condition, cpu.CL == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_9_symbolic(self):
        """Instruction ROR_9
        Groups:
        0x805b9a0:  ror     cx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9A0, "f\xd1\xc9")
        cpu.EIP = 0x805B9A0
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0xC806)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9A0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A1, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9A2, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9A3)
        condition = Operators.AND(condition, cpu.CX == 0x6403)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_1_symbolic(self):
        """Instruction SAHF_1
        Groups:
        0x807b5a9:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B5A9, "\x9e")
        cpu.EIP = 0x807B5A9
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xD7)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B5A9, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B5AA)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0xD7)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_10_symbolic(self):
        """Instruction SAHF_10
        Groups:
        0x807ab2f:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB2F, "\x9e")
        cpu.EIP = 0x807AB2F
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xD7)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB2F, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB30)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0xD7)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_11_symbolic(self):
        """Instruction SAHF_11
        Groups:
        0x807b032:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B032, "\x9e")
        cpu.EIP = 0x807B032
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x42)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B032, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B033)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0x42)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_12_symbolic(self):
        """Instruction SAHF_12
        Groups:
        0x807b180:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B180, "\x9e")
        cpu.EIP = 0x807B180
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x52)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B180, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B181)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x52)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_13_symbolic(self):
        """Instruction SAHF_13
        Groups:
        0x807a29d:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A29D, "\x9e")
        cpu.EIP = 0x807A29D
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x87)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A29D, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A29E)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0x87)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_14_symbolic(self):
        """Instruction SAHF_14
        Groups:
        0x807aec9:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AEC9, "\x9e")
        cpu.EIP = 0x807AEC9
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x3)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AEC9, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AECA)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0x3)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_15_symbolic(self):
        """Instruction SAHF_15
        Groups:
        0x807b328:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B328, "\x9e")
        cpu.EIP = 0x807B328
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xC6)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B328, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B329)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0xC6)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_16_symbolic(self):
        """Instruction SAHF_16
        Groups:
        0x807a58b:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A58B, "\x9e")
        cpu.EIP = 0x807A58B
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x7)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A58B, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A58C)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_17_symbolic(self):
        """Instruction SAHF_17
        Groups:
        0x807ac87:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AC87, "\x9e")
        cpu.EIP = 0x807AC87
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x7)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AC87, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AC88)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_18_symbolic(self):
        """Instruction SAHF_18
        Groups:
        0x807b425:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B425, "\x9e")
        cpu.EIP = 0x807B425
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x93)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B425, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B426)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x93)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_19_symbolic(self):
        """Instruction SAHF_19
        Groups:
        0x807baf9:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BAF9, "\x9e")
        cpu.EIP = 0x807BAF9
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x53)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BAF9, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BAFA)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x53)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_2_symbolic(self):
        """Instruction SAHF_2
        Groups:
        0x807b558:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807B558, "\x9e")
        cpu.EIP = 0x807B558
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x96)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807B558, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807B559)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x96)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_20_symbolic(self):
        """Instruction SAHF_20
        Groups:
        0x8079d2e:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079D2E, "\x9e")
        cpu.EIP = 0x8079D2E
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xD6)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079D2E, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079D2F)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0xD6)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_21_symbolic(self):
        """Instruction SAHF_21
        Groups:
        0x807a5c1:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A5C1, "\x9e")
        cpu.EIP = 0x807A5C1
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x43)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A5C1, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A5C2)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0x43)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_3_symbolic(self):
        """Instruction SAHF_3
        Groups:
        0x80798a2:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80798A2, "\x9e")
        cpu.EIP = 0x80798A2
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x2)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80798A2, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x80798A3)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0x2)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_4_symbolic(self):
        """Instruction SAHF_4
        Groups:
        0x807aa96:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AA96, "\x9e")
        cpu.EIP = 0x807AA96
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x56)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AA96, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AA97)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x56)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_5_symbolic(self):
        """Instruction SAHF_5
        Groups:
        0x8079b23:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079B23, "\x9e")
        cpu.EIP = 0x8079B23
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x13)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079B23, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079B24)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x13)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_6_symbolic(self):
        """Instruction SAHF_6
        Groups:
        0x807bb41:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807B000, 0x1000, "rwx")
        mem.write(0x807BB41, "\x9e")
        cpu.EIP = 0x807BB41
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x93)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807BB41, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807BB42)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x93)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_7_symbolic(self):
        """Instruction SAHF_7
        Groups:
        0x807ab81:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807AB81, "\x9e")
        cpu.EIP = 0x807AB81
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0x17)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807AB81, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807AB82)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0x17)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_8_symbolic(self):
        """Instruction SAHF_8
        Groups:
        0x807a772:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A772, "\x9e")
        cpu.EIP = 0x807A772
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xC2)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A772, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A773)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.AH == 0xC2)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAHF_9_symbolic(self):
        """Instruction SAHF_9
        Groups:
        0x807a796:  sahf
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0807A000, 0x1000, "rwx")
        mem.write(0x807A796, "\x9e")
        cpu.EIP = 0x807A796
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.AH = cs.new_bitvec(8)
        cs.add(cpu.AH == 0xD2)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807A796, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x807A797)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.AH == 0xD2)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_1_symbolic(self):
        """Instruction SAR_1
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1A48)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x692)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_10_symbolic(self):
        """Instruction SAR_10
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x172C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x5CB)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_11_symbolic(self):
        """Instruction SAR_11
        Groups:
        0x804d5ec:  sar     byte ptr [ebp], 0xff
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D5EC, "\xc0}\x00\xff")
        cpu.EIP = 0x804D5EC
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5EC, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5ED, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5EE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5EF, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D5F0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_12_symbolic(self):
        """Instruction SAR_12
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1E6C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x79B)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_13_symbolic(self):
        """Instruction SAR_13
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2184)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x861)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_14_symbolic(self):
        """Instruction SAR_14
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x484)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x121)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_15_symbolic(self):
        """Instruction SAR_15
        Groups:
        0x804d5c7:  sar     byte ptr [ebp], 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D5C8, "}\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D5C7, "\xd0")
        cpu.EIP = 0x804D5C7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D5C8, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5C7, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D5CA)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_16_symbolic(self):
        """Instruction SAR_16
        Groups:
        0xf7fe2131: sar     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE2000, 0x1000, "rwx")
        mem.write(0xF7FE2131, "\xd3\xfa")
        cpu.EIP = 0xF7FE2131
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x73516240)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x18)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2131, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE2132, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE2133)
        condition = Operators.AND(condition, cpu.EDX == 0x73)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x18)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_17_symbolic(self):
        """Instruction SAR_17
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1944)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x651)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_18_symbolic(self):
        """Instruction SAR_18
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x13B4)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x4ED)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_19_symbolic(self):
        """Instruction SAR_19
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xBA4)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x2E9)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_2_symbolic(self):
        """Instruction SAR_2
        Groups:
        0xf7ff0800: sar     esi, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0800, "\xd1\xfe")
        cpu.EIP = 0xF7FF0800
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x60B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0800, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0801, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0802)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x305)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_20_symbolic(self):
        """Instruction SAR_20
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x370)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xDC)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_21_symbolic(self):
        """Instruction SAR_21
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1584)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x561)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_3_symbolic(self):
        """Instruction SAR_3
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x225C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x897)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_4_symbolic(self):
        """Instruction SAR_4
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x122C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x48B)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_5_symbolic(self):
        """Instruction SAR_5
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x68)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x1A)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_6_symbolic(self):
        """Instruction SAR_6
        Groups:
        0x804d5fe:  sar     dword ptr [ebp], -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x804D600, "\x00\xff")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D5FE, "\xc1}")
        cpu.EIP = 0x804D5FE
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D601, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5FE, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5FF, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D602)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_7_symbolic(self):
        """Instruction SAR_7
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x3C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_8_symbolic(self):
        """Instruction SAR_8
        Groups:
        0x804d5d4:  sar     cl, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5D4, "\xc0\xf9\x04")
        cpu.EIP = 0x804D5D4
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D5D4, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5D5, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5D6, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D5D7)
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_9_symbolic(self):
        """Instruction SAR_9
        Groups:
        0xf7fe54e1: sar     eax, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E1, "\xc1\xf8\x02")
        cpu.EIP = 0xF7FE54E1
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x13D8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E2, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E3, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x4F6)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_1_symbolic(self):
        """Instruction SCASB_1
        Groups:
        0x8079346:  scasb   al, byte ptr es:[edi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F049)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD1)
        mem[addr] = value
        mem.write(0x8079346, "\xae")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.EIP = 0x8079346
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F049)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x37)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807F049, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x8079346, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.EIP == 0x8079347)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x807F04A)
        condition = Operators.AND(condition, cpu.AL == 0x37)
        condition = Operators.AND(condition, cpu.CF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASD_1_symbolic(self):
        """Instruction SCASD_1
        Groups:
        0x8079349:  scasd   eax, dword ptr es:[edi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        mem.write(0x8079349, "\xaf")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F04C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F04D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F04E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F04F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        cpu.EIP = 0x8079349
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x137)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F04C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079349, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0x807F04C, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0x807F04D, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x807F04E, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807F04F, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.EIP == 0x807934A)
        condition = Operators.AND(condition, cpu.EAX == 0x137)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x807F050)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASW_1_symbolic(self):
        """Instruction SCASW_1
        Groups:
        0x8079347:  scasw   ax, word ptr es:[edi]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        mem.write(0x8079348, "\xaf")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F04A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F04B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        mem.write(0x8079347, "f")
        cpu.EIP = 0x8079347
        cpu.AX = cs.new_bitvec(16)
        cs.add(cpu.AX == 0x137)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F04A)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079348, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0x807F04A, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x807F04B, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0x8079347, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079349)
        condition = Operators.AND(condition, cpu.AX == 0x137)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x807F04C)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETAE_1_symbolic(self):
        """Instruction SETAE_1
        Groups:
        0x8079477:  setae   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079477, "\x0f\x93\xc1")
        cpu.EIP = 0x8079477
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x85)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079478, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.read_int(0x8079479, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8079477, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x807947A)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETAE_2_symbolic(self):
        """Instruction SETAE_2
        Groups:
        0x80701a7:  setae   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701A7, "\x0f\x93\xc1")
        cpu.EIP = 0x80701A7
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80701A8, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A9, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701AA)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETAE_3_symbolic(self):
        """Instruction SETAE_3
        Groups:
        0x807947a:  setae   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x807947A, "\x0f\x93E\x00")
        cpu.EIP = 0x807947A
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x807947A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807947B, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.read_int(0x807947C, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807947D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807947E)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETAE_4_symbolic(self):
        """Instruction SETAE_4
        Groups:
        0x80794a6:  setae   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x80794A6, "\x0f\x93\xc1")
        cpu.EIP = 0x80794A6
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794A8, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A7, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794A9)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETAE_5_symbolic(self):
        """Instruction SETAE_5
        Groups:
        0x80701aa:  setae   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80701AA, "\x0f\x93E\x00")
        cpu.EIP = 0x80701AA
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x80701AA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701AB, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.read_int(0x80701AC, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80701AD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701AE)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETAE_6_symbolic(self):
        """Instruction SETAE_6
        Groups:
        0x80794a9:  setae   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80794A9, "\x0f\x93E\x00")
        cpu.EIP = 0x80794A9
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794AA, 8) == ord("\x93"))
        condition = Operators.AND(condition, cpu.read_int(0x80794AB, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80794AC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794AD)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETA_1_symbolic(self):
        """Instruction SETA_1
        Groups:
        0x8079342:  seta    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x37)
        mem[addr] = value
        mem.write(0x8079342, "\x0f\x97E\x00")
        cpu.EIP = 0x8079342
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8079342, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079343, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0x8079344, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8079345, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079346)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETA_2_symbolic(self):
        """Instruction SETA_2
        Groups:
        0x8065f9b:  seta    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F9B, "\x0f\x97\xc1")
        cpu.EIP = 0x8065F9B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065F9B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F9C, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F9D, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F9E)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETA_3_symbolic(self):
        """Instruction SETA_3
        Groups:
        0x8065f9e:  seta    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F9E, "\x0f")
        mem.write(0x8065FA0, "E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x8065F9F, "\x97")
        cpu.EIP = 0x8065F9E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065FA0, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FA1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F9E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F9F, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FA2)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETA_4_symbolic(self):
        """Instruction SETA_4
        Groups:
        0x807933f:  seta    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807933F, "\x0f\x97\xc1")
        cpu.EIP = 0x807933F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079340, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0x8079341, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x807933F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079342)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_1_symbolic(self):
        """Instruction SETBE_1
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x14)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_10_symbolic(self):
        """Instruction SETBE_10
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xF4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_11_symbolic(self):
        """Instruction SETBE_11
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xA4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_12_symbolic(self):
        """Instruction SETBE_12
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x74)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_13_symbolic(self):
        """Instruction SETBE_13
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xA4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_14_symbolic(self):
        """Instruction SETBE_14
        Groups:
        0x80701b8:  setbe   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80701B8, "\x0f\x96E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x80701B8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80701B8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701B9, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x80701BA, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80701BB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701BC)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_15_symbolic(self):
        """Instruction SETBE_15
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x94)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_16_symbolic(self):
        """Instruction SETBE_16
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x44)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_17_symbolic(self):
        """Instruction SETBE_17
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x74)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_18_symbolic(self):
        """Instruction SETBE_18
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_19_symbolic(self):
        """Instruction SETBE_19
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xA4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_2_symbolic(self):
        """Instruction SETBE_2
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x34)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_20_symbolic(self):
        """Instruction SETBE_20
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x34)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_21_symbolic(self):
        """Instruction SETBE_21
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x54)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_3_symbolic(self):
        """Instruction SETBE_3
        Groups:
        0xf7fe7f30: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7F30, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7F30
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F30, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F31, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F32, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7F33)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_4_symbolic(self):
        """Instruction SETBE_4
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x64)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_5_symbolic(self):
        """Instruction SETBE_5
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x44)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_6_symbolic(self):
        """Instruction SETBE_6
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x84)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_7_symbolic(self):
        """Instruction SETBE_7
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x14)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_8_symbolic(self):
        """Instruction SETBE_8
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x4C)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_9_symbolic(self):
        """Instruction SETBE_9
        Groups:
        0xf7fe7263: setbe   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7263, "\x0f\x96\xc1")
        cpu.EIP = 0xF7FE7263
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xC4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7263, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7264, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7265, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7266)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_1_symbolic(self):
        """Instruction SETB_1
        Groups:
        0x80701ae:  setb    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701AE, "\x0f\x92\xc1")
        cpu.EIP = 0x80701AE
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80701B0, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x80701AE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701AF, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701B1)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_2_symbolic(self):
        """Instruction SETB_2
        Groups:
        0x8065fa9:  setb    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FA9, "\x0f\x92\xc1")
        cpu.EIP = 0x8065FA9
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065FA9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FAA, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FAB, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FAC)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_3_symbolic(self):
        """Instruction SETB_3
        Groups:
        0x8065fac:  setb    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065FAC, "\x0f\x92E\x00")
        cpu.EIP = 0x8065FAC
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FAC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FAD, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FAE, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FB0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_4_symbolic(self):
        """Instruction SETB_4
        Groups:
        0x8065fa2:  setb    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FA2, "\x0f\x92\xc1")
        cpu.EIP = 0x8065FA2
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065FA2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FA3, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FA4, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FA5)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_5_symbolic(self):
        """Instruction SETB_5
        Groups:
        0x8065fa5:  setb    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065FA8, "\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x8065FA5, "\x0f\x92E")
        cpu.EIP = 0x8065FA5
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065FA8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FA5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FA6, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FA7, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FA9)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_6_symbolic(self):
        """Instruction SETB_6
        Groups:
        0x80701b1:  setb    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x80701B1, "\x0f\x92E\x00")
        cpu.EIP = 0x80701B1
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80701B1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701B2, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x80701B3, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80701B4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701B5)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_1_symbolic(self):
        """Instruction SETE_1
        Groups:
        0xf7fe727a: sete    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE727A, "\x0f\x94\xc1")
        cpu.EIP = 0xF7FE727A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE727A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE727B, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE727C, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE727D)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_10_symbolic(self):
        """Instruction SETE_10
        Groups:
        0xf7fe7269: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xE3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7269, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE726C)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_11_symbolic(self):
        """Instruction SETE_11
        Groups:
        0xf7fe727a: sete    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE727A, "\x0f\x94\xc1")
        cpu.EIP = 0xF7FE727A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE727A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE727B, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE727C, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE727D)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_12_symbolic(self):
        """Instruction SETE_12
        Groups:
        0xf7fe7269: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xE3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7269, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE726C)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_13_symbolic(self):
        """Instruction SETE_13
        Groups:
        0xf7fe7290: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7290, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7291, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7292, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7293)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_14_symbolic(self):
        """Instruction SETE_14
        Groups:
        0xf7fe7269: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xE3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7269, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE726C)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_15_symbolic(self):
        """Instruction SETE_15
        Groups:
        0xf7fe7280: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7280, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7281, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7282, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7283)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_16_symbolic(self):
        """Instruction SETE_16
        Groups:
        0xf7fe4caf: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB0, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB1, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CB2)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_17_symbolic(self):
        """Instruction SETE_17
        Groups:
        0xf7fe7290: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7290, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7291, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7292, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7293)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_18_symbolic(self):
        """Instruction SETE_18
        Groups:
        0xf7fe7290: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7290, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7291, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7292, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7293)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_19_symbolic(self):
        """Instruction SETE_19
        Groups:
        0xf7fe4caf: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB0, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB1, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CB2)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_2_symbolic(self):
        """Instruction SETE_2
        Groups:
        0xf7fe7280: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7280, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7281, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7282, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7283)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_20_symbolic(self):
        """Instruction SETE_20
        Groups:
        0xf7fe7269: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xE3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7269, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE726C)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_21_symbolic(self):
        """Instruction SETE_21
        Groups:
        0xf7fe7290: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7290, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7291, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7292, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7293)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_3_symbolic(self):
        """Instruction SETE_3
        Groups:
        0xf7fe7269: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xE3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7269, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE726C)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_4_symbolic(self):
        """Instruction SETE_4
        Groups:
        0xf7fe4caf: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB0, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB1, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CB2)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_5_symbolic(self):
        """Instruction SETE_5
        Groups:
        0xf7fe7280: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7280, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7281, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7282, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7283)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_6_symbolic(self):
        """Instruction SETE_6
        Groups:
        0xf7fe4caf: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CAF, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE4CAF
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB0, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CB1, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CAF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CB2)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_7_symbolic(self):
        """Instruction SETE_7
        Groups:
        0xf7fe7269: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7269, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7269
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xE4)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7269, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE726B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE726C)
        condition = Operators.AND(condition, cpu.AL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_8_symbolic(self):
        """Instruction SETE_8
        Groups:
        0xf7fe7290: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7290, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7290
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7290, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7291, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7292, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7293)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_9_symbolic(self):
        """Instruction SETE_9
        Groups:
        0xf7fe7280: sete    al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7280, "\x0f\x94\xc0")
        cpu.EIP = 0xF7FE7280
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7280, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7281, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7282, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7283)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETGE_1_symbolic(self):
        """Instruction SETGE_1
        Groups:
        0x805b9eb:  setge   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        mem.write(0x805B9EB, "\x0f\x9dE\x00")
        cpu.EIP = 0x805B9EB
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9EB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9EC, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9ED, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9EE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9EF)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETGE_2_symbolic(self):
        """Instruction SETGE_2
        Groups:
        0x805b9e8:  setge   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B9E8, "\x0f\x9d\xc1")
        cpu.EIP = 0x805B9E8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xC8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B9E8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9E9, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0x805B9EA, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B9EB)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETGE_3_symbolic(self):
        """Instruction SETGE_3
        Groups:
        0x8070198:  setge   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070198, "\x0f\x9d\xc1")
        cpu.EIP = 0x8070198
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070198, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070199, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0x807019A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x807019B)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETGE_4_symbolic(self):
        """Instruction SETGE_4
        Groups:
        0x807019b:  setge   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x807019B, "\x0f\x9dE\x00")
        cpu.EIP = 0x807019B
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x807019B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807019C, 8) == ord("\x9d"))
        condition = Operators.AND(condition, cpu.read_int(0x807019D, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807019E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807019F)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_1_symbolic(self):
        """Instruction SETG_1
        Groups:
        0x8065f97:  setg    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8065F98, "\x9fE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065F97, "\x0f")
        cpu.EIP = 0x8065F97
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065F98, 8) == ord("\x9f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F99, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F9A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F97, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F9B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_2_symbolic(self):
        """Instruction SETG_2
        Groups:
        0x8065f68:  setg    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F68, "\x0f\x9f\xc1")
        cpu.EIP = 0x8065F68
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065F68, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F69, 8) == ord("\x9f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F6A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F6B)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_3_symbolic(self):
        """Instruction SETG_3
        Groups:
        0x8065f6b:  setg    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        mem.write(0x8065F6B, "\x0f\x9fE\x00")
        cpu.EIP = 0x8065F6B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F6B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F6C, 8) == ord("\x9f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F6D, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F6E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F6F)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_4_symbolic(self):
        """Instruction SETG_4
        Groups:
        0x8065f94:  setg    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065F94, "\x0f\x9f\xc1")
        cpu.EIP = 0x8065F94
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065F94, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F95, 8) == ord("\x9f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F96, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F97)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_1_symbolic(self):
        """Instruction SETLE_1
        Groups:
        0x805ba5d:  setle   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805BA5D, "\x0f\x9e\xc1")
        cpu.EIP = 0x805BA5D
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BA5D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA5E, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA5F, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA60)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_2_symbolic(self):
        """Instruction SETLE_2
        Groups:
        0x805ba60:  setle   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x805BA60, "\x0f\x9eE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x805BA60
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805BA60, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA61, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA62, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA63, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA64)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_3_symbolic(self):
        """Instruction SETLE_3
        Groups:
        0x8079369:  setle   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x8079369, "\x0f\x9eE\x00")
        cpu.EIP = 0x8079369
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8079369, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807936A, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.read_int(0x807936B, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807936C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807936D)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_4_symbolic(self):
        """Instruction SETLE_4
        Groups:
        0x8079366:  setle   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079366, "\x0f\x9e\xc1")
        cpu.EIP = 0x8079366
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079368, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8079366, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079367, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079369)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETL_1_symbolic(self):
        """Instruction SETL_1
        Groups:
        0x80702db:  setl    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x80702DB, "\x0f\x9cE\x00")
        cpu.EIP = 0x80702DB
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80702DB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702DC, 8) == ord("\x9c"))
        condition = Operators.AND(condition, cpu.read_int(0x80702DD, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80702DE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702DF)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETL_2_symbolic(self):
        """Instruction SETL_2
        Groups:
        0x8065fb0:  setl    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FB0, "\x0f\x9c\xc1")
        cpu.EIP = 0x8065FB0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065FB0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB1, 8) == ord("\x9c"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB2, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FB3)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETL_3_symbolic(self):
        """Instruction SETL_3
        Groups:
        0x80702d8:  setl    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80702D8, "\x0f\x9c\xc1")
        cpu.EIP = 0x80702D8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80702D8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80702D9, 8) == ord("\x9c"))
        condition = Operators.AND(condition, cpu.read_int(0x80702DA, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x80702DB)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETL_4_symbolic(self):
        """Instruction SETL_4
        Groups:
        0x8065fb3:  setl    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065FB3, "\x0f\x9cE\x00")
        cpu.EIP = 0x8065FB3
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB4, 8) == ord("\x9c"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB5, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FB7)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_1_symbolic(self):
        """Instruction SETNE_1
        Groups:
        0xf7fe9c2f: setne   dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9C2F, "\x0f\x95\xc2")
        cpu.EIP = 0xF7FE9C2F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C30, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C31, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C2F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9C32)
        condition = Operators.AND(condition, cpu.DL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_10_symbolic(self):
        """Instruction SETNE_10
        Groups:
        0xf7fe42e2: setne   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE42E2, "\x0f\x95\xc1")
        cpu.EIP = 0xF7FE42E2
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x38)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE42E2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE42E3, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE42E4, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE42E5)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_11_symbolic(self):
        """Instruction SETNE_11
        Groups:
        0xf7ff08d1: setne   dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF08D1, "\x0f\x95\xc2")
        cpu.EIP = 0xF7FF08D1
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF08D1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF08D2, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF08D3, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF08D4)
        condition = Operators.AND(condition, cpu.DL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_12_symbolic(self):
        """Instruction SETNE_12
        Groups:
        0x80701a0:  setne   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x80701A0, "\x0f\x95\xc1")
        cpu.EIP = 0x80701A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80701A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A1, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A2, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701A3)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_13_symbolic(self):
        """Instruction SETNE_13
        Groups:
        0xf7fdf397: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDF000, 0x1000, "rwx")
        mem.write(0xF7FDF397, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FDF397
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF398, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF399, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF397, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDF39A)
        condition = Operators.AND(condition, cpu.AL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_14_symbolic(self):
        """Instruction SETNE_14
        Groups:
        0xf7fe9c2f: setne   dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9C2F, "\x0f\x95\xc2")
        cpu.EIP = 0xF7FE9C2F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C30, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C31, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9C2F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9C32)
        condition = Operators.AND(condition, cpu.DL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_15_symbolic(self):
        """Instruction SETNE_15
        Groups:
        0x807027e:  setne   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807027E, "\x0f\x95\xc1")
        cpu.EIP = 0x807027E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xF8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070280, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x807027E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807027F, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070281)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_16_symbolic(self):
        """Instruction SETNE_16
        Groups:
        0xf7fe6c5c: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6C5C, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE6C5C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5D, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5E, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6C5F)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_17_symbolic(self):
        """Instruction SETNE_17
        Groups:
        0xf7fdf397: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDF000, 0x1000, "rwx")
        mem.write(0xF7FDF397, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FDF397
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF398, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF399, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF397, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDF39A)
        condition = Operators.AND(condition, cpu.AL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_18_symbolic(self):
        """Instruction SETNE_18
        Groups:
        0xf7fe6c5c: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6C5C, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE6C5C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5D, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5E, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6C5F)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_19_symbolic(self):
        """Instruction SETNE_19
        Groups:
        0xf7fe6c5c: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE6000, 0x1000, "rwx")
        mem.write(0xF7FE6C5C, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE6C5C
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5D, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE6C5E, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE6C5F)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_2_symbolic(self):
        """Instruction SETNE_2
        Groups:
        0xf7fec53e: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC540, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53F, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC541)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_3_symbolic(self):
        """Instruction SETNE_3
        Groups:
        0xf7fdf32a: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDF000, 0x1000, "rwx")
        mem.write(0xF7FDF32A, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FDF32A
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF32A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF32B, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDF32C, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDF32D)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_4_symbolic(self):
        """Instruction SETNE_4
        Groups:
        0xf7fec53e: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC540, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53F, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC541)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_5_symbolic(self):
        """Instruction SETNE_5
        Groups:
        0xf7fec53e: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC540, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53F, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC541)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_6_symbolic(self):
        """Instruction SETNE_6
        Groups:
        0xf7fec53e: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC53E, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FEC53E
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC540, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC53F, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC541)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_7_symbolic(self):
        """Instruction SETNE_7
        Groups:
        0x80701a3:  setne   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x80701A3, "\x0f\x95E\x00")
        cpu.EIP = 0x80701A3
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A4, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A5, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80701A6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80701A7)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_8_symbolic(self):
        """Instruction SETNE_8
        Groups:
        0xf7fe996f: setne   al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE996F, "\x0f\x95\xc0")
        cpu.EIP = 0xF7FE996F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9970, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9971, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE996F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9972)
        condition = Operators.AND(condition, cpu.AL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_9_symbolic(self):
        """Instruction SETNE_9
        Groups:
        0x8070281:  setne   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        mem.write(0x8070281, "\x0f\x95E\x00")
        cpu.EIP = 0x8070281
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8070281, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070282, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x8070283, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8070284, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070285)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNO_1_symbolic(self):
        """Instruction SETNO_1
        Groups:
        0x8070194:  setno   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x8070194, "\x0f\x91E\x00")
        cpu.EIP = 0x8070194
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8070194, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070195, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0x8070196, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8070197, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070198)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNO_2_symbolic(self):
        """Instruction SETNO_2
        Groups:
        0x8070191:  setno   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070191, "\x0f\x91\xc1")
        cpu.EIP = 0x8070191
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070191, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070192, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0x8070193, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070194)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNP_1_symbolic(self):
        """Instruction SETNP_1
        Groups:
        0x807949f:  setnp   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807949F, "\x0f\x9b\xc1")
        cpu.EIP = 0x807949F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80794A0, 8) == ord("\x9b"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A1, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x807949F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794A2)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNP_2_symbolic(self):
        """Instruction SETNP_2
        Groups:
        0x80794a2:  setnp   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        mem.write(0x80794A2, "\x0f\x9bE\x00")
        cpu.EIP = 0x80794A2
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A3, 8) == ord("\x9b"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A4, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x80794A5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80794A6)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNP_3_symbolic(self):
        """Instruction SETNP_3
        Groups:
        0x8070294:  setnp   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070294, "\x0f\x9b\xc1")
        cpu.EIP = 0x8070294
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070294, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070295, 8) == ord("\x9b"))
        condition = Operators.AND(condition, cpu.read_int(0x8070296, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070297)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNP_4_symbolic(self):
        """Instruction SETNP_4
        Groups:
        0x8070297:  setnp   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070298, "\x9bE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x8070297, "\x0f")
        cpu.EIP = 0x8070297
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070298, 8) == ord("\x9b"))
        condition = Operators.AND(condition, cpu.read_int(0x8070299, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807029A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8070297, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x807029B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNS_1_symbolic(self):
        """Instruction SETNS_1
        Groups:
        0x8070290:  setns   byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8070290, "\x0f\x99E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        cpu.EIP = 0x8070290
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070290, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070291, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.read_int(0x8070292, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8070293, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070294)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNS_2_symbolic(self):
        """Instruction SETNS_2
        Groups:
        0x807028d:  setns   cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x807028D, "\x0f\x99\xc1")
        cpu.EIP = 0x807028D
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807028D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807028E, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.read_int(0x807028F, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070290)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETO_1_symbolic(self):
        """Instruction SETO_1
        Groups:
        0x8065fb7:  seto    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.write(0x8065FB7, "\x0f\x90\xc1")
        cpu.EIP = 0x8065FB7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8065FB8, 8) == ord("\x90"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB9, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FB7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FBA)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETO_2_symbolic(self):
        """Instruction SETO_2
        Groups:
        0x8065fba:  seto    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065FBA, "\x0f\x90E\x00")
        cpu.EIP = 0x8065FBA
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FBA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FBB, 8) == ord("\x90"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FBC, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8065FBD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065FBE)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETP_1_symbolic(self):
        """Instruction SETP_1
        Groups:
        0x806b09d:  setp    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B09D, "\x0f\x9a\xc1")
        cpu.EIP = 0x806B09D
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806B09D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B09E, 8) == ord("\x9a"))
        condition = Operators.AND(condition, cpu.read_int(0x806B09F, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B0A0)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETP_2_symbolic(self):
        """Instruction SETP_2
        Groups:
        0x8079481:  setp    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x8079481, "\x0f\x9aE\x00")
        cpu.EIP = 0x8079481
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x8079481, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8079482, 8) == ord("\x9a"))
        condition = Operators.AND(condition, cpu.read_int(0x8079483, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8079484, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079485)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETP_3_symbolic(self):
        """Instruction SETP_3
        Groups:
        0x807947e:  setp    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807947E, "\x0f\x9a\xc1")
        cpu.EIP = 0x807947E
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079480, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x807947E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x807947F, 8) == ord("\x9a"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079481)
        condition = Operators.AND(condition, cpu.CL == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETP_4_symbolic(self):
        """Instruction SETP_4
        Groups:
        0x806b0a0:  setp    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806B0A0, "\x0f\x9aE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x806B0A0
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806B0A0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0A1, 8) == ord("\x9a"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0A2, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0A3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B0A4)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETS_1_symbolic(self):
        """Instruction SETS_1
        Groups:
        0x806b0a7:  sets    byte ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x806B0A8, "\x98E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x806B0A7, "\x0f")
        cpu.EIP = 0x806B0A7
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806B0A8, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0A9, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0AA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0A7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B0AB)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETS_2_symbolic(self):
        """Instruction SETS_2
        Groups:
        0x806b0a4:  sets    cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0806B000, 0x1000, "rwx")
        mem.write(0x806B0A4, "\x0f\x98\xc1")
        cpu.EIP = 0x806B0A4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x806B0A4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0A5, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.read_int(0x806B0A6, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x806B0A7)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_1_symbolic(self):
        """Instruction SHLD_1
        Groups:
        0x8059a5b:  shld    word ptr [ebp], dx, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059A60, "\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem.write(0x8059A5B, "f\x0f\xa4U\x00")
        cpu.EIP = 0x8059A5B
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC8F8)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A60, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xfb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A5B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A5C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A5D, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A5E, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A5F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A61)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.DX == 0xC8F8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_2_symbolic(self):
        """Instruction SHLD_2
        Groups:
        0x8059a42:  shld    cx, dx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A42, "f\x0f\xa5\xd1")
        cpu.EIP = 0x8059A42
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC8F8)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A42, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A43, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A44, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A45, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A46)
        condition = Operators.AND(condition, cpu.CX == 0x0)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.DX == 0xC8F8)
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_3_symbolic(self):
        """Instruction SHLD_3
        Groups:
        0x8059a52:  shld    cx, dx, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A52, "f\x0f\xa4\xd1\x02")
        cpu.EIP = 0x8059A52
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC8F8)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A52, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A53, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A54, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A55, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A56, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A57)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.CX == 0x3)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.DX == 0xC8F8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_4_symbolic(self):
        """Instruction SHLD_4
        Groups:
        0x8059a57:  shld    ecx, edx, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A57, "\x0f\xa4\xd1\x02")
        cpu.EIP = 0x8059A57
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC8F8)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A58, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A59, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A5A, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A57, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A5B)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0xC8F8)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_5_symbolic(self):
        """Instruction SHLD_5
        Groups:
        0x8059a61:  shld    dword ptr [ebp], edx, 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFB)
        mem[addr] = value
        mem.write(0x8059A61, "\x0f\xa4U\x00\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        cpu.EIP = 0x8059A61
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC8F8)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A61, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A62, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A63, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A64, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A65, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A66)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.EDX == 0xC8F8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_6_symbolic(self):
        """Instruction SHLD_6
        Groups:
        0x8059a49:  shld    word ptr [ebp], dx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem.write(0x8059A49, "f\x0f\xa5U\x00")
        cpu.EIP = 0x8059A49
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC8F8)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A49, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A4A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A4B, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A4C, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A4D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A4E)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.DX == 0xC8F8)
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_7_symbolic(self):
        """Instruction SHLD_7
        Groups:
        0x8059a4e:  shld    dword ptr [ebp], edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3E)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        mem.write(0x8059A4E, "\x0f\xa5U\x00")
        cpu.EIP = 0x8059A4E
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC8F8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A51, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A50, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A4E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A4F, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A52)
        condition = Operators.AND(condition, cpu.EDX == 0xC8F8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLD_8_symbolic(self):
        """Instruction SHLD_8
        Groups:
        0x8059a46:  shld    ecx, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059A46, "\x0f\xa5\xd1")
        cpu.EIP = 0x8059A46
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC8F8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059A48, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A46, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059A47, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059A49)
        condition = Operators.AND(condition, cpu.EDX == 0xC8F8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_1_symbolic(self):
        """Instruction SHL_1
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2B618)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x56C300)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_10_symbolic(self):
        """Instruction SHL_10
        Groups:
        0xf7fe72a0: shl     edx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72A0, "\xc1\xe2\x04")
        cpu.EIP = 0xF7FE72A0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x2)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72A0, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72A1, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72A2, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72A3)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x20)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_11_symbolic(self):
        """Instruction SHL_11
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3245563D)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x48AAC7A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_12_symbolic(self):
        """Instruction SHL_12
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x5976CD)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xB2ED9A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_13_symbolic(self):
        """Instruction SHL_13
        Groups:
        0xf7fe54e8: shl     eax, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E8, "\xc1\xe0\x04")
        cpu.EIP = 0xF7FE54E8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1A5)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E8, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E9, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54EA, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54EB)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x1A50)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_14_symbolic(self):
        """Instruction SHL_14
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2152C1C6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x2A5838C0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_15_symbolic(self):
        """Instruction SHL_15
        Groups:
        0xf7fe7210: shl     ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7210, "\xc1\xe1\x04")
        cpu.EIP = 0xF7FE7210
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7210, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7211, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7212, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7213)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_16_symbolic(self):
        """Instruction SHL_16
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xB88A6AA)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7114D540)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_17_symbolic(self):
        """Instruction SHL_17
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x91A1E0D1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x343C1A20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_18_symbolic(self):
        """Instruction SHL_18
        Groups:
        0xf7fe54e8: shl     eax, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54E8, "\xc1\xe0\x04")
        cpu.EIP = 0xF7FE54E8
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x20A)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E8, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54E9, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54EA, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54EB)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x20A0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_19_symbolic(self):
        """Instruction SHL_19
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7C92C8DA)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x92591B40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_2_symbolic(self):
        """Instruction SHL_2
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xEEC095A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xDD812B40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_20_symbolic(self):
        """Instruction SHL_20
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xBC8E74EF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x91CE9DE0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_21_symbolic(self):
        """Instruction SHL_21
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4E5D1343)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xCBA26860)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_3_symbolic(self):
        """Instruction SHL_3
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xEC71E1E0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8E3C3C00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_4_symbolic(self):
        """Instruction SHL_4
        Groups:
        0xf7fe7210: shl     ecx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7210, "\xc1\xe1\x04")
        cpu.EIP = 0xF7FE7210
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x536)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7210, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7211, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7212, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7213)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x5360)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_5_symbolic(self):
        """Instruction SHL_5
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xE1EF170B)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3DE2E160)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_6_symbolic(self):
        """Instruction SHL_6
        Groups:
        0xf7fe4d10: shl     eax, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4D10, "\xc1\xe0\x04")
        cpu.EIP = 0xF7FE4D10
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D10, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D11, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4D12, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4D13)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x20)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_7_symbolic(self):
        """Instruction SHL_7
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x574B7271)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xE96E4E20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_8_symbolic(self):
        """Instruction SHL_8
        Groups:
        0xf7fe56a5: shl     ecx, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56A5, "\xc1\xe1\x05")
        cpu.EIP = 0xF7FE56A5
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x797078E1)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A5, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A6, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56A8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x2E0F1C20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_9_symbolic(self):
        """Instruction SHL_9
        Groups:
        0xf7fec3e0: shl     edx, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEC000, 0x1000, "rwx")
        mem.write(0xF7FEC3E0, "\xc1\xe2\x04")
        cpu.EIP = 0xF7FEC3E0
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1A)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3E0, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3E1, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEC3E2, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEC3E3)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x1A0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_1_symbolic(self):
        """Instruction SHRD_1
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x9)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x20040)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x9)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_10_symbolic(self):
        """Instruction SHRD_10
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x16)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x10)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x16)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_11_symbolic(self):
        """Instruction SHRD_11
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4000000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x18)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x4)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x18)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_12_symbolic(self):
        """Instruction SHRD_12
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x5)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x200400)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x5)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_13_symbolic(self):
        """Instruction SHRD_13
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xD)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x2004)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0xD)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_14_symbolic(self):
        """Instruction SHRD_14
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4000000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x12)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x100)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x12)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_15_symbolic(self):
        """Instruction SHRD_15
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4000000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x1A)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x1A)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_16_symbolic(self):
        """Instruction SHRD_16
        Groups:
        0x805ba45:  shrd    dword ptr [ebp], edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805BA45, "\x0f\xadU\x00")
        cpu.EIP = 0x805BA45
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3EC)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA45, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA46, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA47, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x805BA48, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805BA49)
        condition = Operators.AND(condition, cpu.EDX == 0x3EC)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_17_symbolic(self):
        """Instruction SHRD_17
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x11)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x200)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x11)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_18_symbolic(self):
        """Instruction SHRD_18
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x9)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x20040)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x9)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_19_symbolic(self):
        """Instruction SHRD_19
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xC)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x4008)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0xC)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_2_symbolic(self):
        """Instruction SHRD_2
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xE)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x1002)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0xE)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_20_symbolic(self):
        """Instruction SHRD_20
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x8)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x40080)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_21_symbolic(self):
        """Instruction SHRD_21
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4000000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x19)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x19)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_3_symbolic(self):
        """Instruction SHRD_3
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4000000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x16)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x10)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x16)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_4_symbolic(self):
        """Instruction SHRD_4
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4000000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x11)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x200)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x11)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_5_symbolic(self):
        """Instruction SHRD_5
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x19)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x19)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_6_symbolic(self):
        """Instruction SHRD_6
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x8)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x40080)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.CL == 0x8)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_7_symbolic(self):
        """Instruction SHRD_7
        Groups:
        0xf7fe9be8: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BE8, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9BE8
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x7)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BE9, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEA, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BEB)
        condition = Operators.AND(condition, cpu.EAX == 0x80100)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_8_symbolic(self):
        """Instruction SHRD_8
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x7)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x80100)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHRD_9_symbolic(self):
        """Instruction SHRD_9
        Groups:
        0xf7fe9998: shrd    eax, edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9998, "\x0f\xad\xd0")
        cpu.EIP = 0xF7FE9998
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4008000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x3)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9998, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9999, 8) == ord("\xad"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE999A, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE999B)
        condition = Operators.AND(condition, cpu.EAX == 0x801000)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x3)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_1_symbolic(self):
        """Instruction SHR_1
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xDE)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x20002000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F34, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F35, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F36)
        condition = Operators.AND(condition, cpu.CL == 0xDE)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_10_symbolic(self):
        """Instruction SHR_10
        Groups:
        0xf7fe9beb: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9BEB, "\xd3\xea")
        cpu.EIP = 0xF7FE9BEB
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xE)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEB, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9BEC, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9BED)
        condition = Operators.AND(condition, cpu.CL == 0xE)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_11_symbolic(self):
        """Instruction SHR_11
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x71)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x20002000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F34, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F35, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F36)
        condition = Operators.AND(condition, cpu.CL == 0x71)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x1000)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_12_symbolic(self):
        """Instruction SHR_12
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xB6)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xC34CB81E)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F34, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F35, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F36)
        condition = Operators.AND(condition, cpu.CL == 0xB6)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x30D)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_13_symbolic(self):
        """Instruction SHR_13
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x23)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x20002000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F38, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F39, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F3A)
        condition = Operators.AND(condition, cpu.CL == 0x23)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x4000400)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_14_symbolic(self):
        """Instruction SHR_14
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x5B)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x193220E0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F34, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F35, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F36)
        condition = Operators.AND(condition, cpu.CL == 0x5B)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x3)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_15_symbolic(self):
        """Instruction SHR_15
        Groups:
        0xf7fe7203: shr     ecx, 8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7203, "\xc1\xe9\x08")
        cpu.EIP = 0xF7FE7203
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4EE06)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7203, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7204, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7205, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7206)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4EE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_16_symbolic(self):
        """Instruction SHR_16
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x87)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x193220E0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F38, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F39, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F3A)
        condition = Operators.AND(condition, cpu.CL == 0x87)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x326441)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_17_symbolic(self):
        """Instruction SHR_17
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xCB)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x20002000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F38, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F39, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F3A)
        condition = Operators.AND(condition, cpu.CL == 0xCB)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x40004)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_18_symbolic(self):
        """Instruction SHR_18
        Groups:
        0x804834f:  shr     edx, 0x1f
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.write(0x804834F, "\xc1\xea\x1f")
        cpu.EIP = 0x804834F
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8048350, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.read_int(0x8048351, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0x804834F, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8048352)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_19_symbolic(self):
        """Instruction SHR_19
        Groups:
        0xf7ff4546: shr     ecx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF4546, "\xd1\xe9")
        cpu.EIP = 0xF7FF4546
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4546, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF4547, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4548)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_2_symbolic(self):
        """Instruction SHR_2
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x2)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1000045E)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F38, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F39, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F3A)
        condition = Operators.AND(condition, cpu.CL == 0x2)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x4000117)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_20_symbolic(self):
        """Instruction SHR_20
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x3E)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x40024918)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F34, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F35, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F36)
        condition = Operators.AND(condition, cpu.CL == 0x3E)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_21_symbolic(self):
        """Instruction SHR_21
        Groups:
        0xf7fe4e71: shr     eax, 5
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4E71, "\xc1\xe8\x05")
        cpu.EIP = 0xF7FE4E71
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xDAD66940)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E71, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E72, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E73, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E74)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x6D6B34A)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_3_symbolic(self):
        """Instruction SHR_3
        Groups:
        0xf7fe4f38: shr     eax, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F38, "\xd3\xe8")
        cpu.EIP = 0xF7FE4F38
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x82)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2034006)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F38, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F39, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F3A)
        condition = Operators.AND(condition, cpu.CL == 0x82)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x80D001)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_4_symbolic(self):
        """Instruction SHR_4
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x93)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x20002000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F34, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F35, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F36)
        condition = Operators.AND(condition, cpu.CL == 0x93)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x400)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_5_symbolic(self):
        """Instruction SHR_5
        Groups:
        0xf7fe4f34: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F34, "\xd3\xea")
        cpu.EIP = 0xF7FE4F34
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x4E)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x20002000)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F34, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F35, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F36)
        condition = Operators.AND(condition, cpu.CL == 0x4E)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x8000)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_6_symbolic(self):
        """Instruction SHR_6
        Groups:
        0xf7fe0b13: shr     esi, 8
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE0000, 0x1000, "rwx")
        mem.write(0xF7FE0B13, "\xc1\xee\x08")
        cpu.EIP = 0xF7FE0B13
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x607)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B13, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B14, 8) == ord("\xee"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE0B15, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE0B16)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_7_symbolic(self):
        """Instruction SHR_7
        Groups:
        0xf7fe54cb: shr     edx, 1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54CB, "\xd1\xea")
        cpu.EIP = 0xF7FE54CB
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54CB, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54CC, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54CD)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_8_symbolic(self):
        """Instruction SHR_8
        Groups:
        0xf7fe4fa4: shr     dl, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4FA4, "\xc0\xea\x04")
        cpu.EIP = 0xF7FE4FA4
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x11)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FA4, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FA5, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4FA6, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4FA7)
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_9_symbolic(self):
        """Instruction SHR_9
        Groups:
        0xf7fe4f2e: shr     edx, cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F2E, "\xd3\xea")
        cpu.EIP = 0xF7FE4F2E
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x5)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xB23C806A)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F2E, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F2F, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F30)
        condition = Operators.AND(condition, cpu.CL == 0x5)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x591E403)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_1_symbolic(self):
        """Instruction STC_1
        Groups:
        0x8079441:  stc
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079441, "\xf9")
        cpu.EIP = 0x8079441
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079441, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079442)
        condition = Operators.AND(condition, cpu.CF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STD_1_symbolic(self):
        """Instruction STD_1
        Groups:
        0x8079387:  std
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079387, "\xfd")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x8079387

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079387, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.DF == True)
        condition = Operators.AND(condition, cpu.EIP == 0x8079388)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STMXCSR_1_symbolic(self):
        """Instruction STMXCSR_1
        Groups: sse1
        0x80565d0:  stmxcsr dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x37)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x80565D0, "\x0f\xae]\x00")
        cpu.EIP = 0x80565D0
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80565D0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x80565D1, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.read_int(0x80565D2, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.read_int(0x80565D3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x80565D4)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSB_1_symbolic(self):
        """Instruction STOSB_1
        Groups:
        0x8065f64:  stosb   byte ptr es:[edi], al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F042)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1E)
        mem[addr] = value
        mem.write(0x8065F64, "\xaa")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x8065F64
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F042)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xEB)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807F042, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F64, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F65)
        condition = Operators.AND(condition, cpu.EDI == 0x807F043)
        condition = Operators.AND(condition, cpu.AL == 0xEB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_1_symbolic(self):
        """Instruction STOSD_1
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x38)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14D20)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D20, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D21, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D22, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D23, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14D24)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x37)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_10_symbolic(self):
        """Instruction STOSD_10
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B41)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B42)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B43)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xB0)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14B40)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B40, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B41, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B42, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B43, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14B44)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xAF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_11_symbolic(self):
        """Instruction STOSD_11
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B14)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14B17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xBB)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14B14)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B14, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B15, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B16, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14B17, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14B18)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xBA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_12_symbolic(self):
        """Instruction STOSD_12
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x58)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14CA0)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CA0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CA1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CA2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CA3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14CA4)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x57)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_13_symbolic(self):
        """Instruction STOSD_13
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A7C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A7F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A7E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A7D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xE1)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14A7C)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A7C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A7F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A7E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A7D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14A80)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xE0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_14_symbolic(self):
        """Instruction STOSD_14
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A31)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A32)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A33)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF4)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14A30)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A31, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A32, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A30, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A33, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14A34)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xF3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_15_symbolic(self):
        """Instruction STOSD_15
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BC0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BC1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BC2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BC3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x90)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14BC0)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BC0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BC1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BC2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BC3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14BC4)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x8F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_16_symbolic(self):
        """Instruction STOSD_16
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xDA)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14A98)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A98, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A99, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A9A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A9B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14A9C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xD9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_17_symbolic(self):
        """Instruction STOSD_17
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF8)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14A20)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A20, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A21, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A22, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A23, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14A24)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xF7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_18_symbolic(self):
        """Instruction STOSD_18
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D48)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D49)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D4A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14D4B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2E)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14D48)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D48, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D49, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D4A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14D4B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14D4C)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x2D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_19_symbolic(self):
        """Instruction STOSD_19
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14AFC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14AFF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14AFE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14AFD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xC1)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14AFC)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14AFC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14AFF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14AFE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14AFD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14B00)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xC0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_2_symbolic(self):
        """Instruction STOSD_2
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14A24)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A24, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A25, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A26, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A27, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14A28)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xF6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_20_symbolic(self):
        """Instruction STOSD_20
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A64)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14A67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xE7)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14A64)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A64, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A65, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A66, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14A67, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14A68)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xE6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_21_symbolic(self):
        """Instruction STOSD_21
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CF4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CF5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CF6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CF7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x43)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14CF4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CF4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CF5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CF6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CF7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14CF8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x42)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_3_symbolic(self):
        """Instruction STOSD_3
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14ABC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14ABF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14ABE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14ABD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xD1)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14ABC)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14ABC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14ABF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14ABE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14ABD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14AC0)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xD0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_4_symbolic(self):
        """Instruction STOSD_4
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14DC4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14DC5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14DC6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14DC7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14DC4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14DC4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14DC5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14DC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14DC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14DC8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0xE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_5_symbolic(self):
        """Instruction STOSD_5
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14C94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14C95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14C96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14C97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x5B)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14C94)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14C94, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14C95, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14C96, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14C97, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14C98)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x5A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_6_symbolic(self):
        """Instruction STOSD_6
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x47)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14CE4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14CE8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x46)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_7_symbolic(self):
        """Instruction STOSD_7
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CD4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CD5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CD6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CD7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4B)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14CD4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CD4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CD5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CD6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CD7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14CD8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x4A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_8_symbolic(self):
        """Instruction STOSD_8
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14CE3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x48)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14CE0)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14CE3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14CE4)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x47)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_9_symbolic(self):
        """Instruction STOSD_9
        Groups:
        0xf7fed5cc: rep stosd       dword ptr es:[edi], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E14000, 0x1000, "rwx")
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14940)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14941)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14942)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14943)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7E14BB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FED5CC, "\xf3\xab")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x93)
        cpu.EIP = 0xF7FED5CC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E14BB4)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7E14940)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E14940, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14941, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14942, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14943, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BB4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E14BB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED5CD, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED5CC)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14BB8)
        condition = Operators.AND(condition, cpu.ESI == 0xF7E14940)
        condition = Operators.AND(condition, cpu.ECX == 0x92)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSW_1_symbolic(self):
        """Instruction STOSW_1
        Groups:
        0x8065f65:  stosw   word ptr es:[edi], ax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0x0807F000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F043)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x807F044)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        mem.write(0x8065F65, "f\xab")
        cpu.DF = cs.new_bool()
        cs.add(cpu.DF == False)
        cpu.EIP = 0x8065F65
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x807F043)
        cpu.AX = cs.new_bitvec(16)
        cs.add(cpu.AX == 0xFFEB)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807F043, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x807F044, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F65, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F66, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F67)
        condition = Operators.AND(condition, cpu.EDI == 0x807F045)
        condition = Operators.AND(condition, cpu.AX == 0xFFEB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_1_symbolic(self):
        """Instruction SUB_1
        Groups:
        0xf7ff3ee0: sub     edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE0, ")\xca")
        cpu.EIP = 0xF7FF3EE0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x67)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE0, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE1, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE2)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFFF99)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x67)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_10_symbolic(self):
        """Instruction SUB_10
        Groups:
        0xf7ff3ee0: sub     edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EE0, ")\xca")
        cpu.EIP = 0xF7FF3EE0
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6362696C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE0, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EE1, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EE2)
        condition = Operators.AND(condition, cpu.EDX == 0x9C9D9694)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x6362696C)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_11_symbolic(self):
        """Instruction SUB_11
        Groups:
        0x8065f3a:  sub     dword ptr [ebp], -1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFB)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x8065F3A, "\x83m\x00\xff")
        cpu.EIP = 0x8065F3A
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xfb"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F3A, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F3B, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F3C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F3D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F3E)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_12_symbolic(self):
        """Instruction SUB_12
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD454)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7300, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7301, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7302, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7303)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD440)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_13_symbolic(self):
        """Instruction SUB_13
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD454)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7300, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7301, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7302, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7303)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD440)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_14_symbolic(self):
        """Instruction SUB_14
        Groups:
        0xf7feae13: sub     ebp, 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEA000, 0x1000, "rwx")
        mem.write(0xF7FEAE13, "\x83\xed\x04")
        cpu.EIP = 0xF7FEAE13
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x8)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEAE13, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEAE14, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEAE15, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEAE16)
        condition = Operators.AND(condition, cpu.EBP == 0x4)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_15_symbolic(self):
        """Instruction SUB_15
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD454)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7300, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7301, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7302, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7303)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD440)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_16_symbolic(self):
        """Instruction SUB_16
        Groups:
        0x8065f28:  sub     dword ptr [ebp], 4
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08065000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7C)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8065F28, "\x83m\x00\x04")
        cpu.EIP = 0x8065F28
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F28, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F29, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F2A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8065F2B, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EIP == 0x8065F2C)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_17_symbolic(self):
        """Instruction SUB_17
        Groups:
        0xf7fe4c88: sub     esp, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4C88, "\x83\xec,")
        cpu.EIP = 0xF7FE4C88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2DC)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C88, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C89, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C8A, 8) == ord(","))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C8B)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2B0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_18_symbolic(self):
        """Instruction SUB_18
        Groups:
        0xf7fe4c88: sub     esp, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4C88, "\x83\xec,")
        cpu.EIP = 0xF7FE4C88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2DC)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C88, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C89, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4C8A, 8) == ord(","))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4C8B)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2B0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_19_symbolic(self):
        """Instruction SUB_19
        Groups:
        0xf7eaa004: sub     esp, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA004, "\x83\xec,")
        cpu.EIP = 0xF7EAA004
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD5AC)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA004, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA005, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA006, 8) == ord(","))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA007)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD580)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_2_symbolic(self):
        """Instruction SUB_2
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD454)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7300, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7301, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7302, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7303)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD440)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_20_symbolic(self):
        """Instruction SUB_20
        Groups:
        0xf7fe567b: sub     esp, 0xac
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE567B, "\x81\xec\xac\x00\x00\x00")
        cpu.EIP = 0xF7FE567B
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD42C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5680, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE567B, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE567C, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE567D, 8) == ord("\xac"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE567E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE567F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5681)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD380)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_21_symbolic(self):
        """Instruction SUB_21
        Groups:
        0xf7ff0e38: sub     edx, 3
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF0000, 0x1000, "rwx")
        mem.write(0xF7FF0E38, "\x83\xea\x03")
        cpu.EIP = 0xF7FF0E38
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xE)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E38, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E39, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF0E3A, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF0E3B)
        condition = Operators.AND(condition, cpu.EDX == 0xB)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_3_symbolic(self):
        """Instruction SUB_3
        Groups:
        0xf7fe4e16: sub     esp, 0x7c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4E16, "\x83\xec|")
        cpu.EIP = 0xF7FE4E16
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD36C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E18, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E16, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E17, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E19)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_4_symbolic(self):
        """Instruction SUB_4
        Groups:
        0xf7fe7437: sub     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7437, ")\xd0")
        cpu.EIP = 0xF7FE7437
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x10)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x4C)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7438, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7437, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7439)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFC4)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x4C)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_5_symbolic(self):
        """Instruction SUB_5
        Groups:
        0xf7fdccc9: sub     esp, 0x20
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDC000, 0x1000, "rwx")
        mem.write(0xF7FDCCC9, "\x83\xec ")
        cpu.EIP = 0xF7FDCCC9
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD4F0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FDCCC9, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDCCCA, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDCCCB, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FDCCCC)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD4D0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_6_symbolic(self):
        """Instruction SUB_6
        Groups:
        0xf7fe7300: sub     esp, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7300, "\x83\xec\x14")
        cpu.EIP = 0xF7FE7300
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD454)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7300, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7301, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7302, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7303)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD440)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_7_symbolic(self):
        """Instruction SUB_7
        Groups:
        0xf7eaa234: sub     eax, 0xb9
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA234, "-\xb9\x00\x00\x00")
        cpu.EIP = 0xF7EAA234
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xBC)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA238, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA234, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA235, 8) == ord("\xb9"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA236, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA237, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA239)
        condition = Operators.AND(condition, cpu.EAX == 0x3)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_8_symbolic(self):
        """Instruction SUB_8
        Groups:
        0xf7fe4e16: sub     esp, 0x7c
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4E16, "\x83\xec|")
        cpu.EIP = 0xF7FE4E16
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD36C)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E18, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E16, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4E17, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4E19)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_9_symbolic(self):
        """Instruction SUB_9
        Groups:
        0xf7ff1671: sub     esp, 0x18
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF1000, 0x1000, "rwx")
        mem.write(0xF7FF1671, "\x83\xec\x18")
        cpu.EIP = 0xF7FF1671
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD3D8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1671, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1672, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF1673, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF1674)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD3C0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_1_symbolic(self):
        """Instruction TEST_1
        Groups:
        0xf7fe4ec7: test    byte ptr [esi + 0x195], 0x20
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FDA000, 0x1000, "rwx")
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4EC7, "\xf6\x86\x95\x01\x00\x00 ")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xF7FDA9ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        cpu.EIP = 0xF7FE4EC7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDA858)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EC7, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EC8, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EC9, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4ECA, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4ECB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4ECC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4ECD, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0xF7FDA9ED, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4ECE)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDA858)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_10_symbolic(self):
        """Instruction TEST_10
        Groups:
        0xf7fe56af: test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x5F)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56B0, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AF, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56B1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x5F)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_11_symbolic(self):
        """Instruction TEST_11
        Groups:
        0xf7fe9ea0: test    eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.write(0xF7FE9EA0, "\x85\xc0")
        cpu.EIP = 0xF7FE9EA0
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x9)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9EA0, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9EA1, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9EA2)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x9)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_12_symbolic(self):
        """Instruction TEST_12
        Groups:
        0xf7fe4eb3: test    byte ptr [esp + 0x6c], 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4EB3, "\xf6D$l\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD35C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE4EB3
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2F0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB3, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB4, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB5, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB6, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB7, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD35C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4EB8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_13_symbolic(self):
        """Instruction TEST_13
        Groups:
        0xf7fe57d4: test    edx, 0x804
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE57D4, "\xf7\xc2\x04\x08\x00\x00")
        cpu.EIP = 0xF7FE57D4
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D5, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D6, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D7, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57DA)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_14_symbolic(self):
        """Instruction TEST_14
        Groups:
        0xf7fe56af: test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x74)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56B0, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AF, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56B1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x74)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_15_symbolic(self):
        """Instruction TEST_15
        Groups:
        0xf7ff3e70: test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E70, "\x84\xc0")
        cpu.EIP = 0xF7FF3E70
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x4F)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E70, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E71, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E72)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x4F)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_16_symbolic(self):
        """Instruction TEST_16
        Groups:
        0xf7fe56f3: test    eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56F3, "\x85\xc0")
        cpu.EIP = 0xF7FE56F3
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FFDA94)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56F3, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56F4, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56F5)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFDA94)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_17_symbolic(self):
        """Instruction TEST_17
        Groups:
        0xf7fe722e: test    edi, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE722E, "\x85\xff")
        cpu.EIP = 0xF7FE722E
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x6)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE722E, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE722F, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7230)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x6)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_18_symbolic(self):
        """Instruction TEST_18
        Groups:
        0xf7fe56af: test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x63)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56B0, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AF, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56B1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x63)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_19_symbolic(self):
        """Instruction TEST_19
        Groups:
        0xf7fe56af: test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56B0, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AF, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56B1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_2_symbolic(self):
        """Instruction TEST_2
        Groups:
        0xf7fe56af: test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE56AF, "\x84\xc0")
        cpu.EIP = 0xF7FE56AF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x70)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56B0, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE56AF, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE56B1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x70)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_20_symbolic(self):
        """Instruction TEST_20
        Groups:
        0xf7fe4cfa: test    eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFA, "\x85\xc0")
        cpu.EIP = 0xF7FE4CFA
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E281C2)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFA, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFB, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CFC)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF7E281C2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_21_symbolic(self):
        """Instruction TEST_21
        Groups:
        0xf7fe4cfa: test    eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4CFA, "\x85\xc0")
        cpu.EIP = 0xF7FE4CFA
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E281C2)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFA, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4CFB, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4CFC)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF7E281C2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_3_symbolic(self):
        """Instruction TEST_3
        Groups:
        0xf7fe9e98: test    dword ptr [ebp - 0x20], eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE9000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE9E98, "\x85E")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD478)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD479)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0xF7FE9E9A, "\xe0")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD47B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD47A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE9E98
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFD498)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xA)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD478, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD479, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9E98, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9E99, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE9E9A, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD47B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD47A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE9E9B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFD498)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EAX == 0xA)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_4_symbolic(self):
        """Instruction TEST_4
        Groups:
        0xf7ff3e70: test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E70, "\x84\xc0")
        cpu.EIP = 0xF7FF3E70
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x5F)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E70, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E71, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E72)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.AL == 0x5F)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_5_symbolic(self):
        """Instruction TEST_5
        Groups:
        0xf7fe4eb3: test    byte ptr [esp + 0x6c], 2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.mmap(0xFFFFD000, 0x1000, "rwx")
        mem.write(0xF7FE4EB3, "\xf6D$l\x02")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFD35C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0xF7FE4EB3
        cpu.ESP = cs.new_bitvec(32)
        cs.add(cpu.ESP == 0xFFFFD2F0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB3, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB4, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB5, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB6, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4EB7, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFD35C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4EB8)
        condition = Operators.AND(condition, cpu.ESP == 0xFFFFD2F0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_6_symbolic(self):
        """Instruction TEST_6
        Groups:
        0xf7fe4f58: test    eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE4000, 0x1000, "rwx")
        mem.write(0xF7FE4F58, "\x85\xc0")
        cpu.EIP = 0xF7FE4F58
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F58, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE4F59, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE4F5A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_7_symbolic(self):
        """Instruction TEST_7
        Groups:
        0xf7fe72b7: test    eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72B7, "\x85\xc0")
        cpu.EIP = 0xF7FE72B7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xD696910)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72B7, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72B9)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xD696910)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_8_symbolic(self):
        """Instruction TEST_8
        Groups:
        0xf7fe57d4: test    edx, 0x804
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE57D4, "\xf7\xc2\x04\x08\x00\x00")
        cpu.EIP = 0xF7FE57D4
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D4, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D5, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D6, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D7, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE57D9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE57DA)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_9_symbolic(self):
        """Instruction TEST_9
        Groups:
        0xf7fe72b7: test    eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE72B7, "\x85\xc0")
        cpu.EIP = 0xF7FE72B7
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xD696910)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE72B7, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE72B9)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xD696910)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVAPS_1_symbolic(self):
        """Instruction VMOVAPS_1
        Groups: avx
        0x80795a2:  vmovaps xmmword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        mem.write(0x80795A2, "\xc5\xf8)M\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x80795A2
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80795A2, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x80795A3, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x80795A4, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0x80795A6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80795A5, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.EIP == 0x80795A7)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVAPS_2_symbolic(self):
        """Instruction VMOVAPS_2
        Groups: avx
        0x807959d:  vmovaps xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x80795A0, "E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x807959D, "\xc5\xf8(")
        cpu.EIP = 0x807959D
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80795A1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x80795A0, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807959D, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x807959E, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x807959F, 8) == ord("("))
        condition = Operators.AND(condition, cpu.EIP == 0x80795A2)
        condition = Operators.AND(condition, cpu.XMM0 == 0x301)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVAPS_3_symbolic(self):
        """Instruction VMOVAPS_3
        Groups: avx
        0x8079599:  vmovaps xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079599, "\xc5\xf8(\xc1")
        cpu.EIP = 0x8079599
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079599, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x807959A, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x807959B, 8) == ord("("))
        condition = Operators.AND(condition, cpu.read_int(0x807959C, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x807959D)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVDQA_1_symbolic(self):
        """Instruction VMOVDQA_1
        Groups: avx
        0x804d626:  vmovdqa xmmword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D626, "\xc5\xf9\x7fM\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x804D626
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D628, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D629, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D626, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x804D627, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x804D62A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D62B)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVDQA_2_symbolic(self):
        """Instruction VMOVDQA_2
        Groups: avx
        0x804d621:  vmovdqa xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D621, "\xc5\xf9oE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x804D621
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D623, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x804D622, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x804D621, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x804D624, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x804D625, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D626)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVDQA_3_symbolic(self):
        """Instruction VMOVDQA_3
        Groups: avx
        0x804d61d:  vmovdqa xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D61D, "\xc5\xf9o\xc1")
        cpu.EIP = 0x804D61D
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D620, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x804D61D, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x804D61E, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x804D61F, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D621)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVDQU_1_symbolic(self):
        """Instruction VMOVDQU_1
        Groups: avx
        0x804d661:  vmovdqu xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D661, "\xc5\xfaoE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x804D661
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D663, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x804D662, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0x804D661, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x804D664, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x804D665, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D666)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVDQU_2_symbolic(self):
        """Instruction VMOVDQU_2
        Groups: avx
        0x804d666:  vmovdqu xmmword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x804D666, "\xc5\xfa\x7fM\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x804D666
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D668, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x804D666, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x804D667, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0x804D669, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x804D66A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D66B)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVDQU_3_symbolic(self):
        """Instruction VMOVDQU_3
        Groups: avx
        0x804d65d:  vmovdqu xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D65D, "\xc5\xfao\xc1")
        cpu.EIP = 0x804D65D
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D660, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x804D65D, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x804D65E, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0x804D65F, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.EIP == 0x804D661)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_1_symbolic(self):
        """Instruction VMOVD_1
        Groups: avx
        0x8059850:  vmovd   dword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8059850, "\xc5\xf9~M\x00")
        cpu.EIP = 0x8059850
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059854, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059853, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8059851, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x8059850, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x8059852, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059855)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_2_symbolic(self):
        """Instruction VMOVD_2
        Groups: avx
        0x8059843:  vmovd   ecx, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059843, "\xc5\xf9~\xc9")
        cpu.EIP = 0x8059843
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059843, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x8059844, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x8059845, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x8059846, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059847)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_3_symbolic(self):
        """Instruction VMOVD_3
        Groups: avx
        0x8059847:  vmovd   xmm0, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059847, "\xc5\xf9n\xc2")
        cpu.EIP = 0x8059847
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFFFFFFFF)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFC606)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059848, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x8059849, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x805984A, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x8059847, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.EIP == 0x805984B)
        condition = Operators.AND(condition, cpu.XMM0 == 0xFFFFC606)
        condition = Operators.AND(condition, cpu.EDX == 0xFFFFC606)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_4_symbolic(self):
        """Instruction VMOVD_4
        Groups: avx
        0x805984b:  vmovd   xmm0, dword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805984B, "\xc5\xf9nE\x00")
        cpu.EIP = 0x805984B
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFFFFC606)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805984B, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x805984C, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x805984D, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x805984E, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x805984F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059850)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVQ_1_symbolic(self):
        """Instruction VMOVQ_1
        Groups: avx
        0x805667c:  vmovq   xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.write(0x805667C, "\xc5\xfa~\xc1")
        cpu.EIP = 0x805667C
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFFFFFFFF0000000000000000)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805667C, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x805667D, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0x805667E, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x805667F, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8056680)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVQ_2_symbolic(self):
        """Instruction VMOVQ_2
        Groups: avx
        0x8056680:  vmovq   xmm0, qword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8056680, "\xc5\xfa~E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        cpu.EIP = 0x8056680
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8056680, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x8056681, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0x8056682, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x8056683, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x8056684, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EIP == 0x8056685)
        condition = Operators.AND(condition, cpu.XMM0 == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVQ_3_symbolic(self):
        """Instruction VMOVQ_3
        Groups: avx
        0x8056685:  vmovq   qword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08056000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8056685, "\xc5\xf9\xd6M\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x8056685
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8056685, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x8056686, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x8056687, 8) == ord("\xd6"))
        condition = Operators.AND(condition, cpu.read_int(0x8056688, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x8056689, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805668A)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVUPS_1_symbolic(self):
        """Instruction VMOVUPS_1
        Groups: avx
        0x8079442:  vmovups xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079442, "\xc5\xf8\x10\xc1")
        cpu.EIP = 0x8079442
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x80F1FC00FFFF80FE)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079442, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x8079443, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x8079444, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x8079445, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079446)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVUPS_2_symbolic(self):
        """Instruction VMOVUPS_2
        Groups: avx
        0x8079446:  vmovups xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079446, "\xc5\xf8\x10E\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x8079446
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079446, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x8079447, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x8079448, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x8079449, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807944A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807944B)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVUPS_3_symbolic(self):
        """Instruction VMOVUPS_3
        Groups: avx
        0x807944b:  vmovups xmmword ptr [ebp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x807944B, "\xc5\xf8\x11M\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x807944B
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x807944B, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x807944C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x807944D, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x807944E, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x807944F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079450)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_1_symbolic(self):
        """Instruction VPSHUFB_1
        Groups: avx
        0x804d5bb:  vpshufb xmm0, xmm1, xmm2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0804D000, 0x1000, "rwx")
        mem.write(0x804D5BB, "\xc4\xe2q\x00\xc2")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x0)
        cpu.EIP = 0x804D5BB
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x804D5BB, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5BC, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5BD, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5BE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x804D5BF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x0)
        condition = Operators.AND(condition, cpu.EIP == 0x804D5C0)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPTEST_1_symbolic(self):
        """Instruction VPTEST_1
        Groups: avx
        0x8079371:  vptest  xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x8079371, "\xc4\xe2y\x17\xc1")
        cpu.EIP = 0x8079371
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x80F1FC0000000101)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8079371, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x8079372, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x8079373, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x8079374, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x8079375, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079376)
        condition = Operators.AND(condition, cpu.XMM0 == 0x80F1FC0000000101)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPTEST_2_symbolic(self):
        """Instruction VPTEST_2
        Groups: avx
        0x8079376:  vptest  xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8079376, "\xc4\xe2y\x17E\x00")
        cpu.EIP = 0x8079376
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x80F1FC0000000101)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8079376, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x8079377, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x8079378, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x8079379, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x807937A, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807937B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807937C)
        condition = Operators.AND(condition, cpu.XMM0 == 0x80F1FC0000000101)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_1_symbolic(self):
        """Instruction VPXOR_1
        Groups: avx
        0x807949b:  vpxor   xmm0, xmm1, xmm2
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807949B, "\xc5\xf1\xef\xc2")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x0)
        cpu.EIP = 0x807949B
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807949B, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x807949C, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0x807949D, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x807949E, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x0)
        condition = Operators.AND(condition, cpu.EIP == 0x807949F)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_1_symbolic(self):
        """Instruction VZEROUPPER_1
        Groups: avx
        0x807936d:  vzeroupper
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08079000, 0x1000, "rwx")
        mem.write(0x807936D, "\xc5\xf8w")
        cpu.EIP = 0x807936D

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x807936D, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x807936E, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x807936F, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.EIP == 0x8079370)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XADD_1_symbolic(self):
        """Instruction XADD_1
        Groups:
        0x805987c:  xadd    byte ptr [ebp], dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        mem.write(0x805987C, "\x0f\xc0U\x00")
        cpu.EIP = 0x805987C
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0x805987C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805987D, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x805987E, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x805987F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059880)
        condition = Operators.AND(condition, cpu.DL == 0xFC)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XADD_2_symbolic(self):
        """Instruction XADD_2
        Groups:
        0x8059885:  xadd    dword ptr [ebp], edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x8059885, "\x0f\xc1U\x00")
        cpu.EIP = 0x8059885
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFC)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x8059885, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059886, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059887, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8059888, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059889)
        condition = Operators.AND(condition, cpu.EDX == 0xC8F8)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XADD_3_symbolic(self):
        """Instruction XADD_3
        Groups:
        0x8059875:  xadd    cx, dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059875, "f\x0f\xc1\xd1")
        cpu.EIP = 0x8059875
        cpu.CX = cs.new_bitvec(16)
        cs.add(cpu.CX == 0x3)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC6FD)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059878, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059875, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059876, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059877, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059879)
        condition = Operators.AND(condition, cpu.CX == 0xC700)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.DX == 0x3)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XADD_4_symbolic(self):
        """Instruction XADD_4
        Groups:
        0x8059880:  xadd    word ptr [ebp], dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        mem.write(0x8059880, "f\x0f\xc1U\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        cpu.EIP = 0x8059880
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0xC7FC)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059880, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059881, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059882, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x8059883, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x8059884, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059885)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.DX == 0xFC)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XADD_5_symbolic(self):
        """Instruction XADD_5
        Groups:
        0x8059872:  xadd    cl, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059872, "\x0f\xc0\xd1")
        cpu.EIP = 0x8059872
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x6)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xFD)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059872, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8059873, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x8059874, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8059875)
        condition = Operators.AND(condition, cpu.DL == 0xFD)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CL == 0x3)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XADD_6_symbolic(self):
        """Instruction XADD_6
        Groups:
        0x8059879:  xadd    ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08059000, 0x1000, "rwx")
        mem.write(0x8059879, "\x0f\xc1\xd1")
        cpu.EIP = 0x8059879
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFF0003)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xC700)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8059879, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x805987A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x805987B, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x805987C)
        condition = Operators.AND(condition, cpu.EDX == 0xC700)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFC703)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_1_symbolic(self):
        """Instruction XCHG_1
        Groups:
        0x805b983:  xchg    cl, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B983, "\x86\xd1")
        cpu.EIP = 0x805B983
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0xF8)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B983, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0x805B984, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B985)
        condition = Operators.AND(condition, cpu.DL == 0xC)
        condition = Operators.AND(condition, cpu.CL == 0xF8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_10_symbolic(self):
        """Instruction XCHG_10
        Groups:
        0xf7eaa1dc: xchg    edi, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1DC, "\x87\xdf")
        cpu.EIP = 0xF7EAA1DC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x1)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1DC, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1DD, 8) == ord("\xdf"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA1DE)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FC0000)
        condition = Operators.AND(condition, cpu.EBX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_11_symbolic(self):
        """Instruction XCHG_11
        Groups:
        0x805b98f:  xchg    ecx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.write(0x805B98F, "\x87\xd1")
        cpu.EIP = 0x805B98F
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xEC)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x3F8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x805B990, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x805B98F, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B991)
        condition = Operators.AND(condition, cpu.EDX == 0x3F8)
        condition = Operators.AND(condition, cpu.ECX == 0xEC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_12_symbolic(self):
        """Instruction XCHG_12
        Groups:
        0xf7e2e752: xchg    esi, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E752, "\x87\xde")
        cpu.EIP = 0xF7E2E752
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1C0003F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E752, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E753, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2E754)
        condition = Operators.AND(condition, cpu.EBX == 0x1C0003F)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FC0000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_13_symbolic(self):
        """Instruction XCHG_13
        Groups:
        0xf7e2ee82: xchg    ebp, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2EE82, "\x87\xdd")
        cpu.EIP = 0xF7E2EE82
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xF7FC0000)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EE82, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2EE83, 8) == ord("\xdd"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2EE84)
        condition = Operators.AND(condition, cpu.EBP == 0x0)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FC0000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_14_symbolic(self):
        """Instruction XCHG_14
        Groups:
        0x805b991:  xchg    dword ptr [ebp], ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        mem.write(0x805B991, "\x87M\x00")
        cpu.EIP = 0x805B991
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xEC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x805B991, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0x805B992, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B993, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B994)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.ECX == 0x7803C80C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_15_symbolic(self):
        """Instruction XCHG_15
        Groups:
        0xf7ff36f4: xchg    ebx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF36F4, "\x87\xd3")
        cpu.EIP = 0xF7FF36F4
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FFD000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF36F4, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF36F5, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF36F6)
        condition = Operators.AND(condition, cpu.EDX == 0xF7FFD000)
        condition = Operators.AND(condition, cpu.EBX == 0x3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_16_symbolic(self):
        """Instruction XCHG_16
        Groups:
        0x805b997:  xchg    word ptr [ebp], dx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x805B997, "f\x87U\x00")
        cpu.EIP = 0x805B997
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.DX = cs.new_bitvec(16)
        cs.add(cpu.DX == 0x3EC)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x805B997, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x805B998, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0x805B999, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x805B99A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B99B)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.DX == 0xF8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_17_symbolic(self):
        """Instruction XCHG_17
        Groups:
        0x805b985:  xchg    byte ptr [ebp], cl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x0805B000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEC)
        mem[addr] = value
        mem.write(0x805B985, "\x86M\x00")
        cpu.EIP = 0x805B985
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xF8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x805B985, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0x805B986, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x805B987, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x805B988)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)
        condition = Operators.AND(condition, cpu.CL == 0xEC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_18_symbolic(self):
        """Instruction XCHG_18
        Groups:
        0xf7e2e756: xchg    esi, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E756, "\x87\xde")
        cpu.EIP = 0xF7E2E756
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x1C0003F)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FC0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E756, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E757, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2E758)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FC0000)
        condition = Operators.AND(condition, cpu.ESI == 0x1C0003F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_19_symbolic(self):
        """Instruction XCHG_19
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7E148FC)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E14014)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454E, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454F)
        condition = Operators.AND(condition, cpu.EDI == 0xF7E14014)
        condition = Operators.AND(condition, cpu.EAX == 0xF7E148FC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_2_symbolic(self):
        """Instruction XCHG_2
        Groups:
        0xf7eaa3c0: xchg    ebp, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA3C0, "\x87\xdd")
        cpu.EIP = 0xF7EAA3C0
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0x1)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA3C0, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA3C1, 8) == ord("\xdd"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA3C2)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FC0000)
        condition = Operators.AND(condition, cpu.EBX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_20_symbolic(self):
        """Instruction XCHG_20
        Groups:
        0xf7eaa19a: xchg    ebp, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA19A, "\x87\xdd")
        cpu.EIP = 0xF7EAA19A
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xC2)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA19A, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA19B, 8) == ord("\xdd"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA19C)
        condition = Operators.AND(condition, cpu.EBP == 0xF7FC0000)
        condition = Operators.AND(condition, cpu.EBX == 0xC2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_21_symbolic(self):
        """Instruction XCHG_21
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FDAAEE)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FDAAD0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454E, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454F)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FDAAD0)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FDAAEE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_3_symbolic(self):
        """Instruction XCHG_3
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF43)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFD410)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454E, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454F)
        condition = Operators.AND(condition, cpu.EDI == 0xFFFFD410)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFDF43)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_4_symbolic(self):
        """Instruction XCHG_4
        Groups:
        0xf7ff36fd: xchg    ebx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF36FD, "\x87\xd3")
        cpu.EIP = 0xF7FF36FD
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF7FFD000)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF36FD, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF36FE, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF36FF)
        condition = Operators.AND(condition, cpu.EDX == 0x3)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FFD000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_5_symbolic(self):
        """Instruction XCHG_5
        Groups:
        0xf7e2e752: xchg    esi, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E2E000, 0x1000, "rwx")
        mem.write(0xF7E2E752, "\x87\xde")
        cpu.EIP = 0xF7E2E752
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1C0003F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E752, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E2E753, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E2E754)
        condition = Operators.AND(condition, cpu.EBX == 0x1C0003F)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FC0000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_6_symbolic(self):
        """Instruction XCHG_6
        Groups:
        0xf7eaa1dc: xchg    edi, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1DC, "\x87\xdf")
        cpu.EIP = 0xF7EAA1DC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x0)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1DC, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1DD, 8) == ord("\xdf"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA1DE)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FC0000)
        condition = Operators.AND(condition, cpu.EBX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_7_symbolic(self):
        """Instruction XCHG_7
        Groups:
        0xf7eaa1dc: xchg    edi, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1DC, "\x87\xdf")
        cpu.EIP = 0xF7EAA1DC
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x1)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xF7FC0000)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1DC, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1DD, 8) == ord("\xdf"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA1DE)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FC0000)
        condition = Operators.AND(condition, cpu.EBX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_8_symbolic(self):
        """Instruction XCHG_8
        Groups:
        0xf7eaa1e0: xchg    edi, ebx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA1E0, "\x87\xdf")
        cpu.EIP = 0xF7EAA1E0
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FC0000)
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x1C0003F)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1E0, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA1E1, 8) == ord("\xdf"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA1E2)
        condition = Operators.AND(condition, cpu.EDI == 0x1C0003F)
        condition = Operators.AND(condition, cpu.EBX == 0xF7FC0000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XCHG_9_symbolic(self):
        """Instruction XCHG_9
        Groups: not64bitmode
        0xf7ff454e: xchg    eax, edi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF454E, "\x97")
        cpu.EIP = 0xF7FF454E
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0xF7FFDF5A)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FF5E9A)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF454E, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF454F)
        condition = Operators.AND(condition, cpu.EDI == 0xF7FF5E9A)
        condition = Operators.AND(condition, cpu.EAX == 0xF7FFDF5A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_1_symbolic(self):
        """Instruction XORPS_1
        Groups: sse1
        0x8070288:  xorps   xmm0, xmmword ptr [ebp]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.mmap(0xFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB600)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB601)
        value = cs.new_bitvec(8)
        cs.add(value == 0x85)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB602)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB603)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB605)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFC)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB606)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF1)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        mem.write(0x8070288, "\x0fWE\x00")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(32)
        cs.add(addr == 0xFFFFB60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EIP = 0x8070288
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.EBP = cs.new_bitvec(32)
        cs.add(cpu.EBP == 0xFFFFB600)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB600, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB601, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB602, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB603, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB605, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB606, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB607, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x8070288, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070289, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x807028A, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x807028B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0xFFFFB60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.EIP == 0x807028C)
        condition = Operators.AND(condition, cpu.XMM0 == 0x80F1FC0001E18501)
        condition = Operators.AND(condition, cpu.EBP == 0xFFFFB600)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_2_symbolic(self):
        """Instruction XORPS_2
        Groups: sse1
        0x8070285:  xorps   xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08070000, 0x1000, "rwx")
        mem.write(0x8070285, "\x0fW\xc1")
        cpu.EIP = 0x8070285
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x8070285, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x8070286, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x8070287, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EIP == 0x8070288)
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_1_symbolic(self):
        """Instruction XOR_1
        Groups:
        0xf7e901e6: xor     edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901E6, "1\xca")
        cpu.EIP = 0xF7E901E6
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x6C65662F)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2F2F2F2F)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E901E6, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901E7, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E901E8)
        condition = Operators.AND(condition, cpu.EDX == 0x434A4900)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x2F2F2F2F)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_10_symbolic(self):
        """Instruction XOR_10
        Groups:
        0xf7fe54c9: xor     edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54C9, "1\xc2")
        cpu.EIP = 0xF7FE54C9
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xF54162E5)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF54162E4)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54C9, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54CA, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54CB)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xF54162E4)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_11_symbolic(self):
        """Instruction XOR_11
        Groups:
        0xf7ff3f05: xor     edx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3F05, "1\xca")
        cpu.EIP = 0xF7FF3F05
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8CD19A8B)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x722D6473)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3F05, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3F06, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3F07)
        condition = Operators.AND(condition, cpu.EDX == 0xFEFCFEF8)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x722D6473)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_12_symbolic(self):
        """Instruction XOR_12
        Groups:
        0xf7fe7288: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7288, "1\xc0")
        cpu.EIP = 0xF7FE7288
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFF00)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7288, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7289, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE728A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_13_symbolic(self):
        """Instruction XOR_13
        Groups:
        0xf7fe54c9: xor     edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54C9, "1\xc2")
        cpu.EIP = 0xF7FE54C9
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7AB03CAB)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x77FAEEE0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54C9, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54CA, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54CB)
        condition = Operators.AND(condition, cpu.EDX == 0xD4AD24B)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EAX == 0x77FAEEE0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_14_symbolic(self):
        """Instruction XOR_14
        Groups:
        0xf7febc53: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBC53, "1\xc0")
        cpu.EIP = 0xF7FEBC53
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBC53, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBC54, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBC55)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_15_symbolic(self):
        """Instruction XOR_15
        Groups:
        0xf7fe7288: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7288, "1\xc0")
        cpu.EIP = 0xF7FE7288
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFF01)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7288, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7289, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE728A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_16_symbolic(self):
        """Instruction XOR_16
        Groups:
        0xf7fe7288: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7288, "1\xc0")
        cpu.EIP = 0xF7FE7288
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFF00)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7288, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7289, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE728A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_17_symbolic(self):
        """Instruction XOR_17
        Groups:
        0xf7fe54c9: xor     edx, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE54C9, "1\xc2")
        cpu.EIP = 0xF7FE54C9
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xA1338653)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xA1338652)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54C9, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE54CA, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE54CB)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EAX == 0xA1338652)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_18_symbolic(self):
        """Instruction XOR_18
        Groups:
        0xf7febc53: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FEB000, 0x1000, "rwx")
        mem.write(0xF7FEBC53, "1\xc0")
        cpu.EIP = 0xF7FEBC53
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFFFF)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBC53, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FEBC54, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FEBC55)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_19_symbolic(self):
        """Instruction XOR_19
        Groups:
        0xf7eaa0f5: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA0F5, "1\xc0")
        cpu.EIP = 0xF7EAA0F5
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0F5, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA0F6, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA0F7)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_2_symbolic(self):
        """Instruction XOR_2
        Groups:
        0xf7fe7f50: xor     ecx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE7000, 0x1000, "rwx")
        mem.write(0xF7FE7F50, "1\xc9")
        cpu.EIP = 0xF7FE7F50
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7E1E800)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F50, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE7F51, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE7F52)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_20_symbolic(self):
        """Instruction XOR_20
        Groups:
        0xf7fed69c: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FED000, 0x1000, "rwx")
        mem.write(0xF7FED69C, "1\xc0")
        cpu.EIP = 0xF7FED69C
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E14000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FED69C, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FED69D, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FED69E)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_21_symbolic(self):
        """Instruction XOR_21
        Groups:
        0xf7e901d7: xor     edi, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7E90000, 0x1000, "rwx")
        mem.write(0xF7E901D7, "1\xd7")
        cpu.EIP = 0xF7E901D7
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x6C65662F)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x6B64652E)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D8, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0xF7E901D7, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7E901D9)
        condition = Operators.AND(condition, cpu.EDX == 0x6C65662F)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDI == 0x7010301)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_3_symbolic(self):
        """Instruction XOR_3
        Groups:
        0xf7ff45fe: xor     ecx, esi
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF4000, 0x1000, "rwx")
        mem.write(0xF7FF45FE, "1\xf1")
        cpu.EIP = 0xF7FF45FE
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF7FDAB08)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF7FDAB18)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF45FE, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF45FF, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF4600)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.ESI == 0xF7FDAB18)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_4_symbolic(self):
        """Instruction XOR_4
        Groups:
        0xf7ff3ccc: xor     cl, dl
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3CCC, "0\xd1")
        cpu.EIP = 0xF7FF3CCC
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x24)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x48)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CCC, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CCD, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3CCE)
        condition = Operators.AND(condition, cpu.DL == 0x24)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x6C)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_5_symbolic(self):
        """Instruction XOR_5
        Groups:
        0xf7ff3e74: xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3E74, "1\xc0")
        cpu.EIP = 0xF7FF3E74
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7E28000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E74, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3E75, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3E76)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_6_symbolic(self):
        """Instruction XOR_6
        Groups:
        0xf7ff3cc4: xor     cl, byte ptr [eax]
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0x08048000, 0x1000, "rwx")
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        addr = cs.new_bitvec(32)
        cs.add(addr == 0x80481E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        mem.write(0xF7FF3CC4, "2\x08")
        cpu.EIP = 0xF7FF3CC4
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80481E9)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x24)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x80481E9, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CC4, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3CC5, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3CC6)
        condition = Operators.AND(condition, cpu.EAX == 0x80481E9)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.CL == 0x48)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_7_symbolic(self):
        """Instruction XOR_7
        Groups:
        0xf7fe5487: xor     edx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FE5000, 0x1000, "rwx")
        mem.write(0xF7FE5487, "1\xd2")
        cpu.EIP = 0xF7FE5487
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5488, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FE5487, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FE5489)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_8_symbolic(self):
        """Instruction XOR_8
        Groups:
        0xf7ff3ebf: xor     edx, edx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7FF3000, 0x1000, "rwx")
        mem.write(0xF7FF3EBF, "1\xd2")
        cpu.EIP = 0xF7FF3EBF
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EC0, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.read_int(0xF7FF3EBF, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7FF3EC1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_9_symbolic(self):
        """Instruction XOR_9
        Groups:
        0xf7eaa198: xor     ecx, ecx
        """
        cs = ConstraintSet()
        mem = SMemory32(cs)
        cpu = I386Cpu(mem)
        mem.mmap(0xF7EAA000, 0x1000, "rwx")
        mem.write(0xF7EAA198, "1\xc9")
        cpu.EIP = 0xF7EAA198
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA198, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0xF7EAA199, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.EIP == 0xF7EAA19A)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))


if __name__ == "__main__":
    unittest.main()
