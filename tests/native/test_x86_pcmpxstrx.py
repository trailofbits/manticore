import unittest
import functools
from manticore.core.smtlib import Expression
from manticore.native.cpu.abstractcpu import ConcretizeRegister
from manticore.native.memory import *
from manticore.native.cpu.x86 import AMD64Cpu
from manticore.core.smtlib.solver import Z3Solver


def skipIfNotImplemented(f):
    # XXX(yan) the inner function name must start with test_
    @functools.wraps(f)
    def test_inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except NotImplementedError as e:
            raise unittest.SkipTest(str(e))

    return test_inner


def forAllTests(decorator):
    def decorate(cls):
        for attr in cls.__dict__:
            if not attr.startswith("test_"):
                continue
            method = getattr(cls, attr)
            if callable(method):
                setattr(cls, attr, decorator(method))
        return cls

    return decorate


@forAllTests(skipIfNotImplemented)
class CPUTest(unittest.TestCase):
    _multiprocess_can_split_ = True

    class ROOperand:
        """ Mocking class for operand ronly """

        def __init__(self, size, value):
            self.size = size
            self.value = value

        def read(self):
            return self.value & ((1 << self.size) - 1)

    class RWOperand(ROOperand):
        """ Mocking class for operand rw """

        def write(self, value):
            self.value = value & ((1 << self.size) - 1)
            return self.value

    def test_PCMPESTRI_1(self):
        """Instruction PCMPESTRI_1
        Groups: sse42
        0x400bec:   pcmpestri       xmm1, xmm2, 0x64
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BEC, "f\x0f:a\xcad")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400BEC
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400BEC:0x400BF2], [b"f", b"\x0f", b":", b"a", b"\xca", b"d"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197362)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_10(self):
        """Instruction PCMPESTRI_10
        Groups: sse42
        0x400b20:   pcmpestri       xmm1, xmm2, 0x20
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B20, "f\x0f:a\xca ")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B20
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B20:0x400B26], [b"f", b"\x0f", b":", b"a", b"\xca", b" "])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197158)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_11(self):
        """Instruction PCMPESTRI_11
        Groups: sse42
        0x400b38:   pcmpestri       xmm1, xmm2, 0x28
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B38, "f\x0f:a\xca(")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B38
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400B38:0x400B3E], [b"f", b"\x0f", b":", b"a", b"\xca", b"("])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197182)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_12(self):
        """Instruction PCMPESTRI_12
        Groups: sse42
        0x400bfe:   pcmpestri       xmm1, xmm2, 0x69
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BFE, "f\x0f:a\xcai")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400BFE
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xF
        cpu.execute()

        self.assertEqual(mem[0x400BFE:0x400C04], [b"f", b"\x0f", b":", b"a", b"\xca", b"i"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197380)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_13(self):
        """Instruction PCMPESTRI_13
        Groups: sse42
        0x400b86:   pcmpestri       xmm1, xmm2, 0x41
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B86, "f\x0f:a\xcaA")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B86
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400B86:0x400B8C], [b"f", b"\x0f", b":", b"a", b"\xca", b"A"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197260)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_14(self):
        """Instruction PCMPESTRI_14
        Groups: sse42
        0x400ae4:   pcmpestri       xmm1, xmm2, 0xc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AE4, "f\x0f:a\xca\x0c")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400AE4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400AE4:0x400AEA], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x0c"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197098)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_15(self):
        """Instruction PCMPESTRI_15
        Groups: sse42
        0x400c04:   pcmpestri       xmm1, xmm2, 0x6c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C04, "f\x0f:a\xcal")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400C04
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400C04:0x400C0A], [b"f", b"\x0f", b":", b"a", b"\xca", b"l"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197386)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_16(self):
        """Instruction PCMPESTRI_16
        Groups: sse42
        0x400b6e:   pcmpestri       xmm1, xmm2, 0x39
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B6E, "f\x0f:a\xca9")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B6E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B6E:0x400B74], [b"f", b"\x0f", b":", b"a", b"\xca", b"9"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197236)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_17(self):
        """Instruction PCMPESTRI_17
        Groups: sse42
        0x400b2c:   pcmpestri       xmm1, xmm2, 0x24
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B2C, "f\x0f:a\xca$")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B2C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400B2C:0x400B32], [b"f", b"\x0f", b":", b"a", b"\xca", b"$"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197170)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_18(self):
        """Instruction PCMPESTRI_18
        Groups: sse42
        0x400af0:   pcmpestri       xmm1, xmm2, 0x10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AF0, "f\x0f:a\xca\x10")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400AF0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400AF0:0x400AF6], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x10"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197110)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_19(self):
        """Instruction PCMPESTRI_19
        Groups: sse42
        0x400be0:   pcmpestri       xmm1, xmm2, 0x60
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BE0, "f\x0f:a\xca`")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BE0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400BE0:0x400BE6], [b"f", b"\x0f", b":", b"a", b"\xca", b"`"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197350)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_2(self):
        """Instruction PCMPESTRI_2
        Groups: sse42
        0x400b4a:   pcmpestri       xmm1, xmm2, 0x2d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B4A, "f\x0f:a\xca-")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B4A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400B4A:0x400B50], [b"f", b"\x0f", b":", b"a", b"\xca", b"-"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197200)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_20(self):
        """Instruction PCMPESTRI_20
        Groups: sse42
        0x400c0a:   pcmpestri       xmm1, xmm2, 0x6d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C0A, "f\x0f:a\xcam")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400C0A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400C0A:0x400C10], [b"f", b"\x0f", b":", b"a", b"\xca", b"m"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197392)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_21(self):
        """Instruction PCMPESTRI_21
        Groups: sse42
        0x400b14:   pcmpestri       xmm1, xmm2, 0x1c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B14, "f\x0f:a\xca\x1c")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B14
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B14:0x400B1A], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x1c"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197146)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_22(self):
        """Instruction PCMPESTRI_22
        Groups: sse42
        0x400bb6:   pcmpestri       xmm1, xmm2, 0x51
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BB6, "f\x0f:a\xcaQ")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BB6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xF
        cpu.execute()

        self.assertEqual(mem[0x400BB6:0x400BBC], [b"f", b"\x0f", b":", b"a", b"\xca", b"Q"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197308)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_23(self):
        """Instruction PCMPESTRI_23
        Groups: sse42
        0x400b08:   pcmpestri       xmm1, xmm2, 0x18
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B08, "f\x0f:a\xca\x18")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B08
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B08:0x400B0E], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x18"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197134)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_24(self):
        """Instruction PCMPESTRI_24
        Groups: sse42
        0x400c1c:   pcmpestri       xmm1, xmm2, 0x74
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C1C, "f\x0f:a\xcat")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400C1C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0x400C1C:0x400C22], [b"f", b"\x0f", b":", b"a", b"\xca", b"t"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197410)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_25(self):
        """Instruction PCMPESTRI_25
        Groups: sse42
        0x400bda:   pcmpestri       xmm1, xmm2, 0x5d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BDA, "f\x0f:a\xca]")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BDA
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xF
        cpu.execute()

        self.assertEqual(mem[0x400BDA:0x400BE0], [b"f", b"\x0f", b":", b"a", b"\xca", b"]"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197344)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_26(self):
        """Instruction PCMPESTRI_26
        Groups: sse42
        0x400c10:   pcmpestri       xmm1, xmm2, 0x70
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C10, "f\x0f:a\xcap")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400C10
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400C10:0x400C16], [b"f", b"\x0f", b":", b"a", b"\xca", b"p"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197398)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_27(self):
        """Instruction PCMPESTRI_27
        Groups: sse42
        0x400c34:   pcmpestri       xmm1, xmm2, 0x7c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C34, "f\x0f:a\xca|")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400C34
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400C34:0x400C3A], [b"f", b"\x0f", b":", b"a", b"\xca", b"|"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197434)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_28(self):
        """Instruction PCMPESTRI_28
        Groups: sse42
        0x400c2e:   pcmpestri       xmm1, xmm2, 0x79
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C2E, "f\x0f:a\xcay")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400C2E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xF
        cpu.execute()

        self.assertEqual(mem[0x400C2E:0x400C34], [b"f", b"\x0f", b":", b"a", b"\xca", b"y"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197428)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_29(self):
        """Instruction PCMPESTRI_29
        Groups: sse42
        0x400b80:   pcmpestri       xmm1, xmm2, 0x40
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B80, "f\x0f:a\xca@")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B80
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B80:0x400B86], [b"f", b"\x0f", b":", b"a", b"\xca", b"@"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197254)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_3(self):
        """Instruction PCMPESTRI_3
        Groups: sse42
        0x400ac6:   pcmpestri       xmm1, xmm2, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AC6, "f\x0f:a\xca\x01")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400AC6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400AC6:0x400ACC], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x01"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197068)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_30(self):
        """Instruction PCMPESTRI_30
        Groups: sse42
        0x400ba4:   pcmpestri       xmm1, xmm2, 0x4c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BA4, "f\x0f:a\xcaL")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400BA4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400BA4:0x400BAA], [b"f", b"\x0f", b":", b"a", b"\xca", b"L"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197290)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_31(self):
        """Instruction PCMPESTRI_31
        Groups: sse42
        0x400ad8:   pcmpestri       xmm1, xmm2, 8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AD8, "f\x0f:a\xca\x08")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400AD8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400AD8:0x400ADE], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x08"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197086)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_32(self):
        """Instruction PCMPESTRI_32
        Groups: sse42
        0x400b50:   pcmpestri       xmm1, xmm2, 0x30
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B50, "f\x0f:a\xca0")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B50
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400B50:0x400B56], [b"f", b"\x0f", b":", b"a", b"\xca", b"0"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197206)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_33(self):
        """Instruction PCMPESTRI_33
        Groups: sse42
        0x400b44:   pcmpestri       xmm1, xmm2, 0x2c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B44, "f\x0f:a\xca,")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400B44
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400B44:0x400B4A], [b"f", b"\x0f", b":", b"a", b"\xca", b","])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197194)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_34(self):
        """Instruction PCMPESTRI_34
        Groups: sse42
        0x400bbc:   pcmpestri       xmm1, xmm2, 0x54
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BBC, "f\x0f:a\xcaT")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BBC
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400BBC:0x400BC2], [b"f", b"\x0f", b":", b"a", b"\xca", b"T"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197314)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_35(self):
        """Instruction PCMPESTRI_35
        Groups: sse42
        0x400ad2:   pcmpestri       xmm1, xmm2, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AD2, "f\x0f:a\xca\x05")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400AD2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400AD2:0x400AD8], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x05"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197080)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_36(self):
        """Instruction PCMPESTRI_36
        Groups: sse42
        0x400b26:   pcmpestri       xmm1, xmm2, 0x21
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B26, "f\x0f:a\xca!")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B26
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400B26:0x400B2C], [b"f", b"\x0f", b":", b"a", b"\xca", b"!"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197164)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_37(self):
        """Instruction PCMPESTRI_37
        Groups: sse42
        0x400bc8:   pcmpestri       xmm1, xmm2, 0x58
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BC8, "f\x0f:a\xcaX")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BC8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400BC8:0x400BCE], [b"f", b"\x0f", b":", b"a", b"\xca", b"X"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197326)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_38(self):
        """Instruction PCMPESTRI_38
        Groups: sse42
        0x400b98:   pcmpestri       xmm1, xmm2, 0x48
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B98, "f\x0f:a\xcaH")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B98
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400B98:0x400B9E], [b"f", b"\x0f", b":", b"a", b"\xca", b"H"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197278)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_39(self):
        """Instruction PCMPESTRI_39
        Groups: sse42
        0x400b02:   pcmpestri       xmm1, xmm2, 0x15
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B02, "f\x0f:a\xca\x15")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B02
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B02:0x400B08], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x15"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197128)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_4(self):
        """Instruction PCMPESTRI_4
        Groups: sse42
        0x400c22:   pcmpestri       xmm1, xmm2, 0x75
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C22, "f\x0f:a\xcau")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400C22
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0x400C22:0x400C28], [b"f", b"\x0f", b":", b"a", b"\xca", b"u"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197416)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_40(self):
        """Instruction PCMPESTRI_40
        Groups: sse42
        0x400c3a:   pcmpestri       xmm1, xmm2, 0x7d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C3A, "f\x0f:a\xca}")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400C3A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0x400C3A:0x400C40], [b"f", b"\x0f", b":", b"a", b"\xca", b"}"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197440)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_41(self):
        """Instruction PCMPESTRI_41
        Groups: sse42
        0x400af6:   pcmpestri       xmm1, xmm2, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AF6, "f\x0f:a\xca\x11")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400AF6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400AF6:0x400AFC], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x11"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197116)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_42(self):
        """Instruction PCMPESTRI_42
        Groups: sse42
        0x400c28:   pcmpestri       xmm1, xmm2, 0x78
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C28, "f\x0f:a\xcax")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400C28
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0x400C28:0x400C2E], [b"f", b"\x0f", b":", b"a", b"\xca", b"x"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197422)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_43(self):
        """Instruction PCMPESTRI_43
        Groups: sse42
        0x400b62:   pcmpestri       xmm1, xmm2, 0x35
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B62, "f\x0f:a\xca5")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B62
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B62:0x400B68], [b"f", b"\x0f", b":", b"a", b"\xca", b"5"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197224)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_44(self):
        """Instruction PCMPESTRI_44
        Groups: sse42
        0x400baa:   pcmpestri       xmm1, xmm2, 0x4d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BAA, "f\x0f:a\xcaM")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400BAA
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400BAA:0x400BB0], [b"f", b"\x0f", b":", b"a", b"\xca", b"M"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197296)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_45(self):
        """Instruction PCMPESTRI_45
        Groups: sse42
        0x400b68:   pcmpestri       xmm1, xmm2, 0x38
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B68, "f\x0f:a\xca8")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B68
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B68:0x400B6E], [b"f", b"\x0f", b":", b"a", b"\xca", b"8"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197230)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_46(self):
        """Instruction PCMPESTRI_46
        Groups: sse42
        0x400c16:   pcmpestri       xmm1, xmm2, 0x71
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C16, "f\x0f:a\xcaq")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400C16
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0x400C16:0x400C1C], [b"f", b"\x0f", b":", b"a", b"\xca", b"q"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197404)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_47(self):
        """Instruction PCMPESTRI_47
        Groups: sse42
        0x400acc:   pcmpestri       xmm1, xmm2, 4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400ACC, "f\x0f:a\xca\x04")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400ACC
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400ACC:0x400AD2], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x04"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197074)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_48(self):
        """Instruction PCMPESTRI_48
        Groups: sse42
        0x400b92:   pcmpestri       xmm1, xmm2, 0x45
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B92, "f\x0f:a\xcaE")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B92
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400B92:0x400B98], [b"f", b"\x0f", b":", b"a", b"\xca", b"E"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197272)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_49(self):
        """Instruction PCMPESTRI_49
        Groups: sse42
        0x400afc:   pcmpestri       xmm1, xmm2, 0x14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AFC, "f\x0f:a\xca\x14")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400AFC
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400AFC:0x400B02], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x14"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197122)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_5(self):
        """Instruction PCMPESTRI_5
        Groups: sse42
        0x400be6:   pcmpestri       xmm1, xmm2, 0x61
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BE6, "f\x0f:a\xcaa")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400BE6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400BE6:0x400BEC], [b"f", b"\x0f", b":", b"a", b"\xca", b"a"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197356)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_50(self):
        """Instruction PCMPESTRI_50
        Groups: sse42
        0x400b9e:   pcmpestri       xmm1, xmm2, 0x49
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B9E, "f\x0f:a\xcaI")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400B9E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xF
        cpu.execute()

        self.assertEqual(mem[0x400B9E:0x400BA4], [b"f", b"\x0f", b":", b"a", b"\xca", b"I"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197284)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_51(self):
        """Instruction PCMPESTRI_51
        Groups: sse42
        0x400ac0:   pcmpestri       xmm1, xmm2, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AC0, "f\x0f:a\xca\x00")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400AC0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400AC0:0x400AC6], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x00"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197062)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_52(self):
        """Instruction PCMPESTRI_52
        Groups: sse42
        0x400b74:   pcmpestri       xmm1, xmm2, 0x3c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B74, "f\x0f:a\xca<")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B74
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B74:0x400B7A], [b"f", b"\x0f", b":", b"a", b"\xca", b"<"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197242)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_53(self):
        """Instruction PCMPESTRI_53
        Groups: sse42
        0x400bce:   pcmpestri       xmm1, xmm2, 0x59
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BCE, "f\x0f:a\xcaY")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BCE
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0x400BCE:0x400BD4], [b"f", b"\x0f", b":", b"a", b"\xca", b"Y"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197332)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_54(self):
        """Instruction PCMPESTRI_54
        Groups: sse42
        0x400b56:   pcmpestri       xmm1, xmm2, 0x31
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B56, "f\x0f:a\xca1")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B56
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B56:0x400B5C], [b"f", b"\x0f", b":", b"a", b"\xca", b"1"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197212)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_55(self):
        """Instruction PCMPESTRI_55
        Groups: sse42
        0x400b7a:   pcmpestri       xmm1, xmm2, 0x3d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B7A, "f\x0f:a\xca=")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B7A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B7A:0x400B80], [b"f", b"\x0f", b":", b"a", b"\xca", b"="])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197248)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_56(self):
        """Instruction PCMPESTRI_56
        Groups: sse42
        0x400b5c:   pcmpestri       xmm1, xmm2, 0x34
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B5C, "f\x0f:a\xca4")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B5C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B5C:0x400B62], [b"f", b"\x0f", b":", b"a", b"\xca", b"4"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197218)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_57(self):
        """Instruction PCMPESTRI_57
        Groups: sse42
        0x400ade:   pcmpestri       xmm1, xmm2, 9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400ADE, "f\x0f:a\xca\t")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400ADE
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400ADE:0x400AE4], [b"f", b"\x0f", b":", b"a", b"\xca", b"\t"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197092)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_58(self):
        """Instruction PCMPESTRI_58
        Groups: sse42
        0x400b3e:   pcmpestri       xmm1, xmm2, 0x29
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B3E, "f\x0f:a\xca)")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400B3E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()

        self.assertEqual(mem[0x400B3E:0x400B44], [b"f", b"\x0f", b":", b"a", b"\xca", b")"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197188)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_59(self):
        """Instruction PCMPESTRI_59
        Groups: sse42
        0x400bb0:   pcmpestri       xmm1, xmm2, 0x50
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BB0, "f\x0f:a\xcaP")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400BB0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400BB0:0x400BB6], [b"f", b"\x0f", b":", b"a", b"\xca", b"P"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197302)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_6(self):
        """Instruction PCMPESTRI_6
        Groups: sse42
        0x400b0e:   pcmpestri       xmm1, xmm2, 0x19
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B0E, "f\x0f:a\xca\x19")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B0E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B0E:0x400B14], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x19"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197140)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_60(self):
        """Instruction PCMPESTRI_60
        Groups: sse42
        0x400b1a:   pcmpestri       xmm1, xmm2, 0x1d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B1A, "f\x0f:a\xca\x1d")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400B1A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()

        self.assertEqual(mem[0x400B1A:0x400B20], [b"f", b"\x0f", b":", b"a", b"\xca", b"\x1d"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197152)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_61(self):
        """Instruction PCMPESTRI_61
        Groups: sse42
        0x400bf2:   pcmpestri       xmm1, xmm2, 0x65
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BF2, "f\x0f:a\xcae")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400BF2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400BF2:0x400BF8], [b"f", b"\x0f", b":", b"a", b"\xca", b"e"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197368)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_62(self):
        """Instruction PCMPESTRI_62
        Groups: sse42
        0x400bd4:   pcmpestri       xmm1, xmm2, 0x5c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BD4, "f\x0f:a\xca\\")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BD4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()

        self.assertEqual(mem[0x400BD4:0x400BDA], [b"f", b"\x0f", b":", b"a", b"\xca", b"\\"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197338)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_63(self):
        """Instruction PCMPESTRI_63
        Groups: sse42
        0x400bf8:   pcmpestri       xmm1, xmm2, 0x68
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BF8, "f\x0f:a\xcah")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400BF8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400BF8:0x400BFE], [b"f", b"\x0f", b":", b"a", b"\xca", b"h"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197374)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_64(self):
        """Instruction PCMPESTRI_64
        Groups: sse42
        0x400bc2:   pcmpestri       xmm1, xmm2, 0x55
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BC2, "f\x0f:a\xcaU")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400BC2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xF
        cpu.execute()

        self.assertEqual(mem[0x400BC2:0x400BC8], [b"f", b"\x0f", b":", b"a", b"\xca", b"U"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197320)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_7(self):
        """Instruction PCMPESTRI_7
        Groups: sse42
        0x400b8c:   pcmpestri       xmm1, xmm2, 0x44
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B8C, "f\x0f:a\xcaD")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B8C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()

        self.assertEqual(mem[0x400B8C:0x400B92], [b"f", b"\x0f", b":", b"a", b"\xca", b"D"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197266)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_8(self):
        """Instruction PCMPESTRI_8
        Groups: sse42
        0x400aea:   pcmpestri       xmm1, xmm2, 0xd
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AEA, "f\x0f:a\xca\r")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400AEA
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400AEA:0x400AF0], [b"f", b"\x0f", b":", b"a", b"\xca", b"\r"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197104)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_9(self):
        """Instruction PCMPESTRI_9
        Groups: sse42
        0x400b32:   pcmpestri       xmm1, xmm2, 0x25
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B32, "f\x0f:a\xca%")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400B32
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()

        self.assertEqual(mem[0x400B32:0x400B38], [b"f", b"\x0f", b":", b"a", b"\xca", b"%"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197176)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRM_1(self):
        """Instruction PCMPESTRM_1
        Groups: sse42
        0x4009d0:   pcmpestrm       xmm1, xmm2, 0x38
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009D0, "f\x0f:`\xca8")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009D0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009D0:0x4009D6], [b"f", b"\x0f", b":", b"`", b"\xca", b"8"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196822)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_10(self):
        """Instruction PCMPESTRM_10
        Groups: sse42
        0x4009ac:   pcmpestrm       xmm1, xmm2, 0x2c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009AC, "f\x0f:`\xca,")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x4009AC
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009AC:0x4009B2], [b"f", b"\x0f", b":", b"`", b"\xca", b","])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196786)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_11(self):
        """Instruction PCMPESTRM_11
        Groups: sse42
        0x400a24:   pcmpestrm       xmm1, xmm2, 0x54
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A24, "f\x0f:`\xcaT")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A24
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A24:0x400A2A], [b"f", b"\x0f", b":", b"`", b"\xca", b"T"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196906)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_12(self):
        """Instruction PCMPESTRM_12
        Groups: sse42
        0x4009f4:   pcmpestrm       xmm1, xmm2, 0x44
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009F4, "f\x0f:`\xcaD")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009F4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009F4:0x4009FA], [b"f", b"\x0f", b":", b"`", b"\xca", b"D"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196858)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_13(self):
        """Instruction PCMPESTRM_13
        Groups: sse42
        0x400a1e:   pcmpestrm       xmm1, xmm2, 0x51
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A1E, "f\x0f:`\xcaQ")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A1E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A1E:0x400A24], [b"f", b"\x0f", b":", b"`", b"\xca", b"Q"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196900)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_14(self):
        """Instruction PCMPESTRM_14
        Groups: sse42
        0x400a7e:   pcmpestrm       xmm1, xmm2, 0x71
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A7E, "f\x0f:`\xcaq")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A7E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A7E:0x400A84], [b"f", b"\x0f", b":", b"`", b"\xca", b"q"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196996)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_15(self):
        """Instruction PCMPESTRM_15
        Groups: sse42
        0x400994:   pcmpestrm       xmm1, xmm2, 0x24
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400994, "f\x0f:`\xca$")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400994
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400994:0x40099A], [b"f", b"\x0f", b":", b"`", b"\xca", b"$"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196762)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_16(self):
        """Instruction PCMPESTRM_16
        Groups: sse42
        0x400934:   pcmpestrm       xmm1, xmm2, 4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400934, "f\x0f:`\xca\x04")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400934
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400934:0x40093A], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x04"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196666)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_17(self):
        """Instruction PCMPESTRM_17
        Groups: sse42
        0x400a9c:   pcmpestrm       xmm1, xmm2, 0x7c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A9C, "f\x0f:`\xca|")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A9C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A9C:0x400AA2], [b"f", b"\x0f", b":", b"`", b"\xca", b"|"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197026)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_18(self):
        """Instruction PCMPESTRM_18
        Groups: sse42
        0x40092e:   pcmpestrm       xmm1, xmm2, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40092E, "f\x0f:`\xca\x01")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40092E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40092E:0x400934], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x01"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196660)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_19(self):
        """Instruction PCMPESTRM_19
        Groups: sse42
        0x4009a6:   pcmpestrm       xmm1, xmm2, 0x29
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009A6, "f\x0f:`\xca)")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x4009A6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009A6:0x4009AC], [b"f", b"\x0f", b":", b"`", b"\xca", b")"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196780)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_2(self):
        """Instruction PCMPESTRM_2
        Groups: sse42
        0x400a54:   pcmpestrm       xmm1, xmm2, 0x64
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A54, "f\x0f:`\xcad")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A54
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A54:0x400A5A], [b"f", b"\x0f", b":", b"`", b"\xca", b"d"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196954)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_20(self):
        """Instruction PCMPESTRM_20
        Groups: sse42
        0x400a66:   pcmpestrm       xmm1, xmm2, 0x69
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A66, "f\x0f:`\xcai")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400A66
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A66:0x400A6C], [b"f", b"\x0f", b":", b"`", b"\xca", b"i"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196972)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_21(self):
        """Instruction PCMPESTRM_21
        Groups: sse42
        0x400958:   pcmpestrm       xmm1, xmm2, 0x10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400958, "f\x0f:`\xca\x10")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400958
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400958:0x40095E], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x10"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196702)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_22(self):
        """Instruction PCMPESTRM_22
        Groups: sse42
        0x40095e:   pcmpestrm       xmm1, xmm2, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40095E, "f\x0f:`\xca\x11")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40095E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40095E:0x400964], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x11"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196708)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_23(self):
        """Instruction PCMPESTRM_23
        Groups: sse42
        0x400976:   pcmpestrm       xmm1, xmm2, 0x19
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400976, "f\x0f:`\xca\x19")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400976
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400976:0x40097C], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x19"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196732)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_24(self):
        """Instruction PCMPESTRM_24
        Groups: sse42
        0x400a8a:   pcmpestrm       xmm1, xmm2, 0x75
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A8A, "f\x0f:`\xcau")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A8A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A8A:0x400A90], [b"f", b"\x0f", b":", b"`", b"\xca", b"u"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197008)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_25(self):
        """Instruction PCMPESTRM_25
        Groups: sse42
        0x400a12:   pcmpestrm       xmm1, xmm2, 0x4d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A12, "f\x0f:`\xcaM")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A12
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A12:0x400A18], [b"f", b"\x0f", b":", b"`", b"\xca", b"M"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196888)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_26(self):
        """Instruction PCMPESTRM_26
        Groups: sse42
        0x40093a:   pcmpestrm       xmm1, xmm2, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40093A, "f\x0f:`\xca\x05")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40093A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40093A:0x400940], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x05"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196672)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_27(self):
        """Instruction PCMPESTRM_27
        Groups: sse42
        0x400a30:   pcmpestrm       xmm1, xmm2, 0x58
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A30, "f\x0f:`\xcaX")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A30
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A30:0x400A36], [b"f", b"\x0f", b":", b"`", b"\xca", b"X"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196918)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_28(self):
        """Instruction PCMPESTRM_28
        Groups: sse42
        0x4009ca:   pcmpestrm       xmm1, xmm2, 0x35
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009CA, "f\x0f:`\xca5")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009CA
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009CA:0x4009D0], [b"f", b"\x0f", b":", b"`", b"\xca", b"5"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196816)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_29(self):
        """Instruction PCMPESTRM_29
        Groups: sse42
        0x400a3c:   pcmpestrm       xmm1, xmm2, 0x5c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A3C, "f\x0f:`\xca\\")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A3C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A3C:0x400A42], [b"f", b"\x0f", b":", b"`", b"\xca", b"\\"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196930)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_3(self):
        """Instruction PCMPESTRM_3
        Groups: sse42
        0x400a18:   pcmpestrm       xmm1, xmm2, 0x50
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A18, "f\x0f:`\xcaP")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A18
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A18:0x400A1E], [b"f", b"\x0f", b":", b"`", b"\xca", b"P"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196894)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_30(self):
        """Instruction PCMPESTRM_30
        Groups: sse42
        0x40098e:   pcmpestrm       xmm1, xmm2, 0x21
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40098E, "f\x0f:`\xca!")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40098E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40098E:0x400994], [b"f", b"\x0f", b":", b"`", b"\xca", b"!"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196756)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_31(self):
        """Instruction PCMPESTRM_31
        Groups: sse42
        0x400a96:   pcmpestrm       xmm1, xmm2, 0x79
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A96, "f\x0f:`\xcay")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A96
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A96:0x400A9C], [b"f", b"\x0f", b":", b"`", b"\xca", b"y"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197020)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_32(self):
        """Instruction PCMPESTRM_32
        Groups: sse42
        0x400a90:   pcmpestrm       xmm1, xmm2, 0x78
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A90, "f\x0f:`\xcax")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A90
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A90:0x400A96], [b"f", b"\x0f", b":", b"`", b"\xca", b"x"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197014)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_33(self):
        """Instruction PCMPESTRM_33
        Groups: sse42
        0x400a06:   pcmpestrm       xmm1, xmm2, 0x49
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A06, "f\x0f:`\xcaI")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400A06
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A06:0x400A0C], [b"f", b"\x0f", b":", b"`", b"\xca", b"I"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196876)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_34(self):
        """Instruction PCMPESTRM_34
        Groups: sse42
        0x400928:   pcmpestrm       xmm1, xmm2, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400928, "f\x0f:`\xca\x00")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400928
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400928:0x40092E], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x00"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196654)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_35(self):
        """Instruction PCMPESTRM_35
        Groups: sse42
        0x400a84:   pcmpestrm       xmm1, xmm2, 0x74
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A84, "f\x0f:`\xcat")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A84
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A84:0x400A8A], [b"f", b"\x0f", b":", b"`", b"\xca", b"t"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197002)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_36(self):
        """Instruction PCMPESTRM_36
        Groups: sse42
        0x400a72:   pcmpestrm       xmm1, xmm2, 0x6d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A72, "f\x0f:`\xcam")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A72
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A72:0x400A78], [b"f", b"\x0f", b":", b"`", b"\xca", b"m"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196984)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_37(self):
        """Instruction PCMPESTRM_37
        Groups: sse42
        0x400946:   pcmpestrm       xmm1, xmm2, 9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400946, "f\x0f:`\xca\t")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400946
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400946:0x40094C], [b"f", b"\x0f", b":", b"`", b"\xca", b"\t"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196684)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_38(self):
        """Instruction PCMPESTRM_38
        Groups: sse42
        0x400940:   pcmpestrm       xmm1, xmm2, 8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400940, "f\x0f:`\xca\x08")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400940
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400940:0x400946], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x08"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196678)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_39(self):
        """Instruction PCMPESTRM_39
        Groups: sse42
        0x400aa2:   pcmpestrm       xmm1, xmm2, 0x7d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA2, "f\x0f:`\xca}")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400AA2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400AA2:0x400AA8], [b"f", b"\x0f", b":", b"`", b"\xca", b"}"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197032)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_4(self):
        """Instruction PCMPESTRM_4
        Groups: sse42
        0x40097c:   pcmpestrm       xmm1, xmm2, 0x1c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40097C, "f\x0f:`\xca\x1c")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40097C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40097C:0x400982], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x1c"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196738)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_40(self):
        """Instruction PCMPESTRM_40
        Groups: sse42
        0x400a48:   pcmpestrm       xmm1, xmm2, 0x60
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A48, "f\x0f:`\xca`")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A48
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A48:0x400A4E], [b"f", b"\x0f", b":", b"`", b"\xca", b"`"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196942)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_41(self):
        """Instruction PCMPESTRM_41
        Groups: sse42
        0x400952:   pcmpestrm       xmm1, xmm2, 0xd
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400952, "f\x0f:`\xca\r")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400952
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400952:0x400958], [b"f", b"\x0f", b":", b"`", b"\xca", b"\r"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196696)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_42(self):
        """Instruction PCMPESTRM_42
        Groups: sse42
        0x40094c:   pcmpestrm       xmm1, xmm2, 0xc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40094C, "f\x0f:`\xca\x0c")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x40094C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40094C:0x400952], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x0c"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196690)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_43(self):
        """Instruction PCMPESTRM_43
        Groups: sse42
        0x400a0c:   pcmpestrm       xmm1, xmm2, 0x4c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A0C, "f\x0f:`\xcaL")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400A0C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A0C:0x400A12], [b"f", b"\x0f", b":", b"`", b"\xca", b"L"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196882)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_44(self):
        """Instruction PCMPESTRM_44
        Groups: sse42
        0x400964:   pcmpestrm       xmm1, xmm2, 0x14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400964, "f\x0f:`\xca\x14")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400964
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400964:0x40096A], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x14"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196714)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_45(self):
        """Instruction PCMPESTRM_45
        Groups: sse42
        0x400a36:   pcmpestrm       xmm1, xmm2, 0x59
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A36, "f\x0f:`\xcaY")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A36
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A36:0x400A3C], [b"f", b"\x0f", b":", b"`", b"\xca", b"Y"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196924)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_46(self):
        """Instruction PCMPESTRM_46
        Groups: sse42
        0x40099a:   pcmpestrm       xmm1, xmm2, 0x25
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40099A, "f\x0f:`\xca%")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40099A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40099A:0x4009A0], [b"f", b"\x0f", b":", b"`", b"\xca", b"%"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196768)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_47(self):
        """Instruction PCMPESTRM_47
        Groups: sse42
        0x400988:   pcmpestrm       xmm1, xmm2, 0x20
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400988, "f\x0f:`\xca ")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400988
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400988:0x40098E], [b"f", b"\x0f", b":", b"`", b"\xca", b" "])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196750)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_48(self):
        """Instruction PCMPESTRM_48
        Groups: sse42
        0x400a5a:   pcmpestrm       xmm1, xmm2, 0x65
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A5A, "f\x0f:`\xcae")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A5A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A5A:0x400A60], [b"f", b"\x0f", b":", b"`", b"\xca", b"e"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196960)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_49(self):
        """Instruction PCMPESTRM_49
        Groups: sse42
        0x40096a:   pcmpestrm       xmm1, xmm2, 0x15
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40096A, "f\x0f:`\xca\x15")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40096A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x40096A:0x400970], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x15"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196720)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_5(self):
        """Instruction PCMPESTRM_5
        Groups: sse42
        0x4009b2:   pcmpestrm       xmm1, xmm2, 0x2d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009B2, "f\x0f:`\xca-")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009B2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009B2:0x4009B8], [b"f", b"\x0f", b":", b"`", b"\xca", b"-"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196792)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_50(self):
        """Instruction PCMPESTRM_50
        Groups: sse42
        0x400a60:   pcmpestrm       xmm1, xmm2, 0x68
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A60, "f\x0f:`\xcah")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A60
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A60:0x400A66], [b"f", b"\x0f", b":", b"`", b"\xca", b"h"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196966)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_51(self):
        """Instruction PCMPESTRM_51
        Groups: sse42
        0x4009be:   pcmpestrm       xmm1, xmm2, 0x31
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009BE, "f\x0f:`\xca1")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009BE
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009BE:0x4009C4], [b"f", b"\x0f", b":", b"`", b"\xca", b"1"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196804)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_52(self):
        """Instruction PCMPESTRM_52
        Groups: sse42
        0x4009e2:   pcmpestrm       xmm1, xmm2, 0x3d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009E2, "f\x0f:`\xca=")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009E2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009E2:0x4009E8], [b"f", b"\x0f", b":", b"`", b"\xca", b"="])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196840)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_53(self):
        """Instruction PCMPESTRM_53
        Groups: sse42
        0x4009d6:   pcmpestrm       xmm1, xmm2, 0x39
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009D6, "f\x0f:`\xca9")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009D6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009D6:0x4009DC], [b"f", b"\x0f", b":", b"`", b"\xca", b"9"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196828)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_54(self):
        """Instruction PCMPESTRM_54
        Groups: sse42
        0x400a6c:   pcmpestrm       xmm1, xmm2, 0x6c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A6C, "f\x0f:`\xcal")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400A6C
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A6C:0x400A72], [b"f", b"\x0f", b":", b"`", b"\xca", b"l"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196978)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_55(self):
        """Instruction PCMPESTRM_55
        Groups: sse42
        0x4009c4:   pcmpestrm       xmm1, xmm2, 0x34
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009C4, "f\x0f:`\xca4")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009C4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009C4:0x4009CA], [b"f", b"\x0f", b":", b"`", b"\xca", b"4"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196810)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_56(self):
        """Instruction PCMPESTRM_56
        Groups: sse42
        0x400a00:   pcmpestrm       xmm1, xmm2, 0x48
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A00, "f\x0f:`\xcaH")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A00
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A00:0x400A06], [b"f", b"\x0f", b":", b"`", b"\xca", b"H"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196870)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_57(self):
        """Instruction PCMPESTRM_57
        Groups: sse42
        0x4009e8:   pcmpestrm       xmm1, xmm2, 0x40
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009E8, "f\x0f:`\xca@")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009E8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009E8:0x4009EE], [b"f", b"\x0f", b":", b"`", b"\xca", b"@"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196846)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_58(self):
        """Instruction PCMPESTRM_58
        Groups: sse42
        0x4009b8:   pcmpestrm       xmm1, xmm2, 0x30
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009B8, "f\x0f:`\xca0")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009B8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009B8:0x4009BE], [b"f", b"\x0f", b":", b"`", b"\xca", b"0"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196798)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_59(self):
        """Instruction PCMPESTRM_59
        Groups: sse42
        0x4009ee:   pcmpestrm       xmm1, xmm2, 0x41
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009EE, "f\x0f:`\xcaA")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009EE
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009EE:0x4009F4], [b"f", b"\x0f", b":", b"`", b"\xca", b"A"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196852)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_6(self):
        """Instruction PCMPESTRM_6
        Groups: sse42
        0x4009a0:   pcmpestrm       xmm1, xmm2, 0x28
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009A0, "f\x0f:`\xca(")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009A0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009A0:0x4009A6], [b"f", b"\x0f", b":", b"`", b"\xca", b"("])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196774)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_60(self):
        """Instruction PCMPESTRM_60
        Groups: sse42
        0x400970:   pcmpestrm       xmm1, xmm2, 0x18
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400970, "f\x0f:`\xca\x18")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400970
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400970:0x400976], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x18"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196726)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_61(self):
        """Instruction PCMPESTRM_61
        Groups: sse42
        0x400a78:   pcmpestrm       xmm1, xmm2, 0x70
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A78, "f\x0f:`\xcap")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A78
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A78:0x400A7E], [b"f", b"\x0f", b":", b"`", b"\xca", b"p"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196990)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_62(self):
        """Instruction PCMPESTRM_62
        Groups: sse42
        0x400a2a:   pcmpestrm       xmm1, xmm2, 0x55
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A2A, "f\x0f:`\xcaU")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A2A
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A2A:0x400A30], [b"f", b"\x0f", b":", b"`", b"\xca", b"U"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196912)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_63(self):
        """Instruction PCMPESTRM_63
        Groups: sse42
        0x400a42:   pcmpestrm       xmm1, xmm2, 0x5d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A42, "f\x0f:`\xca]")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400A42
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A42:0x400A48], [b"f", b"\x0f", b":", b"`", b"\xca", b"]"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196936)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_64(self):
        """Instruction PCMPESTRM_64
        Groups: sse42
        0x400a4e:   pcmpestrm       xmm1, xmm2, 0x61
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A4E, "f\x0f:`\xcaa")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400A4E
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400A4E:0x400A54], [b"f", b"\x0f", b":", b"`", b"\xca", b"a"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196948)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_7(self):
        """Instruction PCMPESTRM_7
        Groups: sse42
        0x4009dc:   pcmpestrm       xmm1, xmm2, 0x3c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009DC, "f\x0f:`\xca<")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009DC
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009DC:0x4009E2], [b"f", b"\x0f", b":", b"`", b"\xca", b"<"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196834)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_8(self):
        """Instruction PCMPESTRM_8
        Groups: sse42
        0x4009fa:   pcmpestrm       xmm1, xmm2, 0x45
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009FA, "f\x0f:`\xcaE")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009FA
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4009FA:0x400A00], [b"f", b"\x0f", b":", b"`", b"\xca", b"E"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196864)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_9(self):
        """Instruction PCMPESTRM_9
        Groups: sse42
        0x400982:   pcmpestrm       xmm1, xmm2, 0x1d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400982, "f\x0f:`\xca\x1d")
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400982
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x400982:0x400988], [b"f", b"\x0f", b":", b"`", b"\xca", b"\x1d"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196744)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPISTRI_1(self):
        """Instruction PCMPISTRI_1
        Groups: sse42
        0x400746:   pcmpistri       xmm1, xmm2, 0x6d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400746, "f\x0f:c\xcam")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = True
        cpu.RIP = 0x400746
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400746:0x40074C], [b"f", b"\x0f", b":", b"c", b"\xca", b"m"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196172)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_10(self):
        """Instruction PCMPISTRI_10
        Groups: sse42
        0x400650:   pcmpistri       xmm1, xmm2, 0x1c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400650, "f\x0f:c\xca\x1c")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400650
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400650:0x400656], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x1c"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195926)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_11(self):
        """Instruction PCMPISTRI_11
        Groups: sse42
        0x400668:   pcmpistri       xmm1, xmm2, 0x24
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400668, "f\x0f:c\xca$")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400668
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400668:0x40066E], [b"f", b"\x0f", b":", b"c", b"\xca", b"$"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195950)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_12(self):
        """Instruction PCMPISTRI_12
        Groups: sse42
        0x400698:   pcmpistri       xmm1, xmm2, 0x34
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400698, "f\x0f:c\xca4")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400698
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400698:0x40069E], [b"f", b"\x0f", b":", b"c", b"\xca", b"4"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195998)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_13(self):
        """Instruction PCMPISTRI_13
        Groups: sse42
        0x4006c8:   pcmpistri       xmm1, xmm2, 0x44
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006C8, "f\x0f:c\xcaD")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006C8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006C8:0x4006CE], [b"f", b"\x0f", b":", b"c", b"\xca", b"D"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196046)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_14(self):
        """Instruction PCMPISTRI_14
        Groups: sse42
        0x4006bc:   pcmpistri       xmm1, xmm2, 0x40
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006BC, "f\x0f:c\xca@")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x4006BC
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006BC:0x4006C2], [b"f", b"\x0f", b":", b"c", b"\xca", b"@"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196034)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_15(self):
        """Instruction PCMPISTRI_15
        Groups: sse42
        0x40068c:   pcmpistri       xmm1, xmm2, 0x30
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40068C, "f\x0f:c\xca0")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40068C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40068C:0x400692], [b"f", b"\x0f", b":", b"c", b"\xca", b"0"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195986)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_16(self):
        """Instruction PCMPISTRI_16
        Groups: sse42
        0x40062c:   pcmpistri       xmm1, xmm2, 0x10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40062C, "f\x0f:c\xca\x10")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40062C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40062C:0x400632], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x10"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195890)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_17(self):
        """Instruction PCMPISTRI_17
        Groups: sse42
        0x400764:   pcmpistri       xmm1, xmm2, 0x78
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400764, "f\x0f:c\xcax")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400764
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400764:0x40076A], [b"f", b"\x0f", b":", b"c", b"\xca", b"x"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196202)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_18(self):
        """Instruction PCMPISTRI_18
        Groups: sse42
        0x4005fc:   pcmpistri       xmm1, xmm2, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4005FC, "f\x0f:c\xca\x00")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x82
        cpu.CF = True
        cpu.RIP = 0x4005FC
        cpu.SF = True
        cpu.execute()

        self.assertEqual(mem[0x4005FC:0x400602], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x00"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195842)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_19(self):
        """Instruction PCMPISTRI_19
        Groups: sse42
        0x4006ce:   pcmpistri       xmm1, xmm2, 0x45
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006CE, "f\x0f:c\xcaE")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x4006CE
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006CE:0x4006D4], [b"f", b"\x0f", b":", b"c", b"\xca", b"E"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196052)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_2(self):
        """Instruction PCMPISTRI_2
        Groups: sse42
        0x400704:   pcmpistri       xmm1, xmm2, 0x58
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400704, "f\x0f:c\xcaX")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400704
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400704:0x40070A], [b"f", b"\x0f", b":", b"c", b"\xca", b"X"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196106)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_20(self):
        """Instruction PCMPISTRI_20
        Groups: sse42
        0x4006f8:   pcmpistri       xmm1, xmm2, 0x54
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006F8, "f\x0f:c\xcaT")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006F8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006F8:0x4006FE], [b"f", b"\x0f", b":", b"c", b"\xca", b"T"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196094)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_21(self):
        """Instruction PCMPISTRI_21
        Groups: sse42
        0x4006c2:   pcmpistri       xmm1, xmm2, 0x41
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006C2, "f\x0f:c\xcaA")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x4006C2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006C2:0x4006C8], [b"f", b"\x0f", b":", b"c", b"\xca", b"A"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196040)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_22(self):
        """Instruction PCMPISTRI_22
        Groups: sse42
        0x40069e:   pcmpistri       xmm1, xmm2, 0x35
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40069E, "f\x0f:c\xca5")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40069E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40069E:0x4006A4], [b"f", b"\x0f", b":", b"c", b"\xca", b"5"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196004)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_23(self):
        """Instruction PCMPISTRI_23
        Groups: sse42
        0x4006b6:   pcmpistri       xmm1, xmm2, 0x3d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006B6, "f\x0f:c\xca=")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x4006B6
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006B6:0x4006BC], [b"f", b"\x0f", b":", b"c", b"\xca", b"="])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196028)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_24(self):
        """Instruction PCMPISTRI_24
        Groups: sse42
        0x400620:   pcmpistri       xmm1, xmm2, 0xc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400620, "f\x0f:c\xca\x0c")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400620
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400620:0x400626], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x0c"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195878)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_25(self):
        """Instruction PCMPISTRI_25
        Groups: sse42
        0x400710:   pcmpistri       xmm1, xmm2, 0x5c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400710, "f\x0f:c\xca\\")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400710
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400710:0x400716], [b"f", b"\x0f", b":", b"c", b"\xca", b"\\"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196118)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_26(self):
        """Instruction PCMPISTRI_26
        Groups: sse42
        0x4006b0:   pcmpistri       xmm1, xmm2, 0x3c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006B0, "f\x0f:c\xca<")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006B0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006B0:0x4006B6], [b"f", b"\x0f", b":", b"c", b"\xca", b"<"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196022)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_27(self):
        """Instruction PCMPISTRI_27
        Groups: sse42
        0x400740:   pcmpistri       xmm1, xmm2, 0x6c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400740, "f\x0f:c\xcal")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400740
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400740:0x400746], [b"f", b"\x0f", b":", b"c", b"\xca", b"l"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196166)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_28(self):
        """Instruction PCMPISTRI_28
        Groups: sse42
        0x400692:   pcmpistri       xmm1, xmm2, 0x31
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400692, "f\x0f:c\xca1")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400692
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400692:0x400698], [b"f", b"\x0f", b":", b"c", b"\xca", b"1"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195992)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_29(self):
        """Instruction PCMPISTRI_29
        Groups: sse42
        0x40064a:   pcmpistri       xmm1, xmm2, 0x19
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40064A, "f\x0f:c\xca\x19")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40064A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40064A:0x400650], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x19"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195920)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_3(self):
        """Instruction PCMPISTRI_3
        Groups: sse42
        0x400728:   pcmpistri       xmm1, xmm2, 0x64
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400728, "f\x0f:c\xcad")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400728
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400728:0x40072E], [b"f", b"\x0f", b":", b"c", b"\xca", b"d"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196142)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_30(self):
        """Instruction PCMPISTRI_30
        Groups: sse42
        0x40077c:   pcmpistri       xmm1, xmmword ptr [rbp - 0xa0], 0x1b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x40077C, "f\x0f:c\x8d`\xff\xff\xff\x1b")
        mem.write(0x7FFFFFFFE190, "ABCDEFGHABCDEFGH")
        cpu.SF = False
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x40077C
        cpu.RBP = 0x7FFFFFFFE230
        cpu.execute()

        self.assertEqual(
            mem[0x40077C:0x400786],
            [b"f", b"\x0f", b":", b"c", b"\x8d", b"`", b"\xff", b"\xff", b"\xff", b"\x1b"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFE190:0x7FFFFFFFE1A0],
            [
                b"A",
                b"B",
                b"C",
                b"D",
                b"E",
                b"F",
                b"G",
                b"H",
                b"A",
                b"B",
                b"C",
                b"D",
                b"E",
                b"F",
                b"G",
                b"H",
            ],
        )
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196230)
        self.assertEqual(cpu.RBP, 140737488347696)

    def test_PCMPISTRI_31(self):
        """Instruction PCMPISTRI_31
        Groups: sse42
        0x400626:   pcmpistri       xmm1, xmm2, 0xd
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400626, "f\x0f:c\xca\r")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400626
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400626:0x40062C], [b"f", b"\x0f", b":", b"c", b"\xca", b"\r"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195884)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_32(self):
        """Instruction PCMPISTRI_32
        Groups: sse42
        0x4006d4:   pcmpistri       xmm1, xmm2, 0x48
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D4, "f\x0f:c\xcaH")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006D4
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006D4:0x4006DA], [b"f", b"\x0f", b":", b"c", b"\xca", b"H"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196058)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_33(self):
        """Instruction PCMPISTRI_33
        Groups: sse42
        0x400686:   pcmpistri       xmm1, xmm2, 0x2d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400686, "f\x0f:c\xca-")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400686
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400686:0x40068C], [b"f", b"\x0f", b":", b"c", b"\xca", b"-"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195980)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_34(self):
        """Instruction PCMPISTRI_34
        Groups: sse42
        0x400770:   pcmpistri       xmm1, xmm2, 0x7c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400770, "f\x0f:c\xca|")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400770
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400770:0x400776], [b"f", b"\x0f", b":", b"c", b"\xca", b"|"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196214)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_35(self):
        """Instruction PCMPISTRI_35
        Groups: sse42
        0x40071c:   pcmpistri       xmm1, xmm2, 0x60
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40071C, "f\x0f:c\xca`")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x40071C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40071C:0x400722], [b"f", b"\x0f", b":", b"c", b"\xca", b"`"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196130)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_36(self):
        """Instruction PCMPISTRI_36
        Groups: sse42
        0x400776:   pcmpistri       xmm1, xmm2, 0x7d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400776, "f\x0f:c\xca}")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x400776
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400776:0x40077C], [b"f", b"\x0f", b":", b"c", b"\xca", b"}"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196220)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_37(self):
        """Instruction PCMPISTRI_37
        Groups: sse42
        0x400758:   pcmpistri       xmm1, xmm2, 0x74
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400758, "f\x0f:c\xcat")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400758
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400758:0x40075E], [b"f", b"\x0f", b":", b"c", b"\xca", b"t"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196190)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_38(self):
        """Instruction PCMPISTRI_38
        Groups: sse42
        0x400602:   pcmpistri       xmm1, xmm2, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400602, "f\x0f:c\xca\x01")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400602
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400602:0x400608], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x01"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195848)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_39(self):
        """Instruction PCMPISTRI_39
        Groups: sse42
        0x400608:   pcmpistri       xmm1, xmm2, 4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400608, "f\x0f:c\xca\x04")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400608
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400608:0x40060E], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x04"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195854)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_4(self):
        """Instruction PCMPISTRI_4
        Groups: sse42
        0x400752:   pcmpistri       xmm1, xmm2, 0x71
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400752, "f\x0f:c\xcaq")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400752
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400752:0x400758], [b"f", b"\x0f", b":", b"c", b"\xca", b"q"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196184)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_40(self):
        """Instruction PCMPISTRI_40
        Groups: sse42
        0x400638:   pcmpistri       xmm1, xmm2, 0x14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400638, "f\x0f:c\xca\x14")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400638
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400638:0x40063E], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x14"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195902)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_41(self):
        """Instruction PCMPISTRI_41
        Groups: sse42
        0x40074c:   pcmpistri       xmm1, xmm2, 0x70
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40074C, "f\x0f:c\xcap")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = True
        cpu.RIP = 0x40074C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40074C:0x400752], [b"f", b"\x0f", b":", b"c", b"\xca", b"p"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196178)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_42(self):
        """Instruction PCMPISTRI_42
        Groups: sse42
        0x400734:   pcmpistri       xmm1, xmm2, 0x68
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400734, "f\x0f:c\xcah")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400734
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400734:0x40073A], [b"f", b"\x0f", b":", b"c", b"\xca", b"h"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196154)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_43(self):
        """Instruction PCMPISTRI_43
        Groups: sse42
        0x400644:   pcmpistri       xmm1, xmm2, 0x18
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400644, "f\x0f:c\xca\x18")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400644
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400644:0x40064A], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x18"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195914)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_44(self):
        """Instruction PCMPISTRI_44
        Groups: sse42
        0x40065c:   pcmpistri       xmm1, xmm2, 0x20
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40065C, "f\x0f:c\xca ")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x40065C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40065C:0x400662], [b"f", b"\x0f", b":", b"c", b"\xca", b" "])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195938)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_45(self):
        """Instruction PCMPISTRI_45
        Groups: sse42
        0x40061a:   pcmpistri       xmm1, xmm2, 9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40061A, "f\x0f:c\xca\t")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40061A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40061A:0x400620], [b"f", b"\x0f", b":", b"c", b"\xca", b"\t"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195872)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_46(self):
        """Instruction PCMPISTRI_46
        Groups: sse42
        0x40073a:   pcmpistri       xmm1, xmm2, 0x69
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40073A, "f\x0f:c\xcai")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x40073A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40073A:0x400740], [b"f", b"\x0f", b":", b"c", b"\xca", b"i"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196160)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_47(self):
        """Instruction PCMPISTRI_47
        Groups: sse42
        0x40070a:   pcmpistri       xmm1, xmm2, 0x59
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40070A, "f\x0f:c\xcaY")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40070A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40070A:0x400710], [b"f", b"\x0f", b":", b"c", b"\xca", b"Y"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196112)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_48(self):
        """Instruction PCMPISTRI_48
        Groups: sse42
        0x4006aa:   pcmpistri       xmm1, xmm2, 0x39
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006AA, "f\x0f:c\xca9")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006AA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006AA:0x4006B0], [b"f", b"\x0f", b":", b"c", b"\xca", b"9"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196016)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_49(self):
        """Instruction PCMPISTRI_49
        Groups: sse42
        0x400716:   pcmpistri       xmm1, xmm2, 0x5d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400716, "f\x0f:c\xca]")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x400716
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400716:0x40071C], [b"f", b"\x0f", b":", b"c", b"\xca", b"]"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196124)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_5(self):
        """Instruction PCMPISTRI_5
        Groups: sse42
        0x40063e:   pcmpistri       xmm1, xmm2, 0x15
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40063E, "f\x0f:c\xca\x15")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40063E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40063E:0x400644], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x15"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195908)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_50(self):
        """Instruction PCMPISTRI_50
        Groups: sse42
        0x400656:   pcmpistri       xmm1, xmm2, 0x1d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400656, "f\x0f:c\xca\x1d")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x400656
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400656:0x40065C], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x1d"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195932)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_51(self):
        """Instruction PCMPISTRI_51
        Groups: sse42
        0x40072e:   pcmpistri       xmm1, xmm2, 0x65
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40072E, "f\x0f:c\xcae")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x40072E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40072E:0x400734], [b"f", b"\x0f", b":", b"c", b"\xca", b"e"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196148)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_52(self):
        """Instruction PCMPISTRI_52
        Groups: sse42
        0x400680:   pcmpistri       xmm1, xmm2, 0x2c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400680, "f\x0f:c\xca,")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400680
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400680:0x400686], [b"f", b"\x0f", b":", b"c", b"\xca", b","])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195974)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_53(self):
        """Instruction PCMPISTRI_53
        Groups: sse42
        0x400674:   pcmpistri       xmm1, xmm2, 0x28
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400674, "f\x0f:c\xca(")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400674
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400674:0x40067A], [b"f", b"\x0f", b":", b"c", b"\xca", b"("])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195962)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_54(self):
        """Instruction PCMPISTRI_54
        Groups: sse42
        0x40067a:   pcmpistri       xmm1, xmm2, 0x29
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40067A, "f\x0f:c\xca)")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40067A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40067A:0x400680], [b"f", b"\x0f", b":", b"c", b"\xca", b")"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195968)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_55(self):
        """Instruction PCMPISTRI_55
        Groups: sse42
        0x400722:   pcmpistri       xmm1, xmm2, 0x61
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400722, "f\x0f:c\xcaa")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x400722
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400722:0x400728], [b"f", b"\x0f", b":", b"c", b"\xca", b"a"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196136)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_56(self):
        """Instruction PCMPISTRI_56
        Groups: sse42
        0x4006e6:   pcmpistri       xmm1, xmm2, 0x4d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006E6, "f\x0f:c\xcaM")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = True
        cpu.RIP = 0x4006E6
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006E6:0x4006EC], [b"f", b"\x0f", b":", b"c", b"\xca", b"M"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196076)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_57(self):
        """Instruction PCMPISTRI_57
        Groups: sse42
        0x40076a:   pcmpistri       xmm1, xmm2, 0x79
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40076A, "f\x0f:c\xcay")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40076A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40076A:0x400770], [b"f", b"\x0f", b":", b"c", b"\xca", b"y"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196208)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_58(self):
        """Instruction PCMPISTRI_58
        Groups: sse42
        0x4006ec:   pcmpistri       xmm1, xmm2, 0x50
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006EC, "f\x0f:c\xcaP")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = True
        cpu.RIP = 0x4006EC
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006EC:0x4006F2], [b"f", b"\x0f", b":", b"c", b"\xca", b"P"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196082)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_59(self):
        """Instruction PCMPISTRI_59
        Groups: sse42
        0x400632:   pcmpistri       xmm1, xmm2, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400632, "f\x0f:c\xca\x11")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400632
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400632:0x400638], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x11"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195896)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_6(self):
        """Instruction PCMPISTRI_6
        Groups: sse42
        0x40066e:   pcmpistri       xmm1, xmm2, 0x25
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40066E, "f\x0f:c\xca%")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40066E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40066E:0x400674], [b"f", b"\x0f", b":", b"c", b"\xca", b"%"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195956)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_60(self):
        """Instruction PCMPISTRI_60
        Groups: sse42
        0x4006f2:   pcmpistri       xmm1, xmm2, 0x51
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006F2, "f\x0f:c\xcaQ")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006F2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006F2:0x4006F8], [b"f", b"\x0f", b":", b"c", b"\xca", b"Q"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196088)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_61(self):
        """Instruction PCMPISTRI_61
        Groups: sse42
        0x400614:   pcmpistri       xmm1, xmm2, 8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400614, "f\x0f:c\xca\x08")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400614
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400614:0x40061A], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x08"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195866)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_62(self):
        """Instruction PCMPISTRI_62
        Groups: sse42
        0x4006da:   pcmpistri       xmm1, xmm2, 0x49
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006DA, "f\x0f:c\xcaI")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xF
        cpu.CF = True
        cpu.RIP = 0x4006DA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006DA:0x4006E0], [b"f", b"\x0f", b":", b"c", b"\xca", b"I"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196064)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_63(self):
        """Instruction PCMPISTRI_63
        Groups: sse42
        0x4006a4:   pcmpistri       xmm1, xmm2, 0x38
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006A4, "f\x0f:c\xca8")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006A4
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006A4:0x4006AA], [b"f", b"\x0f", b":", b"c", b"\xca", b"8"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196010)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_64(self):
        """Instruction PCMPISTRI_64
        Groups: sse42
        0x4006fe:   pcmpistri       xmm1, xmm2, 0x55
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006FE, "f\x0f:c\xcaU")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006FE
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006FE:0x400704], [b"f", b"\x0f", b":", b"c", b"\xca", b"U"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196100)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_65(self):
        """Instruction PCMPISTRI_65
        Groups: sse42
        0x400662:   pcmpistri       xmm1, xmm2, 0x21
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400662, "f\x0f:c\xca!")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400662
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400662:0x400668], [b"f", b"\x0f", b":", b"c", b"\xca", b"!"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195944)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_7(self):
        """Instruction PCMPISTRI_7
        Groups: sse42
        0x4006e0:   pcmpistri       xmm1, xmm2, 0x4c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006E0, "f\x0f:c\xcaL")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006E0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4006E0:0x4006E6], [b"f", b"\x0f", b":", b"c", b"\xca", b"L"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196070)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_8(self):
        """Instruction PCMPISTRI_8
        Groups: sse42
        0x40060e:   pcmpistri       xmm1, xmm2, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40060E, "f\x0f:c\xca\x05")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40060E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40060E:0x400614], [b"f", b"\x0f", b":", b"c", b"\xca", b"\x05"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195860)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_9(self):
        """Instruction PCMPISTRI_9
        Groups: sse42
        0x40075e:   pcmpistri       xmm1, xmm2, 0x75
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40075E, "f\x0f:c\xcau")
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40075E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40075E:0x400764], [b"f", b"\x0f", b":", b"c", b"\xca", b"u"])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196196)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_1(self):
        """Instruction PCMPISTRM_1
        Groups: sse42
        0x400856:   pcmpistrm       xmm1, xmm2, 0x41
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400856, "f\x0f:b\xcaA")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400856
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400856:0x40085C], [b"f", b"\x0f", b":", b"b", b"\xca", b"A"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196444)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_10(self):
        """Instruction PCMPISTRM_10
        Groups: sse42
        0x4007cc:   pcmpistrm       xmm1, xmm2, 0x14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007CC, "f\x0f:b\xca\x14")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007CC
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007CC:0x4007D2], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x14"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196306)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_11(self):
        """Instruction PCMPISTRM_11
        Groups: sse42
        0x40087a:   pcmpistrm       xmm1, xmm2, 0x4d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40087A, "f\x0f:b\xcaM")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40087A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40087A:0x400880], [b"f", b"\x0f", b":", b"b", b"\xca", b"M"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196480)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_12(self):
        """Instruction PCMPISTRM_12
        Groups: sse42
        0x400802:   pcmpistrm       xmm1, xmm2, 0x25
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400802, "f\x0f:b\xca%")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400802
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400802:0x400808], [b"f", b"\x0f", b":", b"b", b"\xca", b"%"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196360)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_13(self):
        """Instruction PCMPISTRM_13
        Groups: sse42
        0x4007fc:   pcmpistrm       xmm1, xmm2, 0x24
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007FC, "f\x0f:b\xca$")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007FC
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007FC:0x400802], [b"f", b"\x0f", b":", b"b", b"\xca", b"$"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196354)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_14(self):
        """Instruction PCMPISTRM_14
        Groups: sse42
        0x4008c8:   pcmpistrm       xmm1, xmm2, 0x68
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008C8, "f\x0f:b\xcah")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008C8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008C8:0x4008CE], [b"f", b"\x0f", b":", b"b", b"\xca", b"h"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196558)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_15(self):
        """Instruction PCMPISTRM_15
        Groups: sse42
        0x4008f8:   pcmpistrm       xmm1, xmm2, 0x78
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008F8, "f\x0f:b\xcax")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008F8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008F8:0x4008FE], [b"f", b"\x0f", b":", b"b", b"\xca", b"x"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196606)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_16(self):
        """Instruction PCMPISTRM_16
        Groups: sse42
        0x40080e:   pcmpistrm       xmm1, xmm2, 0x29
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40080E, "f\x0f:b\xca)")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40080E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40080E:0x400814], [b"f", b"\x0f", b":", b"b", b"\xca", b")"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196372)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_17(self):
        """Instruction PCMPISTRM_17
        Groups: sse42
        0x40089e:   pcmpistrm       xmm1, xmm2, 0x59
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40089E, "f\x0f:b\xcaY")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40089E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40089E:0x4008A4], [b"f", b"\x0f", b":", b"b", b"\xca", b"Y"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196516)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_18(self):
        """Instruction PCMPISTRM_18
        Groups: sse42
        0x4008f2:   pcmpistrm       xmm1, xmm2, 0x75
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008F2, "f\x0f:b\xcau")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008F2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008F2:0x4008F8], [b"f", b"\x0f", b":", b"b", b"\xca", b"u"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196600)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_19(self):
        """Instruction PCMPISTRM_19
        Groups: sse42
        0x4007b4:   pcmpistrm       xmm1, xmm2, 0xc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007B4, "f\x0f:b\xca\x0c")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007B4
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007B4:0x4007BA], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x0c"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196282)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_2(self):
        """Instruction PCMPISTRM_2
        Groups: sse42
        0x4008ec:   pcmpistrm       xmm1, xmm2, 0x74
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008EC, "f\x0f:b\xcat")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008EC
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008EC:0x4008F2], [b"f", b"\x0f", b":", b"b", b"\xca", b"t"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196594)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_20(self):
        """Instruction PCMPISTRM_20
        Groups: sse42
        0x4007d8:   pcmpistrm       xmm1, xmm2, 0x18
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007D8, "f\x0f:b\xca\x18")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007D8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007D8:0x4007DE], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x18"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196318)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_21(self):
        """Instruction PCMPISTRM_21
        Groups: sse42
        0x400892:   pcmpistrm       xmm1, xmm2, 0x55
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400892, "f\x0f:b\xcaU")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400892
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400892:0x400898], [b"f", b"\x0f", b":", b"b", b"\xca", b"U"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196504)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_22(self):
        """Instruction PCMPISTRM_22
        Groups: sse42
        0x40084a:   pcmpistrm       xmm1, xmm2, 0x3d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40084A, "f\x0f:b\xca=")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40084A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40084A:0x400850], [b"f", b"\x0f", b":", b"b", b"\xca", b"="])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196432)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_23(self):
        """Instruction PCMPISTRM_23
        Groups: sse42
        0x40088c:   pcmpistrm       xmm1, xmm2, 0x54
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40088C, "f\x0f:b\xcaT")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40088C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40088C:0x400892], [b"f", b"\x0f", b":", b"b", b"\xca", b"T"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196498)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_24(self):
        """Instruction PCMPISTRM_24
        Groups: sse42
        0x4008fe:   pcmpistrm       xmm1, xmm2, 0x79
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008FE, "f\x0f:b\xcay")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008FE
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008FE:0x400904], [b"f", b"\x0f", b":", b"b", b"\xca", b"y"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196612)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_25(self):
        """Instruction PCMPISTRM_25
        Groups: sse42
        0x400838:   pcmpistrm       xmm1, xmm2, 0x38
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400838, "f\x0f:b\xca8")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400838
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400838:0x40083E], [b"f", b"\x0f", b":", b"b", b"\xca", b"8"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196414)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_26(self):
        """Instruction PCMPISTRM_26
        Groups: sse42
        0x400832:   pcmpistrm       xmm1, xmm2, 0x35
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400832, "f\x0f:b\xca5")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400832
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400832:0x400838], [b"f", b"\x0f", b":", b"b", b"\xca", b"5"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196408)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_27(self):
        """Instruction PCMPISTRM_27
        Groups: sse42
        0x400820:   pcmpistrm       xmm1, xmm2, 0x30
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400820, "f\x0f:b\xca0")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400820
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400820:0x400826], [b"f", b"\x0f", b":", b"b", b"\xca", b"0"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196390)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_28(self):
        """Instruction PCMPISTRM_28
        Groups: sse42
        0x400850:   pcmpistrm       xmm1, xmm2, 0x40
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400850, "f\x0f:b\xca@")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400850
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400850:0x400856], [b"f", b"\x0f", b":", b"b", b"\xca", b"@"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196438)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_29(self):
        """Instruction PCMPISTRM_29
        Groups: sse42
        0x4007d2:   pcmpistrm       xmm1, xmm2, 0x15
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007D2, "f\x0f:b\xca\x15")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007D2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007D2:0x4007D8], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x15"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196312)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_3(self):
        """Instruction PCMPISTRM_3
        Groups: sse42
        0x400826:   pcmpistrm       xmm1, xmm2, 0x31
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400826, "f\x0f:b\xca1")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400826
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400826:0x40082C], [b"f", b"\x0f", b":", b"b", b"\xca", b"1"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196396)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_30(self):
        """Instruction PCMPISTRM_30
        Groups: sse42
        0x400898:   pcmpistrm       xmm1, xmm2, 0x58
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400898, "f\x0f:b\xcaX")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400898
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400898:0x40089E], [b"f", b"\x0f", b":", b"b", b"\xca", b"X"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196510)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_31(self):
        """Instruction PCMPISTRM_31
        Groups: sse42
        0x4008aa:   pcmpistrm       xmm1, xmm2, 0x5d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008AA, "f\x0f:b\xca]")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008AA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008AA:0x4008B0], [b"f", b"\x0f", b":", b"b", b"\xca", b"]"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196528)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_32(self):
        """Instruction PCMPISTRM_32
        Groups: sse42
        0x4007ea:   pcmpistrm       xmm1, xmm2, 0x1d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007EA, "f\x0f:b\xca\x1d")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007EA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007EA:0x4007F0], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x1d"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196336)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_33(self):
        """Instruction PCMPISTRM_33
        Groups: sse42
        0x4007f6:   pcmpistrm       xmm1, xmm2, 0x21
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007F6, "f\x0f:b\xca!")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007F6
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007F6:0x4007FC], [b"f", b"\x0f", b":", b"b", b"\xca", b"!"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196348)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_34(self):
        """Instruction PCMPISTRM_34
        Groups: sse42
        0x4008b0:   pcmpistrm       xmm1, xmm2, 0x60
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008B0, "f\x0f:b\xca`")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008B0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008B0:0x4008B6], [b"f", b"\x0f", b":", b"b", b"\xca", b"`"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196534)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_35(self):
        """Instruction PCMPISTRM_35
        Groups: sse42
        0x4008a4:   pcmpistrm       xmm1, xmm2, 0x5c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008A4, "f\x0f:b\xca\\")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008A4
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008A4:0x4008AA], [b"f", b"\x0f", b":", b"b", b"\xca", b"\\"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196522)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_36(self):
        """Instruction PCMPISTRM_36
        Groups: sse42
        0x4008e0:   pcmpistrm       xmm1, xmm2, 0x70
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008E0, "f\x0f:b\xcap")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008E0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008E0:0x4008E6], [b"f", b"\x0f", b":", b"b", b"\xca", b"p"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196582)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_37(self):
        """Instruction PCMPISTRM_37
        Groups: sse42
        0x400904:   pcmpistrm       xmm1, xmm2, 0x7c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400904, "f\x0f:b\xca|")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400904
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400904:0x40090A], [b"f", b"\x0f", b":", b"b", b"\xca", b"|"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196618)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_38(self):
        """Instruction PCMPISTRM_38
        Groups: sse42
        0x4008c2:   pcmpistrm       xmm1, xmm2, 0x65
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008C2, "f\x0f:b\xcae")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008C2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008C2:0x4008C8], [b"f", b"\x0f", b":", b"b", b"\xca", b"e"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196552)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_39(self):
        """Instruction PCMPISTRM_39
        Groups: sse42
        0x40081a:   pcmpistrm       xmm1, xmm2, 0x2d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40081A, "f\x0f:b\xca-")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40081A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40081A:0x400820], [b"f", b"\x0f", b":", b"b", b"\xca", b"-"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196384)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_4(self):
        """Instruction PCMPISTRM_4
        Groups: sse42
        0x4008bc:   pcmpistrm       xmm1, xmm2, 0x64
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008BC, "f\x0f:b\xcad")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008BC
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008BC:0x4008C2], [b"f", b"\x0f", b":", b"b", b"\xca", b"d"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196546)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_40(self):
        """Instruction PCMPISTRM_40
        Groups: sse42
        0x4007de:   pcmpistrm       xmm1, xmm2, 0x19
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007DE, "f\x0f:b\xca\x19")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007DE
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007DE:0x4007E4], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x19"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196324)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_41(self):
        """Instruction PCMPISTRM_41
        Groups: sse42
        0x400814:   pcmpistrm       xmm1, xmm2, 0x2c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400814, "f\x0f:b\xca,")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400814
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400814:0x40081A], [b"f", b"\x0f", b":", b"b", b"\xca", b","])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196378)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_42(self):
        """Instruction PCMPISTRM_42
        Groups: sse42
        0x4007c6:   pcmpistrm       xmm1, xmm2, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007C6, "f\x0f:b\xca\x11")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007C6
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007C6:0x4007CC], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x11"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196300)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_43(self):
        """Instruction PCMPISTRM_43
        Groups: sse42
        0x400868:   pcmpistrm       xmm1, xmm2, 0x48
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400868, "f\x0f:b\xcaH")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400868
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400868:0x40086E], [b"f", b"\x0f", b":", b"b", b"\xca", b"H"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196462)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_44(self):
        """Instruction PCMPISTRM_44
        Groups: sse42
        0x4008ce:   pcmpistrm       xmm1, xmm2, 0x69
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008CE, "f\x0f:b\xcai")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008CE
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008CE:0x4008D4], [b"f", b"\x0f", b":", b"b", b"\xca", b"i"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196564)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_45(self):
        """Instruction PCMPISTRM_45
        Groups: sse42
        0x400874:   pcmpistrm       xmm1, xmm2, 0x4c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400874, "f\x0f:b\xcaL")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400874
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400874:0x40087A], [b"f", b"\x0f", b":", b"b", b"\xca", b"L"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196474)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_46(self):
        """Instruction PCMPISTRM_46
        Groups: sse42
        0x40085c:   pcmpistrm       xmm1, xmm2, 0x44
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40085C, "f\x0f:b\xcaD")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40085C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40085C:0x400862], [b"f", b"\x0f", b":", b"b", b"\xca", b"D"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196450)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_47(self):
        """Instruction PCMPISTRM_47
        Groups: sse42
        0x4007a8:   pcmpistrm       xmm1, xmm2, 8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007A8, "f\x0f:b\xca\x08")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007A8
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007A8:0x4007AE], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x08"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196270)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_48(self):
        """Instruction PCMPISTRM_48
        Groups: sse42
        0x40082c:   pcmpistrm       xmm1, xmm2, 0x34
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40082C, "f\x0f:b\xca4")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40082C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40082C:0x400832], [b"f", b"\x0f", b":", b"b", b"\xca", b"4"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196402)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_49(self):
        """Instruction PCMPISTRM_49
        Groups: sse42
        0x4008da:   pcmpistrm       xmm1, xmm2, 0x6d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008DA, "f\x0f:b\xcam")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008DA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008DA:0x4008E0], [b"f", b"\x0f", b":", b"b", b"\xca", b"m"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196576)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_5(self):
        """Instruction PCMPISTRM_5
        Groups: sse42
        0x4007a2:   pcmpistrm       xmm1, xmm2, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007A2, "f\x0f:b\xca\x05")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007A2
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007A2:0x4007A8], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x05"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196264)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_50(self):
        """Instruction PCMPISTRM_50
        Groups: sse42
        0x4007e4:   pcmpistrm       xmm1, xmm2, 0x1c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007E4, "f\x0f:b\xca\x1c")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007E4
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007E4:0x4007EA], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x1c"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196330)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_51(self):
        """Instruction PCMPISTRM_51
        Groups: sse42
        0x400880:   pcmpistrm       xmm1, xmm2, 0x50
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400880, "f\x0f:b\xcaP")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400880
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400880:0x400886], [b"f", b"\x0f", b":", b"b", b"\xca", b"P"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196486)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_52(self):
        """Instruction PCMPISTRM_52
        Groups: sse42
        0x400886:   pcmpistrm       xmm1, xmm2, 0x51
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400886, "f\x0f:b\xcaQ")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400886
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400886:0x40088C], [b"f", b"\x0f", b":", b"b", b"\xca", b"Q"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196492)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_53(self):
        """Instruction PCMPISTRM_53
        Groups: sse42
        0x4008b6:   pcmpistrm       xmm1, xmm2, 0x61
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008B6, "f\x0f:b\xcaa")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008B6
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008B6:0x4008BC], [b"f", b"\x0f", b":", b"b", b"\xca", b"a"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196540)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_54(self):
        """Instruction PCMPISTRM_54
        Groups: sse42
        0x4007ba:   pcmpistrm       xmm1, xmm2, 0xd
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007BA, "f\x0f:b\xca\r")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007BA
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007BA:0x4007C0], [b"f", b"\x0f", b":", b"b", b"\xca", b"\r"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196288)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_55(self):
        """Instruction PCMPISTRM_55
        Groups: sse42
        0x40090a:   pcmpistrm       xmm1, xmm2, 0x7d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40090A, "f\x0f:b\xca}")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40090A
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40090A:0x400910], [b"f", b"\x0f", b":", b"b", b"\xca", b"}"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196624)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_56(self):
        """Instruction PCMPISTRM_56
        Groups: sse42
        0x40079c:   pcmpistrm       xmm1, xmm2, 4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40079C, "f\x0f:b\xca\x04")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40079C
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40079C:0x4007A2], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x04"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196258)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_57(self):
        """Instruction PCMPISTRM_57
        Groups: sse42
        0x4007ae:   pcmpistrm       xmm1, xmm2, 9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007AE, "f\x0f:b\xca\t")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007AE
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007AE:0x4007B4], [b"f", b"\x0f", b":", b"b", b"\xca", b"\t"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196276)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_58(self):
        """Instruction PCMPISTRM_58
        Groups: sse42
        0x400844:   pcmpistrm       xmm1, xmm2, 0x3c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400844, "f\x0f:b\xca<")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400844
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400844:0x40084A], [b"f", b"\x0f", b":", b"b", b"\xca", b"<"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196426)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_59(self):
        """Instruction PCMPISTRM_59
        Groups: sse42
        0x4008e6:   pcmpistrm       xmm1, xmm2, 0x71
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008E6, "f\x0f:b\xcaq")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008E6
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008E6:0x4008EC], [b"f", b"\x0f", b":", b"b", b"\xca", b"q"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196588)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_6(self):
        """Instruction PCMPISTRM_6
        Groups: sse42
        0x400808:   pcmpistrm       xmm1, xmm2, 0x28
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400808, "f\x0f:b\xca(")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400808
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400808:0x40080E], [b"f", b"\x0f", b":", b"b", b"\xca", b"("])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196366)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_60(self):
        """Instruction PCMPISTRM_60
        Groups: sse42
        0x4008d4:   pcmpistrm       xmm1, xmm2, 0x6c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008D4, "f\x0f:b\xcal")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008D4
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4008D4:0x4008DA], [b"f", b"\x0f", b":", b"b", b"\xca", b"l"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196570)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_61(self):
        """Instruction PCMPISTRM_61
        Groups: sse42
        0x400796:   pcmpistrm       xmm1, xmm2, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400796, "f\x0f:b\xca\x01")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400796
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400796:0x40079C], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x01"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196252)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_62(self):
        """Instruction PCMPISTRM_62
        Groups: sse42
        0x40083e:   pcmpistrm       xmm1, xmm2, 0x39
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40083E, "f\x0f:b\xca9")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40083E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40083E:0x400844], [b"f", b"\x0f", b":", b"b", b"\xca", b"9"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196420)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_63(self):
        """Instruction PCMPISTRM_63
        Groups: sse42
        0x400790:   pcmpistrm       xmm1, xmm2, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400790, "f\x0f:b\xca\x00")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400790
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400790:0x400796], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x00"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196246)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_64(self):
        """Instruction PCMPISTRM_64
        Groups: sse42
        0x4007c0:   pcmpistrm       xmm1, xmm2, 0x10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007C0, "f\x0f:b\xca\x10")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007C0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007C0:0x4007C6], [b"f", b"\x0f", b":", b"b", b"\xca", b"\x10"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196294)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_7(self):
        """Instruction PCMPISTRM_7
        Groups: sse42
        0x4007f0:   pcmpistrm       xmm1, xmm2, 0x20
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007F0, "f\x0f:b\xca ")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007F0
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x4007F0:0x4007F6], [b"f", b"\x0f", b":", b"b", b"\xca", b" "])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196342)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_8(self):
        """Instruction PCMPISTRM_8
        Groups: sse42
        0x40086e:   pcmpistrm       xmm1, xmm2, 0x49
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40086E, "f\x0f:b\xcaI")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40086E
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x40086E:0x400874], [b"f", b"\x0f", b":", b"b", b"\xca", b"I"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196468)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_9(self):
        """Instruction PCMPISTRM_9
        Groups: sse42
        0x400862:   pcmpistrm       xmm1, xmm2, 0x45
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400862, "f\x0f:b\xcaE")
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400862
        cpu.SF = False
        cpu.execute()

        self.assertEqual(mem[0x400862:0x400868], [b"f", b"\x0f", b":", b"b", b"\xca", b"E"])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196456)
        self.assertEqual(cpu.SF, False)

    def test_PCMPESTRI_1_symbolic(self):
        """Instruction PCMPESTRI_1
        Groups: sse42
        0x400bec:   pcmpestri       xmm1, xmm2, 0x64
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BEC, "f\x0f:a\xcad")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BEC
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BEC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BEC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BEC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BED, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BEE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BEF, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF1, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BF2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_10_symbolic(self):
        """Instruction PCMPESTRI_10
        Groups: sse42
        0x400b20:   pcmpestri       xmm1, xmm2, 0x20
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B20, "f\x0f:a\xca ")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B20
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B20)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B20)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B20, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B21, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B22, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B23, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B24, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B25, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B26)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_11_symbolic(self):
        """Instruction PCMPESTRI_11
        Groups: sse42
        0x400b38:   pcmpestri       xmm1, xmm2, 0x28
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B38, "f\x0f:a\xca(")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B38
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B38)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B38)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B38, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B39, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B3A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B3B, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B3C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B3D, 8) == ord("("))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B3E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_12_symbolic(self):
        """Instruction PCMPESTRI_12
        Groups: sse42
        0x400bfe:   pcmpestri       xmm1, xmm2, 0x69
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BFE, "f\x0f:a\xcai")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BFE
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BFE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BFE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C00, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C01, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C02, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C03, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x400BFE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BFF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400C04)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_13_symbolic(self):
        """Instruction PCMPESTRI_13
        Groups: sse42
        0x400b86:   pcmpestri       xmm1, xmm2, 0x41
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B86, "f\x0f:a\xcaA")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B86
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B86)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B86)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B86, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B87, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B88, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B89, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B8A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B8B, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B8C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_14_symbolic(self):
        """Instruction PCMPESTRI_14
        Groups: sse42
        0x400ae4:   pcmpestri       xmm1, xmm2, 0xc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AE4, "f\x0f:a\xca\x0c")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400AE4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AE4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AE4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AE4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE7, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE9, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400AEA)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_15_symbolic(self):
        """Instruction PCMPESTRI_15
        Groups: sse42
        0x400c04:   pcmpestri       xmm1, xmm2, 0x6c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C04, "f\x0f:a\xcal")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400C04
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C04)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C04)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C04, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C05, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C06, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C07, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C08, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C09, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400C0A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_16_symbolic(self):
        """Instruction PCMPESTRI_16
        Groups: sse42
        0x400b6e:   pcmpestri       xmm1, xmm2, 0x39
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B6E, "f\x0f:a\xca9")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B6E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B6E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B6E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B6E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B6F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B70, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B71, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B72, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B73, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B74)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_17_symbolic(self):
        """Instruction PCMPESTRI_17
        Groups: sse42
        0x400b2c:   pcmpestri       xmm1, xmm2, 0x24
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B2C, "f\x0f:a\xca$")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B2C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B2C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B2C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B2C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B2D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B2E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B2F, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B30, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B31, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B32)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_18_symbolic(self):
        """Instruction PCMPESTRI_18
        Groups: sse42
        0x400af0:   pcmpestri       xmm1, xmm2, 0x10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AF0, "f\x0f:a\xca\x10")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400AF0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AF0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AF0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AF0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF3, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF5, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400AF6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_19_symbolic(self):
        """Instruction PCMPESTRI_19
        Groups: sse42
        0x400be0:   pcmpestri       xmm1, xmm2, 0x60
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BE0, "f\x0f:a\xca`")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BE0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BE0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BE0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BE0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE3, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE5, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BE6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_2_symbolic(self):
        """Instruction PCMPESTRI_2
        Groups: sse42
        0x400b4a:   pcmpestri       xmm1, xmm2, 0x2d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B4A, "f\x0f:a\xca-")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B4A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B4A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B4A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B4A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B4B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B4C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B4D, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B4E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B4F, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B50)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_20_symbolic(self):
        """Instruction PCMPESTRI_20
        Groups: sse42
        0x400c0a:   pcmpestri       xmm1, xmm2, 0x6d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C0A, "f\x0f:a\xcam")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400C0A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C0A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C0A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C0A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C0B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C0C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C0D, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C0E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C0F, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400C10)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_21_symbolic(self):
        """Instruction PCMPESTRI_21
        Groups: sse42
        0x400b14:   pcmpestri       xmm1, xmm2, 0x1c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B14, "f\x0f:a\xca\x1c")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B14
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B14)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B14)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B14, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B15, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B16, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B17, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B18, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B19, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B1A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_22_symbolic(self):
        """Instruction PCMPESTRI_22
        Groups: sse42
        0x400bb6:   pcmpestri       xmm1, xmm2, 0x51
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BB6, "f\x0f:a\xcaQ")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BB6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BB6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BB6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BB6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB9, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BBA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BBB, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BBC)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_23_symbolic(self):
        """Instruction PCMPESTRI_23
        Groups: sse42
        0x400b08:   pcmpestri       xmm1, xmm2, 0x18
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B08, "f\x0f:a\xca\x18")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B08
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B08)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B08)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B08, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B09, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B0A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B0B, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B0C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B0D, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B0E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_24_symbolic(self):
        """Instruction PCMPESTRI_24
        Groups: sse42
        0x400c1c:   pcmpestri       xmm1, xmm2, 0x74
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C1C, "f\x0f:a\xcat")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400C1C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C1C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C1C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C20, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C21, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x400C1C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C1D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C1E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C1F, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C22)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_25_symbolic(self):
        """Instruction PCMPESTRI_25
        Groups: sse42
        0x400bda:   pcmpestri       xmm1, xmm2, 0x5d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BDA, "f\x0f:a\xca]")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BDA
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BDA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BDA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BDA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BDB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BDC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BDD, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BDE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BDF, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BE0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_26_symbolic(self):
        """Instruction PCMPESTRI_26
        Groups: sse42
        0x400c10:   pcmpestri       xmm1, xmm2, 0x70
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C10, "f\x0f:a\xcap")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400C10
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C10)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C10)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C10, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C11, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C12, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C13, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C14, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C15, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C16)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_27_symbolic(self):
        """Instruction PCMPESTRI_27
        Groups: sse42
        0x400c34:   pcmpestri       xmm1, xmm2, 0x7c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C34, "f\x0f:a\xca|")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400C34
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C34)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C34)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C34, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C35, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C36, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C37, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C38, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C39, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C3A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_28_symbolic(self):
        """Instruction PCMPESTRI_28
        Groups: sse42
        0x400c2e:   pcmpestri       xmm1, xmm2, 0x79
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C2E, "f\x0f:a\xcay")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400C2E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C2E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C2E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C2E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C2F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C30, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C31, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C32, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C33, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C34)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_29_symbolic(self):
        """Instruction PCMPESTRI_29
        Groups: sse42
        0x400b80:   pcmpestri       xmm1, xmm2, 0x40
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B80, "f\x0f:a\xca@")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B80
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B80)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B80)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B80, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B81, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B82, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B83, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B84, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B85, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B86)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_3_symbolic(self):
        """Instruction PCMPESTRI_3
        Groups: sse42
        0x400ac6:   pcmpestri       xmm1, xmm2, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AC6, "f\x0f:a\xca\x01")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400AC6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AC6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AC6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AC6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC9, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400ACA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400ACB, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ACC)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_30_symbolic(self):
        """Instruction PCMPESTRI_30
        Groups: sse42
        0x400ba4:   pcmpestri       xmm1, xmm2, 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BA4, "f\x0f:a\xcaL")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BA4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BA4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BA4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BA4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA7, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA9, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BAA)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_31_symbolic(self):
        """Instruction PCMPESTRI_31
        Groups: sse42
        0x400ad8:   pcmpestri       xmm1, xmm2, 8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AD8, "f\x0f:a\xca\x08")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400AD8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AD8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AD8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AD8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400ADA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400ADB, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400ADC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400ADD, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ADE)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_32_symbolic(self):
        """Instruction PCMPESTRI_32
        Groups: sse42
        0x400b50:   pcmpestri       xmm1, xmm2, 0x30
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B50, "f\x0f:a\xca0")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B50
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B50)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B50)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B50, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B51, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B52, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B53, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B54, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B55, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B56)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_33_symbolic(self):
        """Instruction PCMPESTRI_33
        Groups: sse42
        0x400b44:   pcmpestri       xmm1, xmm2, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B44, "f\x0f:a\xca,")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B44
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B44)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B44)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B44, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B45, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B46, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B47, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B48, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B49, 8) == ord(","))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B4A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_34_symbolic(self):
        """Instruction PCMPESTRI_34
        Groups: sse42
        0x400bbc:   pcmpestri       xmm1, xmm2, 0x54
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BBC, "f\x0f:a\xcaT")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BBC
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BBC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BBC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BC0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BC1, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0x400BBC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BBD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BBE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BBF, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BC2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_35_symbolic(self):
        """Instruction PCMPESTRI_35
        Groups: sse42
        0x400ad2:   pcmpestri       xmm1, xmm2, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AD2, "f\x0f:a\xca\x05")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400AD2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AD2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AD2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AD2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD5, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400AD8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_36_symbolic(self):
        """Instruction PCMPESTRI_36
        Groups: sse42
        0x400b26:   pcmpestri       xmm1, xmm2, 0x21
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B26, "f\x0f:a\xca!")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B26
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B26)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B26)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B26, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B27, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B28, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B29, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B2A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B2B, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B2C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_37_symbolic(self):
        """Instruction PCMPESTRI_37
        Groups: sse42
        0x400bc8:   pcmpestri       xmm1, xmm2, 0x58
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BC8, "f\x0f:a\xcaX")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BC8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BC8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BC8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BC8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BC9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BCA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BCB, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BCC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BCD, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BCE)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_38_symbolic(self):
        """Instruction PCMPESTRI_38
        Groups: sse42
        0x400b98:   pcmpestri       xmm1, xmm2, 0x48
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B98, "f\x0f:a\xcaH")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B98
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B98)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B98)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B98, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B99, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B9A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B9B, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B9C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B9D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B9E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_39_symbolic(self):
        """Instruction PCMPESTRI_39
        Groups: sse42
        0x400b02:   pcmpestri       xmm1, xmm2, 0x15
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B02, "f\x0f:a\xca\x15")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B02
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B02)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B02)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B02, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B03, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B04, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B05, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B06, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B07, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B08)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_4_symbolic(self):
        """Instruction PCMPESTRI_4
        Groups: sse42
        0x400c22:   pcmpestri       xmm1, xmm2, 0x75
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C22, "f\x0f:a\xcau")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400C22
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C22)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C22)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C22, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C23, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C24, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C25, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C26, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C27, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C28)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_40_symbolic(self):
        """Instruction PCMPESTRI_40
        Groups: sse42
        0x400c3a:   pcmpestri       xmm1, xmm2, 0x7d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C3A, "f\x0f:a\xca}")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400C3A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C3A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C3A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C3A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C3B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C3C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C3D, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C3E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C3F, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C40)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_41_symbolic(self):
        """Instruction PCMPESTRI_41
        Groups: sse42
        0x400af6:   pcmpestri       xmm1, xmm2, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AF6, "f\x0f:a\xca\x11")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400AF6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AF6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AF6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AF6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AF9, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AFA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AFB, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400AFC)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_42_symbolic(self):
        """Instruction PCMPESTRI_42
        Groups: sse42
        0x400c28:   pcmpestri       xmm1, xmm2, 0x78
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C28, "f\x0f:a\xcax")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400C28
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C28)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C28)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C28, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C29, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C2A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C2B, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C2C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C2D, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C2E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_43_symbolic(self):
        """Instruction PCMPESTRI_43
        Groups: sse42
        0x400b62:   pcmpestri       xmm1, xmm2, 0x35
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B62, "f\x0f:a\xca5")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B62
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B62)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B62)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B62, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B63, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B64, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B65, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B66, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B67, 8) == ord("5"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B68)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_44_symbolic(self):
        """Instruction PCMPESTRI_44
        Groups: sse42
        0x400baa:   pcmpestri       xmm1, xmm2, 0x4d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BAA, "f\x0f:a\xcaM")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BAA
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BAA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BAA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BAA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAD, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAF, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BB0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_45_symbolic(self):
        """Instruction PCMPESTRI_45
        Groups: sse42
        0x400b68:   pcmpestri       xmm1, xmm2, 0x38
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B68, "f\x0f:a\xca8")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B68
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B68)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B68)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B68, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B69, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B6A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B6B, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B6C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B6D, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B6E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_46_symbolic(self):
        """Instruction PCMPESTRI_46
        Groups: sse42
        0x400c16:   pcmpestri       xmm1, xmm2, 0x71
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C16, "f\x0f:a\xcaq")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400C16
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400C16)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400C16)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C16, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C17, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400C18, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400C19, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400C1A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400C1B, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400C1C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_47_symbolic(self):
        """Instruction PCMPESTRI_47
        Groups: sse42
        0x400acc:   pcmpestri       xmm1, xmm2, 4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400ACC, "f\x0f:a\xca\x04")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ACC
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400ACC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400ACC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ACC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400ACD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400ACE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400ACF, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AD1, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400AD2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_48_symbolic(self):
        """Instruction PCMPESTRI_48
        Groups: sse42
        0x400b92:   pcmpestri       xmm1, xmm2, 0x45
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B92, "f\x0f:a\xcaE")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B92
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B92)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B92)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B92, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B93, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B94, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B95, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B96, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B97, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B98)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_49_symbolic(self):
        """Instruction PCMPESTRI_49
        Groups: sse42
        0x400afc:   pcmpestri       xmm1, xmm2, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AFC, "f\x0f:a\xca\x14")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400AFC
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AFC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AFC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B00, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B01, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0x400AFC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AFD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AFE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AFF, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B02)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_5_symbolic(self):
        """Instruction PCMPESTRI_5
        Groups: sse42
        0x400be6:   pcmpestri       xmm1, xmm2, 0x61
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BE6, "f\x0f:a\xcaa")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BE6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BE6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BE6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BE6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BE9, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BEA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BEB, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BEC)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_50_symbolic(self):
        """Instruction PCMPESTRI_50
        Groups: sse42
        0x400b9e:   pcmpestri       xmm1, xmm2, 0x49
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B9E, "f\x0f:a\xcaI")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B9E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B9E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B9E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BA0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA1, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BA3, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x400B9E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B9F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BA4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_51_symbolic(self):
        """Instruction PCMPESTRI_51
        Groups: sse42
        0x400ac0:   pcmpestri       xmm1, xmm2, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AC0, "f\x0f:a\xca\x00")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400AC0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AC0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AC0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AC0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC3, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AC5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400AC6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_52_symbolic(self):
        """Instruction PCMPESTRI_52
        Groups: sse42
        0x400b74:   pcmpestri       xmm1, xmm2, 0x3c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B74, "f\x0f:a\xca<")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B74
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B74)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B74)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B74, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B75, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B76, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B77, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B78, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B79, 8) == ord("<"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B7A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_53_symbolic(self):
        """Instruction PCMPESTRI_53
        Groups: sse42
        0x400bce:   pcmpestri       xmm1, xmm2, 0x59
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BCE, "f\x0f:a\xcaY")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BCE
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BCE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BCE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BCE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BCF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD1, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD3, 8) == ord("Y"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BD4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_54_symbolic(self):
        """Instruction PCMPESTRI_54
        Groups: sse42
        0x400b56:   pcmpestri       xmm1, xmm2, 0x31
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B56, "f\x0f:a\xca1")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B56
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B56)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B56)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B56, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B57, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B58, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B59, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B5A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B5B, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B5C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_55_symbolic(self):
        """Instruction PCMPESTRI_55
        Groups: sse42
        0x400b7a:   pcmpestri       xmm1, xmm2, 0x3d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B7A, "f\x0f:a\xca=")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B7A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B7A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B7A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B7A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B7B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B7C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B7D, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B7E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B7F, 8) == ord("="))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B80)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_56_symbolic(self):
        """Instruction PCMPESTRI_56
        Groups: sse42
        0x400b5c:   pcmpestri       xmm1, xmm2, 0x34
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B5C, "f\x0f:a\xca4")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B5C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B5C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B5C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B60, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B61, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x400B5C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B5D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B5E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B5F, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B62)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_57_symbolic(self):
        """Instruction PCMPESTRI_57
        Groups: sse42
        0x400ade:   pcmpestri       xmm1, xmm2, 9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400ADE, "f\x0f:a\xca\t")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ADE
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400ADE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400ADE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AE0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE1, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AE3, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.read_int(0x400ADE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400ADF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400AE4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_58_symbolic(self):
        """Instruction PCMPESTRI_58
        Groups: sse42
        0x400b3e:   pcmpestri       xmm1, xmm2, 0x29
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B3E, "f\x0f:a\xca)")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B3E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B3E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B3E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B40, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B41, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B42, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B43, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0x400B3E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B3F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B44)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_59_symbolic(self):
        """Instruction PCMPESTRI_59
        Groups: sse42
        0x400bb0:   pcmpestri       xmm1, xmm2, 0x50
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BB0, "f\x0f:a\xcaP")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BB0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BB0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BB0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BB0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB3, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB5, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BB6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_6_symbolic(self):
        """Instruction PCMPESTRI_6
        Groups: sse42
        0x400b0e:   pcmpestri       xmm1, xmm2, 0x19
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B0E, "f\x0f:a\xca\x19")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B0E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B0E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B0E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B0E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B0F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B10, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B11, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B12, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B13, 8) == ord("\x19"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B14)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_60_symbolic(self):
        """Instruction PCMPESTRI_60
        Groups: sse42
        0x400b1a:   pcmpestri       xmm1, xmm2, 0x1d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B1A, "f\x0f:a\xca\x1d")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400B1A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B1A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B1A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B1A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B1B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B1C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B1D, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B1E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B1F, 8) == ord("\x1d"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400B20)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_61_symbolic(self):
        """Instruction PCMPESTRI_61
        Groups: sse42
        0x400bf2:   pcmpestri       xmm1, xmm2, 0x65
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BF2, "f\x0f:a\xcae")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BF2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BF2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BF2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BF2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF5, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF7, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BF8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_62_symbolic(self):
        """Instruction PCMPESTRI_62
        Groups: sse42
        0x400bd4:   pcmpestri       xmm1, xmm2, 0x5c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BD4, "f\x0f:a\xca\\")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BD4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BD4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BD4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BD4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD7, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BD9, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BDA)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_63_symbolic(self):
        """Instruction PCMPESTRI_63
        Groups: sse42
        0x400bf8:   pcmpestri       xmm1, xmm2, 0x68
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BF8, "f\x0f:a\xcah")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400BF8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BF8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BF8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BF8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BF9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BFA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BFB, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BFC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BFD, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400BFE)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_64_symbolic(self):
        """Instruction PCMPESTRI_64
        Groups: sse42
        0x400bc2:   pcmpestri       xmm1, xmm2, 0x55
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BC2, "f\x0f:a\xcaU")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400BC2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400BC2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400BC2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BC2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BC3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BC4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400BC5, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400BC6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400BC7, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400BC8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_7_symbolic(self):
        """Instruction PCMPESTRI_7
        Groups: sse42
        0x400b8c:   pcmpestri       xmm1, xmm2, 0x44
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B8C, "f\x0f:a\xcaD")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B8C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B8C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B8C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B8C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B8D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B8E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B8F, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B90, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B91, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B92)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_8_symbolic(self):
        """Instruction PCMPESTRI_8
        Groups: sse42
        0x400aea:   pcmpestri       xmm1, xmm2, 0xd
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AEA, "f\x0f:a\xca\r")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400AEA
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AEA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AEA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AEA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AEB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AEC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AED, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400AEE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AEF, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400AF0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRI_9_symbolic(self):
        """Instruction PCMPESTRI_9
        Groups: sse42
        0x400b32:   pcmpestri       xmm1, xmm2, 0x25
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B32, "f\x0f:a\xca%")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400B32
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400B32)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400B32)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B32, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B33, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400B34, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400B35, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400B36, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400B37, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400B38)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_1_symbolic(self):
        """Instruction PCMPESTRM_1
        Groups: sse42
        0x4009d0:   pcmpestrm       xmm1, xmm2, 0x38
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009D0, "f\x0f:`\xca8")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009D0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009D0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009D0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009D0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D3, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D5, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009D6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_10_symbolic(self):
        """Instruction PCMPESTRM_10
        Groups: sse42
        0x4009ac:   pcmpestrm       xmm1, xmm2, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009AC, "f\x0f:`\xca,")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009AC
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009AC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009AC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009AC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009AD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009AE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009AF, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B1, 8) == ord(","))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009B2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_11_symbolic(self):
        """Instruction PCMPESTRM_11
        Groups: sse42
        0x400a24:   pcmpestrm       xmm1, xmm2, 0x54
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A24, "f\x0f:`\xcaT")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A24
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A24)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A24)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A24, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A25, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A26, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A27, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A28, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A29, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A2A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_12_symbolic(self):
        """Instruction PCMPESTRM_12
        Groups: sse42
        0x4009f4:   pcmpestrm       xmm1, xmm2, 0x44
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009F4, "f\x0f:`\xcaD")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009F4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009F4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009F4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009F4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F7, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F9, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009FA)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_13_symbolic(self):
        """Instruction PCMPESTRM_13
        Groups: sse42
        0x400a1e:   pcmpestrm       xmm1, xmm2, 0x51
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A1E, "f\x0f:`\xcaQ")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A1E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A1E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A1E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A20, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A21, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A22, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A23, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x400A1E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A1F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A24)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_14_symbolic(self):
        """Instruction PCMPESTRM_14
        Groups: sse42
        0x400a7e:   pcmpestrm       xmm1, xmm2, 0x71
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A7E, "f\x0f:`\xcaq")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A7E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A7E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A7E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A80, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A81, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A82, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A83, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x400A7E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A7F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A84)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_15_symbolic(self):
        """Instruction PCMPESTRM_15
        Groups: sse42
        0x400994:   pcmpestrm       xmm1, xmm2, 0x24
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400994, "f\x0f:`\xca$")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400994
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400994)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400994)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400994, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400995, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400996, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400997, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400998, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400999, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40099A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_16_symbolic(self):
        """Instruction PCMPESTRM_16
        Groups: sse42
        0x400934:   pcmpestrm       xmm1, xmm2, 4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400934, "f\x0f:`\xca\x04")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400934
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400934)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400934)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400934, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400935, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400936, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400937, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400938, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400939, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40093A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_17_symbolic(self):
        """Instruction PCMPESTRM_17
        Groups: sse42
        0x400a9c:   pcmpestrm       xmm1, xmm2, 0x7c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A9C, "f\x0f:`\xca|")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A9C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A9C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A9C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AA0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA1, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x400A9C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A9D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A9E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A9F, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400AA2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_18_symbolic(self):
        """Instruction PCMPESTRM_18
        Groups: sse42
        0x40092e:   pcmpestrm       xmm1, xmm2, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40092E, "f\x0f:`\xca\x01")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40092E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40092E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40092E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40092E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40092F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400930, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400931, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400932, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400933, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400934)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_19_symbolic(self):
        """Instruction PCMPESTRM_19
        Groups: sse42
        0x4009a6:   pcmpestrm       xmm1, xmm2, 0x29
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009A6, "f\x0f:`\xca)")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009A6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009A6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009A6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009A6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A9, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009AA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009AB, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009AC)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_2_symbolic(self):
        """Instruction PCMPESTRM_2
        Groups: sse42
        0x400a54:   pcmpestrm       xmm1, xmm2, 0x64
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A54, "f\x0f:`\xcad")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A54
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A54)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A54)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A54, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A55, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A56, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A57, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A58, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A59, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A5A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_20_symbolic(self):
        """Instruction PCMPESTRM_20
        Groups: sse42
        0x400a66:   pcmpestrm       xmm1, xmm2, 0x69
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A66, "f\x0f:`\xcai")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A66
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A66)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A66)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A66, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A67, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A68, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A69, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A6A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A6B, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A6C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_21_symbolic(self):
        """Instruction PCMPESTRM_21
        Groups: sse42
        0x400958:   pcmpestrm       xmm1, xmm2, 0x10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400958, "f\x0f:`\xca\x10")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400958
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400958)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400958)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400958, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400959, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40095A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40095B, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40095C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40095D, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40095E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_22_symbolic(self):
        """Instruction PCMPESTRM_22
        Groups: sse42
        0x40095e:   pcmpestrm       xmm1, xmm2, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40095E, "f\x0f:`\xca\x11")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40095E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40095E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40095E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400960, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400961, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400962, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400963, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x40095E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40095F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400964)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_23_symbolic(self):
        """Instruction PCMPESTRM_23
        Groups: sse42
        0x400976:   pcmpestrm       xmm1, xmm2, 0x19
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400976, "f\x0f:`\xca\x19")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400976
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400976)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400976)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400976, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400977, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400978, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400979, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40097A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40097B, 8) == ord("\x19"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40097C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_24_symbolic(self):
        """Instruction PCMPESTRM_24
        Groups: sse42
        0x400a8a:   pcmpestrm       xmm1, xmm2, 0x75
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A8A, "f\x0f:`\xcau")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A8A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A8A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A8A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A8A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A8B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A8C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A8D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A8E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A8F, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A90)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_25_symbolic(self):
        """Instruction PCMPESTRM_25
        Groups: sse42
        0x400a12:   pcmpestrm       xmm1, xmm2, 0x4d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A12, "f\x0f:`\xcaM")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A12
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A12)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A12)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A12, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A13, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A14, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A15, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A16, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A17, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A18)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_26_symbolic(self):
        """Instruction PCMPESTRM_26
        Groups: sse42
        0x40093a:   pcmpestrm       xmm1, xmm2, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40093A, "f\x0f:`\xca\x05")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40093A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40093A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40093A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40093A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40093B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40093C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40093D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40093E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40093F, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400940)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_27_symbolic(self):
        """Instruction PCMPESTRM_27
        Groups: sse42
        0x400a30:   pcmpestrm       xmm1, xmm2, 0x58
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A30, "f\x0f:`\xcaX")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A30
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A30)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A30)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A30, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A31, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A32, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A33, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A34, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A35, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A36)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_28_symbolic(self):
        """Instruction PCMPESTRM_28
        Groups: sse42
        0x4009ca:   pcmpestrm       xmm1, xmm2, 0x35
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009CA, "f\x0f:`\xca5")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009CA
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009CA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009CA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009CA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009CB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009CC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009CD, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009CE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009CF, 8) == ord("5"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009D0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_29_symbolic(self):
        """Instruction PCMPESTRM_29
        Groups: sse42
        0x400a3c:   pcmpestrm       xmm1, xmm2, 0x5c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A3C, "f\x0f:`\xca\\")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A3C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A3C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A3C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A40, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A41, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.read_int(0x400A3C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A3D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A3E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A3F, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A42)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_3_symbolic(self):
        """Instruction PCMPESTRM_3
        Groups: sse42
        0x400a18:   pcmpestrm       xmm1, xmm2, 0x50
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A18, "f\x0f:`\xcaP")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A18
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A18)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A18)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A18, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A19, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A1A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A1B, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A1C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A1D, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A1E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_30_symbolic(self):
        """Instruction PCMPESTRM_30
        Groups: sse42
        0x40098e:   pcmpestrm       xmm1, xmm2, 0x21
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40098E, "f\x0f:`\xca!")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40098E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40098E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40098E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40098E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40098F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400990, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400991, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400992, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400993, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400994)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_31_symbolic(self):
        """Instruction PCMPESTRM_31
        Groups: sse42
        0x400a96:   pcmpestrm       xmm1, xmm2, 0x79
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A96, "f\x0f:`\xcay")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A96
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A96)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A96)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A96, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A97, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A98, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A99, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A9A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A9B, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A9C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_32_symbolic(self):
        """Instruction PCMPESTRM_32
        Groups: sse42
        0x400a90:   pcmpestrm       xmm1, xmm2, 0x78
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A90, "f\x0f:`\xcax")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A90
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A90)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A90)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A90, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A91, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A92, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A93, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A94, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A95, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A96)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_33_symbolic(self):
        """Instruction PCMPESTRM_33
        Groups: sse42
        0x400a06:   pcmpestrm       xmm1, xmm2, 0x49
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A06, "f\x0f:`\xcaI")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A06
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A06)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A06)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A06, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A07, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A08, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A09, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A0A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A0B, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A0C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_34_symbolic(self):
        """Instruction PCMPESTRM_34
        Groups: sse42
        0x400928:   pcmpestrm       xmm1, xmm2, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400928, "f\x0f:`\xca\x00")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400928
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400928)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400928)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400928, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400929, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40092A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40092B, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40092C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40092D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40092E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_35_symbolic(self):
        """Instruction PCMPESTRM_35
        Groups: sse42
        0x400a84:   pcmpestrm       xmm1, xmm2, 0x74
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A84, "f\x0f:`\xcat")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A84
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A84)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A84)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A84, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A85, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A86, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A87, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A88, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A89, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A8A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_36_symbolic(self):
        """Instruction PCMPESTRM_36
        Groups: sse42
        0x400a72:   pcmpestrm       xmm1, xmm2, 0x6d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A72, "f\x0f:`\xcam")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A72
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A72)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A72)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A72, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A73, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A74, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A75, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A76, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A77, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A78)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_37_symbolic(self):
        """Instruction PCMPESTRM_37
        Groups: sse42
        0x400946:   pcmpestrm       xmm1, xmm2, 9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400946, "f\x0f:`\xca\t")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400946
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400946)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400946)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400946, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400947, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400948, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400949, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40094A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40094B, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40094C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_38_symbolic(self):
        """Instruction PCMPESTRM_38
        Groups: sse42
        0x400940:   pcmpestrm       xmm1, xmm2, 8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400940, "f\x0f:`\xca\x08")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400940
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400940)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400940)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400940, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400941, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400942, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400943, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400944, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400945, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400946)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_39_symbolic(self):
        """Instruction PCMPESTRM_39
        Groups: sse42
        0x400aa2:   pcmpestrm       xmm1, xmm2, 0x7d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA2, "f\x0f:`\xca}")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400AA2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400AA2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400AA2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AA2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA5, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA7, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400AA8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_4_symbolic(self):
        """Instruction PCMPESTRM_4
        Groups: sse42
        0x40097c:   pcmpestrm       xmm1, xmm2, 0x1c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40097C, "f\x0f:`\xca\x1c")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40097C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40097C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40097C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400980, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400981, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.read_int(0x40097C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40097D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40097E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40097F, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400982)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_40_symbolic(self):
        """Instruction PCMPESTRM_40
        Groups: sse42
        0x400a48:   pcmpestrm       xmm1, xmm2, 0x60
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A48, "f\x0f:`\xca`")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A48
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A48)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A48)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A48, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A49, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A4A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A4B, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A4C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A4D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A4E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_41_symbolic(self):
        """Instruction PCMPESTRM_41
        Groups: sse42
        0x400952:   pcmpestrm       xmm1, xmm2, 0xd
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400952, "f\x0f:`\xca\r")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400952
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400952)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400952)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400952, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400953, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400954, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400955, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400956, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400957, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400958)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_42_symbolic(self):
        """Instruction PCMPESTRM_42
        Groups: sse42
        0x40094c:   pcmpestrm       xmm1, xmm2, 0xc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40094C, "f\x0f:`\xca\x0c")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40094C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40094C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40094C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40094C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40094D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40094E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40094F, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400950, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400951, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400952)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_43_symbolic(self):
        """Instruction PCMPESTRM_43
        Groups: sse42
        0x400a0c:   pcmpestrm       xmm1, xmm2, 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A0C, "f\x0f:`\xcaL")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A0C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A0C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A0C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A0C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A0D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A0E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A0F, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A10, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A11, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A12)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_44_symbolic(self):
        """Instruction PCMPESTRM_44
        Groups: sse42
        0x400964:   pcmpestrm       xmm1, xmm2, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400964, "f\x0f:`\xca\x14")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400964
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400964)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400964)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400964, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400965, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400966, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400967, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400968, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400969, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40096A)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_45_symbolic(self):
        """Instruction PCMPESTRM_45
        Groups: sse42
        0x400a36:   pcmpestrm       xmm1, xmm2, 0x59
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A36, "f\x0f:`\xcaY")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A36
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A36)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A36)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A36, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A37, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A38, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A39, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A3A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A3B, 8) == ord("Y"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A3C)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_46_symbolic(self):
        """Instruction PCMPESTRM_46
        Groups: sse42
        0x40099a:   pcmpestrm       xmm1, xmm2, 0x25
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40099A, "f\x0f:`\xca%")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40099A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40099A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40099A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40099A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40099B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40099C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40099D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40099E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40099F, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009A0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_47_symbolic(self):
        """Instruction PCMPESTRM_47
        Groups: sse42
        0x400988:   pcmpestrm       xmm1, xmm2, 0x20
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400988, "f\x0f:`\xca ")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400988
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400988)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400988)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400988, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400989, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40098A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40098B, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40098C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40098D, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40098E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_48_symbolic(self):
        """Instruction PCMPESTRM_48
        Groups: sse42
        0x400a5a:   pcmpestrm       xmm1, xmm2, 0x65
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A5A, "f\x0f:`\xcae")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A5A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A5A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A5A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A5A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A5B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A5C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A5D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A5E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A5F, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A60)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_49_symbolic(self):
        """Instruction PCMPESTRM_49
        Groups: sse42
        0x40096a:   pcmpestrm       xmm1, xmm2, 0x15
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40096A, "f\x0f:`\xca\x15")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40096A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40096A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40096A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40096A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40096B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40096C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40096D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40096E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40096F, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400970)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_5_symbolic(self):
        """Instruction PCMPESTRM_5
        Groups: sse42
        0x4009b2:   pcmpestrm       xmm1, xmm2, 0x2d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009B2, "f\x0f:`\xca-")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009B2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009B2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009B2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009B2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B5, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B7, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009B8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_50_symbolic(self):
        """Instruction PCMPESTRM_50
        Groups: sse42
        0x400a60:   pcmpestrm       xmm1, xmm2, 0x68
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A60, "f\x0f:`\xcah")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A60
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A60)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A60)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A60, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A61, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A62, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A63, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A64, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A65, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A66)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_51_symbolic(self):
        """Instruction PCMPESTRM_51
        Groups: sse42
        0x4009be:   pcmpestrm       xmm1, xmm2, 0x31
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009BE, "f\x0f:`\xca1")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009BE
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009BE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009BE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009C0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C1, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C3, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x4009BE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009BF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009C4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_52_symbolic(self):
        """Instruction PCMPESTRM_52
        Groups: sse42
        0x4009e2:   pcmpestrm       xmm1, xmm2, 0x3d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009E2, "f\x0f:`\xca=")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009E2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009E2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009E2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009E2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009E3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009E4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009E5, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009E6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009E7, 8) == ord("="))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009E8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_53_symbolic(self):
        """Instruction PCMPESTRM_53
        Groups: sse42
        0x4009d6:   pcmpestrm       xmm1, xmm2, 0x39
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009D6, "f\x0f:`\xca9")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009D6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009D6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009D6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009D6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009D9, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009DA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009DB, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009DC)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_54_symbolic(self):
        """Instruction PCMPESTRM_54
        Groups: sse42
        0x400a6c:   pcmpestrm       xmm1, xmm2, 0x6c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A6C, "f\x0f:`\xcal")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A6C
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A6C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A6C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A6C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A6D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A6E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A6F, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A70, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A71, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A72)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_55_symbolic(self):
        """Instruction PCMPESTRM_55
        Groups: sse42
        0x4009c4:   pcmpestrm       xmm1, xmm2, 0x34
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009C4, "f\x0f:`\xca4")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009C4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009C4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009C4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009C4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C7, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009C9, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009CA)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_56_symbolic(self):
        """Instruction PCMPESTRM_56
        Groups: sse42
        0x400a00:   pcmpestrm       xmm1, xmm2, 0x48
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A00, "f\x0f:`\xcaH")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A00
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A00)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A00)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A00, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A01, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A02, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A03, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A04, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A05, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A06)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_57_symbolic(self):
        """Instruction PCMPESTRM_57
        Groups: sse42
        0x4009e8:   pcmpestrm       xmm1, xmm2, 0x40
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009E8, "f\x0f:`\xca@")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009E8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009E8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009E8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009E8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009E9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009EA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009EB, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009EC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009ED, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009EE)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_58_symbolic(self):
        """Instruction PCMPESTRM_58
        Groups: sse42
        0x4009b8:   pcmpestrm       xmm1, xmm2, 0x30
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009B8, "f\x0f:`\xca0")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009B8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009B8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009B8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009B8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009B9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009BA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009BB, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009BC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009BD, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009BE)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_59_symbolic(self):
        """Instruction PCMPESTRM_59
        Groups: sse42
        0x4009ee:   pcmpestrm       xmm1, xmm2, 0x41
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009EE, "f\x0f:`\xcaA")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009EE
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009EE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009EE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009EE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009EF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F1, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009F3, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009F4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_6_symbolic(self):
        """Instruction PCMPESTRM_6
        Groups: sse42
        0x4009a0:   pcmpestrm       xmm1, xmm2, 0x28
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009A0, "f\x0f:`\xca(")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009A0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009A0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009A0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009A0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A3, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009A5, 8) == ord("("))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009A6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_60_symbolic(self):
        """Instruction PCMPESTRM_60
        Groups: sse42
        0x400970:   pcmpestrm       xmm1, xmm2, 0x18
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400970, "f\x0f:`\xca\x18")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400970
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400970)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400970)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400970, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400971, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400972, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400973, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400974, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400975, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400976)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_61_symbolic(self):
        """Instruction PCMPESTRM_61
        Groups: sse42
        0x400a78:   pcmpestrm       xmm1, xmm2, 0x70
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A78, "f\x0f:`\xcap")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A78
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A78)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A78)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A78, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A79, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A7A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A7B, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A7C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A7D, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A7E)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_62_symbolic(self):
        """Instruction PCMPESTRM_62
        Groups: sse42
        0x400a2a:   pcmpestrm       xmm1, xmm2, 0x55
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A2A, "f\x0f:`\xcaU")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A2A
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A2A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A2A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A2A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A2B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A2C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A2D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A2E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A2F, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A30)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_63_symbolic(self):
        """Instruction PCMPESTRM_63
        Groups: sse42
        0x400a42:   pcmpestrm       xmm1, xmm2, 0x5d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A42, "f\x0f:`\xca]")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400A42
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A42)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A42)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A42, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A43, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A44, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A45, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A46, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A47, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400A48)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_64_symbolic(self):
        """Instruction PCMPESTRM_64
        Groups: sse42
        0x400a4e:   pcmpestrm       xmm1, xmm2, 0x61
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400A4E, "f\x0f:`\xcaa")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400A4E
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400A4E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400A4E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400A4E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A4F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400A50, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400A51, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400A52, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400A53, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A54)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_7_symbolic(self):
        """Instruction PCMPESTRM_7
        Groups: sse42
        0x4009dc:   pcmpestrm       xmm1, xmm2, 0x3c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009DC, "f\x0f:`\xca<")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009DC
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009DC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009DC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009E0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009E1, 8) == ord("<"))
        condition = Operators.AND(condition, cpu.read_int(0x4009DC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009DD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009DE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009DF, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009E2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_8_symbolic(self):
        """Instruction PCMPESTRM_8
        Groups: sse42
        0x4009fa:   pcmpestrm       xmm1, xmm2, 0x45
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4009FA, "f\x0f:`\xcaE")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009FA
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4009FA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4009FA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009FA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009FB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4009FC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4009FD, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4009FE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4009FF, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400A00)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPESTRM_9_symbolic(self):
        """Instruction PCMPESTRM_9
        Groups: sse42
        0x400982:   pcmpestrm       xmm1, xmm2, 0x1d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400982, "f\x0f:`\xca\x1d")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400982
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400982)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400982)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400982, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400983, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400984, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400985, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400986, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400987, 8) == ord("\x1d"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400988)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_1_symbolic(self):
        """Instruction PCMPISTRI_1
        Groups: sse42
        0x400746:   pcmpistri       xmm1, xmm2, 0x6d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400746, "f\x0f:c\xcam")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400746
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400746)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400746)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400746, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400747, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400748, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400749, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40074A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40074B, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40074C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_10_symbolic(self):
        """Instruction PCMPISTRI_10
        Groups: sse42
        0x400650:   pcmpistri       xmm1, xmm2, 0x1c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400650, "f\x0f:c\xca\x1c")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400650
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400650)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400650)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400650, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400651, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400652, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400653, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400654, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400655, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400656)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_11_symbolic(self):
        """Instruction PCMPISTRI_11
        Groups: sse42
        0x400668:   pcmpistri       xmm1, xmm2, 0x24
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400668, "f\x0f:c\xca$")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400668
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400668)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400668)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400668, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400669, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40066A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40066B, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40066C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40066D, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40066E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_12_symbolic(self):
        """Instruction PCMPISTRI_12
        Groups: sse42
        0x400698:   pcmpistri       xmm1, xmm2, 0x34
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400698, "f\x0f:c\xca4")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400698
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400698)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400698)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400698, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400699, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40069A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40069B, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40069C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40069D, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40069E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_13_symbolic(self):
        """Instruction PCMPISTRI_13
        Groups: sse42
        0x4006c8:   pcmpistri       xmm1, xmm2, 0x44
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006C8, "f\x0f:c\xcaD")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006C8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006C8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006C8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006C8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006C9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006CA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006CB, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006CC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006CD, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006CE)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_14_symbolic(self):
        """Instruction PCMPISTRI_14
        Groups: sse42
        0x4006bc:   pcmpistri       xmm1, xmm2, 0x40
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006BC, "f\x0f:c\xca@")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006BC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006BC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006BC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006C0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006C1, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x4006BC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006BD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006BE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006BF, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006C2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_15_symbolic(self):
        """Instruction PCMPISTRI_15
        Groups: sse42
        0x40068c:   pcmpistri       xmm1, xmm2, 0x30
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40068C, "f\x0f:c\xca0")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40068C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40068C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40068C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40068C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40068D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40068E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40068F, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400690, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400691, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400692)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_16_symbolic(self):
        """Instruction PCMPISTRI_16
        Groups: sse42
        0x40062c:   pcmpistri       xmm1, xmm2, 0x10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40062C, "f\x0f:c\xca\x10")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40062C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40062C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40062C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40062C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40062D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40062E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40062F, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400630, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400631, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400632)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_17_symbolic(self):
        """Instruction PCMPISTRI_17
        Groups: sse42
        0x400764:   pcmpistri       xmm1, xmm2, 0x78
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400764, "f\x0f:c\xcax")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400764
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400764)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400764)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400764, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400765, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400766, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400767, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400768, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400769, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40076A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_18_symbolic(self):
        """Instruction PCMPISTRI_18
        Groups: sse42
        0x4005fc:   pcmpistri       xmm1, xmm2, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4005FC, "f\x0f:c\xca\x00")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x82)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4005FC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4005FC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4005FC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400600, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400601, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4005FC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4005FD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4005FE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4005FF, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400602)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_19_symbolic(self):
        """Instruction PCMPISTRI_19
        Groups: sse42
        0x4006ce:   pcmpistri       xmm1, xmm2, 0x45
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006CE, "f\x0f:c\xcaE")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006CE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006CE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006CE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006CE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006CF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D1, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D3, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006D4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_2_symbolic(self):
        """Instruction PCMPISTRI_2
        Groups: sse42
        0x400704:   pcmpistri       xmm1, xmm2, 0x58
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400704, "f\x0f:c\xcaX")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400704
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400704)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400704)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400704, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400705, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400706, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400707, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400708, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400709, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40070A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_20_symbolic(self):
        """Instruction PCMPISTRI_20
        Groups: sse42
        0x4006f8:   pcmpistri       xmm1, xmm2, 0x54
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006F8, "f\x0f:c\xcaT")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006F8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006F8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006F8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006F8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006FA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006FB, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006FC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006FD, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006FE)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_21_symbolic(self):
        """Instruction PCMPISTRI_21
        Groups: sse42
        0x4006c2:   pcmpistri       xmm1, xmm2, 0x41
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006C2, "f\x0f:c\xcaA")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006C2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006C2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006C2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006C2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006C3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006C4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006C5, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006C6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006C7, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006C8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_22_symbolic(self):
        """Instruction PCMPISTRI_22
        Groups: sse42
        0x40069e:   pcmpistri       xmm1, xmm2, 0x35
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40069E, "f\x0f:c\xca5")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40069E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40069E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40069E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006A0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A1, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A3, 8) == ord("5"))
        condition = Operators.AND(condition, cpu.read_int(0x40069E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40069F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006A4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_23_symbolic(self):
        """Instruction PCMPISTRI_23
        Groups: sse42
        0x4006b6:   pcmpistri       xmm1, xmm2, 0x3d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006B6, "f\x0f:c\xca=")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006B6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006B6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006B6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006B6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B9, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006BA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006BB, 8) == ord("="))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006BC)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_24_symbolic(self):
        """Instruction PCMPISTRI_24
        Groups: sse42
        0x400620:   pcmpistri       xmm1, xmm2, 0xc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400620, "f\x0f:c\xca\x0c")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400620
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400620)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400620)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400620, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400621, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400622, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400623, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400624, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400625, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400626)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_25_symbolic(self):
        """Instruction PCMPISTRI_25
        Groups: sse42
        0x400710:   pcmpistri       xmm1, xmm2, 0x5c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400710, "f\x0f:c\xca\\")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400710
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400710)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400710)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400710, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400711, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400712, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400713, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400714, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400715, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400716)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_26_symbolic(self):
        """Instruction PCMPISTRI_26
        Groups: sse42
        0x4006b0:   pcmpistri       xmm1, xmm2, 0x3c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006B0, "f\x0f:c\xca<")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006B0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006B0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006B0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006B0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B3, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006B5, 8) == ord("<"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006B6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_27_symbolic(self):
        """Instruction PCMPISTRI_27
        Groups: sse42
        0x400740:   pcmpistri       xmm1, xmm2, 0x6c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400740, "f\x0f:c\xcal")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400740
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400740)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400740)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400740, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400741, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400742, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400743, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400744, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400745, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400746)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_28_symbolic(self):
        """Instruction PCMPISTRI_28
        Groups: sse42
        0x400692:   pcmpistri       xmm1, xmm2, 0x31
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400692, "f\x0f:c\xca1")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400692
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400692)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400692)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400692, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400693, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400694, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400695, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400696, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400697, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400698)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_29_symbolic(self):
        """Instruction PCMPISTRI_29
        Groups: sse42
        0x40064a:   pcmpistri       xmm1, xmm2, 0x19
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40064A, "f\x0f:c\xca\x19")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40064A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40064A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40064A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40064A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40064B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40064C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40064D, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40064E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40064F, 8) == ord("\x19"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400650)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_3_symbolic(self):
        """Instruction PCMPISTRI_3
        Groups: sse42
        0x400728:   pcmpistri       xmm1, xmm2, 0x64
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400728, "f\x0f:c\xcad")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400728
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400728)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400728)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400728, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400729, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40072A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40072B, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40072C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40072D, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40072E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_30_symbolic(self):
        """Instruction PCMPISTRI_30
        Groups: sse42
        0x40077c:   pcmpistri       xmm1, xmmword ptr [rbp - 0xa0], 0x1b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x400780, "\x8d`\xff\xff\xff\x1b")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE190)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE191)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE192)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE193)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE194)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE195)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE196)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE197)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE198)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE199)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE19A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE19B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE19C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE19D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE19E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE19F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        mem.write(0x40077C, "f\x0f:c")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40077C
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFE230)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40077C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "RBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "RBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40077C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400780, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x400781, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x400782, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x400783, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x400784, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x400785, 8) == ord("\x1b"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE190, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE191, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE192, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE193, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE194, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE195, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE196, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE197, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE198, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE199, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE19A, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE19B, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE19C, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE19D, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE19E, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE19F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x40077C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40077D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40077E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40077F, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400786)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFE230)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_31_symbolic(self):
        """Instruction PCMPISTRI_31
        Groups: sse42
        0x400626:   pcmpistri       xmm1, xmm2, 0xd
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400626, "f\x0f:c\xca\r")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400626
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400626)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400626)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400626, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400627, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400628, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400629, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40062A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40062B, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40062C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_32_symbolic(self):
        """Instruction PCMPISTRI_32
        Groups: sse42
        0x4006d4:   pcmpistri       xmm1, xmm2, 0x48
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D4, "f\x0f:c\xcaH")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006D4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006D4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006D4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006D4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D7, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D9, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006DA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_33_symbolic(self):
        """Instruction PCMPISTRI_33
        Groups: sse42
        0x400686:   pcmpistri       xmm1, xmm2, 0x2d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400686, "f\x0f:c\xca-")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400686
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400686)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400686)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400686, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400687, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400688, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400689, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40068A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40068B, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40068C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_34_symbolic(self):
        """Instruction PCMPISTRI_34
        Groups: sse42
        0x400770:   pcmpistri       xmm1, xmm2, 0x7c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400770, "f\x0f:c\xca|")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400770
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400770)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400770)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400770, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400771, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400772, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400773, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400774, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400775, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400776)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_35_symbolic(self):
        """Instruction PCMPISTRI_35
        Groups: sse42
        0x40071c:   pcmpistri       xmm1, xmm2, 0x60
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40071C, "f\x0f:c\xca`")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40071C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40071C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40071C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400720, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400721, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x40071C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40071D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40071E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40071F, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400722)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_36_symbolic(self):
        """Instruction PCMPISTRI_36
        Groups: sse42
        0x400776:   pcmpistri       xmm1, xmm2, 0x7d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400776, "f\x0f:c\xca}")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400776
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400776)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400776)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400776, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400777, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400778, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400779, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40077A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40077B, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40077C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_37_symbolic(self):
        """Instruction PCMPISTRI_37
        Groups: sse42
        0x400758:   pcmpistri       xmm1, xmm2, 0x74
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400758, "f\x0f:c\xcat")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400758
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400758)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400758)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400758, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400759, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40075A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40075B, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40075C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40075D, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40075E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_38_symbolic(self):
        """Instruction PCMPISTRI_38
        Groups: sse42
        0x400602:   pcmpistri       xmm1, xmm2, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400602, "f\x0f:c\xca\x01")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400602
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400602)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400602)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400602, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400603, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400604, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400605, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400606, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400607, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400608)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_39_symbolic(self):
        """Instruction PCMPISTRI_39
        Groups: sse42
        0x400608:   pcmpistri       xmm1, xmm2, 4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400608, "f\x0f:c\xca\x04")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400608
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400608)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400608)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400608, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400609, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40060A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40060B, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40060C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40060D, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40060E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_4_symbolic(self):
        """Instruction PCMPISTRI_4
        Groups: sse42
        0x400752:   pcmpistri       xmm1, xmm2, 0x71
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400752, "f\x0f:c\xcaq")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400752
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400752)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400752)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400752, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400753, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400754, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400755, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400756, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400757, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400758)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_40_symbolic(self):
        """Instruction PCMPISTRI_40
        Groups: sse42
        0x400638:   pcmpistri       xmm1, xmm2, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400638, "f\x0f:c\xca\x14")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400638
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400638)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400638)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400638, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400639, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40063A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40063B, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40063C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40063D, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40063E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_41_symbolic(self):
        """Instruction PCMPISTRI_41
        Groups: sse42
        0x40074c:   pcmpistri       xmm1, xmm2, 0x70
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40074C, "f\x0f:c\xcap")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40074C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40074C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40074C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40074C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40074D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40074E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40074F, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400750, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400751, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400752)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_42_symbolic(self):
        """Instruction PCMPISTRI_42
        Groups: sse42
        0x400734:   pcmpistri       xmm1, xmm2, 0x68
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400734, "f\x0f:c\xcah")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400734
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400734)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400734)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400734, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400735, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400736, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400737, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400738, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400739, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xF)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40073A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_43_symbolic(self):
        """Instruction PCMPISTRI_43
        Groups: sse42
        0x400644:   pcmpistri       xmm1, xmm2, 0x18
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400644, "f\x0f:c\xca\x18")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400644
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400644)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400644)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400644, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400645, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400646, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400647, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400648, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400649, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40064A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_44_symbolic(self):
        """Instruction PCMPISTRI_44
        Groups: sse42
        0x40065c:   pcmpistri       xmm1, xmm2, 0x20
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40065C, "f\x0f:c\xca ")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40065C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40065C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40065C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400660, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400661, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x40065C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40065D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40065E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40065F, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400662)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_45_symbolic(self):
        """Instruction PCMPISTRI_45
        Groups: sse42
        0x40061a:   pcmpistri       xmm1, xmm2, 9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40061A, "f\x0f:c\xca\t")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40061A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40061A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40061A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40061A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40061B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40061C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40061D, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40061E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40061F, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400620)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_46_symbolic(self):
        """Instruction PCMPISTRI_46
        Groups: sse42
        0x40073a:   pcmpistri       xmm1, xmm2, 0x69
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40073A, "f\x0f:c\xcai")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40073A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40073A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40073A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40073A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40073B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40073C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40073D, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40073E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40073F, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400740)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_47_symbolic(self):
        """Instruction PCMPISTRI_47
        Groups: sse42
        0x40070a:   pcmpistri       xmm1, xmm2, 0x59
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40070A, "f\x0f:c\xcaY")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40070A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40070A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40070A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40070A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40070B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40070C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40070D, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40070E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40070F, 8) == ord("Y"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400710)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_48_symbolic(self):
        """Instruction PCMPISTRI_48
        Groups: sse42
        0x4006aa:   pcmpistri       xmm1, xmm2, 0x39
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006AA, "f\x0f:c\xca9")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006AA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006AA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006AA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006AA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006AB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006AC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006AD, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006AE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006AF, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006B0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_49_symbolic(self):
        """Instruction PCMPISTRI_49
        Groups: sse42
        0x400716:   pcmpistri       xmm1, xmm2, 0x5d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400716, "f\x0f:c\xca]")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400716
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400716)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400716)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400716, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400717, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400718, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400719, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40071A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40071B, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40071C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_5_symbolic(self):
        """Instruction PCMPISTRI_5
        Groups: sse42
        0x40063e:   pcmpistri       xmm1, xmm2, 0x15
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40063E, "f\x0f:c\xca\x15")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40063E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40063E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40063E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400640, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400641, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400642, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400643, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.read_int(0x40063E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40063F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400644)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_50_symbolic(self):
        """Instruction PCMPISTRI_50
        Groups: sse42
        0x400656:   pcmpistri       xmm1, xmm2, 0x1d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400656, "f\x0f:c\xca\x1d")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400656
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400656)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400656)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400656, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400657, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400658, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400659, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40065A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40065B, 8) == ord("\x1d"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40065C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_51_symbolic(self):
        """Instruction PCMPISTRI_51
        Groups: sse42
        0x40072e:   pcmpistri       xmm1, xmm2, 0x65
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40072E, "f\x0f:c\xcae")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40072E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40072E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40072E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40072E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40072F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400730, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400731, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400732, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400733, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400734)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_52_symbolic(self):
        """Instruction PCMPISTRI_52
        Groups: sse42
        0x400680:   pcmpistri       xmm1, xmm2, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400680, "f\x0f:c\xca,")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400680
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400680)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400680)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400680, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400681, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400682, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400683, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400684, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400685, 8) == ord(","))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400686)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_53_symbolic(self):
        """Instruction PCMPISTRI_53
        Groups: sse42
        0x400674:   pcmpistri       xmm1, xmm2, 0x28
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400674, "f\x0f:c\xca(")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400674
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400674)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400674)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400674, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400675, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400676, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400677, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400678, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400679, 8) == ord("("))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40067A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_54_symbolic(self):
        """Instruction PCMPISTRI_54
        Groups: sse42
        0x40067a:   pcmpistri       xmm1, xmm2, 0x29
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40067A, "f\x0f:c\xca)")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40067A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40067A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40067A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40067A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40067B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40067C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40067D, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40067E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40067F, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400680)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_55_symbolic(self):
        """Instruction PCMPISTRI_55
        Groups: sse42
        0x400722:   pcmpistri       xmm1, xmm2, 0x61
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400722, "f\x0f:c\xcaa")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400722
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400722)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400722)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400722, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400723, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400724, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400725, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400726, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400727, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400728)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_56_symbolic(self):
        """Instruction PCMPISTRI_56
        Groups: sse42
        0x4006e6:   pcmpistri       xmm1, xmm2, 0x4d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006E6, "f\x0f:c\xcaM")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006E6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006E6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006E6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006E6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E9, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006EA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006EB, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006EC)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_57_symbolic(self):
        """Instruction PCMPISTRI_57
        Groups: sse42
        0x40076a:   pcmpistri       xmm1, xmm2, 0x79
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40076A, "f\x0f:c\xcay")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40076A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40076A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40076A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40076A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40076B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40076C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40076D, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x40076E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40076F, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400770)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_58_symbolic(self):
        """Instruction PCMPISTRI_58
        Groups: sse42
        0x4006ec:   pcmpistri       xmm1, xmm2, 0x50
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006EC, "f\x0f:c\xcaP")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006EC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006EC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006EC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006EC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006ED, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006EE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006EF, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F1, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006F2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_59_symbolic(self):
        """Instruction PCMPISTRI_59
        Groups: sse42
        0x400632:   pcmpistri       xmm1, xmm2, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400632, "f\x0f:c\xca\x11")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400632
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400632)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400632)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400632, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400633, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400634, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400635, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400636, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400637, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400638)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_6_symbolic(self):
        """Instruction PCMPISTRI_6
        Groups: sse42
        0x40066e:   pcmpistri       xmm1, xmm2, 0x25
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40066E, "f\x0f:c\xca%")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40066E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40066E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40066E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40066E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40066F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400670, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400671, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400672, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400673, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400674)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_60_symbolic(self):
        """Instruction PCMPISTRI_60
        Groups: sse42
        0x4006f2:   pcmpistri       xmm1, xmm2, 0x51
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006F2, "f\x0f:c\xcaQ")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006F2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006F2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006F2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006F2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F5, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006F7, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006F8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_61_symbolic(self):
        """Instruction PCMPISTRI_61
        Groups: sse42
        0x400614:   pcmpistri       xmm1, xmm2, 8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400614, "f\x0f:c\xca\x08")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400614
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400614)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400614)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400614, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400615, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400616, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400617, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400618, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400619, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40061A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_62_symbolic(self):
        """Instruction PCMPISTRI_62
        Groups: sse42
        0x4006da:   pcmpistri       xmm1, xmm2, 0x49
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006DA, "f\x0f:c\xcaI")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006DA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006DA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006DA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006DA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006DB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006DC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006DD, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006DE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006DF, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006E0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_63_symbolic(self):
        """Instruction PCMPISTRI_63
        Groups: sse42
        0x4006a4:   pcmpistri       xmm1, xmm2, 0x38
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006A4, "f\x0f:c\xca8")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006A4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006A4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006A4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006A4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A7, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006A9, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006AA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_64_symbolic(self):
        """Instruction PCMPISTRI_64
        Groups: sse42
        0x4006fe:   pcmpistri       xmm1, xmm2, 0x55
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006FE, "f\x0f:c\xcaU")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006FE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006FE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006FE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400700, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400701, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400702, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400703, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x4006FE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006FF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400704)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_65_symbolic(self):
        """Instruction PCMPISTRI_65
        Groups: sse42
        0x400662:   pcmpistri       xmm1, xmm2, 0x21
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400662, "f\x0f:c\xca!")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400662
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400662)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400662)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400662, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400663, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400664, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400665, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400666, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400667, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400668)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_7_symbolic(self):
        """Instruction PCMPISTRI_7
        Groups: sse42
        0x4006e0:   pcmpistri       xmm1, xmm2, 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006E0, "f\x0f:c\xcaL")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006E0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4006E0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4006E0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006E0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E3, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4006E5, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006E6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_8_symbolic(self):
        """Instruction PCMPISTRI_8
        Groups: sse42
        0x40060e:   pcmpistri       xmm1, xmm2, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40060E, "f\x0f:c\xca\x05")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40060E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40060E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40060E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40060E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40060F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400610, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400611, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400612, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400613, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400614)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRI_9_symbolic(self):
        """Instruction PCMPISTRI_9
        Groups: sse42
        0x40075e:   pcmpistri       xmm1, xmm2, 0x75
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40075E, "f\x0f:c\xcau")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40075E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40075E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40075E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400760, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400761, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x400762, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400763, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x40075E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40075F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400764)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_1_symbolic(self):
        """Instruction PCMPISTRM_1
        Groups: sse42
        0x400856:   pcmpistrm       xmm1, xmm2, 0x41
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400856, "f\x0f:b\xcaA")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400856
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400856)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400856)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400856, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400857, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400858, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400859, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40085A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40085B, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40085C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_10_symbolic(self):
        """Instruction PCMPISTRM_10
        Groups: sse42
        0x4007cc:   pcmpistrm       xmm1, xmm2, 0x14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007CC, "f\x0f:b\xca\x14")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007CC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007CC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007CC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007CC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007CD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007CE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007CF, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D1, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007D2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_11_symbolic(self):
        """Instruction PCMPISTRM_11
        Groups: sse42
        0x40087a:   pcmpistrm       xmm1, xmm2, 0x4d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40087A, "f\x0f:b\xcaM")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40087A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40087A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40087A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40087A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40087B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40087C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40087D, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40087E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40087F, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400880)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_12_symbolic(self):
        """Instruction PCMPISTRM_12
        Groups: sse42
        0x400802:   pcmpistrm       xmm1, xmm2, 0x25
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400802, "f\x0f:b\xca%")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400802
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400802)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400802)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400802, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400803, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400804, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400805, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400806, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400807, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400808)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_13_symbolic(self):
        """Instruction PCMPISTRM_13
        Groups: sse42
        0x4007fc:   pcmpistrm       xmm1, xmm2, 0x24
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007FC, "f\x0f:b\xca$")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007FC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007FC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007FC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400800, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400801, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x4007FC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007FD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007FE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007FF, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400802)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_14_symbolic(self):
        """Instruction PCMPISTRM_14
        Groups: sse42
        0x4008c8:   pcmpistrm       xmm1, xmm2, 0x68
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008C8, "f\x0f:b\xcah")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008C8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008C8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008C8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008C8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008C9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008CA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008CB, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008CC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008CD, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008CE)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_15_symbolic(self):
        """Instruction PCMPISTRM_15
        Groups: sse42
        0x4008f8:   pcmpistrm       xmm1, xmm2, 0x78
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008F8, "f\x0f:b\xcax")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008F8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008F8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008F8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008F8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008FA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008FB, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008FC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008FD, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008FE)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_16_symbolic(self):
        """Instruction PCMPISTRM_16
        Groups: sse42
        0x40080e:   pcmpistrm       xmm1, xmm2, 0x29
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40080E, "f\x0f:b\xca)")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40080E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40080E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40080E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40080E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40080F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400810, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400811, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400812, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400813, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400814)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_17_symbolic(self):
        """Instruction PCMPISTRM_17
        Groups: sse42
        0x40089e:   pcmpistrm       xmm1, xmm2, 0x59
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40089E, "f\x0f:b\xcaY")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40089E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40089E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40089E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008A0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A1, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A3, 8) == ord("Y"))
        condition = Operators.AND(condition, cpu.read_int(0x40089E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40089F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008A4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_18_symbolic(self):
        """Instruction PCMPISTRM_18
        Groups: sse42
        0x4008f2:   pcmpistrm       xmm1, xmm2, 0x75
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008F2, "f\x0f:b\xcau")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008F2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008F2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008F2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008F2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F5, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F7, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008F8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_19_symbolic(self):
        """Instruction PCMPISTRM_19
        Groups: sse42
        0x4007b4:   pcmpistrm       xmm1, xmm2, 0xc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007B4, "f\x0f:b\xca\x0c")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007B4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007B4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007B4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007B4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B7, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B9, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007BA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_2_symbolic(self):
        """Instruction PCMPISTRM_2
        Groups: sse42
        0x4008ec:   pcmpistrm       xmm1, xmm2, 0x74
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008EC, "f\x0f:b\xcat")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008EC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008EC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008EC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008EC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008ED, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008EE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008EF, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F1, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008F2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_20_symbolic(self):
        """Instruction PCMPISTRM_20
        Groups: sse42
        0x4007d8:   pcmpistrm       xmm1, xmm2, 0x18
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007D8, "f\x0f:b\xca\x18")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007D8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007D8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007D8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007D8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007DA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007DB, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007DC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007DD, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007DE)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_21_symbolic(self):
        """Instruction PCMPISTRM_21
        Groups: sse42
        0x400892:   pcmpistrm       xmm1, xmm2, 0x55
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400892, "f\x0f:b\xcaU")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400892
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400892)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400892)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400892, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400893, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400894, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400895, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400896, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400897, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400898)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_22_symbolic(self):
        """Instruction PCMPISTRM_22
        Groups: sse42
        0x40084a:   pcmpistrm       xmm1, xmm2, 0x3d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40084A, "f\x0f:b\xca=")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40084A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40084A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40084A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40084A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40084B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40084C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40084D, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40084E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40084F, 8) == ord("="))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400850)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_23_symbolic(self):
        """Instruction PCMPISTRM_23
        Groups: sse42
        0x40088c:   pcmpistrm       xmm1, xmm2, 0x54
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40088C, "f\x0f:b\xcaT")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40088C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40088C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40088C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40088C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40088D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40088E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40088F, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400890, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400891, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400892)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_24_symbolic(self):
        """Instruction PCMPISTRM_24
        Groups: sse42
        0x4008fe:   pcmpistrm       xmm1, xmm2, 0x79
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008FE, "f\x0f:b\xcay")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008FE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008FE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008FE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400900, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400901, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400902, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400903, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x4008FE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008FF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400904)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_25_symbolic(self):
        """Instruction PCMPISTRM_25
        Groups: sse42
        0x400838:   pcmpistrm       xmm1, xmm2, 0x38
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400838, "f\x0f:b\xca8")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400838
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400838)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400838)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400838, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400839, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40083A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40083B, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40083C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40083D, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40083E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_26_symbolic(self):
        """Instruction PCMPISTRM_26
        Groups: sse42
        0x400832:   pcmpistrm       xmm1, xmm2, 0x35
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400832, "f\x0f:b\xca5")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400832
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400832)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400832)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400832, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400833, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400834, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400835, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400836, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400837, 8) == ord("5"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400838)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_27_symbolic(self):
        """Instruction PCMPISTRM_27
        Groups: sse42
        0x400820:   pcmpistrm       xmm1, xmm2, 0x30
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400820, "f\x0f:b\xca0")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400820
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400820)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400820)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400820, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400821, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400822, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400823, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400824, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400825, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400826)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_28_symbolic(self):
        """Instruction PCMPISTRM_28
        Groups: sse42
        0x400850:   pcmpistrm       xmm1, xmm2, 0x40
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400850, "f\x0f:b\xca@")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400850
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400850)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400850)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400850, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400851, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400852, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400853, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400854, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400855, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400856)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_29_symbolic(self):
        """Instruction PCMPISTRM_29
        Groups: sse42
        0x4007d2:   pcmpistrm       xmm1, xmm2, 0x15
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007D2, "f\x0f:b\xca\x15")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007D2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007D2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007D2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007D2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D5, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007D7, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007D8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_3_symbolic(self):
        """Instruction PCMPISTRM_3
        Groups: sse42
        0x400826:   pcmpistrm       xmm1, xmm2, 0x31
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400826, "f\x0f:b\xca1")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400826
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400826)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400826)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400826, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400827, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400828, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400829, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40082A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40082B, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40082C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_30_symbolic(self):
        """Instruction PCMPISTRM_30
        Groups: sse42
        0x400898:   pcmpistrm       xmm1, xmm2, 0x58
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400898, "f\x0f:b\xcaX")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400898
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400898)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400898)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400898, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400899, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40089A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40089B, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40089C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40089D, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40089E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_31_symbolic(self):
        """Instruction PCMPISTRM_31
        Groups: sse42
        0x4008aa:   pcmpistrm       xmm1, xmm2, 0x5d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008AA, "f\x0f:b\xca]")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008AA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008AA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008AA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008AA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008AB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008AC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008AD, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008AE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008AF, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008B0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_32_symbolic(self):
        """Instruction PCMPISTRM_32
        Groups: sse42
        0x4007ea:   pcmpistrm       xmm1, xmm2, 0x1d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007EA, "f\x0f:b\xca\x1d")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007EA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007EA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007EA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007EA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007EB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007EC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007ED, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007EE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007EF, 8) == ord("\x1d"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007F0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_33_symbolic(self):
        """Instruction PCMPISTRM_33
        Groups: sse42
        0x4007f6:   pcmpistrm       xmm1, xmm2, 0x21
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007F6, "f\x0f:b\xca!")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007F6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007F6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007F6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007F6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F9, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007FA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007FB, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007FC)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_34_symbolic(self):
        """Instruction PCMPISTRM_34
        Groups: sse42
        0x4008b0:   pcmpistrm       xmm1, xmm2, 0x60
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008B0, "f\x0f:b\xca`")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008B0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008B0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008B0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008B0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B3, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B5, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008B6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_35_symbolic(self):
        """Instruction PCMPISTRM_35
        Groups: sse42
        0x4008a4:   pcmpistrm       xmm1, xmm2, 0x5c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008A4, "f\x0f:b\xca\\")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008A4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008A4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008A4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008A4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A7, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008A9, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008AA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_36_symbolic(self):
        """Instruction PCMPISTRM_36
        Groups: sse42
        0x4008e0:   pcmpistrm       xmm1, xmm2, 0x70
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008E0, "f\x0f:b\xcap")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008E0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008E0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008E0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008E0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E3, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E5, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008E6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_37_symbolic(self):
        """Instruction PCMPISTRM_37
        Groups: sse42
        0x400904:   pcmpistrm       xmm1, xmm2, 0x7c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400904, "f\x0f:b\xca|")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400904
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400904)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400904)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400904, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400905, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400906, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400907, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400908, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400909, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40090A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_38_symbolic(self):
        """Instruction PCMPISTRM_38
        Groups: sse42
        0x4008c2:   pcmpistrm       xmm1, xmm2, 0x65
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008C2, "f\x0f:b\xcae")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008C2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008C2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008C2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008C2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008C3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008C4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008C5, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008C6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008C7, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008C8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_39_symbolic(self):
        """Instruction PCMPISTRM_39
        Groups: sse42
        0x40081a:   pcmpistrm       xmm1, xmm2, 0x2d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40081A, "f\x0f:b\xca-")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40081A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40081A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40081A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40081A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40081B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40081C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40081D, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40081E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40081F, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400820)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_4_symbolic(self):
        """Instruction PCMPISTRM_4
        Groups: sse42
        0x4008bc:   pcmpistrm       xmm1, xmm2, 0x64
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008BC, "f\x0f:b\xcad")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008BC
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008BC)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008BC)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008C0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008C1, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0x4008BC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008BD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008BE, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008BF, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008C2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_40_symbolic(self):
        """Instruction PCMPISTRM_40
        Groups: sse42
        0x4007de:   pcmpistrm       xmm1, xmm2, 0x19
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007DE, "f\x0f:b\xca\x19")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007DE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007DE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007DE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007E0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E1, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E3, 8) == ord("\x19"))
        condition = Operators.AND(condition, cpu.read_int(0x4007DE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007DF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007E4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_41_symbolic(self):
        """Instruction PCMPISTRM_41
        Groups: sse42
        0x400814:   pcmpistrm       xmm1, xmm2, 0x2c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400814, "f\x0f:b\xca,")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400814
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400814)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400814)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400814, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400815, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400816, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400817, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400818, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400819, 8) == ord(","))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40081A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_42_symbolic(self):
        """Instruction PCMPISTRM_42
        Groups: sse42
        0x4007c6:   pcmpistrm       xmm1, xmm2, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007C6, "f\x0f:b\xca\x11")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007C6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007C6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007C6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007C6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C9, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007CA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007CB, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007CC)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_43_symbolic(self):
        """Instruction PCMPISTRM_43
        Groups: sse42
        0x400868:   pcmpistrm       xmm1, xmm2, 0x48
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400868, "f\x0f:b\xcaH")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400868
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400868)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400868)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400868, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400869, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40086A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40086B, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40086C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40086D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40086E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_44_symbolic(self):
        """Instruction PCMPISTRM_44
        Groups: sse42
        0x4008ce:   pcmpistrm       xmm1, xmm2, 0x69
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008CE, "f\x0f:b\xcai")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008CE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008CE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008CE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008CE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008CF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D1, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D3, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008D4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_45_symbolic(self):
        """Instruction PCMPISTRM_45
        Groups: sse42
        0x400874:   pcmpistrm       xmm1, xmm2, 0x4c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400874, "f\x0f:b\xcaL")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400874
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400874)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400874)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400874, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400875, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400876, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400877, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400878, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400879, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40087A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_46_symbolic(self):
        """Instruction PCMPISTRM_46
        Groups: sse42
        0x40085c:   pcmpistrm       xmm1, xmm2, 0x44
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40085C, "f\x0f:b\xcaD")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40085C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40085C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40085C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400860, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400861, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x40085C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40085D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40085E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40085F, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400862)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_47_symbolic(self):
        """Instruction PCMPISTRM_47
        Groups: sse42
        0x4007a8:   pcmpistrm       xmm1, xmm2, 8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007A8, "f\x0f:b\xca\x08")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007A8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007A8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007A8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007A8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007A9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007AA, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007AB, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007AC, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007AD, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007AE)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_48_symbolic(self):
        """Instruction PCMPISTRM_48
        Groups: sse42
        0x40082c:   pcmpistrm       xmm1, xmm2, 0x34
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40082C, "f\x0f:b\xca4")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40082C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40082C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40082C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40082C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40082D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40082E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40082F, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400830, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400831, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400832)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_49_symbolic(self):
        """Instruction PCMPISTRM_49
        Groups: sse42
        0x4008da:   pcmpistrm       xmm1, xmm2, 0x6d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008DA, "f\x0f:b\xcam")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008DA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008DA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008DA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008DA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008DB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008DC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008DD, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008DE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008DF, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008E0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_5_symbolic(self):
        """Instruction PCMPISTRM_5
        Groups: sse42
        0x4007a2:   pcmpistrm       xmm1, xmm2, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007A2, "f\x0f:b\xca\x05")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007A2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007A2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007A2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007A2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007A3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007A4, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007A5, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007A6, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007A7, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007A8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_50_symbolic(self):
        """Instruction PCMPISTRM_50
        Groups: sse42
        0x4007e4:   pcmpistrm       xmm1, xmm2, 0x1c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007E4, "f\x0f:b\xca\x1c")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007E4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007E4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007E4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007E4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E7, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007E9, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007EA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_51_symbolic(self):
        """Instruction PCMPISTRM_51
        Groups: sse42
        0x400880:   pcmpistrm       xmm1, xmm2, 0x50
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400880, "f\x0f:b\xcaP")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400880
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400880)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400880)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400880, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400881, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400882, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400883, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400884, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400885, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400886)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_52_symbolic(self):
        """Instruction PCMPISTRM_52
        Groups: sse42
        0x400886:   pcmpistrm       xmm1, xmm2, 0x51
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400886, "f\x0f:b\xcaQ")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400886
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400886)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400886)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400886, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400887, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400888, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400889, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40088A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40088B, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40088C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_53_symbolic(self):
        """Instruction PCMPISTRM_53
        Groups: sse42
        0x4008b6:   pcmpistrm       xmm1, xmm2, 0x61
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008B6, "f\x0f:b\xcaa")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008B6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008B6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008B6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008B6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B9, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008BA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008BB, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008BC)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_54_symbolic(self):
        """Instruction PCMPISTRM_54
        Groups: sse42
        0x4007ba:   pcmpistrm       xmm1, xmm2, 0xd
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007BA, "f\x0f:b\xca\r")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007BA
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007BA)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007BA)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007BA, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007BB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007BC, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007BD, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007BE, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007BF, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007C0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_55_symbolic(self):
        """Instruction PCMPISTRM_55
        Groups: sse42
        0x40090a:   pcmpistrm       xmm1, xmm2, 0x7d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40090A, "f\x0f:b\xca}")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40090A
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40090A)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40090A)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40090A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40090B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40090C, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40090D, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40090E, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40090F, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400910)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_56_symbolic(self):
        """Instruction PCMPISTRM_56
        Groups: sse42
        0x40079c:   pcmpistrm       xmm1, xmm2, 4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40079C, "f\x0f:b\xca\x04")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40079C
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40079C)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40079C)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007A0, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007A1, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x40079C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40079D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40079E, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40079F, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007A2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_57_symbolic(self):
        """Instruction PCMPISTRM_57
        Groups: sse42
        0x4007ae:   pcmpistrm       xmm1, xmm2, 9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007AE, "f\x0f:b\xca\t")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007AE
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007AE)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007AE)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007AE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007AF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B0, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B1, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B2, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007B3, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007B4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_58_symbolic(self):
        """Instruction PCMPISTRM_58
        Groups: sse42
        0x400844:   pcmpistrm       xmm1, xmm2, 0x3c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400844, "f\x0f:b\xca<")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400844
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400844)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400844)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400844, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400845, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400846, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400847, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400848, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400849, 8) == ord("<"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40084A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_59_symbolic(self):
        """Instruction PCMPISTRM_59
        Groups: sse42
        0x4008e6:   pcmpistrm       xmm1, xmm2, 0x71
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008E6, "f\x0f:b\xcaq")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008E6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008E6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008E6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008E6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008E9, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008EA, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008EB, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008EC)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_6_symbolic(self):
        """Instruction PCMPISTRM_6
        Groups: sse42
        0x400808:   pcmpistrm       xmm1, xmm2, 0x28
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400808, "f\x0f:b\xca(")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400808
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400808)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400808)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400808, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400809, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40080A, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x40080B, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40080C, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40080D, 8) == ord("("))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40080E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_60_symbolic(self):
        """Instruction PCMPISTRM_60
        Groups: sse42
        0x4008d4:   pcmpistrm       xmm1, xmm2, 0x6c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008D4, "f\x0f:b\xcal")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008D4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4008D4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4008D4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008D4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D6, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D7, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D8, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4008D9, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008DA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_61_symbolic(self):
        """Instruction PCMPISTRM_61
        Groups: sse42
        0x400796:   pcmpistrm       xmm1, xmm2, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400796, "f\x0f:b\xca\x01")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400796
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400796)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400796)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400796, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400797, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400798, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400799, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x40079A, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40079B, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40079C)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_62_symbolic(self):
        """Instruction PCMPISTRM_62
        Groups: sse42
        0x40083e:   pcmpistrm       xmm1, xmm2, 0x39
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40083E, "f\x0f:b\xca9")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40083E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40083E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40083E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400840, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400841, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400842, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400843, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0x40083E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40083F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400844)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_63_symbolic(self):
        """Instruction PCMPISTRM_63
        Groups: sse42
        0x400790:   pcmpistrm       xmm1, xmm2, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400790, "f\x0f:b\xca\x00")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400790
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400790)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400790)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400790, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400791, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400792, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400793, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400794, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400795, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400796)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_64_symbolic(self):
        """Instruction PCMPISTRM_64
        Groups: sse42
        0x4007c0:   pcmpistrm       xmm1, xmm2, 0x10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007C0, "f\x0f:b\xca\x10")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007C0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007C0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007C0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007C0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C3, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007C5, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007C6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_7_symbolic(self):
        """Instruction PCMPISTRM_7
        Groups: sse42
        0x4007f0:   pcmpistrm       xmm1, xmm2, 0x20
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4007F0, "f\x0f:b\xca ")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007F0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x4007F0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x4007F0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007F0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F2, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F3, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F4, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x4007F5, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007F6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_8_symbolic(self):
        """Instruction PCMPISTRM_8
        Groups: sse42
        0x40086e:   pcmpistrm       xmm1, xmm2, 0x49
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x40086E, "f\x0f:b\xcaI")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40086E
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x40086E)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x40086E)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40086E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40086F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400870, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400871, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400872, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400873, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400874)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))

    def test_PCMPISTRM_9_symbolic(self):
        """Instruction PCMPISTRM_9
        Groups: sse42
        0x400862:   pcmpistrm       xmm1, xmm2, 0x45
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400862, "f\x0f:b\xcaE")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400862
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = Z3Solver.instance().get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, "RIP", 0x400862)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, "EBP")
                if isinstance(symbol, Expression):
                    values = Z3Solver.instance().get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, "EBP", values[0])
                for i in range(e.size):
                    symbol = mem[e.address + i]
                    if isinstance(symbol, Expression):
                        values = Z3Solver.instance().get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address + i] = values[0]
                setattr(cpu, "RIP", 0x400862)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400862, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x400863, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400864, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x400865, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x400866, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x400867, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400868)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(Z3Solver.instance().check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(Z3Solver.instance().check(temp_cs))


if __name__ == "__main__":
    unittest.main()
