import unittest
from manticore.native.cpu.x86 import *
import manticore.core.smtlib
from manticore.native.memory import *

solver = manticore.core.smtlib.solver.Z3Solver.instance()


class CPUTest(unittest.TestCase):
    _multiprocess_can_split_ = True

    class ROOperand:
        """ Mocking class for operand ronly """

        def __init__(self, size, value):
            self.size = size
            self.value = value

        def read(self):
            return self.value & ((1 << self.size) - 1)

    class RWOperand(ROOperand):
        """ Mocking class for operand rw """

        def write(self, value):
            self.value = value & ((1 << self.size) - 1)
            return self.value

    def test_ADD_1(self):
        """Instruction ADD_1
        Groups:
        0x7ffff7de438b:     add     rcx, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438B, "H\x83\xc1\x01")
        cpu.PF = True
        cpu.RCX = 0x7FFFF7BA0ABA
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE438B
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE438B:0x7FFFF7DE438F], [b"H", b"\x83", b"\xc1", b"\x01"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RCX, 140737349552827)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926671)
        self.assertEqual(cpu.SF, False)

    def test_ADD_2(self):
        """Instruction ADD_2
        Groups:
        0x7ffff7de4396:     add     rax, rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4396, "H\x01\xd0")
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0x310EF63C39
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4396
        cpu.RDX = 0x65
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4396:0x7FFFF7DE4399], [b"H", b"\x01", b"\xd0"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 210704415902)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926681)
        self.assertEqual(cpu.RDX, 101)

    def test_ADD_3(self):
        """Instruction ADD_3
        Groups:
        0x7ffff7de6128:     add     rdx, 0x18
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6128, "H\x83\xc2\x18")
        cpu.SF = False
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6128
        cpu.RDX = 0x7FFFF7A4C978
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6128:0x7FFFF7DE612C], [b"H", b"\x83", b"\xc2", b"\x18"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934252)
        self.assertEqual(cpu.RDX, 140737348159888)

    def test_ADD_4(self):
        """Instruction ADD_4
        Groups:
        0x7ffff7de3960:     add     r12, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3960, "I\x83\xc4\x01")
        cpu.PF = True
        cpu.R12 = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3960
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3960:0x7FFFF7DE3964], [b"I", b"\x83", b"\xc4", b"\x01"])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 1)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351924068)
        self.assertEqual(cpu.SF, False)

    def test_ADD_5(self):
        """Instruction ADD_5
        Groups:
        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A49000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7A490D0, "%[\x17\x00\x00\x00\x00\x00")
        mem.write(0x7FFFF7DE6124, "H\x03B\x10")
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0x7FFFF7A2E000
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6124
        cpu.RDX = 0x7FFFF7A490C0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A490D0:0x7FFFF7A490D8],
            [b"%", b"[", b"\x17", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(mem[0x7FFFF7DE6124:0x7FFFF7DE6128], [b"H", b"\x03", b"B", b"\x10"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RAX, 140737349565221)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934248)
        self.assertEqual(cpu.RDX, 140737348145344)

    def test_ADD_6(self):
        """Instruction ADD_6
        Groups:
        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4B000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4BCC8, "\xc0\x88\x07\x00\x00\x00\x00\x00")
        mem.write(0x7FFFF7DE6124, "H\x03B\x10")
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0x7FFFF7A2E000
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6124
        cpu.RDX = 0x7FFFF7A4BCB8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A4BCC8:0x7FFFF7A4BCD0],
            [b"\xc0", b"\x88", b"\x07", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(mem[0x7FFFF7DE6124:0x7FFFF7DE6128], [b"H", b"\x03", b"B", b"\x10"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 140737348528320)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934248)
        self.assertEqual(cpu.RDX, 140737348156600)

    def test_AND_1(self):
        """Instruction AND_1
        Groups:
        0x7ffff7b58f2f:     and     r9d, 0xf
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F2F, "A\x83\xe1\x0f")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7B58F2F
        cpu.SF = False
        cpu.PF = False
        cpu.R9D = 0x12
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F2F:0x7FFFF7B58F33], [b"A", b"\x83", b"\xe1", b"\x0f"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259059)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R9D, 2)
        self.assertEqual(cpu.SF, False)

    def test_AND_2(self):
        """Instruction AND_2
        Groups:
        0x7ffff7aa7bd0:     and     edx, 0x808
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA7BD0, "\x81\xe2\x08\x08\x00\x00")
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7AA7BD0
        cpu.PF = True
        cpu.EDX = 0xFBAD2807
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AA7BD0:0x7FFFF7AA7BD6],
            [b"\x81", b"\xe2", b"\x08", b"\x08", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348533206)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 2048)
        self.assertEqual(cpu.SF, False)

    def test_AND_3(self):
        """Instruction AND_3
        Groups:
        0x7ffff7b58f2f:     and     r9d, 0xf
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F2F, "A\x83\xe1\x0f")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7B58F2F
        cpu.SF = False
        cpu.PF = False
        cpu.R9D = 0x12
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F2F:0x7FFFF7B58F33], [b"A", b"\x83", b"\xe1", b"\x0f"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259059)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R9D, 2)
        self.assertEqual(cpu.SF, False)

    def test_AND_4(self):
        """Instruction AND_4
        Groups:
        0x7ffff7de3930:     and     rax, rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3930, "H!\xf0")
        cpu.PF = True
        cpu.RSI = 0x13
        cpu.OF = False
        cpu.ZF = False
        cpu.RAX = 0x9
        cpu.CF = True
        cpu.RIP = 0x7FFFF7DE3930
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3930:0x7FFFF7DE3933], [b"H", b"!", b"\xf0"])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RSI, 19)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 1)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351924019)
        self.assertEqual(cpu.SF, False)

    def test_AND_5(self):
        """Instruction AND_5
        Groups:
        0x7ffff7b58f2f:     and     r9d, 0xf
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F2F, "A\x83\xe1\x0f")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7B58F2F
        cpu.SF = False
        cpu.PF = False
        cpu.R9D = 0x12
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F2F:0x7FFFF7B58F33], [b"A", b"\x83", b"\xe1", b"\x0f"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259059)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R9D, 2)
        self.assertEqual(cpu.SF, False)

    def test_AND_6(self):
        """Instruction AND_6
        Groups:
        0x7ffff7de3909:     and     ecx, dword ptr [rbx + 0x2f0]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FF7000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3909, "#\x8b\xf0\x02\x00\x00")
        mem.write(0x7FFFF7FF7948, "\xff\x00\x00\x00")
        cpu.PF = True
        cpu.RBX = 0x7FFFF7FF7658
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1C5E843
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3909
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE3909:0x7FFFF7DE390F], [b"#", b"\x8b", b"\xf0", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0x7FFFF7FF7948:0x7FFFF7FF794C], [b"\xff", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RBX, 140737354102360)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 67)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923983)
        self.assertEqual(cpu.SF, False)

    def test_BSF_1(self):
        """Instruction BSF_1
        Groups:
        0x4184cd:   bsf     eax, edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184CD, "\x0f\xbc\xc2")
        cpu.EAX = 0x495045
        cpu.ZF = False
        cpu.EDX = 0x80
        cpu.RIP = 0x4184CD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4184CD:0x4184D0], [b"\x0f", b"\xbc", b"\xc2"])
        self.assertEqual(cpu.EAX, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.RIP, 4293840)

    def test_BSF_2(self):
        """Instruction BSF_2
        Groups:
        0x4183ed:   bsf     eax, edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4183ED, "\x0f\xbc\xc2")
        cpu.EAX = 0x4A5301
        cpu.ZF = False
        cpu.EDX = 0x5
        cpu.RIP = 0x4183ED
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4183ED:0x4183F0], [b"\x0f", b"\xbc", b"\xc2"])
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 5)
        self.assertEqual(cpu.RIP, 4293616)

    def test_BSF_3(self):
        """Instruction BSF_3
        Groups:
        0x4184bd:   bsf     eax, edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184BD, "\x0f\xbc\xc2")
        cpu.EAX = 0x495085
        cpu.ZF = False
        cpu.EDX = 0x80
        cpu.RIP = 0x4184BD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4184BD:0x4184C0], [b"\x0f", b"\xbc", b"\xc2"])
        self.assertEqual(cpu.EAX, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.RIP, 4293824)

    def test_BSF_4(self):
        """Instruction BSF_4
        Groups:
        0x41850a:   bsf     rax, rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x41850A, "H\x0f\xbc\xc2")
        cpu.ZF = False
        cpu.RIP = 0x41850A
        cpu.RAX = 0x495100
        cpu.RDX = 0x800200020000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41850A:0x41850E], [b"H", b"\x0f", b"\xbc", b"\xc2"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 17)
        self.assertEqual(cpu.RIP, 4293902)
        self.assertEqual(cpu.RDX, 140746078420992)

    def test_BSF_5(self):
        """Instruction BSF_5
        Groups:
        0x7ffff7ab5d0a:     bsf     rax, rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5D0A, "H\x0f\xbc\xc2")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7AB5D0A
        cpu.RAX = 0x5555555549C0
        cpu.RDX = 0xE0E0E0E0EE080000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AB5D0A:0x7FFFF7AB5D0E], [b"H", b"\x0f", b"\xbc", b"\xc2"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.RIP, 140737348590862)
        self.assertEqual(cpu.RDX, 16204198715949842432)

    def test_BSF_6(self):
        """Instruction BSF_6
        Groups:
        0x4183ed:   bsf     eax, edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4183ED, "\x0f\xbc\xc2")
        cpu.EAX = 0x494D05
        cpu.ZF = False
        cpu.EDX = 0x80
        cpu.RIP = 0x4183ED
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4183ED:0x4183F0], [b"\x0f", b"\xbc", b"\xc2"])
        self.assertEqual(cpu.EAX, 7)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.RIP, 4293616)

    def test_BSR_1(self):
        """Instruction BSR_1
        Groups:
        0x4008b7:   bsr     esi, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008B7, "\x0f\xbd\xf6")
        cpu.ZF = True
        cpu.RIP = 0x4008B7
        cpu.ESI = 0xF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4008B7:0x4008BA], [b"\x0f", b"\xbd", b"\xf6"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESI, 3)
        self.assertEqual(cpu.RIP, 4196538)

    def test_BSR_2(self):
        """Instruction BSR_2
        Groups:
        0x400907:   bsr     esi, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400907, "\x0f\xbd\xf6")
        cpu.ZF = True
        cpu.RIP = 0x400907
        cpu.ESI = 0xF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400907:0x40090A], [b"\x0f", b"\xbd", b"\xf6"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESI, 3)
        self.assertEqual(cpu.RIP, 4196618)

    def test_BSR_3(self):
        """Instruction BSR_3
        Groups:
        0x457ac8:   bsr     rsi, rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457AC8, "H\x0f\xbd\xf6")
        cpu.ZF = False
        cpu.RSI = 0x4100800
        cpu.RIP = 0x457AC8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457AC8:0x457ACC], [b"H", b"\x0f", b"\xbd", b"\xf6"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSI, 26)
        self.assertEqual(cpu.RIP, 4553420)

    def test_BSR_4(self):
        """Instruction BSR_4
        Groups:
        0x400847:   bsr     esi, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400847, "\x0f\xbd\xf6")
        cpu.ZF = True
        cpu.RIP = 0x400847
        cpu.ESI = 0xF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400847:0x40084A], [b"\x0f", b"\xbd", b"\xf6"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ESI, 3)
        self.assertEqual(cpu.RIP, 4196426)

    def test_BSR_5(self):
        """Instruction BSR_5
        Groups:
        0x457c18:   bsr     rsi, rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457C18, "H\x0f\xbd\xf6")
        cpu.ZF = False
        cpu.RSI = 0x41008000
        cpu.RIP = 0x457C18
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457C18:0x457C1C], [b"H", b"\x0f", b"\xbd", b"\xf6"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSI, 30)
        self.assertEqual(cpu.RIP, 4553756)

    def test_BSR_6(self):
        """Instruction BSR_6
        Groups:
        0x457db8:   bsr     rsi, rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DB8, "H\x0f\xbd\xf6")
        cpu.ZF = False
        cpu.RSI = 0x4100800
        cpu.RIP = 0x457DB8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457DB8:0x457DBC], [b"H", b"\x0f", b"\xbd", b"\xf6"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSI, 26)
        self.assertEqual(cpu.RIP, 4554172)

    def test_BT_1(self):
        """Instruction BT_1
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = 0x467
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE36B5:0x7FFFF7DE36B9], [b"A", b"\x0f", b"\xa3", b"\xc0"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_2(self):
        """Instruction BT_2
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = 0x2
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = 0x467
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE36B5:0x7FFFF7DE36B9], [b"A", b"\x0f", b"\xa3", b"\xc0"])
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_3(self):
        """Instruction BT_3
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = 0x2
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = 0x467
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE36B5:0x7FFFF7DE36B9], [b"A", b"\x0f", b"\xa3", b"\xc0"])
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_4(self):
        """Instruction BT_4
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = 0x467
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE36B5:0x7FFFF7DE36B9], [b"A", b"\x0f", b"\xa3", b"\xc0"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_5(self):
        """Instruction BT_5
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = 0x467
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE36B5:0x7FFFF7DE36B9], [b"A", b"\x0f", b"\xa3", b"\xc0"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_BT_6(self):
        """Instruction BT_6
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = 0x2
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = 0x467
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE36B5:0x7FFFF7DE36B9], [b"A", b"\x0f", b"\xa3", b"\xc0"])
        self.assertEqual(cpu.EAX, 2)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351923385)
        self.assertEqual(cpu.R8D, 1127)

    def test_CALL_1(self):
        """Instruction CALL_1
        Groups: call, mode64
        0x7ffff7de447a:     call    0x7ffff7de3800
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE447A, "\xe8\x81\xf3\xff\xff")
        mem.write(0x7FFFFFFFD878, "\x7fD\xde\xf7\xff\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00H")
        cpu.RSP = 0x7FFFFFFFD880
        cpu.RIP = 0x7FFFF7DE447A
        cpu.RBP = 0x7FFFFFFFD9A0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE447A:0x7FFFF7DE447F], [b"\xe8", b"\x81", b"\xf3", b"\xff", b"\xff"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFD878:0x7FFFFFFFD889],
            [
                b"\x7f",
                b"D",
                b"\xde",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"H",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345208)
        self.assertEqual(cpu.RIP, 140737351923712)
        self.assertEqual(cpu.RBP, 140737488345504)

    def test_CALL_2(self):
        """Instruction CALL_2
        Groups: call, mode64
        0x7ffff7a780e1:     call    qword ptr [r8 + 0x38]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD2000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFB000, 0x1000, "rwx")
        mem.write(0x7FFFF7A780E1, "A\xffP8")
        mem.write(0x7FFFF7DD2578, "`\x96\xaa\xf7\xff\x7f\x00\x00")
        mem.write(
            0x7FFFFFFFBDB8, "\xa2\x80\xa7\xf7\xff\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        )
        cpu.RSP = 0x7FFFFFFFBDC0
        cpu.R8 = 0x7FFFF7DD2540
        cpu.RIP = 0x7FFFF7A780E1
        cpu.RBP = 0x7FFFFFFFC330
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A780E1:0x7FFFF7A780E5], [b"A", b"\xff", b"P", b"8"])
        self.assertEqual(
            mem[0x7FFFF7DD2578:0x7FFFF7DD2580],
            [b"`", b"\x96", b"\xaa", b"\xf7", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFBDB8:0x7FFFFFFFBDC9],
            [
                b"\xe5",
                b"\x80",
                b"\xa7",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.R8, 140737351853376)
        self.assertEqual(cpu.RSP, 140737488338360)
        self.assertEqual(cpu.RIP, 140737348540000)
        self.assertEqual(cpu.RBP, 140737488339760)

    def test_CALL_3(self):
        """Instruction CALL_3
        Groups: call, mode64
        0x4554b0:   call    0x45c7a0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00455000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x4554B0, "\xe8\xebr\x00\x00")
        mem.write(0x7FFFFFFFDA18, "\xdaSE\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x04")
        cpu.RSP = 0x7FFFFFFFDA20
        cpu.RIP = 0x4554B0
        cpu.RBP = 0x7FFFFFFFDAD0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4554B0:0x4554B5], [b"\xe8", b"\xeb", b"r", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0x7FFFFFFFDA18:0x7FFFFFFFDA29],
            [
                b"\xb5",
                b"T",
                b"E",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x06",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x04",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345624)
        self.assertEqual(cpu.RIP, 4573088)
        self.assertEqual(cpu.RBP, 140737488345808)

    def test_CALL_4(self):
        """Instruction CALL_4
        Groups: call, mode64
        0x7ffff7de447a:     call    0x7ffff7de3800
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE447A, "\xe8\x81\xf3\xff\xff")
        mem.write(0x7FFFFFFFD878, "\x7fD\xde\xf7\xff\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00H")
        cpu.RSP = 0x7FFFFFFFD880
        cpu.RIP = 0x7FFFF7DE447A
        cpu.RBP = 0x7FFFFFFFD9A0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE447A:0x7FFFF7DE447F], [b"\xe8", b"\x81", b"\xf3", b"\xff", b"\xff"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFD878:0x7FFFFFFFD889],
            [
                b"\x7f",
                b"D",
                b"\xde",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"H",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345208)
        self.assertEqual(cpu.RIP, 140737351923712)
        self.assertEqual(cpu.RBP, 140737488345504)

    def test_CALL_5(self):
        """Instruction CALL_5
        Groups: call, mode64
        0x7ffff7de40a6:     call    0x7ffff7de3660
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE40A6, "\xe8\xb5\xf5\xff\xff")
        mem.write(
            0x7FFFFFFFD808, "\xab@\xde\xf7\xff\x7f\x00\x00\xec\x04\x00\x00\x00\x00\x00\x00\xd8"
        )
        cpu.RSP = 0x7FFFFFFFD810
        cpu.RIP = 0x7FFFF7DE40A6
        cpu.RBP = 0x7FFFFFFFD900
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE40A6:0x7FFFF7DE40AB], [b"\xe8", b"\xb5", b"\xf5", b"\xff", b"\xff"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFD808:0x7FFFFFFFD819],
            [
                b"\xab",
                b"@",
                b"\xde",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xec",
                b"\x04",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xd8",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345096)
        self.assertEqual(cpu.RIP, 140737351923296)
        self.assertEqual(cpu.RBP, 140737488345344)

    def test_CALL_6(self):
        """Instruction CALL_6
        Groups: call, mode64
        0x45f878:   call    0x413490
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x45F878, "\xe8\x13<\xfb\xff")
        mem.write(0x7FFFFFFFDAF8, "9\xf8E\x00\x00\x00\x00\x00\x01SJ\x00\x00\x00\x00\x00\xf4")
        cpu.RSP = 0x7FFFFFFFDB00
        cpu.RIP = 0x45F878
        cpu.RBP = 0x7FFFFFFFDB20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x45F878:0x45F87D], [b"\xe8", b"\x13", b"<", b"\xfb", b"\xff"])
        self.assertEqual(
            mem[0x7FFFFFFFDAF8:0x7FFFFFFFDB09],
            [
                b"}",
                b"\xf8",
                b"E",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x01",
                b"S",
                b"J",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xf4",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345848)
        self.assertEqual(cpu.RIP, 4273296)
        self.assertEqual(cpu.RBP, 140737488345888)

    def test_CDQE_1(self):
        """Instruction CDQE_1
        Groups:
        0x400aa0:   cdqe
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = 0x92
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400AA0:0x400AA2], [b"H", b"\x98"])
        self.assertEqual(cpu.RAX, 146)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_2(self):
        """Instruction CDQE_2
        Groups:
        0x400aa0:   cdqe
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = 0x5A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400AA0:0x400AA2], [b"H", b"\x98"])
        self.assertEqual(cpu.RAX, 90)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_3(self):
        """Instruction CDQE_3
        Groups:
        0x400aa0:   cdqe
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = 0x80
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400AA0:0x400AA2], [b"H", b"\x98"])
        self.assertEqual(cpu.RAX, 128)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_4(self):
        """Instruction CDQE_4
        Groups:
        0x400acf:   cdqe
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400ACF, "H\x98")
        cpu.RIP = 0x400ACF
        cpu.RAX = 0x98
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400ACF:0x400AD1], [b"H", b"\x98"])
        self.assertEqual(cpu.RAX, 152)
        self.assertEqual(cpu.RIP, 4197073)

    def test_CDQE_5(self):
        """Instruction CDQE_5
        Groups:
        0x400aa0:   cdqe
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = 0x73
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400AA0:0x400AA2], [b"H", b"\x98"])
        self.assertEqual(cpu.RAX, 115)
        self.assertEqual(cpu.RIP, 4197026)

    def test_CDQE_6(self):
        """Instruction CDQE_6
        Groups:
        0x400b07:   cdqe
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B07, "H\x98")
        cpu.RIP = 0x400B07
        cpu.RAX = 0xC6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400B07:0x400B09], [b"H", b"\x98"])
        self.assertEqual(cpu.RAX, 198)
        self.assertEqual(cpu.RIP, 4197129)

    def test_CLC_1(self):
        """Instruction CLC_1
        Groups:
        0x46a9fc:   clc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0046A000, 0x1000, "rwx")
        mem.write(0x46A9FC, "\xf8")
        cpu.CF = True
        cpu.RIP = 0x46A9FC
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x46A9FC:0x46A9FD], [b"\xf8"])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4631037)

    def test_CLC_2(self):
        """Instruction CLC_2
        Groups:
        0x7542c8:   clc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00754000, 0x1000, "rwx")
        mem.write(0x7542C8, "\xf8")
        cpu.CF = True
        cpu.RIP = 0x7542C8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7542C8:0x7542C9], [b"\xf8"])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 7684809)

    def test_CLC_3(self):
        """Instruction CLC_3
        Groups:
        0x4b473c:   clc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004B4000, 0x1000, "rwx")
        mem.write(0x4B473C, "\xf8")
        cpu.CF = True
        cpu.RIP = 0x4B473C
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4B473C:0x4B473D], [b"\xf8"])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4933437)

    def test_CLC_4(self):
        """Instruction CLC_4
        Groups:
        0x49d4dd:   clc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0049D000, 0x1000, "rwx")
        mem.write(0x49D4DD, "\xf8")
        cpu.CF = True
        cpu.RIP = 0x49D4DD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x49D4DD:0x49D4DE], [b"\xf8"])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4838622)

    def test_CLC_5(self):
        """Instruction CLC_5
        Groups:
        0x4fd621:   clc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004FD000, 0x1000, "rwx")
        mem.write(0x4FD621, "\xf8")
        cpu.CF = True
        cpu.RIP = 0x4FD621
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4FD621:0x4FD622], [b"\xf8"])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 5232162)

    def test_CLC_6(self):
        """Instruction CLC_6
        Groups:
        0x4fadef:   clc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004FA000, 0x1000, "rwx")
        mem.write(0x4FADEF, "\xf8")
        cpu.CF = True
        cpu.RIP = 0x4FADEF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4FADEF:0x4FADF0], [b"\xf8"])
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 5221872)

    def test_CMOVAE_1(self):
        """Instruction CMOVAE_1
        Groups: cmov
        0x4117e8:   cmovae  rax, r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x4117E8, "I\x0fC\xc2")
        cpu.RIP = 0x4117E8
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4117E8:0x4117EC], [b"I", b"\x0f", b"C", b"\xc2"])
        self.assertEqual(cpu.RAX, 32)
        self.assertEqual(cpu.RIP, 4265964)
        self.assertEqual(cpu.R10, 32)

    def test_CMOVAE_2(self):
        """Instruction CMOVAE_2
        Groups: cmov
        0x414318:   cmovae  rax, r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x414318, "I\x0fC\xc2")
        cpu.RIP = 0x414318
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x414318:0x41431C], [b"I", b"\x0f", b"C", b"\xc2"])
        self.assertEqual(cpu.RAX, 32)
        self.assertEqual(cpu.RIP, 4277020)
        self.assertEqual(cpu.R10, 32)

    def test_CMOVAE_3(self):
        """Instruction CMOVAE_3
        Groups: cmov
        0x5555555662c8:     cmovae  rdx, rbx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555566000, 0x1000, "rwx")
        mem.write(0x5555555662C8, "H\x0fC\xd3")
        cpu.RDX = 0xFFFFFFFFFFFFFFFF
        cpu.CF = False
        cpu.RIP = 0x5555555662C8
        cpu.RBX = 0x7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555662C8:0x5555555662CC], [b"H", b"\x0f", b"C", b"\xd3"])
        self.assertEqual(cpu.RDX, 7)
        self.assertEqual(cpu.RIP, 93824992305868)
        self.assertEqual(cpu.RBX, 7)

    def test_CMOVAE_4(self):
        """Instruction CMOVAE_4
        Groups: cmov
        0x411778:   cmovae  rax, r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411778, "I\x0fC\xc2")
        cpu.RIP = 0x411778
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x4A0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x411778:0x41177C], [b"I", b"\x0f", b"C", b"\xc2"])
        self.assertEqual(cpu.RAX, 1184)
        self.assertEqual(cpu.RIP, 4265852)
        self.assertEqual(cpu.R10, 1184)

    def test_CMOVAE_5(self):
        """Instruction CMOVAE_5
        Groups: cmov
        0x411778:   cmovae  rax, r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411778, "I\x0fC\xc2")
        cpu.RIP = 0x411778
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x411778:0x41177C], [b"I", b"\x0f", b"C", b"\xc2"])
        self.assertEqual(cpu.RAX, 32)
        self.assertEqual(cpu.RIP, 4265852)
        self.assertEqual(cpu.R10, 32)

    def test_CMOVAE_6(self):
        """Instruction CMOVAE_6
        Groups: cmov
        0x411b58:   cmovae  rax, r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411B58, "I\x0fC\xc2")
        cpu.RIP = 0x411B58
        cpu.CF = False
        cpu.RAX = 0x20
        cpu.R10 = 0x50
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x411B58:0x411B5C], [b"I", b"\x0f", b"C", b"\xc2"])
        self.assertEqual(cpu.RAX, 80)
        self.assertEqual(cpu.RIP, 4266844)
        self.assertEqual(cpu.R10, 80)

    def test_CMOVA_1(self):
        """Instruction CMOVA_1
        Groups: cmov
        0x7ffff7de0ab0:     cmova   rax, r8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE0000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE0AB0, "I\x0fG\xc0")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE0AB0
        cpu.R8 = 0x7FFFF7DD9398
        cpu.CF = True
        cpu.RAX = 0x7FFFF7DD5000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE0AB0:0x7FFFF7DE0AB4], [b"I", b"\x0f", b"G", b"\xc0"])
        self.assertEqual(cpu.R8, 140737351881624)
        self.assertEqual(cpu.RAX, 140737351864320)
        self.assertEqual(cpu.RIP, 140737351912116)

    def test_CMOVA_2(self):
        """Instruction CMOVA_2
        Groups: cmov
        0x7ffff7a9d404:     cmova   rbx, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A9D000, 0x1000, "rwx")
        mem.write(0x7FFFF7A9D404, "H\x0fG\xd8")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7A9D404
        cpu.CF = True
        cpu.RAX = 0x7FFFFFFF
        cpu.RBX = 0x14
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A9D404:0x7FFFF7A9D408], [b"H", b"\x0f", b"G", b"\xd8"])
        self.assertEqual(cpu.RAX, 2147483647)
        self.assertEqual(cpu.RIP, 140737348490248)
        self.assertEqual(cpu.RBX, 20)

    def test_CMOVA_3(self):
        """Instruction CMOVA_3
        Groups: cmov
        0x4082a4:   cmova   rbx, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00408000, 0x1000, "rwx")
        mem.write(0x4082A4, "H\x0fG\xd8")
        cpu.ZF = False
        cpu.RIP = 0x4082A4
        cpu.CF = True
        cpu.RAX = 0x7FFFFFFF
        cpu.RBX = 0xB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4082A4:0x4082A8], [b"H", b"\x0f", b"G", b"\xd8"])
        self.assertEqual(cpu.RAX, 2147483647)
        self.assertEqual(cpu.RIP, 4227752)
        self.assertEqual(cpu.RBX, 11)

    def test_CMOVA_4(self):
        """Instruction CMOVA_4
        Groups: cmov
        0x41462a:   cmova   rdx, r13
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x41462A, "I\x0fG\xd5")
        cpu.RDX = 0x4A0
        cpu.ZF = False
        cpu.R13 = 0x21DF0
        cpu.RIP = 0x41462A
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41462A:0x41462E], [b"I", b"\x0f", b"G", b"\xd5"])
        self.assertEqual(cpu.RDX, 1184)
        self.assertEqual(cpu.RIP, 4277806)
        self.assertEqual(cpu.R13, 138736)

    def test_CMOVA_5(self):
        """Instruction CMOVA_5
        Groups: cmov
        0x41424a:   cmova   rdx, r13
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x41424A, "I\x0fG\xd5")
        cpu.RDX = 0x4A0
        cpu.ZF = False
        cpu.R13 = 0x21DF0
        cpu.RIP = 0x41424A
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41424A:0x41424E], [b"I", b"\x0f", b"G", b"\xd5"])
        self.assertEqual(cpu.RDX, 1184)
        self.assertEqual(cpu.RIP, 4276814)
        self.assertEqual(cpu.R13, 138736)

    def test_CMOVA_6(self):
        """Instruction CMOVA_6
        Groups: cmov
        0x4142ba:   cmova   rdx, r13
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x4142BA, "I\x0fG\xd5")
        cpu.RDX = 0x4A0
        cpu.ZF = False
        cpu.R13 = 0x21DF0
        cpu.RIP = 0x4142BA
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4142BA:0x4142BE], [b"I", b"\x0f", b"G", b"\xd5"])
        self.assertEqual(cpu.RDX, 1184)
        self.assertEqual(cpu.RIP, 4276926)
        self.assertEqual(cpu.R13, 138736)

    def test_CMOVBE_1(self):
        """Instruction CMOVBE_1
        Groups: cmov
        0x40d233:   cmovbe  rbx, r14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40D233, "I\x0fF\xde")
        cpu.ZF = False
        cpu.RBX = 0x1000
        cpu.R14 = 0x20
        cpu.RIP = 0x40D233
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40D233:0x40D237], [b"I", b"\x0f", b"F", b"\xde"])
        self.assertEqual(cpu.R14, 32)
        self.assertEqual(cpu.RIP, 4248119)
        self.assertEqual(cpu.RBX, 32)

    def test_CMOVBE_2(self):
        """Instruction CMOVBE_2
        Groups: cmov
        0x7ffff7aa96b3:     cmovbe  rbx, r14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96B3, "I\x0fF\xde")
        cpu.ZF = False
        cpu.RBX = 0x2000
        cpu.R14 = 0x4
        cpu.RIP = 0x7FFFF7AA96B3
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AA96B3:0x7FFFF7AA96B7], [b"I", b"\x0f", b"F", b"\xde"])
        self.assertEqual(cpu.R14, 4)
        self.assertEqual(cpu.RIP, 140737348540087)
        self.assertEqual(cpu.RBX, 4)

    def test_CMOVBE_3(self):
        """Instruction CMOVBE_3
        Groups: cmov
        0x7ffff7aa96b3:     cmovbe  rbx, r14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96B3, "I\x0fF\xde")
        cpu.ZF = False
        cpu.RBX = 0x1000
        cpu.R14 = 0x13
        cpu.RIP = 0x7FFFF7AA96B3
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AA96B3:0x7FFFF7AA96B7], [b"I", b"\x0f", b"F", b"\xde"])
        self.assertEqual(cpu.R14, 19)
        self.assertEqual(cpu.RIP, 140737348540087)
        self.assertEqual(cpu.RBX, 19)

    def test_CMOVBE_4(self):
        """Instruction CMOVBE_4
        Groups: cmov
        0x40d263:   cmovbe  rbx, r14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40D263, "I\x0fF\xde")
        cpu.ZF = False
        cpu.RBX = 0x1000
        cpu.R14 = 0x13
        cpu.RIP = 0x40D263
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40D263:0x40D267], [b"I", b"\x0f", b"F", b"\xde"])
        self.assertEqual(cpu.R14, 19)
        self.assertEqual(cpu.RIP, 4248167)
        self.assertEqual(cpu.RBX, 19)

    def test_CMOVBE_5(self):
        """Instruction CMOVBE_5
        Groups: cmov
        0x7ffff7aa96b3:     cmovbe  rbx, r14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96B3, "I\x0fF\xde")
        cpu.ZF = False
        cpu.RBX = 0x1000
        cpu.R14 = 0x13
        cpu.RIP = 0x7FFFF7AA96B3
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AA96B3:0x7FFFF7AA96B7], [b"I", b"\x0f", b"F", b"\xde"])
        self.assertEqual(cpu.R14, 19)
        self.assertEqual(cpu.RIP, 140737348540087)
        self.assertEqual(cpu.RBX, 19)

    def test_CMOVBE_6(self):
        """Instruction CMOVBE_6
        Groups: cmov
        0x40fde3:   cmovbe  rbx, r14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040F000, 0x1000, "rwx")
        mem.write(0x40FDE3, "I\x0fF\xde")
        cpu.ZF = False
        cpu.RBX = 0x1000
        cpu.R14 = 0x240
        cpu.RIP = 0x40FDE3
        cpu.CF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40FDE3:0x40FDE7], [b"I", b"\x0f", b"F", b"\xde"])
        self.assertEqual(cpu.R14, 576)
        self.assertEqual(cpu.RIP, 4259303)
        self.assertEqual(cpu.RBX, 576)

    def test_CMOVB_1(self):
        """Instruction CMOVB_1
        Groups: cmov
        0x7ffff7deb97f:     cmovb   r12d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEB000, 0x1000, "rwx")
        mem.write(0x7FFFF7DEB97F, "D\x0fB\xe0")
        cpu.EAX = 0xA
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DEB97F
        cpu.R12D = 0x1A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DEB97F:0x7FFFF7DEB983], [b"D", b"\x0f", b"B", b"\xe0"])
        self.assertEqual(cpu.EAX, 10)
        self.assertEqual(cpu.R12D, 26)
        self.assertEqual(cpu.RIP, 140737351956867)

    def test_CMOVB_2(self):
        """Instruction CMOVB_2
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = 0x1
        cpu.CF = True
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF45AD:0x7FFFF7DF45B0], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EAX, 4294967295)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVB_3(self):
        """Instruction CMOVB_3
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF45AD:0x7FFFF7DF45B0], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVB_4(self):
        """Instruction CMOVB_4
        Groups: cmov
        0x7ffff7deb97f:     cmovb   r12d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEB000, 0x1000, "rwx")
        mem.write(0x7FFFF7DEB97F, "D\x0fB\xe0")
        cpu.EAX = 0x12
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DEB97F
        cpu.R12D = 0x1A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DEB97F:0x7FFFF7DEB983], [b"D", b"\x0f", b"B", b"\xe0"])
        self.assertEqual(cpu.EAX, 18)
        self.assertEqual(cpu.R12D, 26)
        self.assertEqual(cpu.RIP, 140737351956867)

    def test_CMOVB_5(self):
        """Instruction CMOVB_5
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF45AD:0x7FFFF7DF45B0], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVB_6(self):
        """Instruction CMOVB_6
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = 0x1
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = 0xFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF45AD:0x7FFFF7DF45B0], [b"\x0f", b"B", b"\xc1"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.RIP, 140737351992752)
        self.assertEqual(cpu.ECX, 4294967295)

    def test_CMOVE_1(self):
        """Instruction CMOVE_1
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = False
        cpu.R8 = 0x7FFFF7FF7C48
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE625E:0x7FFFF7DE6262], [b"L", b"\x0f", b"D", b"\xc0"])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVE_2(self):
        """Instruction CMOVE_2
        Groups: cmov
        0x415f05:   cmove   rax, rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, "rwx")
        mem.write(0x415F05, "H\x0fD\xc2")
        cpu.ZF = False
        cpu.RIP = 0x415F05
        cpu.RAX = 0x6E01C0
        cpu.RDX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x415F05:0x415F09], [b"H", b"\x0f", b"D", b"\xc2"])
        self.assertEqual(cpu.RAX, 7209408)
        self.assertEqual(cpu.RIP, 4284169)
        self.assertEqual(cpu.RDX, 0)

    def test_CMOVE_3(self):
        """Instruction CMOVE_3
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = False
        cpu.R8 = 0x7FFFF7FF7C48
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE625E:0x7FFFF7DE6262], [b"L", b"\x0f", b"D", b"\xc0"])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVE_4(self):
        """Instruction CMOVE_4
        Groups: cmov
        0x7ffff7df2822:     cmove   rdi, qword ptr [rip + 0x20b886]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FFE000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF2822, "H\x0fD=\x86\xb8 \x00")
        mem.write(0x7FFFF7FFE0B0, "0\x7f\xff\xf7\xff\x7f\x00\x00")
        cpu.ZF = False
        cpu.RDI = 0x7FFFF7FD8000
        cpu.RIP = 0x7FFFF7DF2822
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DF2822:0x7FFFF7DF282A],
            [b"H", b"\x0f", b"D", b"=", b"\x86", b"\xb8", b" ", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFF7FFE0B0:0x7FFFF7FFE0B8],
            [b"0", b"\x7f", b"\xff", b"\xf7", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RDI, 140737353973760)
        self.assertEqual(cpu.RIP, 140737351985194)

    def test_CMOVE_5(self):
        """Instruction CMOVE_5
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = False
        cpu.R8 = 0x7FFFF7FF7C48
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE625E:0x7FFFF7DE6262], [b"L", b"\x0f", b"D", b"\xc0"])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVE_6(self):
        """Instruction CMOVE_6
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = False
        cpu.R8 = 0x7FFFF7FF7C48
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE625E:0x7FFFF7DE6262], [b"L", b"\x0f", b"D", b"\xc0"])
        self.assertEqual(cpu.R8, 140737354103880)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 140737351934562)

    def test_CMOVNE_1(self):
        """Instruction CMOVNE_1
        Groups: cmov
        0x462435:   cmovne  rbx, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, "rwx")
        mem.write(0x462435, "H\x0fE\xd8")
        cpu.ZF = True
        cpu.RIP = 0x462435
        cpu.RAX = 0x4A5441
        cpu.RBX = 0x6BF6B0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x462435:0x462439], [b"H", b"\x0f", b"E", b"\xd8"])
        self.assertEqual(cpu.RAX, 4871233)
        self.assertEqual(cpu.RIP, 4596793)
        self.assertEqual(cpu.RBX, 7075504)

    def test_CMOVNE_2(self):
        """Instruction CMOVNE_2
        Groups: cmov
        0x7ffff7de5776:     cmovne  r14d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5776, "D\x0fE\xf0")
        cpu.EAX = 0x10
        cpu.ZF = True
        cpu.R14D = 0x0
        cpu.RIP = 0x7FFFF7DE5776
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5776:0x7FFFF7DE577A], [b"D", b"\x0f", b"E", b"\xf0"])
        self.assertEqual(cpu.EAX, 16)
        self.assertEqual(cpu.R14D, 0)
        self.assertEqual(cpu.RIP, 140737351931770)

    def test_CMOVNE_3(self):
        """Instruction CMOVNE_3
        Groups: cmov
        0x7ffff7de57f6:     cmovne  rbx, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE57F6, "H\x0fE\xd8")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE57F6
        cpu.RAX = 0x7FFFF7FF7640
        cpu.RBX = 0x7FFFF7FF7AF1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE57F6:0x7FFFF7DE57FA], [b"H", b"\x0f", b"E", b"\xd8"])
        self.assertEqual(cpu.RAX, 140737354102336)
        self.assertEqual(cpu.RIP, 140737351931898)
        self.assertEqual(cpu.RBX, 140737354102336)

    def test_CMOVNE_4(self):
        """Instruction CMOVNE_4
        Groups: cmov
        0x457ba4:   cmovne  rsi, rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457BA4, "H\x0fE\xf2")
        cpu.ZF = False
        cpu.RSI = 0x8201000080201021
        cpu.RIP = 0x457BA4
        cpu.RDX = 0x41008000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457BA4:0x457BA8], [b"H", b"\x0f", b"E", b"\xf2"])
        self.assertEqual(cpu.RSI, 1090551808)
        self.assertEqual(cpu.RIP, 4553640)
        self.assertEqual(cpu.RDX, 1090551808)

    def test_CMOVNE_5(self):
        """Instruction CMOVNE_5
        Groups: cmov
        0x7ffff7de0910:     cmovne  esi, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE0000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE0910, "\x0fE\xf0")
        cpu.EAX = 0x1
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE0910
        cpu.ESI = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE0910:0x7FFFF7DE0913], [b"\x0f", b"E", b"\xf0"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.RIP, 140737351911699)

    def test_CMOVNE_6(self):
        """Instruction CMOVNE_6
        Groups: cmov
        0x457db0:   cmovne  rcx, rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DB0, "H\x0fE\xcf")
        cpu.RCX = 0x7FFFFFFFE01B
        cpu.ZF = False
        cpu.RDI = 0x7FFFFFFFE040
        cpu.RIP = 0x457DB0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457DB0:0x457DB4], [b"H", b"\x0f", b"E", b"\xcf"])
        self.assertEqual(cpu.RDI, 140737488347200)
        self.assertEqual(cpu.RCX, 140737488347200)
        self.assertEqual(cpu.RIP, 4554164)

    def test_CMOVNS_1(self):
        """Instruction CMOVNS_1
        Groups: cmov
        0x448555:   cmovns  rax, r11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448555, "I\x0fI\xc3")
        cpu.RIP = 0x448555
        cpu.SF = False
        cpu.RAX = 0x0
        cpu.R11 = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x448555:0x448559], [b"I", b"\x0f", b"I", b"\xc3"])
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 4490585)
        self.assertEqual(cpu.R11, 0)

    def test_CMOVNS_2(self):
        """Instruction CMOVNS_2
        Groups: cmov
        0x448555:   cmovns  rax, r11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448555, "I\x0fI\xc3")
        cpu.RIP = 0x448555
        cpu.SF = False
        cpu.RAX = 0x0
        cpu.R11 = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x448555:0x448559], [b"I", b"\x0f", b"I", b"\xc3"])
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 4490585)
        self.assertEqual(cpu.R11, 0)

    def test_CMPSB_1(self):
        """Instruction CMPSB_1
        Groups:
        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x40065B, "\xf3\xa6")
        mem.write(0x491604, "ZARAZA\x00M")
        mem.write(0x7FFFFFFFDA80, "Z\xed\xcf\xc2\xc0\xe0\x94\xff")
        cpu.RDI = 0x491604
        cpu.RCX = 0x7
        cpu.RSI = 0x7FFFFFFFDA80
        cpu.RIP = 0x40065B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40065B:0x40065D], [b"\xf3", b"\xa6"])
        self.assertEqual(
            mem[0x491604:0x49160C], [b"Z", b"A", b"R", b"A", b"Z", b"A", b"\x00", b"M"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFDA80:0x7FFFFFFFDA88],
            [b"Z", b"\xed", b"\xcf", b"\xc2", b"\xc0", b"\xe0", b"\x94", b"\xff"],
        )
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RDI, 4789765)
        self.assertEqual(cpu.RSI, 140737488345729)
        self.assertEqual(cpu.RIP, 4195931)

    def test_CMPSB_2(self):
        """Instruction CMPSB_2
        Groups:
        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x400657, "\xf3\xa6")
        mem.write(0x491817, "--dostuf")
        mem.write(0x7FFFFFFFE06A, "arg1\x00arg")
        cpu.RDI = 0x491817
        cpu.RCX = 0xA
        cpu.RSI = 0x7FFFFFFFE06A
        cpu.RIP = 0x400657
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400657:0x400659], [b"\xf3", b"\xa6"])
        self.assertEqual(mem[0x491817:0x49181F], [b"-", b"-", b"d", b"o", b"s", b"t", b"u", b"f"])
        self.assertEqual(
            mem[0x7FFFFFFFE06A:0x7FFFFFFFE072], [b"a", b"r", b"g", b"1", b"\x00", b"a", b"r", b"g"]
        )
        self.assertEqual(cpu.RCX, 9)
        self.assertEqual(cpu.RDI, 4790296)
        self.assertEqual(cpu.RSI, 140737488347243)
        self.assertEqual(cpu.RIP, 4195929)

    def test_CMPSB_3(self):
        """Instruction CMPSB_3
        Groups:
        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x40065B, "\xf3\xa6")
        mem.write(0x491605, "ARAZA\x00Me")
        mem.write(0x7FFFFFFFDA81, "\xed\xcf\xc2\xc0\xe0\x94\xff\xea")
        cpu.RDI = 0x491605
        cpu.RCX = 0x6
        cpu.RSI = 0x7FFFFFFFDA81
        cpu.RIP = 0x40065B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40065B:0x40065D], [b"\xf3", b"\xa6"])
        self.assertEqual(
            mem[0x491605:0x49160D], [b"A", b"R", b"A", b"Z", b"A", b"\x00", b"M", b"e"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFDA81:0x7FFFFFFFDA89],
            [b"\xed", b"\xcf", b"\xc2", b"\xc0", b"\xe0", b"\x94", b"\xff", b"\xea"],
        )
        self.assertEqual(cpu.RCX, 5)
        self.assertEqual(cpu.RDI, 4789766)
        self.assertEqual(cpu.RSI, 140737488345730)
        self.assertEqual(cpu.RIP, 4195933)

    def test_CMPSB_4(self):
        """Instruction CMPSB_4
        Groups:
        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x400657, "\xf3\xa6")
        mem.write(0x491817, "--dostuf")
        mem.write(0x7FFFFFFFE065, "arg1\x00arg")
        cpu.RDI = 0x491817
        cpu.RCX = 0xA
        cpu.RSI = 0x7FFFFFFFE065
        cpu.RIP = 0x400657
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400657:0x400659], [b"\xf3", b"\xa6"])
        self.assertEqual(mem[0x491817:0x49181F], [b"-", b"-", b"d", b"o", b"s", b"t", b"u", b"f"])
        self.assertEqual(
            mem[0x7FFFFFFFE065:0x7FFFFFFFE06D], [b"a", b"r", b"g", b"1", b"\x00", b"a", b"r", b"g"]
        )
        self.assertEqual(cpu.RCX, 9)
        self.assertEqual(cpu.RDI, 4790296)
        self.assertEqual(cpu.RSI, 140737488347238)
        self.assertEqual(cpu.RIP, 4195929)

    def test_CMPSB_5(self):
        """Instruction CMPSB_5
        Groups:
        0x55555555478b:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x55555555478B, "\xf3\xa6")
        mem.write(0x555555554998, "ZARAZA\x00M")
        mem.write(0x7FFFFFFFDA80, "\xc6\xd9P%\xc1\xe2\xc9\x7f")
        cpu.RDI = 0x555555554998
        cpu.RCX = 0x7
        cpu.RSI = 0x7FFFFFFFDA80
        cpu.RIP = 0x55555555478B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x55555555478B:0x55555555478D], [b"\xf3", b"\xa6"])
        self.assertEqual(
            mem[0x555555554998:0x5555555549A0], [b"Z", b"A", b"R", b"A", b"Z", b"A", b"\x00", b"M"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFDA80:0x7FFFFFFFDA88],
            [b"\xc6", b"\xd9", b"P", b"%", b"\xc1", b"\xe2", b"\xc9", b"\x7f"],
        )
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RDI, 93824992233881)
        self.assertEqual(cpu.RSI, 140737488345729)
        self.assertEqual(cpu.RIP, 93824992233357)

    def test_CMPSB_6(self):
        """Instruction CMPSB_6
        Groups:
        0x5555555548c0:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555548C0, "\xf3\xa6")
        mem.write(0x5555555549A8, "ZARAZA\x00M")
        mem.write(0x7FFFFFFFDA80, "\x91\x04\xd2\xd0\x1f\x1c(P")
        cpu.RDI = 0x5555555549A8
        cpu.RCX = 0x7
        cpu.RSI = 0x7FFFFFFFDA80
        cpu.RIP = 0x5555555548C0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555548C0:0x5555555548C2], [b"\xf3", b"\xa6"])
        self.assertEqual(
            mem[0x5555555549A8:0x5555555549B0], [b"Z", b"A", b"R", b"A", b"Z", b"A", b"\x00", b"M"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFDA80:0x7FFFFFFFDA88],
            [b"\x91", b"\x04", b"\xd2", b"\xd0", b"\x1f", b"\x1c", b"(", b"P"],
        )
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RDI, 93824992233897)
        self.assertEqual(cpu.RSI, 140737488345729)
        self.assertEqual(cpu.RIP, 93824992233666)

    def test_CMPXCHG8B_1(self):
        """Instruction CMPXCHG8B_1
        Groups:
        0x5c68cb:   lock cmpxchg8b  qword ptr [rsp + 4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x005C6000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x5C68CB, "\xf0\x0f\xc7L$\x04")
        mem.write(0x7FFFFFFFCCB4, "\x80\x00\x00\x00\x01\x80\x00\x00")
        cpu.EBX = 0x80000001
        cpu.RIP = 0x5C68CB
        cpu.EAX = 0x80000001
        cpu.EDX = 0x8001
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.ECX = 0x80
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5C68CB:0x5C68D1], [b"\xf0", b"\x0f", b"\xc7", b"L", b"$", b"\x04"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB4:0x7FFFFFFFCCBC],
            [b"\x80", b"\x00", b"\x00", b"\x00", b"\x01", b"\x80", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6056145)
        self.assertEqual(cpu.EAX, 128)
        self.assertEqual(cpu.EDX, 32769)
        self.assertEqual(cpu.EBX, 2147483649)
        self.assertEqual(cpu.ECX, 128)

    def test_CMPXCHG8B_2(self):
        """Instruction CMPXCHG8B_2
        Groups:
        0x5861a9:   lock cmpxchg8b  qword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00586000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x5861A9, "\xf0\x0f\xc7\x0c$")
        mem.write(0x7FFFFFFFCCB0, "\x00\x00\x00\x80\x00\x00\x00\x80")
        cpu.EBX = 0x80000000
        cpu.RIP = 0x5861A9
        cpu.EAX = 0x80000000
        cpu.EDX = 0xFFFFFFFF
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.ECX = 0x80000000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5861A9:0x5861AE], [b"\xf0", b"\x0f", b"\xc7", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"\x00", b"\x00", b"\x00", b"\x80", b"\x00", b"\x00", b"\x00", b"\x80"],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5792174)
        self.assertEqual(cpu.EAX, 2147483648)
        self.assertEqual(cpu.EDX, 2147483648)
        self.assertEqual(cpu.EBX, 2147483648)
        self.assertEqual(cpu.ECX, 2147483648)

    def test_CMPXCHG8B_3(self):
        """Instruction CMPXCHG8B_3
        Groups:
        0x58de05:   lock cmpxchg8b  qword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0058D000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x58DE05, "\xf0\x0f\xc7\x0c$")
        mem.write(0x7FFFFFFFCCB0, "\x01\x00\x00\x80@\x00\x00\x00")
        cpu.EBX = 0x80000001
        cpu.RIP = 0x58DE05
        cpu.EAX = 0x80000001
        cpu.EDX = 0x21
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.ECX = 0x40
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x58DE05:0x58DE0A], [b"\xf0", b"\x0f", b"\xc7", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"\x01", b"\x00", b"\x00", b"\x80", b"@", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5824010)
        self.assertEqual(cpu.EAX, 2147483649)
        self.assertEqual(cpu.EDX, 64)
        self.assertEqual(cpu.EBX, 2147483649)
        self.assertEqual(cpu.ECX, 64)

    def test_CMPXCHG8B_4(self):
        """Instruction CMPXCHG8B_4
        Groups:
        0x59b473:   lock cmpxchg8b  qword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0059B000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x59B473, "\xf0\x0f\xc7\x0c$")
        mem.write(0x7FFFFFFFCCB0, "\xff\xff\xff\xff\x80\x00\x00\x00")
        cpu.EBX = 0xFFFFFFFF
        cpu.RIP = 0x59B473
        cpu.EAX = 0xFFFFFFFF
        cpu.EDX = 0x80
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.ECX = 0x80
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x59B473:0x59B478], [b"\xf0", b"\x0f", b"\xc7", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"\xff", b"\xff", b"\xff", b"\xff", b"\x80", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5878904)
        self.assertEqual(cpu.EAX, 4294967295)
        self.assertEqual(cpu.EDX, 128)
        self.assertEqual(cpu.EBX, 4294967295)
        self.assertEqual(cpu.ECX, 128)

    def test_CMPXCHG8B_5(self):
        """Instruction CMPXCHG8B_5
        Groups:
        0x624e14:   lock cmpxchg8b  qword ptr [rsp + 8]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00624000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x624E14, "\xf0\x0f\xc7L$\x08")
        mem.write(0x7FFFFFFFCCB8, "\x00\x00\x00\x80@\x00\x00\x00")
        cpu.EBX = 0x40
        cpu.RIP = 0x624E14
        cpu.EAX = 0x40
        cpu.EDX = 0x80000000
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.ECX = 0x8001
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x624E14:0x624E1A], [b"\xf0", b"\x0f", b"\xc7", b"L", b"$", b"\x08"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB8:0x7FFFFFFFCCC0],
            [b"\x00", b"\x00", b"\x00", b"\x80", b"@", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6442522)
        self.assertEqual(cpu.EAX, 2147483648)
        self.assertEqual(cpu.EDX, 64)
        self.assertEqual(cpu.EBX, 64)
        self.assertEqual(cpu.ECX, 32769)

    def test_CMPXCHG8B_6(self):
        """Instruction CMPXCHG8B_6
        Groups:
        0x5bfa73:   lock cmpxchg8b  qword ptr [rsp + 4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x005BF000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x5BFA73, "\xf0\x0f\xc7L$\x04")
        mem.write(0x7FFFFFFFCCB4, "\x01\x80\x00\x00\x7f\x00\x00\x00")
        cpu.EBX = 0x80000000
        cpu.RIP = 0x5BFA73
        cpu.EAX = 0x80000000
        cpu.EDX = 0x7F
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.ECX = 0x8001
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5BFA73:0x5BFA79], [b"\xf0", b"\x0f", b"\xc7", b"L", b"$", b"\x04"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB4:0x7FFFFFFFCCBC],
            [b"\x01", b"\x80", b"\x00", b"\x00", b"\x7f", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6027897)
        self.assertEqual(cpu.EAX, 32769)
        self.assertEqual(cpu.EDX, 127)
        self.assertEqual(cpu.EBX, 2147483648)
        self.assertEqual(cpu.ECX, 32769)

    def test_CMPXCHG_1(self):
        """Instruction CMPXCHG_1
        Groups:
        0x7ffff7a65367:     cmpxchg dword ptr [rip + 0x36fde2], esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD5000, 0x1000, "rwx")
        mem.write(0x7FFFF7A65367, "\x0f\xb15\xe2\xfd6\x00")
        mem.write(0x7FFFF7DD5150, "\x00\x00\x00\x00")
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RAX = 0x0
        cpu.CF = False
        cpu.RIP = 0x7FFFF7A65367
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A65367:0x7FFFF7A6536E],
            [b"\x0f", b"\xb1", b"5", b"\xe2", b"\xfd", b"6", b"\x00"],
        )
        self.assertEqual(mem[0x7FFFF7DD5150:0x7FFFF7DD5154], [b"\x01", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348260718)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_2(self):
        """Instruction CMPXCHG_2
        Groups:
        0x40abbf:   cmpxchg dword ptr [rdx], esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040A000, 0x1000, "rwx")
        mem.mmap(0x006BE000, 0x1000, "rwx")
        mem.write(0x40ABBF, "\x0f\xb12")
        mem.write(0x6BE760, "\x00\x00\x00\x00")
        cpu.SF = False
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RAX = 0x0
        cpu.CF = False
        cpu.RIP = 0x40ABBF
        cpu.RDX = 0x6BE760
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40ABBF:0x40ABC2], [b"\x0f", b"\xb1", b"2"])
        self.assertEqual(mem[0x6BE760:0x6BE764], [b"\x01", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4238274)
        self.assertEqual(cpu.RDX, 7071584)

    def test_CMPXCHG_3(self):
        """Instruction CMPXCHG_3
        Groups:
        0x413646:   cmpxchg dword ptr [rbx], esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, "rwx")
        mem.mmap(0x006B9000, 0x1000, "rwx")
        mem.write(0x413646, "\x0f\xb13")
        mem.write(0x6B9840, "\x00\x00\x00\x00")
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x6B9840
        cpu.CF = False
        cpu.RIP = 0x413646
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x413646:0x413649], [b"\x0f", b"\xb1", b"3"])
        self.assertEqual(mem[0x6B9840:0x6B9844], [b"\x01", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 7051328)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4273737)
        self.assertEqual(cpu.SF, False)

    def test_CMPXCHG_4(self):
        """Instruction CMPXCHG_4
        Groups:
        0x435a25:   cmpxchg qword ptr [rdx], rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, "rwx")
        mem.mmap(0x006BD000, 0x1000, "rwx")
        mem.write(0x435A25, "H\x0f\xb1:")
        mem.write(0x6BD380, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RDI = 0x6BB7C0
        cpu.CF = False
        cpu.RIP = 0x435A25
        cpu.RDX = 0x6BD380
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x435A25:0x435A29], [b"H", b"\x0f", b"\xb1", b":"])
        self.assertEqual(
            mem[0x6BD380:0x6BD388],
            [b"\xc0", b"\xb7", b"k", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RDI, 7059392)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4413993)
        self.assertEqual(cpu.RDX, 7066496)

    def test_CMPXCHG_5(self):
        """Instruction CMPXCHG_5
        Groups:
        0x41086e:   cmpxchg dword ptr [rdx], ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, "rwx")
        mem.mmap(0x006BE000, 0x1000, "rwx")
        mem.write(0x41086E, "\x0f\xb1\n")
        mem.write(0x6BE760, "\x00\x00\x00\x00")
        cpu.SF = False
        cpu.PF = True
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.ECX = 0x1
        cpu.CF = False
        cpu.RIP = 0x41086E
        cpu.RDX = 0x6BE760
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41086E:0x410871], [b"\x0f", b"\xb1", b"\n"])
        self.assertEqual(mem[0x6BE760:0x6BE764], [b"\x01", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4262001)
        self.assertEqual(cpu.RDX, 7071584)

    def test_CMPXCHG_6(self):
        """Instruction CMPXCHG_6
        Groups:
        0x7ffff7aafa06:     cmpxchg dword ptr [rbx], esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AAF000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD3000, 0x1000, "rwx")
        mem.write(0x7FFFF7AAFA06, "\x0f\xb13")
        mem.write(0x7FFFF7DD3B80, "\x00\x00\x00\x00")
        cpu.PF = True
        cpu.ESI = 0x1
        cpu.RAX = 0x0
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RBX = 0x7FFFF7DD3B80
        cpu.CF = False
        cpu.RIP = 0x7FFFF7AAFA06
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AAFA06:0x7FFFF7AAFA09], [b"\x0f", b"\xb1", b"3"])
        self.assertEqual(mem[0x7FFFF7DD3B80:0x7FFFF7DD3B84], [b"\x01", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ESI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RBX, 140737351859072)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348565513)
        self.assertEqual(cpu.SF, False)

    def test_CMP_1(self):
        """Instruction CMP_1
        Groups:
        0x7ffff7b58f43:     cmp     r12, r9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F43, "M9\xcc")
        cpu.SF = False
        cpu.PF = True
        cpu.R12 = 0x7FFFF7AB0F80
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7B58F43
        cpu.R9 = 0x7FFFF7B23C00
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F43:0x7FFFF7B58F46], [b"M", b"9", b"\xcc"])
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.R12, 140737348571008)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737349259078)
        self.assertEqual(cpu.R9, 140737349041152)

    def test_CMP_2(self):
        """Instruction CMP_2
        Groups:
        0x406e1d:   cmp     r14w, word ptr [rbx]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x406E1D, "fD;3")
        mem.write(0x7FFFFFFFEE69, "WI")
        cpu.R14W = 0x444C
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RBX = 0x7FFFFFFFEE69
        cpu.CF = False
        cpu.RIP = 0x406E1D
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406E1D:0x406E21], [b"f", b"D", b";", b"3"])
        self.assertEqual(mem[0x7FFFFFFFEE69:0x7FFFFFFFEE6B], [b"W", b"I"])
        self.assertEqual(cpu.R14W, 17484)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RBX, 140737488350825)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222497)
        self.assertEqual(cpu.SF, True)

    def test_CMP_3(self):
        """Instruction CMP_3
        Groups:
        0x40d167:   cmp     eax, 0xff
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40D167, "\x83\xf8\xff")
        cpu.EAX = 0x1
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x40D167
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40D167:0x40D16A], [b"\x83", b"\xf8", b"\xff"])
        self.assertEqual(cpu.EAX, 1)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4247914)
        self.assertEqual(cpu.SF, False)

    def test_CMP_4(self):
        """Instruction CMP_4
        Groups:
        0x7ffff7de4488:     cmp     qword ptr [rbp - 0x90], 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4488, "H\x83\xbdp\xff\xff\xff\x00")
        mem.write(0x7FFFFFFFD9A0, "\xe0M\xa3\xf7\xff\x7f\x00\x00")
        cpu.SF = False
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4488
        cpu.RBP = 0x7FFFFFFFDA30
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE4488:0x7FFFF7DE4490],
            [b"H", b"\x83", b"\xbd", b"p", b"\xff", b"\xff", b"\xff", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFD9A0:0x7FFFFFFFD9A8],
            [b"\xe0", b"M", b"\xa3", b"\xf7", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926928)
        self.assertEqual(cpu.RBP, 140737488345648)

    def test_CMP_5(self):
        """Instruction CMP_5
        Groups:
        0x7ffff7de6111:     cmp     rax, 0x26
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6111, "H\x83\xf8&")
        cpu.PF = True
        cpu.RAX = 0x8
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6111
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6111:0x7FFFF7DE6115], [b"H", b"\x83", b"\xf8", b"&"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 8)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351934229)
        self.assertEqual(cpu.SF, True)

    def test_CMP_6(self):
        """Instruction CMP_6
        Groups:
        0x7ffff7de620b:     cmp     r12, 0x24
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE620B, "I\x83\xfc$")
        cpu.PF = False
        cpu.R12 = 0x6
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE620B
        cpu.SF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE620B:0x7FFFF7DE620F], [b"I", b"\x83", b"\xfc", b"$"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R12, 6)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351934479)
        self.assertEqual(cpu.SF, True)

    def test_CQO_1(self):
        """Instruction CQO_1
        Groups:
        0x400794:   cqo
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400794, "H\x99")
        cpu.RIP = 0x400794
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400794:0x400796], [b"H", b"\x99"])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196246)

    def test_CQO_2(self):
        """Instruction CQO_2
        Groups:
        0x4006d4:   cqo
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D4, "H\x99")
        cpu.RIP = 0x4006D4
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4006D4:0x4006D6], [b"H", b"\x99"])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196054)

    def test_CQO_3(self):
        """Instruction CQO_3
        Groups:
        0x7ffff7a4e234:     cqo
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E234, "H\x99")
        cpu.RIP = 0x7FFFF7A4E234
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4E234:0x7FFFF7A4E236], [b"H", b"\x99"])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166198)

    def test_CQO_4(self):
        """Instruction CQO_4
        Groups:
        0x7ffff7a4e234:     cqo
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E234, "H\x99")
        cpu.RIP = 0x7FFFF7A4E234
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4E234:0x7FFFF7A4E236], [b"H", b"\x99"])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166198)

    def test_CQO_5(self):
        """Instruction CQO_5
        Groups:
        0x4006d4:   cqo
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D4, "H\x99")
        cpu.RIP = 0x4006D4
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4006D4:0x4006D6], [b"H", b"\x99"])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196054)

    def test_CQO_6(self):
        """Instruction CQO_6
        Groups:
        0x7ffff7a4e234:     cqo
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E234, "H\x99")
        cpu.RIP = 0x7FFFF7A4E234
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4E234:0x7FFFF7A4E236], [b"H", b"\x99"])
        self.assertEqual(cpu.RAX, 6291456)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166198)

    def test_DEC_1(self):
        """Instruction DEC_1
        Groups: mode64
        0x41e10a:   dec     ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041E000, 0x1000, "rwx")
        mem.write(0x41E10A, "\xff\xc9")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x41E10A
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0xD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41E10A:0x41E10C], [b"\xff", b"\xc9"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 4317452)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 12)

    def test_DEC_2(self):
        """Instruction DEC_2
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF462C:0x7FFFF7DF462E], [b"\xff", b"\xc9"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 3)

    def test_DEC_3(self):
        """Instruction DEC_3
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x2
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF462C:0x7FFFF7DF462E], [b"\xff", b"\xc9"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 1)

    def test_DEC_4(self):
        """Instruction DEC_4
        Groups: mode64
        0x7ffff7a65448:     dec     dword ptr [rip + 0x36fd02]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD5000, 0x1000, "rwx")
        mem.write(0x7FFFF7A65448, "\xff\r\x02\xfd6\x00")
        mem.write(0x7FFFF7DD5150, "\x01\x00\x00\x00")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 0x7FFFF7A65448
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A65448:0x7FFFF7A6544E], [b"\xff", b"\r", b"\x02", b"\xfd", b"6", b"\x00"]
        )
        self.assertEqual(mem[0x7FFFF7DD5150:0x7FFFF7DD5154], [b"\x00", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RIP, 140737348260942)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_DEC_5(self):
        """Instruction DEC_5
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = True
        cpu.SF = False
        cpu.ECX = 0x4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF462C:0x7FFFF7DF462E], [b"\xff", b"\xc9"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 3)

    def test_DEC_6(self):
        """Instruction DEC_6
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = False
        cpu.SF = False
        cpu.ECX = 0x1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF462C:0x7FFFF7DF462E], [b"\xff", b"\xc9"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.RIP, 140737351992878)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.ECX, 0)

    def test_DIV_1(self):
        """Instruction DIV_1
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = 0x3F3
        cpu.RDX = 0x0
        cpu.RAX = 0x3DE00EC7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3FF8:0x7FFFF7DE3FFB], [b"H", b"\xf7", b"\xf1"])
        self.assertEqual(cpu.RAX, 1026799)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 234)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_2(self):
        """Instruction DIV_2
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = 0x3F3
        cpu.RDX = 0x0
        cpu.RAX = 0x3DE00EC7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3FF8:0x7FFFF7DE3FFB], [b"H", b"\xf7", b"\xf1"])
        self.assertEqual(cpu.RAX, 1026799)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 234)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_3(self):
        """Instruction DIV_3
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = 0x3F3
        cpu.RDX = 0x0
        cpu.RAX = 0x9E7650BC
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3FF8:0x7FFFF7DE3FFB], [b"H", b"\xf7", b"\xf1"])
        self.assertEqual(cpu.RAX, 2629628)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 136)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_4(self):
        """Instruction DIV_4
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = 0x3F3
        cpu.RDX = 0x0
        cpu.RAX = 0x10A8B550
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3FF8:0x7FFFF7DE3FFB], [b"H", b"\xf7", b"\xf1"])
        self.assertEqual(cpu.RAX, 276450)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 970)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_5(self):
        """Instruction DIV_5
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = 0x32
        cpu.RDX = 0x0
        cpu.RAX = 0x3CBC6423
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3FF8:0x7FFFF7DE3FFB], [b"H", b"\xf7", b"\xf1"])
        self.assertEqual(cpu.RAX, 20379587)
        self.assertEqual(cpu.RCX, 50)
        self.assertEqual(cpu.RDX, 13)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_DIV_6(self):
        """Instruction DIV_6
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = 0x3F3
        cpu.RDX = 0x0
        cpu.RAX = 0x2E8912D8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3FF8:0x7FFFF7DE3FFB], [b"H", b"\xf7", b"\xf1"])
        self.assertEqual(cpu.RAX, 772240)
        self.assertEqual(cpu.RCX, 1011)
        self.assertEqual(cpu.RDX, 552)
        self.assertEqual(cpu.RIP, 140737351925755)

    def test_IDIV_1(self):
        """Instruction IDIV_1
        Groups:
        0x7ffff7a4e236:     idiv    r8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E236, "I\xf7\xf8")
        cpu.RIP = 0x7FFFF7A4E236
        cpu.R8 = 0x8
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4E236:0x7FFFF7A4E239], [b"I", b"\xf7", b"\xf8"])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166201)

    def test_IDIV_2(self):
        """Instruction IDIV_2
        Groups:
        0x4006d6:   idiv    r8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D6, "I\xf7\xf8")
        cpu.RIP = 0x4006D6
        cpu.R8 = 0x8
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4006D6:0x4006D9], [b"I", b"\xf7", b"\xf8"])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196057)

    def test_IDIV_3(self):
        """Instruction IDIV_3
        Groups:
        0x7ffff7a4e236:     idiv    r8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E236, "I\xf7\xf8")
        cpu.RIP = 0x7FFFF7A4E236
        cpu.R8 = 0x8
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4E236:0x7FFFF7A4E239], [b"I", b"\xf7", b"\xf8"])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166201)

    def test_IDIV_4(self):
        """Instruction IDIV_4
        Groups:
        0x4006d6:   idiv    r8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D6, "I\xf7\xf8")
        cpu.RIP = 0x4006D6
        cpu.R8 = 0x8
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4006D6:0x4006D9], [b"I", b"\xf7", b"\xf8"])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196057)

    def test_IDIV_5(self):
        """Instruction IDIV_5
        Groups:
        0x4006d6:   idiv    r8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D6, "I\xf7\xf8")
        cpu.RIP = 0x4006D6
        cpu.R8 = 0x8
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4006D6:0x4006D9], [b"I", b"\xf7", b"\xf8"])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4196057)

    def test_IDIV_6(self):
        """Instruction IDIV_6
        Groups:
        0x7ffff7a4e236:     idiv    r8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E236, "I\xf7\xf8")
        cpu.RIP = 0x7FFFF7A4E236
        cpu.R8 = 0x8
        cpu.RDX = 0x0
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4E236:0x7FFFF7A4E239], [b"I", b"\xf7", b"\xf8"])
        self.assertEqual(cpu.RAX, 786432)
        self.assertEqual(cpu.R8, 8)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348166201)

    def test_IMUL_1(self):
        """Instruction IMUL_1
        Groups:
        0x7ffff7acfec4:     imul    eax, edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFEC4, "\x0f\xaf\xc2")
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7ACFEC4
        cpu.RDX = 0x1
        cpu.EAX = 0x600000
        cpu.EDX = 0x1
        cpu.RAX = 0x600000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7ACFEC4:0x7FFFF7ACFEC7], [b"\x0f", b"\xaf", b"\xc2"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348697799)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.EAX, 6291456)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.RAX, 6291456)

    def test_IMUL_2(self):
        """Instruction IMUL_2
        Groups:
        0x7ffff7acfeb3:     imul    eax, edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFEB3, "\x0f\xaf\xc2")
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7ACFEB3
        cpu.RDX = 0x8
        cpu.EAX = 0x40
        cpu.EDX = 0x8
        cpu.RAX = 0x40
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7ACFEB3:0x7FFFF7ACFEB6], [b"\x0f", b"\xaf", b"\xc2"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348697782)
        self.assertEqual(cpu.RDX, 8)
        self.assertEqual(cpu.EAX, 512)
        self.assertEqual(cpu.EDX, 8)
        self.assertEqual(cpu.RAX, 512)

    def test_IMUL_3(self):
        """Instruction IMUL_3
        Groups:
        0x43230c:   imul    edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43230C, "\xf7\xea")
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x43230C
        cpu.RDX = 0x55555556
        cpu.EDX = 0x55555556
        cpu.RAX = 0x3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43230C:0x43230E], [b"\xf7", b"\xea"])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399886)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.RAX, 2)

    def test_IMUL_4(self):
        """Instruction IMUL_4
        Groups:
        0x43230c:   imul    edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43230C, "\xf7\xea")
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x43230C
        cpu.RDX = 0x55555556
        cpu.EDX = 0x55555556
        cpu.RAX = 0x3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43230C:0x43230E], [b"\xf7", b"\xea"])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399886)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.EDX, 1)
        self.assertEqual(cpu.RAX, 2)

    def test_IMUL_5(self):
        """Instruction IMUL_5
        Groups:
        0x41403c:   imul    r12, rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x41403C, "L\x0f\xaf\xe6")
        cpu.R12 = 0x491
        cpu.RSI = 0x1
        cpu.OF = False
        cpu.RDX = 0x491
        cpu.RIP = 0x41403C
        cpu.CF = False
        cpu.RAX = 0xFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41403C:0x414040], [b"L", b"\x0f", b"\xaf", b"\xe6"])
        self.assertEqual(cpu.R12, 1169)
        self.assertEqual(cpu.RSI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4276288)
        self.assertEqual(cpu.RDX, 1169)
        self.assertEqual(cpu.RAX, 4294967295)

    def test_IMUL_6(self):
        """Instruction IMUL_6
        Groups:
        0x413fdc:   imul    r12, rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, "rwx")
        mem.write(0x413FDC, "L\x0f\xaf\xe6")
        cpu.R12 = 0x491
        cpu.RSI = 0x1
        cpu.OF = False
        cpu.RDX = 0x491
        cpu.RIP = 0x413FDC
        cpu.CF = False
        cpu.RAX = 0xFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x413FDC:0x413FE0], [b"L", b"\x0f", b"\xaf", b"\xe6"])
        self.assertEqual(cpu.R12, 1169)
        self.assertEqual(cpu.RSI, 1)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4276192)
        self.assertEqual(cpu.RDX, 1169)
        self.assertEqual(cpu.RAX, 4294967295)

    def test_INC_1(self):
        """Instruction INC_1
        Groups:
        0x7ffff7df4596:     inc     rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4596, "H\xff\xc7")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 0x7FFFF7DF4596
        cpu.PF = True
        cpu.RDI = 0x7FFFF7A44729
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4596:0x7FFFF7DF4599], [b"H", b"\xff", b"\xc7"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992729)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RDI, 140737348126506)
        self.assertEqual(cpu.SF, False)

    def test_INC_2(self):
        """Instruction INC_2
        Groups:
        0x7ffff7df4596:     inc     rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4596, "H\xff\xc7")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 0x7FFFF7DF4596
        cpu.PF = True
        cpu.RDI = 0x7FFFF7DDA5EC
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4596:0x7FFFF7DF4599], [b"H", b"\xff", b"\xc7"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992729)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RDI, 140737351886317)
        self.assertEqual(cpu.SF, False)

    def test_INC_3(self):
        """Instruction INC_3
        Groups:
        0x7ffff7df4599:     inc     rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4599, "H\xff\xc6")
        cpu.RSI = 0x7FFFF7A4472A
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF4599
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4599:0x7FFFF7DF459C], [b"H", b"\xff", b"\xc6"])
        self.assertEqual(cpu.RSI, 140737348126507)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992732)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_INC_4(self):
        """Instruction INC_4
        Groups:
        0x7ffff7df4596:     inc     rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4596, "H\xff\xc7")
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RIP = 0x7FFFF7DF4596
        cpu.PF = True
        cpu.RDI = 0x7FFFF7A4472E
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4596:0x7FFFF7DF4599], [b"H", b"\xff", b"\xc7"])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992729)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RDI, 140737348126511)
        self.assertEqual(cpu.SF, False)

    def test_INC_5(self):
        """Instruction INC_5
        Groups:
        0x7ffff7df4599:     inc     rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4599, "H\xff\xc6")
        cpu.RSI = 0x555555554CBB
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF4599
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4599:0x7FFFF7DF459C], [b"H", b"\xff", b"\xc6"])
        self.assertEqual(cpu.RSI, 93824992234684)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992732)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_INC_6(self):
        """Instruction INC_6
        Groups:
        0x7ffff7df4599:     inc     rsi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4599, "H\xff\xc6")
        cpu.RSI = 0x7FFFF7A44726
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF4599
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4599:0x7FFFF7DF459C], [b"H", b"\xff", b"\xc6"])
        self.assertEqual(cpu.RSI, 140737348126503)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RIP, 140737351992732)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_JAE_1(self):
        """Instruction JAE_1
        Groups: jump
        0x7ffff7aa96ab:     jae     0x7ffff7aa96e8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96AB, "s;")
        cpu.CF = True
        cpu.RIP = 0x7FFFF7AA96AB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AA96AB:0x7FFFF7AA96AD], [b"s", b";"])
        self.assertEqual(cpu.RIP, 140737348540077)

    def test_JAE_2(self):
        """Instruction JAE_2
        Groups: jump
        0x400c11:   jae     0x400c69
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C11, "sV")
        cpu.CF = False
        cpu.RIP = 0x400C11
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400C11:0x400C13], [b"s", b"V"])
        self.assertEqual(cpu.RIP, 4197481)

    def test_JAE_3(self):
        """Instruction JAE_3
        Groups: jump
        0x432400:   jae     0x432440
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432400, "s>")
        cpu.CF = True
        cpu.RIP = 0x432400
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432400:0x432402], [b"s", b">"])
        self.assertEqual(cpu.RIP, 4400130)

    def test_JAE_4(self):
        """Instruction JAE_4
        Groups: jump
        0x411d5b:   jae     0x412155
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411D5B, "\x0f\x83\xf4\x03\x00\x00")
        cpu.CF = False
        cpu.RIP = 0x411D5B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x411D5B:0x411D61], [b"\x0f", b"\x83", b"\xf4", b"\x03", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 4268373)

    def test_JAE_5(self):
        """Instruction JAE_5
        Groups: jump
        0x7ffff7b58f5d:     jae     0x7ffff7b58f00
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F5D, "s\xa1")
        cpu.CF = False
        cpu.RIP = 0x7FFFF7B58F5D
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F5D:0x7FFFF7B58F5F], [b"s", b"\xa1"])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JAE_6(self):
        """Instruction JAE_6
        Groups: jump
        0x400b82:   jae     0x400b9f
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B82, "s\x1b")
        cpu.CF = True
        cpu.RIP = 0x400B82
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400B82:0x400B84], [b"s", b"\x1b"])
        self.assertEqual(cpu.RIP, 4197252)

    def test_JA_1(self):
        """Instruction JA_1
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6132
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6132:0x7FFFF7DE6134], [b"w", b"\xd4"])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_2(self):
        """Instruction JA_2
        Groups: jump
        0x7ffff7ddf066:     ja      0x7ffff7ddf0b2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDF000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDF066, "wJ")
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x7FFFF7DDF066
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DDF066:0x7FFFF7DDF068], [b"w", b"J"])
        self.assertEqual(cpu.RIP, 140737351905384)

    def test_JA_3(self):
        """Instruction JA_3
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6132
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6132:0x7FFFF7DE6134], [b"w", b"\xd4"])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_4(self):
        """Instruction JA_4
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6132
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6132:0x7FFFF7DE6134], [b"w", b"\xd4"])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_5(self):
        """Instruction JA_5
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6132
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6132:0x7FFFF7DE6134], [b"w", b"\xd4"])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JA_6(self):
        """Instruction JA_6
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6132
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6132:0x7FFFF7DE6134], [b"w", b"\xd4"])
        self.assertEqual(cpu.RIP, 140737351934216)

    def test_JBE_1(self):
        """Instruction JBE_1
        Groups: jump
        0x41188d:   jbe     0x411ec0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x41188D, "\x0f\x86-\x06\x00\x00")
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x41188D
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x41188D:0x411893], [b"\x0f", b"\x86", b"-", b"\x06", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 4267712)

    def test_JBE_2(self):
        """Instruction JBE_2
        Groups: jump
        0x4325e3:   jbe     0x4326cf
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4325E3, "\x0f\x86\xe6\x00\x00\x00")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4325E3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x4325E3:0x4325E9], [b"\x0f", b"\x86", b"\xe6", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 4400617)

    def test_JBE_3(self):
        """Instruction JBE_3
        Groups: jump
        0x432388:   jbe     0x4323aa
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432388, "v ")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x432388
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432388:0x43238A], [b"v", b" "])
        self.assertEqual(cpu.RIP, 4400010)

    def test_JBE_4(self):
        """Instruction JBE_4
        Groups: jump
        0x4325e3:   jbe     0x4326cf
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4325E3, "\x0f\x86\xe6\x00\x00\x00")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4325E3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x4325E3:0x4325E9], [b"\x0f", b"\x86", b"\xe6", b"\x00", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 4400617)

    def test_JBE_5(self):
        """Instruction JBE_5
        Groups: jump
        0x7ffff7df1269:     jbe     0x7ffff7df1289
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1269, "v\x1e")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF1269
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF1269:0x7FFFF7DF126B], [b"v", b"\x1e"])
        self.assertEqual(cpu.RIP, 140737351979627)

    def test_JBE_6(self):
        """Instruction JBE_6
        Groups: jump
        0x7ffff7acff53:     jbe     0x7ffff7ad003f
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFF53, "\x0f\x86\xe6\x00\x00\x00")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7ACFF53
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7ACFF53:0x7FFFF7ACFF59],
            [b"\x0f", b"\x86", b"\xe6", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737348697945)

    def test_JB_1(self):
        """Instruction JB_1
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = True
        cpu.RIP = 0x7FFFF7B58F46
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F46:0x7FFFF7B58F48], [b"r", b"\xb8"])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JB_2(self):
        """Instruction JB_2
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = False
        cpu.RIP = 0x7FFFF7B58F46
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F46:0x7FFFF7B58F48], [b"r", b"\xb8"])
        self.assertEqual(cpu.RIP, 140737349259080)

    def test_JB_3(self):
        """Instruction JB_3
        Groups: jump
        0x400bab:   jb      0x400ab4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BAB, "\x0f\x82\x03\xff\xff\xff")
        cpu.CF = True
        cpu.RIP = 0x400BAB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x400BAB:0x400BB1], [b"\x0f", b"\x82", b"\x03", b"\xff", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.RIP, 4197044)

    def test_JB_4(self):
        """Instruction JB_4
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = True
        cpu.RIP = 0x7FFFF7B58F46
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F46:0x7FFFF7B58F48], [b"r", b"\xb8"])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JB_5(self):
        """Instruction JB_5
        Groups: jump
        0x7ffff7ddeff1:     jb      0x7ffff7ddefd0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDE000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDEFF1, "r\xdd")
        cpu.CF = True
        cpu.RIP = 0x7FFFF7DDEFF1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DDEFF1:0x7FFFF7DDEFF3], [b"r", b"\xdd"])
        self.assertEqual(cpu.RIP, 140737351905232)

    def test_JB_6(self):
        """Instruction JB_6
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = True
        cpu.RIP = 0x7FFFF7B58F46
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58F46:0x7FFFF7B58F48], [b"r", b"\xb8"])
        self.assertEqual(cpu.RIP, 140737349259008)

    def test_JE_1(self):
        """Instruction JE_1
        Groups: jump
        0x7ffff7de3a9d:     je      0x7ffff7de3ed1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3A9D, "\x0f\x84.\x04\x00\x00")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE3A9D
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE3A9D:0x7FFFF7DE3AA3], [b"\x0f", b"\x84", b".", b"\x04", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 140737351924387)

    def test_JE_2(self):
        """Instruction JE_2
        Groups: jump
        0x7ffff7de61be:     je      0x7ffff7de65b8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE61BE, "\x0f\x84\xf4\x03\x00\x00")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE61BE
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE61BE:0x7FFFF7DE61C4],
            [b"\x0f", b"\x84", b"\xf4", b"\x03", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737351934404)

    def test_JE_3(self):
        """Instruction JE_3
        Groups: jump
        0x7ffff7de38c6:     je      0x7ffff7de3960
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE38C6, "\x0f\x84\x94\x00\x00\x00")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE38C6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE38C6:0x7FFFF7DE38CC],
            [b"\x0f", b"\x84", b"\x94", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737351923916)

    def test_JE_4(self):
        """Instruction JE_4
        Groups: jump
        0x7ffff7de440b:     je      0x7ffff7de4644
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE440B, "\x0f\x843\x02\x00\x00")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE440B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE440B:0x7FFFF7DE4411], [b"\x0f", b"\x84", b"3", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 140737351926801)

    def test_JE_5(self):
        """Instruction JE_5
        Groups: jump
        0x7ffff7de6115:     je      0x7ffff7de6121
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6115, "t\n")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE6115
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6115:0x7FFFF7DE6117], [b"t", b"\n"])
        self.assertEqual(cpu.RIP, 140737351934231)

    def test_JE_6(self):
        """Instruction JE_6
        Groups: jump
        0x406e0b:   je      0x406dc6
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406E0B, "t\xb9")
        cpu.ZF = False
        cpu.RIP = 0x406E0B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406E0B:0x406E0D], [b"t", b"\xb9"])
        self.assertEqual(cpu.RIP, 4222477)

    def test_JGE_1(self):
        """Instruction JGE_1
        Groups: jump
        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5B02, "\x0f\x8d\xd8\x00\x00\x00")
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 0x7FFFF7AB5B02
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AB5B02:0x7FFFF7AB5B08],
            [b"\x0f", b"\x8d", b"\xd8", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737348590344)

    def test_JGE_2(self):
        """Instruction JGE_2
        Groups: jump
        0x7ffff7b09879:     jge     0x7ffff7b0987f
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B09000, 0x1000, "rwx")
        mem.write(0x7FFFF7B09879, "}\x04")
        cpu.OF = False
        cpu.SF = False
        cpu.RIP = 0x7FFFF7B09879
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B09879:0x7FFFF7B0987B], [b"}", b"\x04"])
        self.assertEqual(cpu.RIP, 140737348933759)

    def test_JGE_3(self):
        """Instruction JGE_3
        Groups: jump
        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5B02, "\x0f\x8d\xd8\x00\x00\x00")
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 0x7FFFF7AB5B02
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AB5B02:0x7FFFF7AB5B08],
            [b"\x0f", b"\x8d", b"\xd8", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737348590344)

    def test_JG_1(self):
        """Instruction JG_1
        Groups: jump
        0x403684:   jg      0x40361a
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00403000, 0x1000, "rwx")
        mem.write(0x403684, "\x7f\x94")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x403684
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x403684:0x403686], [b"\x7f", b"\x94"])
        self.assertEqual(cpu.RIP, 4208154)

    def test_JG_2(self):
        """Instruction JG_2
        Groups: jump
        0x40c120:   jg      0x40c3f0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040C000, 0x1000, "rwx")
        mem.write(0x40C120, "\x0f\x8f\xca\x02\x00\x00")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x40C120
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x40C120:0x40C126], [b"\x0f", b"\x8f", b"\xca", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 4243750)

    def test_JG_3(self):
        """Instruction JG_3
        Groups: jump
        0x7ffff7df1357:     jg      0x7ffff7df13a0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1357, "\x7fG")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x7FFFF7DF1357
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF1357:0x7FFFF7DF1359], [b"\x7f", b"G"])
        self.assertEqual(cpu.RIP, 140737351979865)

    def test_JG_4(self):
        """Instruction JG_4
        Groups: jump
        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC9FB, "\x0f\x8f\x15\x04\x00\x00")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x7FFFF7DDC9FB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DDC9FB:0x7FFFF7DDCA01],
            [b"\x0f", b"\x8f", b"\x15", b"\x04", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737351896598)

    def test_JG_5(self):
        """Instruction JG_5
        Groups: jump
        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC9FB, "\x0f\x8f\x15\x04\x00\x00")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x7FFFF7DDC9FB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DDC9FB:0x7FFFF7DDCA01],
            [b"\x0f", b"\x8f", b"\x15", b"\x04", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737351896598)

    def test_JG_6(self):
        """Instruction JG_6
        Groups: jump
        0x40c2e4:   jg      0x40c250
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040C000, 0x1000, "rwx")
        mem.write(0x40C2E4, "\x0f\x8ff\xff\xff\xff")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x40C2E4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x40C2E4:0x40C2EA], [b"\x0f", b"\x8f", b"f", b"\xff", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.RIP, 4244202)

    def test_JLE_1(self):
        """Instruction JLE_1
        Groups: jump
        0x400b2b:   jle     0x400b01
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B2B, "~\xd4")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = True
        cpu.RIP = 0x400B2B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400B2B:0x400B2D], [b"~", b"\xd4"])
        self.assertEqual(cpu.RIP, 4197121)

    def test_JLE_2(self):
        """Instruction JLE_2
        Groups: jump
        0x7ffff7a4e1cb:     jle     0x7ffff7a4e429
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E1CB, "\x0f\x8eX\x02\x00\x00")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x7FFFF7A4E1CB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A4E1CB:0x7FFFF7A4E1D1], [b"\x0f", b"\x8e", b"X", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 140737348166097)

    def test_JLE_3(self):
        """Instruction JLE_3
        Groups: jump
        0x437c08:   jle     0x437c1f
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x437C08, "~\x15")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x437C08
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x437C08:0x437C0A], [b"~", b"\x15"])
        self.assertEqual(cpu.RIP, 4422666)

    def test_JLE_4(self):
        """Instruction JLE_4
        Groups: jump
        0x7ffff7de4486:     jle     0x7ffff7de4430
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4486, "~\xa8")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x7FFFF7DE4486
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4486:0x7FFFF7DE4488], [b"~", b"\xa8"])
        self.assertEqual(cpu.RIP, 140737351926920)

    def test_JLE_5(self):
        """Instruction JLE_5
        Groups: jump
        0x7ffff7de4486:     jle     0x7ffff7de4430
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4486, "~\xa8")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x7FFFF7DE4486
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4486:0x7FFFF7DE4488], [b"~", b"\xa8"])
        self.assertEqual(cpu.RIP, 140737351926920)

    def test_JLE_6(self):
        """Instruction JLE_6
        Groups: jump
        0x7ffff7de4486:     jle     0x7ffff7de4430
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4486, "~\xa8")
        cpu.OF = False
        cpu.ZF = False
        cpu.SF = False
        cpu.RIP = 0x7FFFF7DE4486
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4486:0x7FFFF7DE4488], [b"~", b"\xa8"])
        self.assertEqual(cpu.RIP, 140737351926920)

    def test_JL_1(self):
        """Instruction JL_1
        Groups: jump
        0x555555556f00:     jl      0x555555556ee2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.write(0x555555556F00, "|\xe0")
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 0x555555556F00
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556F00:0x555555556F02], [b"|", b"\xe0"])
        self.assertEqual(cpu.RIP, 93824992243426)

    def test_JL_2(self):
        """Instruction JL_2
        Groups: jump
        0x555555556f00:     jl      0x555555556ee2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.write(0x555555556F00, "|\xe0")
        cpu.OF = False
        cpu.SF = False
        cpu.RIP = 0x555555556F00
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556F00:0x555555556F02], [b"|", b"\xe0"])
        self.assertEqual(cpu.RIP, 93824992243458)

    def test_JL_3(self):
        """Instruction JL_3
        Groups: jump
        0x555555556f00:     jl      0x555555556ee2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.write(0x555555556F00, "|\xe0")
        cpu.OF = False
        cpu.SF = True
        cpu.RIP = 0x555555556F00
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556F00:0x555555556F02], [b"|", b"\xe0"])
        self.assertEqual(cpu.RIP, 93824992243426)

    def test_JMP_1(self):
        """Instruction JMP_1
        Groups: jump
        0x7ffff7de4279:     jmp     0x7ffff7de3a98
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4279, "\xe9\x1a\xf8\xff\xff")
        cpu.RIP = 0x7FFFF7DE4279
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE4279:0x7FFFF7DE427E], [b"\xe9", b"\x1a", b"\xf8", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.RIP, 140737351924376)

    def test_JMP_2(self):
        """Instruction JMP_2
        Groups: jump
        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem[0x7FFFF7B58EE8] = "'"
        mem.write(0x7FFFF7B58EE7, "\xeb")
        cpu.RIP = 0x7FFFF7B58EE7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58EE8], b"'")
        self.assertEqual(mem[0x7FFFF7B58EE7:0x7FFFF7B58EE8], [b"\xeb"])
        self.assertEqual(cpu.RIP, 140737349259024)

    def test_JMP_3(self):
        """Instruction JMP_3
        Groups: jump
        0x7ffff7df28e1:     jmp     0x7ffff7ddaa00
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF28E1, "\xe9\x1a\x81\xfe\xff")
        cpu.RIP = 0x7FFFF7DF28E1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DF28E1:0x7FFFF7DF28E6], [b"\xe9", b"\x1a", b"\x81", b"\xfe", b"\xff"]
        )
        self.assertEqual(cpu.RIP, 140737351887360)

    def test_JMP_4(self):
        """Instruction JMP_4
        Groups: mode64, jump
        0x7ffff7de62ee:     jmp     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE62EE, "\xff\xe2")
        cpu.RDX = 0x7FFFF7DE63B8
        cpu.RIP = 0x7FFFF7DE62EE
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE62EE:0x7FFFF7DE62F0], [b"\xff", b"\xe2"])
        self.assertEqual(cpu.RDX, 140737351934904)
        self.assertEqual(cpu.RIP, 140737351934904)

    def test_JMP_5(self):
        """Instruction JMP_5
        Groups: jump
        0x7ffff7de4042:     jmp     0x7ffff7de4054
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4042, "\xeb\x10")
        cpu.RIP = 0x7FFFF7DE4042
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4042:0x7FFFF7DE4044], [b"\xeb", b"\x10"])
        self.assertEqual(cpu.RIP, 140737351925844)

    def test_JMP_6(self):
        """Instruction JMP_6
        Groups: jump
        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem[0x7FFFF7B58EE8] = "'"
        mem.write(0x7FFFF7B58EE7, "\xeb")
        cpu.RIP = 0x7FFFF7B58EE7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B58EE8], b"'")
        self.assertEqual(mem[0x7FFFF7B58EE7:0x7FFFF7B58EE8], [b"\xeb"])
        self.assertEqual(cpu.RIP, 140737349259024)

    def test_JNE_1(self):
        """Instruction JNE_1
        Groups: jump
        0x7ffff7df459e:     jne     0x7ffff7df4590
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459E, "u\xf0")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF459E
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF459E:0x7FFFF7DF45A0], [b"u", b"\xf0"])
        self.assertEqual(cpu.RIP, 140737351992720)

    def test_JNE_2(self):
        """Instruction JNE_2
        Groups: jump
        0x7ffff7de5a4b:     jne     0x7ffff7de5a40
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5A4B, "u\xf3")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE5A4B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5A4B:0x7FFFF7DE5A4D], [b"u", b"\xf3"])
        self.assertEqual(cpu.RIP, 140737351932480)

    def test_JNE_3(self):
        """Instruction JNE_3
        Groups: jump
        0x7ffff7de611b:     jne     0x7ffff7de73ad
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE611B, "\x0f\x85\x8c\x12\x00\x00")
        cpu.ZF = True
        cpu.RIP = 0x7FFFF7DE611B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE611B:0x7FFFF7DE6121],
            [b"\x0f", b"\x85", b"\x8c", b"\x12", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 140737351934241)

    def test_JNE_4(self):
        """Instruction JNE_4
        Groups: jump
        0x7ffff7aab197:     jne     0x7ffff7aab188
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AAB000, 0x1000, "rwx")
        mem.write(0x7FFFF7AAB197, "u\xef")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7AAB197
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AAB197:0x7FFFF7AAB199], [b"u", b"\xef"])
        self.assertEqual(cpu.RIP, 140737348546952)

    def test_JNE_5(self):
        """Instruction JNE_5
        Groups: jump
        0x7ffff7df4594:     jne     0x7ffff7df45a3
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4594, "u\r")
        cpu.ZF = True
        cpu.RIP = 0x7FFFF7DF4594
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4594:0x7FFFF7DF4596], [b"u", b"\r"])
        self.assertEqual(cpu.RIP, 140737351992726)

    def test_JNE_6(self):
        """Instruction JNE_6
        Groups: jump
        0x7ffff7df459e:     jne     0x7ffff7df4590
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459E, "u\xf0")
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DF459E
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF459E:0x7FFFF7DF45A0], [b"u", b"\xf0"])
        self.assertEqual(cpu.RIP, 140737351992720)

    def test_JNS_1(self):
        """Instruction JNS_1
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = True
        cpu.RIP = 0x7FFFF7DF138F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF138F:0x7FFFF7DF1391], [b"y", b"\xbf"])
        self.assertEqual(cpu.RIP, 140737351979921)

    def test_JNS_2(self):
        """Instruction JNS_2
        Groups: jump
        0x555555565fb2:     jns     0x5555555659ec
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x555555565FB2, "\x0f\x894\xfa\xff\xff")
        cpu.SF = False
        cpu.RIP = 0x555555565FB2
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x555555565FB2:0x555555565FB8], [b"\x0f", b"\x89", b"4", b"\xfa", b"\xff", b"\xff"]
        )
        self.assertEqual(cpu.RIP, 93824992303596)

    def test_JNS_3(self):
        """Instruction JNS_3
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = True
        cpu.RIP = 0x7FFFF7DF138F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF138F:0x7FFFF7DF1391], [b"y", b"\xbf"])
        self.assertEqual(cpu.RIP, 140737351979921)

    def test_JNS_4(self):
        """Instruction JNS_4
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = False
        cpu.RIP = 0x7FFFF7DF138F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF138F:0x7FFFF7DF1391], [b"y", b"\xbf"])
        self.assertEqual(cpu.RIP, 140737351979856)

    def test_JNS_5(self):
        """Instruction JNS_5
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = True
        cpu.RIP = 0x7FFFF7DF138F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF138F:0x7FFFF7DF1391], [b"y", b"\xbf"])
        self.assertEqual(cpu.RIP, 140737351979921)

    def test_JNS_6(self):
        """Instruction JNS_6
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = False
        cpu.RIP = 0x7FFFF7DF138F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF138F:0x7FFFF7DF1391], [b"y", b"\xbf"])
        self.assertEqual(cpu.RIP, 140737351979856)

    def test_JS_1(self):
        """Instruction JS_1
        Groups: jump
        0x4326b2:   js      0x4328fb
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4326B2, "\x0f\x88C\x02\x00\x00")
        cpu.SF = False
        cpu.RIP = 0x4326B2
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x4326B2:0x4326B8], [b"\x0f", b"\x88", b"C", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 4400824)

    def test_JS_2(self):
        """Instruction JS_2
        Groups: jump
        0x4322d2:   js      0x43251b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322D2, "\x0f\x88C\x02\x00\x00")
        cpu.SF = False
        cpu.RIP = 0x4322D2
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x4322D2:0x4322D8], [b"\x0f", b"\x88", b"C", b"\x02", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.RIP, 4399832)

    def test_JS_3(self):
        """Instruction JS_3
        Groups: jump
        0x555555565075:     js      0x555555566260
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x555555565075, "\x0f\x88\xe5\x11\x00\x00")
        cpu.SF = False
        cpu.RIP = 0x555555565075
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x555555565075:0x55555556507B],
            [b"\x0f", b"\x88", b"\xe5", b"\x11", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RIP, 93824992301179)

    def test_JS_4(self):
        """Instruction JS_4
        Groups: jump
        0x40dd40:   js      0x40dd4c
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40DD40, "x\n")
        cpu.SF = True
        cpu.RIP = 0x40DD40
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40DD40:0x40DD42], [b"x", b"\n"])
        self.assertEqual(cpu.RIP, 4250956)

    def test_JS_5(self):
        """Instruction JS_5
        Groups: jump
        0x555555559cb6:     js      0x555555559ccf
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555559000, 0x1000, "rwx")
        mem.write(0x555555559CB6, "x\x17")
        cpu.SF = True
        cpu.RIP = 0x555555559CB6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555559CB6:0x555555559CB8], [b"x", b"\x17"])
        self.assertEqual(cpu.RIP, 93824992255183)

    def test_JS_6(self):
        """Instruction JS_6
        Groups: jump
        0x5555555673d5:     js      0x555555567450
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555567000, 0x1000, "rwx")
        mem.write(0x5555555673D5, "xy")
        cpu.SF = False
        cpu.RIP = 0x5555555673D5
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555673D5:0x5555555673D7], [b"x", b"y"])
        self.assertEqual(cpu.RIP, 93824992310231)

    def test_LEAVE_1(self):
        """Instruction LEAVE_1
        Groups: mode64
        0x7ffff7b30c15:     leave
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B30000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7B30C15, "\xc9")
        mem.write(
            0x7FFFFFFFDA98,
            "\xd0\xda\xff\xff\xff\x7f\x00\x00\xf0\xda\xff\xff\xff\x7f\x00\x00H\xe1\xff\xf7\xff\x7f\x00\x00\xc0\xda\xff\xff\xff\x7f\x00\x00\xb3",
        )
        cpu.RSP = 0x7FFFFFFFDAA0
        cpu.RIP = 0x7FFFF7B30C15
        cpu.RBP = 0x7FFFFFFFDAB0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B30C15:0x7FFFF7B30C16], [b"\xc9"])
        self.assertEqual(
            mem[0x7FFFFFFFDA98:0x7FFFFFFFDAB9],
            [
                b"\xd0",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xf0",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"H",
                b"\xe1",
                b"\xff",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xc0",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xb3",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345784)
        self.assertEqual(cpu.RIP, 140737349094422)
        self.assertEqual(cpu.RBP, 140737488345792)

    def test_LEAVE_2(self):
        """Instruction LEAVE_2
        Groups: mode64
        0x4176f4:   leave
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00417000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4176F4, "\xc9")
        mem.write(
            0x7FFFFFFFCAD8,
            "\xf0vA\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00 \xdb\xff\xff\xff\x7f\x00\x00+",
        )
        cpu.RSP = 0x7FFFFFFFCAE0
        cpu.RIP = 0x4176F4
        cpu.RBP = 0x7FFFFFFFCAF0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4176F4:0x4176F5], [b"\xc9"])
        self.assertEqual(
            mem[0x7FFFFFFFCAD8:0x7FFFFFFFCAF9],
            [
                b"\xf0",
                b"v",
                b"A",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"@",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"A",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b" ",
                b"\xdb",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"+",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488341752)
        self.assertEqual(cpu.RIP, 4290293)
        self.assertEqual(cpu.RBP, 140737488345888)

    def test_LEAVE_3(self):
        """Instruction LEAVE_3
        Groups: mode64
        0x7ffff7b59b18:     leave
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B59000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7B59B18, "\xc9")
        mem.write(0x7FFFFFFFD9D8, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFD9E5, "\x00")
        mem.write(0x7FFFFFFFDA08, "\xd0\xd4\xa4\xf7\xff\x7f\x00\x00@\xda\xff\xff\xff\x7f\x00\x00")
        mem[0x7FFFFFFFDA18] = "'"
        mem.write(0x7FFFFFFFD9E4, "\x00")
        mem.write(0x7FFFFFFFD9E6, "\x00\x00\xf0")
        cpu.RSP = 0x7FFFFFFFD9E0
        cpu.RIP = 0x7FFFF7B59B18
        cpu.RBP = 0x7FFFFFFFDA10
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B59B18:0x7FFFF7B59B19], [b"\xc9"])
        self.assertEqual(
            mem[0x7FFFFFFFD9D8:0x7FFFFFFFD9E4],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(mem[0x7FFFFFFFD9E5:0x7FFFFFFFD9E6], [b"\x00"])
        self.assertEqual(
            mem[0x7FFFFFFFDA08:0x7FFFFFFFDA18],
            [
                b"\xd0",
                b"\xd4",
                b"\xa4",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"@",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(mem[0x7FFFFFFFDA18], b"'")
        self.assertEqual(mem[0x7FFFFFFFD9E4:0x7FFFFFFFD9E5], [b"\x00"])
        self.assertEqual(mem[0x7FFFFFFFD9E6:0x7FFFFFFFD9E9], [b"\x00", b"\x00", b"\xf0"])
        self.assertEqual(cpu.RSP, 140737488345624)
        self.assertEqual(cpu.RIP, 140737349262105)
        self.assertEqual(cpu.RBP, 140737488345664)

    def test_LEAVE_4(self):
        """Instruction LEAVE_4
        Groups: mode64
        0x7ffff7b59b18:     leave
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B59000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7B59B18, "\xc9")
        mem.write(
            0x7FFFFFFFDB68, "\x00\x00\x00\x00\x00\x00\x00\x00\xb8\xdc\xff\xff\xff\x7f\x00\x00P"
        )
        mem.write(
            0x7FFFFFFFDB98, "\x00\x00\x00\x00\x00\x00\x00\x00\xf0\xdb\xff\xff\xff\x7f\x00\x00:"
        )
        cpu.RSP = 0x7FFFFFFFDB70
        cpu.RIP = 0x7FFFF7B59B18
        cpu.RBP = 0x7FFFFFFFDBA0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7B59B18:0x7FFFF7B59B19], [b"\xc9"])
        self.assertEqual(
            mem[0x7FFFFFFFDB68:0x7FFFFFFFDB79],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xb8",
                b"\xdc",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"P",
            ],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB98:0x7FFFFFFFDBA9],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xf0",
                b"\xdb",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b":",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488346024)
        self.assertEqual(cpu.RIP, 140737349262105)
        self.assertEqual(cpu.RBP, 140737488346096)

    def test_LEAVE_5(self):
        """Instruction LEAVE_5
        Groups: mode64
        0x7ffff7ae0541:     leave
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AE0000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7AE0541, "\xc9")
        mem.write(0x7FFFFFFFD988, "7\x05\xae\xf7\xff\x7f\x00\x00\xa8\n\xba\xf7\xff\x7f\x00\x00\xf6")
        mem.write(
            0x7FFFFFFFD9A8, "\xe0\xda\xff\xff\xff\x7f\x00\x00\xe0\xda\xff\xff\xff\x7f\x00\x00\xf8"
        )
        cpu.RSP = 0x7FFFFFFFD990
        cpu.RIP = 0x7FFFF7AE0541
        cpu.RBP = 0x7FFFFFFFD9B0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AE0541:0x7FFFF7AE0542], [b"\xc9"])
        self.assertEqual(
            mem[0x7FFFFFFFD988:0x7FFFFFFFD999],
            [
                b"7",
                b"\x05",
                b"\xae",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xa8",
                b"\n",
                b"\xba",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xf6",
            ],
        )
        self.assertEqual(
            mem[0x7FFFFFFFD9A8:0x7FFFFFFFD9B9],
            [
                b"\xe0",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xe0",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xf8",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345528)
        self.assertEqual(cpu.RIP, 140737348764994)
        self.assertEqual(cpu.RBP, 140737488345824)

    def test_LEAVE_6(self):
        """Instruction LEAVE_6
        Groups: mode64
        0x7ffff7a626cd:     leave
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A62000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7A626CD, "\xc9")
        mem.write(
            0x7FFFFFFFDA60, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        )
        mem.write(0x7FFFFFFFDB28, "\x00\x00\x00\x00\x00\x00\x00\x000\xdc\xff\xff\xff\x7f\x00\x00x")
        cpu.RSP = 0x7FFFFFFFDA68
        cpu.RIP = 0x7FFFF7A626CD
        cpu.RBP = 0x7FFFFFFFDB30
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A626CD:0x7FFFF7A626CE], [b"\xc9"])
        self.assertEqual(
            mem[0x7FFFFFFFDA60:0x7FFFFFFFDA71],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB28:0x7FFFFFFFDB39],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"0",
                b"\xdc",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"x",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345912)
        self.assertEqual(cpu.RIP, 140737348249294)
        self.assertEqual(cpu.RBP, 140737488346160)

    def test_LEA_1(self):
        """Instruction LEA_1
        Groups:
        0x7ffff7de44f3:     lea     rsp, qword ptr [rbp - 0x28]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE44F3, "H\x8de\xd8")
        mem.write(0x7FFFFFFFD978, "\xc8\xcd\xa4\xf7\xff\x7f\x00\x00")
        cpu.RSP = 0x7FFFFFFFD8B0
        cpu.RIP = 0x7FFFF7DE44F3
        cpu.RBP = 0x7FFFFFFFD9A0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE44F3:0x7FFFF7DE44F7], [b"H", b"\x8d", b"e", b"\xd8"])
        self.assertEqual(
            mem[0x7FFFFFFFD978:0x7FFFFFFFD980],
            [b"\xc8", b"\xcd", b"\xa4", b"\xf7", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSP, 140737488345464)
        self.assertEqual(cpu.RIP, 140737351927031)
        self.assertEqual(cpu.RBP, 140737488345504)

    def test_LEA_2(self):
        """Instruction LEA_2
        Groups:
        0x7ffff7b58ee3:     lea     r8, qword ptr [r8 + rdx*4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A2F000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7A2FDE0, "x)\xce\xb24\xd5\x92P")
        mem.write(0x7FFFF7B58EE3, "M\x8d\x04\x90")
        cpu.R8 = 0x7FFFF7A2FA7C
        cpu.RDX = 0xD9
        cpu.RIP = 0x7FFFF7B58EE3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A2FDE0:0x7FFFF7A2FDE8],
            [b"x", b")", b"\xce", b"\xb2", b"4", b"\xd5", b"\x92", b"P"],
        )
        self.assertEqual(mem[0x7FFFF7B58EE3:0x7FFFF7B58EE7], [b"M", b"\x8d", b"\x04", b"\x90"])
        self.assertEqual(cpu.R8, 140737348042208)
        self.assertEqual(cpu.RDX, 217)
        self.assertEqual(cpu.RIP, 140737349258983)

    def test_LEA_3(self):
        """Instruction LEA_3
        Groups:
        0x7ffff7de3841:     lea     rsi, qword ptr [rbp - 0x3c]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3841, "H\x8du\xc4")
        mem.write(0x7FFFFFFFD8C4, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RSI = 0xBDD69F1B
        cpu.RIP = 0x7FFFF7DE3841
        cpu.RBP = 0x7FFFFFFFD900
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3841:0x7FFFF7DE3845], [b"H", b"\x8d", b"u", b"\xc4"])
        self.assertEqual(
            mem[0x7FFFFFFFD8C4:0x7FFFFFFFD8CC],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSI, 140737488345284)
        self.assertEqual(cpu.RIP, 140737351923781)
        self.assertEqual(cpu.RBP, 140737488345344)

    def test_LEA_4(self):
        """Instruction LEA_4
        Groups:
        0x7ffff7b58f14:     lea     rdx, qword ptr [rbx + rdx*8]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A34000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7A34270, "\xb5*\x00\x00\x1a\x00\x0b\x00")
        mem.write(0x7FFFF7B58F14, "H\x8d\x14\xd3")
        cpu.RDX = 0x4A1
        cpu.RIP = 0x7FFFF7B58F14
        cpu.RBX = 0x7FFFF7A31D68
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A34270:0x7FFFF7A34278],
            [b"\xb5", b"*", b"\x00", b"\x00", b"\x1a", b"\x00", b"\x0b", b"\x00"],
        )
        self.assertEqual(mem[0x7FFFF7B58F14:0x7FFFF7B58F18], [b"H", b"\x8d", b"\x14", b"\xd3"])
        self.assertEqual(cpu.RDX, 140737348059760)
        self.assertEqual(cpu.RIP, 140737349259032)
        self.assertEqual(cpu.RBX, 140737348050280)

    def test_LEA_5(self):
        """Instruction LEA_5
        Groups:
        0x7ffff7a652b7:     lea     rsi, qword ptr [rip + 0x36e35a]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD3000, 0x1000, "rwx")
        mem.write(0x7FFFF7A652B7, "H\x8d5Z\xe36\x00")
        mem.write(0x7FFFF7DD3618, "@M\xdd\xf7\xff\x7f\x00\x00")
        cpu.RSI = 0x555555554A00
        cpu.RIP = 0x7FFFF7A652B7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7A652B7:0x7FFFF7A652BE], [b"H", b"\x8d", b"5", b"Z", b"\xe3", b"6", b"\x00"]
        )
        self.assertEqual(
            mem[0x7FFFF7DD3618:0x7FFFF7DD3620],
            [b"@", b"M", b"\xdd", b"\xf7", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RSI, 140737351857688)
        self.assertEqual(cpu.RIP, 140737348260542)

    def test_LEA_6(self):
        """Instruction LEA_6
        Groups:
        0x7ffff7de4418:     lea     rdi, qword ptr [rbp - 0xa0]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4418, "H\x8d\xbd`\xff\xff\xff")
        mem.write(0x7FFFFFFFD910, "\xff\xff\xff\xff\x00\x00\x00\x00")
        cpu.RDI = 0x555555554548
        cpu.RIP = 0x7FFFF7DE4418
        cpu.RBP = 0x7FFFFFFFD9B0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE4418:0x7FFFF7DE441F],
            [b"H", b"\x8d", b"\xbd", b"`", b"\xff", b"\xff", b"\xff"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFD910:0x7FFFFFFFD918],
            [b"\xff", b"\xff", b"\xff", b"\xff", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RDI, 140737488345360)
        self.assertEqual(cpu.RIP, 140737351926815)
        self.assertEqual(cpu.RBP, 140737488345520)

    def test_MOVABS_1(self):
        """Instruction MOVABS_1
        Groups:
        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC5DF, "I\xb8\xa0\xf1\xff\x7f\x03\x00\x00\x00")
        cpu.R8 = 0x0
        cpu.RIP = 0x7FFFF7DDC5DF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DDC5DF:0x7FFFF7DDC5E9],
            [b"I", b"\xb8", b"\xa0", b"\xf1", b"\xff", b"\x7f", b"\x03", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.R8, 15032381856)
        self.assertEqual(cpu.RIP, 140737351894505)

    def test_MOVABS_2(self):
        """Instruction MOVABS_2
        Groups:
        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC5DF, "I\xb8\xa0\xf1\xff\x7f\x03\x00\x00\x00")
        cpu.R8 = 0x0
        cpu.RIP = 0x7FFFF7DDC5DF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DDC5DF:0x7FFFF7DDC5E9],
            [b"I", b"\xb8", b"\xa0", b"\xf1", b"\xff", b"\x7f", b"\x03", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.R8, 15032381856)
        self.assertEqual(cpu.RIP, 140737351894505)

    def test_MOVABS_3(self):
        """Instruction MOVABS_3
        Groups:
        0x7ffff7df1435:     movabs  rcx, -0x8000000000000000
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1435, "H\xb9\x00\x00\x00\x00\x00\x00\x00\x80")
        cpu.RCX = 0x31
        cpu.RIP = 0x7FFFF7DF1435
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DF1435:0x7FFFF7DF143F],
            [b"H", b"\xb9", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x80"],
        )
        self.assertEqual(cpu.RCX, 9223372036854775808)
        self.assertEqual(cpu.RIP, 140737351980095)

    def test_MOVABS_4(self):
        """Instruction MOVABS_4
        Groups:
        0x45f853:   movabs  rdx, -0x3333333333333333
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045F000, 0x1000, "rwx")
        mem.write(0x45F853, "H\xba\xcd\xcc\xcc\xcc\xcc\xcc\xcc\xcc")
        cpu.RDX = 0x6BF710
        cpu.RIP = 0x45F853
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x45F853:0x45F85D],
            [b"H", b"\xba", b"\xcd", b"\xcc", b"\xcc", b"\xcc", b"\xcc", b"\xcc", b"\xcc", b"\xcc"],
        )
        self.assertEqual(cpu.RDX, 14757395258967641293)
        self.assertEqual(cpu.RIP, 4585565)

    def test_MOVABS_5(self):
        """Instruction MOVABS_5
        Groups:
        0x7ffff7df4630:     movabs  r8, -0x101010101010101
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4630, "I\xb8\xff\xfe\xfe\xfe\xfe\xfe\xfe\xfe")
        cpu.R8 = 0x7FFFF7FDD5A0
        cpu.RIP = 0x7FFFF7DF4630
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DF4630:0x7FFFF7DF463A],
            [b"I", b"\xb8", b"\xff", b"\xfe", b"\xfe", b"\xfe", b"\xfe", b"\xfe", b"\xfe", b"\xfe"],
        )
        self.assertEqual(cpu.R8, 18374403900871474943)
        self.assertEqual(cpu.RIP, 140737351992890)

    def test_MOVABS_6(self):
        """Instruction MOVABS_6
        Groups:
        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC5DF, "I\xb8\xa0\xf1\xff\x7f\x03\x00\x00\x00")
        cpu.R8 = 0x0
        cpu.RIP = 0x7FFFF7DDC5DF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DDC5DF:0x7FFFF7DDC5E9],
            [b"I", b"\xb8", b"\xa0", b"\xf1", b"\xff", b"\x7f", b"\x03", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.R8, 15032381856)
        self.assertEqual(cpu.RIP, 140737351894505)

    def test_MOVDQA_1(self):
        """Instruction MOVDQA_1
        Groups: sse2
        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0B0B, "f\x0fo\xe0")
        cpu.XMM0 = 0x616572635F706374746E6C63000A7325
        cpu.RIP = 0x7FFFF7AC0B0B
        cpu.XMM4 = 0xFF0000000000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AC0B0B:0x7FFFF7AC0B0F], [b"f", b"\x0f", b"o", b"\xe0"])
        self.assertEqual(cpu.XMM0, 129461857641668707752067115693843837733)
        self.assertEqual(cpu.XMM4, 129461857641668707752067115693843837733)
        self.assertEqual(cpu.RIP, 140737348635407)

    def test_MOVDQA_2(self):
        """Instruction MOVDQA_2
        Groups: sse2
        0x457d38:   movdqa  xmm0, xmm2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457D38, "f\x0fo\xc2")
        cpu.XMM2 = 0x414D00323D524E54565F474458003267
        cpu.XMM0 = 0xFF0000
        cpu.RIP = 0x457D38
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457D38:0x457D3C], [b"f", b"\x0f", b"o", b"\xc2"])
        self.assertEqual(cpu.XMM2, 86799630564512926596007573190145487463)
        self.assertEqual(cpu.XMM0, 86799630564512926596007573190145487463)
        self.assertEqual(cpu.RIP, 4554044)

    def test_MOVDQA_3(self):
        """Instruction MOVDQA_3
        Groups: sse2
        0x457aaf:   movdqa  xmm5, xmm3
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457AAF, "f\x0fo\xeb")
        cpu.XMM3 = 0x726F74756365784563696C6F626D7953
        cpu.RIP = 0x457AAF
        cpu.XMM5 = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457AAF:0x457AB3], [b"f", b"\x0f", b"o", b"\xeb"])
        self.assertEqual(cpu.XMM3, 152110698530748498584558466992035428691)
        self.assertEqual(cpu.RIP, 4553395)
        self.assertEqual(cpu.XMM5, 152110698530748498584558466992035428691)

    def test_MOVDQA_4(self):
        """Instruction MOVDQA_4
        Groups: sse2
        0x457a08:   movdqa  xmm2, xmmword ptr [rdi + 0x30]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x457A08, "f\x0foW0")
        mem.write(0x7FFFFFFFE070, "DG_VTNR=2\x00MANPAT")
        cpu.XMM2 = 0x0
        cpu.RDI = 0x7FFFFFFFE040
        cpu.RIP = 0x457A08
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457A08:0x457A0D], [b"f", b"\x0f", b"o", b"W", b"0"])
        self.assertEqual(
            mem[0x7FFFFFFFE070:0x7FFFFFFFE080],
            [
                b"D",
                b"G",
                b"_",
                b"V",
                b"T",
                b"N",
                b"R",
                b"=",
                b"2",
                b"\x00",
                b"M",
                b"A",
                b"N",
                b"P",
                b"A",
                b"T",
            ],
        )
        self.assertEqual(cpu.XMM2, 111994279734512279219280163309057165124)
        self.assertEqual(cpu.RDI, 140737488347200)
        self.assertEqual(cpu.RIP, 4553229)

    def test_MOVDQA_5(self):
        """Instruction MOVDQA_5
        Groups: sse2
        0x457b38:   movdqa  xmm0, xmm2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457B38, "f\x0fo\xc2")
        cpu.XMM2 = 0x504E414D00323D524E54565F47445800
        cpu.XMM0 = 0x0
        cpu.RIP = 0x457B38
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457B38:0x457B3C], [b"f", b"\x0f", b"o", b"\xc2"])
        self.assertEqual(cpu.XMM2, 106744563275012473217874926561820694528)
        self.assertEqual(cpu.XMM0, 106744563275012473217874926561820694528)
        self.assertEqual(cpu.RIP, 4553532)

    def test_MOVDQA_6(self):
        """Instruction MOVDQA_6
        Groups: sse2
        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0B0B, "f\x0fo\xe0")
        cpu.XMM0 = 0xCD202730FA0892A58D0000007FFFFF00
        cpu.RIP = 0x7FFFF7AC0B0B
        cpu.XMM4 = 0xFFFFFF000000FF0000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AC0B0B:0x7FFFF7AC0B0F], [b"f", b"\x0f", b"o", b"\xe0"])
        self.assertEqual(cpu.XMM0, 272658687529688827910500737779280903936)
        self.assertEqual(cpu.XMM4, 272658687529688827910500737779280903936)
        self.assertEqual(cpu.RIP, 140737348635407)

    def test_MOVDQU_1(self):
        """Instruction MOVDQU_1
        Groups: sse2
        0x6a74d4:   movdqu  xmm0, xmmword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006A7000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x6A74D4, "\xf3\x0fo\x04$")
        mem.write(0x7FFFFFFFCCB0, "\xff\x7f\x00\x00!\x00\x00\x00\x01\x00\x00\x80\xff\x7f\x00\x00")
        cpu.XMM0 = 0x7FFF800000000000002100007FFF
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x6A74D4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x6A74D4:0x6A74D9], [b"\xf3", b"\x0f", b"o", b"\x04", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCC0],
            [
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"!",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x80",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.XMM0, 2596108815186175128840666836140031)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6976729)

    def test_MOVDQU_2(self):
        """Instruction MOVDQU_2
        Groups: sse2
        0x568fac:   movdqu  xmm0, xmmword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00568000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x568FAC, "\xf3\x0fo\x04$")
        mem.write(0x7FFFFFFFCCB0, "xV4\x12\xff\x7f\x00\x00\x01\x80\x00\x00xV4\x12")
        cpu.XMM0 = 0x1234567800007FFF00007FFF12345678
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x568FAC
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x568FAC:0x568FB1], [b"\xf3", b"\x0f", b"o", b"\x04", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCC0],
            [
                b"x",
                b"V",
                b"4",
                b"\x12",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x01",
                b"\x80",
                b"\x00",
                b"\x00",
                b"x",
                b"V",
                b"4",
                b"\x12",
            ],
        )
        self.assertEqual(cpu.XMM0, 24197857155378316985685775704845997688)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5672881)

    def test_MOVDQU_3(self):
        """Instruction MOVDQU_3
        Groups: sse2
        0x6f4c12:   movdqu  xmm1, xmmword ptr [rsp + 4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006F4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x6F4C12, "\xf3\x0foL$\x04")
        mem.write(0x7FFFFFFFCCB4, "\xff\x7f\x00\x00 \x00\x00\x00!\x00\x00\x00\xff\x7f\x00\x00")
        cpu.XMM1 = 0x7FFF000000210000002100007FFF
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x6F4C12
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x6F4C12:0x6F4C18], [b"\xf3", b"\x0f", b"o", b"L", b"$", b"\x04"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB4:0x7FFFFFFFCCC4],
            [
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b" ",
                b"\x00",
                b"\x00",
                b"\x00",
                b"!",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.XMM1, 2596069201105508292482224474849279)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7293976)

    def test_MOVDQU_4(self):
        """Instruction MOVDQU_4
        Groups: sse2
        0x56fa50:   movdqu  xmm1, xmmword ptr [rsp + 4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0056F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x56FA50, "\xf3\x0foL$\x04")
        mem.write(0x7FFFFFFFCCB4, " \x00\x00\x00!\x00\x00\x00!Ce\x87 \x00\x00\x00")
        cpu.XMM1 = 0x20876543218765432100000020
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x56FA50
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x56FA50:0x56FA56], [b"\xf3", b"\x0f", b"o", b"L", b"$", b"\x04"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB4:0x7FFFFFFFCCC4],
            [
                b" ",
                b"\x00",
                b"\x00",
                b"\x00",
                b"!",
                b"\x00",
                b"\x00",
                b"\x00",
                b"!",
                b"C",
                b"e",
                b"\x87",
                b" ",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.XMM1, 2577204095297418371658275618848)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5700182)

    def test_MOVDQU_5(self):
        """Instruction MOVDQU_5
        Groups: sse2
        0x606649:   movdqu  xmm1, xmmword ptr [rsp + 4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00606000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x606649, "\xf3\x0foL$\x04")
        mem.write(
            0x7FFFFFFFCCB4, "\xff\xff\xff\xff\x01\x80\x00\x00\x01\x80\x00\x00\xff\xff\xff\xff"
        )
        cpu.XMM1 = 0xFFFFFFFF0000800100007FFFFFFFFFFF
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x606649
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x606649:0x60664F], [b"\xf3", b"\x0f", b"o", b"L", b"$", b"\x04"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB4:0x7FFFFFFFCCC4],
            [
                b"\xff",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x01",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x01",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\xff",
            ],
        )
        self.assertEqual(cpu.XMM1, 340282366841710905430466961972599455743)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 6317647)

    def test_MOVDQU_6(self):
        """Instruction MOVDQU_6
        Groups: sse2
        0x6fc91e:   movdqu  xmm0, xmmword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006FC000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x6FC91E, "\xf3\x0fo\x04$")
        mem.write(0x7FFFFFFFCCB0, "@\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x80@\x00\x00\x00")
        cpu.XMM0 = 0x40800000008000000100000040
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x6FC91E
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x6FC91E:0x6FC923], [b"\xf3", b"\x0f", b"o", b"\x04", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCC0],
            [
                b"@",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x80",
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x80",
                b"@",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.XMM0, 5110216482197719890898444091456)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7325987)

    def test_MOVD_1(self):
        """Instruction MOVD_1
        Groups: sse2
        0x7ffff7df4370:     movd    xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4370, "f\x0fn\xce")
        cpu.XMM1 = 0x24242424242424242424242424242424
        cpu.RIP = 0x7FFFF7DF4370
        cpu.ESI = 0x2F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4370:0x7FFFF7DF4374], [b"f", b"\x0f", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 140737351992180)

    def test_MOVD_2(self):
        """Instruction MOVD_2
        Groups: sse2
        0x7ffff7ab7980:     movd    xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB7980, "f\x0fn\xce")
        cpu.XMM1 = 0x24242424242424242424242424242424
        cpu.RIP = 0x7FFFF7AB7980
        cpu.ESI = 0x2F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AB7980:0x7FFFF7AB7984], [b"f", b"\x0f", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 140737348598148)

    def test_MOVD_3(self):
        """Instruction MOVD_3
        Groups: sse2
        0x4578e0:   movd    xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x4578E0, "f\x0fn\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x4578E0
        cpu.ESI = 0x2F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4578E0:0x4578E4], [b"f", b"\x0f", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 4552932)

    def test_MOVD_4(self):
        """Instruction MOVD_4
        Groups: sse2
        0x421b10:   movd    xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00421000, 0x1000, "rwx")
        mem.write(0x421B10, "f\x0fn\xce")
        cpu.XMM1 = 0x25252525252525252525252525252525
        cpu.RIP = 0x421B10
        cpu.ESI = 0x25
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x421B10:0x421B14], [b"f", b"\x0f", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 37)
        self.assertEqual(cpu.ESI, 37)
        self.assertEqual(cpu.RIP, 4332308)

    def test_MOVD_5(self):
        """Instruction MOVD_5
        Groups: sse2
        0x457da0:   movd    xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DA0, "f\x0fn\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x457DA0
        cpu.ESI = 0x2F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457DA0:0x457DA4], [b"f", b"\x0f", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 47)
        self.assertEqual(cpu.ESI, 47)
        self.assertEqual(cpu.RIP, 4554148)

    def test_MOVD_6(self):
        """Instruction MOVD_6
        Groups: sse2
        0x7ffff7ac0ae0:     movd    xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AE0, "f\x0fn\xce")
        cpu.XMM1 = 0x25252525252525252525252525252525
        cpu.RIP = 0x7FFFF7AC0AE0
        cpu.ESI = 0x25
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AC0AE0:0x7FFFF7AC0AE4], [b"f", b"\x0f", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 37)
        self.assertEqual(cpu.ESI, 37)
        self.assertEqual(cpu.RIP, 140737348635364)

    def test_MOVLPD_1(self):
        """Instruction MOVLPD_1
        Groups: sse2
        0x50f61f:   movlpd  xmm1, qword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0050F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x50F61F, "f\x0f\x12\x0c$")
        mem.write(0x7FFFFFFFCCB0, "@\x00\x00\x00\x80\x00\x00\x00")
        cpu.XMM1 = 0x80000000400000008000000040
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x50F61F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x50F61F:0x50F624], [b"f", b"\x0f", b"\x12", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"@", b"\x00", b"\x00", b"\x00", b"\x80", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.XMM1, 10141204803006426833240792760384)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5305892)

    def test_MOVLPD_2(self):
        """Instruction MOVLPD_2
        Groups: sse2
        0x4aa891:   movlpd  qword ptr [rsp], xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004AA000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4AA891, "f\x0f\x13\x0c$")
        mem.write(0x7FFFFFFFCCB0, "!Ce\x87@\x00\x00\x00")
        cpu.XMM1 = 0x87654321800000000000004087654321
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x4AA891
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4AA891:0x4AA896], [b"f", b"\x0f", b"\x13", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"!", b"C", b"e", b"\x87", b"@", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.XMM1, 179971562989262549322269247393805714209)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4892822)

    def test_MOVLPD_3(self):
        """Instruction MOVLPD_3
        Groups: sse2
        0x4adf87:   movlpd  qword ptr [rsp], xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004AD000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4ADF87, "f\x0f\x13\x0c$")
        mem.write(0x7FFFFFFFCCB0, "\xfe\xff\xff\xff\x01\x00\x00\x80")
        cpu.XMM1 = 0xFFFFFFFE8000000180000001FFFFFFFE
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x4ADF87
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4ADF87:0x4ADF8C], [b"f", b"\x0f", b"\x13", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"\xfe", b"\xff", b"\xff", b"\xff", b"\x01", b"\x00", b"\x00", b"\x80"],
        )
        self.assertEqual(cpu.XMM1, 340282366802096219719648217160606547966)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4906892)

    def test_MOVLPD_4(self):
        """Instruction MOVLPD_4
        Groups: sse2
        0x4acf88:   movlpd  qword ptr [rsp], xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004AC000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4ACF88, "f\x0f\x13\x0c$")
        mem.write(0x7FFFFFFFCCB0, "\xff\x7f\x00\x00\x01\x00\x00\x80")
        cpu.XMM1 = 0x7FFF800000018000000100007FFF
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x4ACF88
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4ACF88:0x4ACF8D], [b"f", b"\x0f", b"\x13", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"\xff", b"\x7f", b"\x00", b"\x00", b"\x01", b"\x00", b"\x00", b"\x80"],
        )
        self.assertEqual(cpu.XMM1, 2596108815186184352212566251962367)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4902797)

    def test_MOVLPD_5(self):
        """Instruction MOVLPD_5
        Groups: sse2
        0x50a2c7:   movlpd  xmm1, qword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0050A000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x50A2C7, "f\x0f\x12\x0c$")
        mem.write(0x7FFFFFFFCCB0, " \x00\x00\x00!\x00\x00\x00")
        cpu.XMM1 = 0x21000000200000004000000021
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x50A2C7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x50A2C7:0x50A2CC], [b"f", b"\x0f", b"\x12", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b" ", b"\x00", b"\x00", b"\x00", b"!", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.XMM1, 2614529363561018951087389933600)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5284556)

    def test_MOVLPD_6(self):
        """Instruction MOVLPD_6
        Groups: sse2
        0x4d851b:   movlpd  qword ptr [rsp], xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004D8000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4D851B, "f\x0f\x13\x0c$")
        mem.write(0x7FFFFFFFCCB0, "\xff\x7f\x00\x00\xff\x7f\x00\x00")
        cpu.XMM1 = 0x7FFF0000008000007FFF00007FFF
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x4D851B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4D851B:0x4D8520], [b"f", b"\x0f", b"\x13", b"\x0c", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB8],
            [b"\xff", b"\x7f", b"\x00", b"\x00", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.XMM1, 2596069201107260733309822636687359)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5080352)

    def test_MOVSD_1(self):
        """Instruction MOVSD_1
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555556E3B, "\xf3\xa5")
        mem.write(0x55555576E638, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDBA0, "\x10\xdb\xff\xff\xff\x7f\x00\x00")
        cpu.RDI = 0x7FFFFFFFDBA0
        cpu.RCX = 0x12
        cpu.RSI = 0x55555576E638
        cpu.RIP = 0x555555556E3B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556E3B:0x555555556E3D], [b"\xf3", b"\xa5"])
        self.assertEqual(
            mem[0x55555576E638:0x55555576E640],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDBA0:0x7FFFFFFFDBA8],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 17)
        self.assertEqual(cpu.RDI, 140737488346020)
        self.assertEqual(cpu.RSI, 93824994436668)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_2(self):
        """Instruction MOVSD_2
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555556E3B, "\xf3\xa5")
        mem.write(0x55555576E61C, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDB84, "UU\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFFFFFDB84
        cpu.RCX = 0x19
        cpu.RSI = 0x55555576E61C
        cpu.RIP = 0x555555556E3B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556E3B:0x555555556E3D], [b"\xf3", b"\xa5"])
        self.assertEqual(
            mem[0x55555576E61C:0x55555576E624],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB84:0x7FFFFFFFDB8C],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 24)
        self.assertEqual(cpu.RDI, 140737488345992)
        self.assertEqual(cpu.RSI, 93824994436640)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_3(self):
        """Instruction MOVSD_3
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555556E3B, "\xf3\xa5")
        mem.write(0x55555576E64C, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDBB4, "\xff\x7f\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFFFFFDBB4
        cpu.RCX = 0xD
        cpu.RSI = 0x55555576E64C
        cpu.RIP = 0x555555556E3B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556E3B:0x555555556E3D], [b"\xf3", b"\xa5"])
        self.assertEqual(
            mem[0x55555576E64C:0x55555576E654],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDBB4:0x7FFFFFFFDBBC],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 12)
        self.assertEqual(cpu.RDI, 140737488346040)
        self.assertEqual(cpu.RSI, 93824994436688)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_4(self):
        """Instruction MOVSD_4
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555556E3B, "\xf3\xa5")
        mem.write(0x55555576E640, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDBA8, "g\xa8\xb0\xf7\xff\x7f\x00\x00")
        cpu.RDI = 0x7FFFFFFFDBA8
        cpu.RCX = 0x10
        cpu.RSI = 0x55555576E640
        cpu.RIP = 0x555555556E3B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556E3B:0x555555556E3D], [b"\xf3", b"\xa5"])
        self.assertEqual(
            mem[0x55555576E640:0x55555576E648],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDBA8:0x7FFFFFFFDBB0],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 15)
        self.assertEqual(cpu.RDI, 140737488346028)
        self.assertEqual(cpu.RSI, 93824994436676)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_5(self):
        """Instruction MOVSD_5
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555556E3B, "\xf3\xa5")
        mem.write(0x55555576E634, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDB9C, "\x00\x00\x00\x00\x10\xdb\xff\xff")
        cpu.RDI = 0x7FFFFFFFDB9C
        cpu.RCX = 0x13
        cpu.RSI = 0x55555576E634
        cpu.RIP = 0x555555556E3B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556E3B:0x555555556E3D], [b"\xf3", b"\xa5"])
        self.assertEqual(
            mem[0x55555576E634:0x55555576E63C],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB9C:0x7FFFFFFFDBA4],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x10", b"\xdb", b"\xff", b"\xff"],
        )
        self.assertEqual(cpu.RCX, 18)
        self.assertEqual(cpu.RDI, 140737488346016)
        self.assertEqual(cpu.RSI, 93824994436664)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSD_6(self):
        """Instruction MOVSD_6
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555556E3B, "\xf3\xa5")
        mem.write(0x55555576E604, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDB6C, "\x00\x00\x00\x00\xe0\xdb\xff\xff")
        cpu.RDI = 0x7FFFFFFFDB6C
        cpu.RCX = 0x1F
        cpu.RSI = 0x55555576E604
        cpu.RIP = 0x555555556E3B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555556E3B:0x555555556E3D], [b"\xf3", b"\xa5"])
        self.assertEqual(
            mem[0x55555576E604:0x55555576E60C],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB6C:0x7FFFFFFFDB74],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\xe0", b"\xdb", b"\xff", b"\xff"],
        )
        self.assertEqual(cpu.RCX, 30)
        self.assertEqual(cpu.RDI, 140737488345968)
        self.assertEqual(cpu.RSI, 93824994436616)
        self.assertEqual(cpu.RIP, 93824992243259)

    def test_MOVSXD_1(self):
        """Instruction MOVSXD_1
        Groups:
        0x466083:   movsxd  rdi, edi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00466000, 0x1000, "rwx")
        mem.write(0x466083, "Hc\xff")
        cpu.EDI = 0x41
        cpu.RDI = 0x41
        cpu.RIP = 0x466083
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x466083:0x466086], [b"H", b"c", b"\xff"])
        self.assertEqual(cpu.EDI, 65)
        self.assertEqual(cpu.RDI, 65)
        self.assertEqual(cpu.RIP, 4612230)

    def test_MOVSXD_2(self):
        """Instruction MOVSXD_2
        Groups:
        0x7ffff7ddf068:     movsxd  rdx, dword ptr [r8 + rbx*4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDF000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDF068, "Ic\x14\x98")
        mem.write(0x7FFFF7DF5F1C, "\x8f\x91\xfe\xff")
        cpu.R8 = 0x7FFFF7DF5F1C
        cpu.RDX = 0x2
        cpu.RIP = 0x7FFFF7DDF068
        cpu.RBX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DDF068:0x7FFFF7DDF06C], [b"I", b"c", b"\x14", b"\x98"])
        self.assertEqual(mem[0x7FFFF7DF5F1C:0x7FFFF7DF5F20], [b"\x8f", b"\x91", b"\xfe", b"\xff"])
        self.assertEqual(cpu.R8, 140737351999260)
        self.assertEqual(cpu.RDX, 18446744073709457807)
        self.assertEqual(cpu.RIP, 140737351905388)
        self.assertEqual(cpu.RBX, 0)

    def test_MOVSXD_3(self):
        """Instruction MOVSXD_3
        Groups:
        0x436902:   movsxd  rax, dword ptr [rdx + rax*4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        mem.write(0x436902, "Hc\x04\x82")
        mem.write(0x494CF0, "\xa0\x1c\xfa\xff")
        cpu.RIP = 0x436902
        cpu.RAX = 0x1C
        cpu.RDX = 0x494C80
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x436902:0x436906], [b"H", b"c", b"\x04", b"\x82"])
        self.assertEqual(mem[0x494CF0:0x494CF4], [b"\xa0", b"\x1c", b"\xfa", b"\xff"])
        self.assertEqual(cpu.RAX, 18446744073709165728)
        self.assertEqual(cpu.RIP, 4417798)
        self.assertEqual(cpu.RDX, 4803712)

    def test_MOVSXD_4(self):
        """Instruction MOVSXD_4
        Groups:
        0x7ffff7df214a:     movsxd  rax, dword ptr [rcx + rax*4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF214A, "Hc\x04\x81")
        mem.write(0x7FFFF7DF674C, "0\xbb\xff\xff")
        cpu.RCX = 0x7FFFF7DF6740
        cpu.RIP = 0x7FFFF7DF214A
        cpu.RAX = 0x3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF214A:0x7FFFF7DF214E], [b"H", b"c", b"\x04", b"\x81"])
        self.assertEqual(mem[0x7FFFF7DF674C:0x7FFFF7DF6750], [b"0", b"\xbb", b"\xff", b"\xff"])
        self.assertEqual(cpu.RCX, 140737352001344)
        self.assertEqual(cpu.RAX, 18446744073709534000)
        self.assertEqual(cpu.RIP, 140737351983438)

    def test_MOVSXD_5(self):
        """Instruction MOVSXD_5
        Groups:
        0x436b12:   movsxd  rax, dword ptr [rdx + rax*4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        mem.write(0x436B12, "Hc\x04\x82")
        mem.write(0x494EA0, "\x10\x1d\xfa\xff")
        cpu.RIP = 0x436B12
        cpu.RAX = 0x8
        cpu.RDX = 0x494E80
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x436B12:0x436B16], [b"H", b"c", b"\x04", b"\x82"])
        self.assertEqual(mem[0x494EA0:0x494EA4], [b"\x10", b"\x1d", b"\xfa", b"\xff"])
        self.assertEqual(cpu.RAX, 18446744073709165840)
        self.assertEqual(cpu.RIP, 4418326)
        self.assertEqual(cpu.RDX, 4804224)

    def test_MOVSXD_6(self):
        """Instruction MOVSXD_6
        Groups:
        0x7ffff7de62e7:     movsxd  rdx, dword ptr [rax + r12*4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE62E7, "Jc\x14\xa0")
        mem.write(0x7FFFF7DF6458, "x\xff\xfe\xff")
        cpu.RIP = 0x7FFFF7DE62E7
        cpu.R12 = 0x6
        cpu.RDX = 0x7FFFF7A32FE0
        cpu.RAX = 0x7FFFF7DF6440
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE62E7:0x7FFFF7DE62EB], [b"J", b"c", b"\x14", b"\xa0"])
        self.assertEqual(mem[0x7FFFF7DF6458:0x7FFFF7DF645C], [b"x", b"\xff", b"\xfe", b"\xff"])
        self.assertEqual(cpu.RAX, 140737352000576)
        self.assertEqual(cpu.R12, 6)
        self.assertEqual(cpu.RDX, 18446744073709485944)
        self.assertEqual(cpu.RIP, 140737351934699)

    def test_MOVSX_1(self):
        """Instruction MOVSX_1
        Groups:
        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x555555554435, ".")
        mem.write(0x7FFFF7DF1273, "\x0f\xbe\x17")
        cpu.EDX = 0x63
        cpu.RDI = 0x555555554435
        cpu.RIP = 0x7FFFF7DF1273
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555554435:0x555555554436], [b"."])
        self.assertEqual(mem[0x7FFFF7DF1273:0x7FFFF7DF1276], [b"\x0f", b"\xbe", b"\x17"])
        self.assertEqual(cpu.EDX, 46)
        self.assertEqual(cpu.RDI, 93824992232501)
        self.assertEqual(cpu.RIP, 140737351979638)

    def test_MOVSX_2(self):
        """Instruction MOVSX_2
        Groups:
        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x55555555444D, ".")
        mem.write(0x7FFFF7DF1273, "\x0f\xbe\x17")
        cpu.EDX = 0x63
        cpu.RDI = 0x55555555444D
        cpu.RIP = 0x7FFFF7DF1273
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x55555555444D:0x55555555444E], [b"."])
        self.assertEqual(mem[0x7FFFF7DF1273:0x7FFFF7DF1276], [b"\x0f", b"\xbe", b"\x17"])
        self.assertEqual(cpu.EDX, 46)
        self.assertEqual(cpu.RDI, 93824992232525)
        self.assertEqual(cpu.RIP, 140737351979638)

    def test_MOVSX_3(self):
        """Instruction MOVSX_3
        Groups:
        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1260, "\x0f\xbe\x06")
        mem.write(0x7FFFF7FF23B6, "l")
        cpu.EAX = 0x3C
        cpu.RSI = 0x7FFFF7FF23B6
        cpu.RIP = 0x7FFFF7DF1260
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF1260:0x7FFFF7DF1263], [b"\x0f", b"\xbe", b"\x06"])
        self.assertEqual(mem[0x7FFFF7FF23B6:0x7FFFF7FF23B7], [b"l"])
        self.assertEqual(cpu.EAX, 108)
        self.assertEqual(cpu.RSI, 140737354081206)
        self.assertEqual(cpu.RIP, 140737351979619)

    def test_MOVSX_4(self):
        """Instruction MOVSX_4
        Groups:
        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FED000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1260, "\x0f\xbe\x06")
        mem.write(0x7FFFF7FEDE8E, "i")
        cpu.EAX = 0x39
        cpu.RSI = 0x7FFFF7FEDE8E
        cpu.RIP = 0x7FFFF7DF1260
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF1260:0x7FFFF7DF1263], [b"\x0f", b"\xbe", b"\x06"])
        self.assertEqual(mem[0x7FFFF7FEDE8E:0x7FFFF7FEDE8F], [b"i"])
        self.assertEqual(cpu.EAX, 105)
        self.assertEqual(cpu.RSI, 140737354063502)
        self.assertEqual(cpu.RIP, 140737351979619)

    def test_MOVSX_5(self):
        """Instruction MOVSX_5
        Groups:
        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FED000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1260, "\x0f\xbe\x06")
        mem.write(0x7FFFF7FEDE8F, "b")
        cpu.EAX = 0x32
        cpu.RSI = 0x7FFFF7FEDE8F
        cpu.RIP = 0x7FFFF7DF1260
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF1260:0x7FFFF7DF1263], [b"\x0f", b"\xbe", b"\x06"])
        self.assertEqual(mem[0x7FFFF7FEDE8F:0x7FFFF7FEDE90], [b"b"])
        self.assertEqual(cpu.EAX, 98)
        self.assertEqual(cpu.RSI, 140737354063503)
        self.assertEqual(cpu.RIP, 140737351979619)

    def test_MOVSX_6(self):
        """Instruction MOVSX_6
        Groups:
        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x555555554434, "c")
        mem.write(0x7FFFF7DF1273, "\x0f\xbe\x17")
        cpu.EDX = 0x62
        cpu.RDI = 0x555555554434
        cpu.RIP = 0x7FFFF7DF1273
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555554434:0x555555554435], [b"c"])
        self.assertEqual(mem[0x7FFFF7DF1273:0x7FFFF7DF1276], [b"\x0f", b"\xbe", b"\x17"])
        self.assertEqual(cpu.EDX, 99)
        self.assertEqual(cpu.RDI, 93824992232500)
        self.assertEqual(cpu.RIP, 140737351979638)

    def test_MOVZX_1(self):
        """Instruction MOVZX_1
        Groups:
        0x7ffff7de3aa3:     movzx   edx, byte ptr [rcx + 4]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A32000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7A324BC, "\x11")
        mem.write(0x7FFFF7DE3AA3, "\x0f\xb6Q\x04")
        cpu.EDX = 0x6
        cpu.RCX = 0x7FFFF7A324B8
        cpu.RIP = 0x7FFFF7DE3AA3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A324BC:0x7FFFF7A324BD], [b"\x11"])
        self.assertEqual(mem[0x7FFFF7DE3AA3:0x7FFFF7DE3AA7], [b"\x0f", b"\xb6", b"Q", b"\x04"])
        self.assertEqual(cpu.EDX, 17)
        self.assertEqual(cpu.RCX, 140737348052152)
        self.assertEqual(cpu.RIP, 140737351924391)

    def test_MOVZX_2(self):
        """Instruction MOVZX_2
        Groups:
        0x7ffff7de4399:     movzx   edx, byte ptr [rcx]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x555555554E44, "_")
        mem.write(0x7FFFF7DE4399, "\x0f\xb6\x11")
        cpu.EDX = 0x6C
        cpu.RCX = 0x555555554E44
        cpu.RIP = 0x7FFFF7DE4399
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555554E44:0x555555554E45], [b"_"])
        self.assertEqual(mem[0x7FFFF7DE4399:0x7FFFF7DE439C], [b"\x0f", b"\xb6", b"\x11"])
        self.assertEqual(cpu.EDX, 95)
        self.assertEqual(cpu.RCX, 93824992235076)
        self.assertEqual(cpu.RIP, 140737351926684)

    def test_MOVZX_3(self):
        """Instruction MOVZX_3
        Groups:
        0x400aaa:   movzx   eax, al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AAA, "\x0f\xb6\xc0")
        cpu.EAX = 0x79
        cpu.AL = 0x79
        cpu.RIP = 0x400AAA
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x400AAA:0x400AAD], [b"\x0f", b"\xb6", b"\xc0"])
        self.assertEqual(cpu.EAX, 121)
        self.assertEqual(cpu.AL, 121)
        self.assertEqual(cpu.RIP, 4197037)

    def test_MOVZX_4(self):
        """Instruction MOVZX_4
        Groups:
        0x7ffff7b58f18:     movzx   r10d, word ptr [rdx + 6]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A35000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7A3575E, "\x0b\x00")
        mem.write(0x7FFFF7B58F18, "D\x0f\xb7R\x06")
        cpu.RDX = 0x7FFFF7A35758
        cpu.RIP = 0x7FFFF7B58F18
        cpu.R10D = 0x24
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A3575E:0x7FFFF7A35760], [b"\x0b", b"\x00"])
        self.assertEqual(
            mem[0x7FFFF7B58F18:0x7FFFF7B58F1D], [b"D", b"\x0f", b"\xb7", b"R", b"\x06"]
        )
        self.assertEqual(cpu.RDX, 140737348065112)
        self.assertEqual(cpu.RIP, 140737349259037)
        self.assertEqual(cpu.R10D, 11)

    def test_MOVZX_5(self):
        """Instruction MOVZX_5
        Groups:
        0x7ffff7de6219:     movzx   r9d, r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6219, "E\x0f\xb6\xc9")
        cpu.R9D = 0xFFFFFF00
        cpu.R9B = 0x0
        cpu.RIP = 0x7FFFF7DE6219
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6219:0x7FFFF7DE621D], [b"E", b"\x0f", b"\xb6", b"\xc9"])
        self.assertEqual(cpu.R9D, 0)
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934493)

    def test_MOVZX_6(self):
        """Instruction MOVZX_6
        Groups:
        0x7ffff7de3929:     movzx   ecx, byte ptr [rbp - 0x78]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3929, "\x0f\xb6M\x88")
        mem.write(0x7FFFFFFFD808, "8")
        cpu.ECX = 0x2917737
        cpu.RIP = 0x7FFFF7DE3929
        cpu.RBP = 0x7FFFFFFFD880
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3929:0x7FFFF7DE392D], [b"\x0f", b"\xb6", b"M", b"\x88"])
        self.assertEqual(mem[0x7FFFFFFFD808:0x7FFFFFFFD809], [b"8"])
        self.assertEqual(cpu.RBP, 140737488345216)
        self.assertEqual(cpu.RIP, 140737351924013)
        self.assertEqual(cpu.ECX, 56)

    def test_MOV_1(self):
        """Instruction MOV_1
        Groups:
        0x737287:   mov     ebx, 0x40
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00737000, 0x1000, "rwx")
        mem.write(0x737287, "\xbb@\x00\x00\x00")
        cpu.EBX = 0x40
        cpu.RIP = 0x737287
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x737287:0x73728C], [b"\xbb", b"@", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.EBX, 64)
        self.assertEqual(cpu.RIP, 7565964)

    def test_MOV_2(self):
        """Instruction MOV_2
        Groups:
        0x7ffff7de6121:     mov     rax, r13
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6121, "L\x89\xe8")
        cpu.RIP = 0x7FFFF7DE6121
        cpu.RAX = 0x8
        cpu.R13 = 0x7FFFF7A2E000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6121:0x7FFFF7DE6124], [b"L", b"\x89", b"\xe8"])
        self.assertEqual(cpu.RAX, 140737348034560)
        self.assertEqual(cpu.RIP, 140737351934244)
        self.assertEqual(cpu.R13, 140737348034560)

    def test_MOV_3(self):
        """Instruction MOV_3
        Groups:
        0x74dced:   mov     dword ptr [rsp], 0x7fff
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0074D000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x74DCED, "\xc7\x04$\xff\x7f\x00\x00")
        mem.write(0x7FFFFFFFCCB0, "\xff\x7f\x00\x00")
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x74DCED
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x74DCED:0x74DCF4], [b"\xc7", b"\x04", b"$", b"\xff", b"\x7f", b"\x00", b"\x00"]
        )
        self.assertEqual(mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCB4], [b"\xff", b"\x7f", b"\x00", b"\x00"])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7658740)

    def test_MOV_4(self):
        """Instruction MOV_4
        Groups:
        0x4b00dc:   mov     dword ptr [rsp + 4], 0x80
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004B0000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4B00DC, "\xc7D$\x04\x80\x00\x00\x00")
        mem.write(0x7FFFFFFFCCB4, "\xff\xff\xff\xff")
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x4B00DC
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x4B00DC:0x4B00E4],
            [b"\xc7", b"D", b"$", b"\x04", b"\x80", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(mem[0x7FFFFFFFCCB4:0x7FFFFFFFCCB8], [b"\x80", b"\x00", b"\x00", b"\x00"])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4915428)

    def test_MOV_5(self):
        """Instruction MOV_5
        Groups:
        0x7776d9:   mov     dword ptr [rsp + 8], 0x80000000
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00777000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7776D9, "\xc7D$\x08\x00\x00\x00\x80")
        mem.write(0x7FFFFFFFCCB8, "\x7f\x00\x00\x00")
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x7776D9
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7776D9:0x7776E1],
            [b"\xc7", b"D", b"$", b"\x08", b"\x00", b"\x00", b"\x00", b"\x80"],
        )
        self.assertEqual(mem[0x7FFFFFFFCCB8:0x7FFFFFFFCCBC], [b"\x00", b"\x00", b"\x00", b"\x80"])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 7829217)

    def test_MOV_6(self):
        """Instruction MOV_6
        Groups:
        0x4c3b88:   mov     dword ptr [rsp + 0xc], 0x12345678
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004C3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4C3B88, "\xc7D$\x0cxV4\x12")
        mem.write(0x7FFFFFFFCCBC, "xV4\x12")
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x4C3B88
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x4C3B88:0x4C3B90], [b"\xc7", b"D", b"$", b"\x0c", b"x", b"V", b"4", b"\x12"]
        )
        self.assertEqual(mem[0x7FFFFFFFCCBC:0x7FFFFFFFCCC0], [b"x", b"V", b"4", b"\x12"])
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 4995984)

    def test_MUL_1(self):
        """Instruction MUL_1
        Groups:
        0x7ffff7de253f:     mul     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE253F, "H\xf7\xe2")
        cpu.OF = False
        cpu.RIP = 0x7FFFF7DE253F
        cpu.CF = False
        cpu.RAX = 0x5F
        cpu.RDX = 0xCCCCCCCCCCCCCCCD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE253F:0x7FFFF7DE2542], [b"H", b"\xf7", b"\xe2"])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351918914)
        self.assertEqual(cpu.RDX, 76)

    def test_MUL_2(self):
        """Instruction MUL_2
        Groups:
        0x7ffff7de253f:     mul     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE253F, "H\xf7\xe2")
        cpu.OF = False
        cpu.RIP = 0x7FFFF7DE253F
        cpu.CF = False
        cpu.RAX = 0x5F
        cpu.RDX = 0xCCCCCCCCCCCCCCCD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE253F:0x7FFFF7DE2542], [b"H", b"\xf7", b"\xe2"])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351918914)
        self.assertEqual(cpu.RDX, 76)

    def test_MUL_3(self):
        """Instruction MUL_3
        Groups:
        0x7ffff7de253f:     mul     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE253F, "H\xf7\xe2")
        cpu.OF = False
        cpu.RIP = 0x7FFFF7DE253F
        cpu.CF = False
        cpu.RAX = 0x5F
        cpu.RDX = 0xCCCCCCCCCCCCCCCD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE253F:0x7FFFF7DE2542], [b"H", b"\xf7", b"\xe2"])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 19)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351918914)
        self.assertEqual(cpu.RDX, 76)

    def test_MUL_4(self):
        """Instruction MUL_4
        Groups:
        0x45f865:   mul     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045F000, 0x1000, "rwx")
        mem.write(0x45F865, "H\xf7\xe2")
        cpu.OF = False
        cpu.RIP = 0x45F865
        cpu.CF = False
        cpu.RAX = 0x57
        cpu.RDX = 0xCCCCCCCCCCCCCCCD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x45F865:0x45F868], [b"H", b"\xf7", b"\xe2"])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 11068046444225730987)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4585576)
        self.assertEqual(cpu.RDX, 69)

    def test_MUL_5(self):
        """Instruction MUL_5
        Groups:
        0x4624e5:   mul     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, "rwx")
        mem.write(0x4624E5, "H\xf7\xe2")
        cpu.OF = False
        cpu.RIP = 0x4624E5
        cpu.CF = False
        cpu.RAX = 0x57
        cpu.RDX = 0xCCCCCCCCCCCCCCCD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4624E5:0x4624E8], [b"H", b"\xf7", b"\xe2"])
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RAX, 11068046444225730987)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4596968)
        self.assertEqual(cpu.RDX, 69)

    def test_MUL_6(self):
        """Instruction MUL_6
        Groups:
        0x443dc7:   mul     r9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00443000, 0x1000, "rwx")
        mem.write(0x443DC7, "I\xf7\xe1")
        cpu.OF = False
        cpu.R9 = 0xCCCCCCCCCCCCCCCD
        cpu.RIP = 0x443DC7
        cpu.RDX = 0xA
        cpu.CF = False
        cpu.RAX = 0x3
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x443DC7:0x443DCA], [b"I", b"\xf7", b"\xe1"])
        self.assertEqual(cpu.RDX, 2)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4472266)
        self.assertEqual(cpu.R9, 14757395258967641293)
        self.assertEqual(cpu.RAX, 7378697629483820647)

    def test_NEG_1(self):
        """Instruction NEG_1
        Groups:
        0x7ffff7df27cf:     neg     rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF27CF, "H\xf7\xd8")
        cpu.PF = True
        cpu.RAX = 0x7FFFF7FFEB78
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x7FFFF7DF27CF
        cpu.SF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF27CF:0x7FFFF7DF27D2], [b"H", b"\xf7", b"\xd8"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 18446603336355419272)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351985106)
        self.assertEqual(cpu.SF, True)

    def test_NEG_2(self):
        """Instruction NEG_2
        Groups:
        0x7ffff7de5c54:     neg     rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5C54, "H\xf7\xd8")
        cpu.PF = True
        cpu.RAX = 0x1000
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE5C54
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5C54:0x7FFFF7DE5C57], [b"H", b"\xf7", b"\xd8"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RAX, 18446744073709547520)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351933015)
        self.assertEqual(cpu.SF, True)

    def test_NEG_3(self):
        """Instruction NEG_3
        Groups:
        0x40baad:   neg     eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040B000, 0x1000, "rwx")
        mem.write(0x40BAAD, "\xf7\xd8")
        cpu.EAX = 0x0
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x40BAAD
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40BAAD:0x40BAAF], [b"\xf7", b"\xd8"])
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4242095)
        self.assertEqual(cpu.SF, False)

    def test_NEG_4(self):
        """Instruction NEG_4
        Groups:
        0x7ffff7df27b6:     neg     rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF27B6, "H\xf7\xdf")
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x8
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF27B6
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF27B6:0x7FFFF7DF27B9], [b"H", b"\xf7", b"\xdf"])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 18446744073709551608)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351985081)
        self.assertEqual(cpu.SF, True)

    def test_NEG_5(self):
        """Instruction NEG_5
        Groups:
        0x411176:   neg     r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411176, "I\xf7\xda")
        cpu.PF = True
        cpu.R10 = 0x1000
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x411176
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x411176:0x411179], [b"I", b"\xf7", b"\xda"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R10, 18446744073709547520)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4264313)
        self.assertEqual(cpu.SF, True)

    def test_NEG_6(self):
        """Instruction NEG_6
        Groups:
        0x7ffff7df27b6:     neg     rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF27B6, "H\xf7\xdf")
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RDI = 0x8
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF27B6
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF27B6:0x7FFFF7DF27B9], [b"H", b"\xf7", b"\xdf"])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RDI, 18446744073709551608)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351985081)
        self.assertEqual(cpu.SF, True)

    def test_NOT_1(self):
        """Instruction NOT_1
        Groups:
        0x7ffff7df144a:     not     rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF144A, "H\xf7\xd0")
        cpu.RIP = 0x7FFFF7DF144A
        cpu.RAX = 0x8000000000000000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF144A:0x7FFFF7DF144D], [b"H", b"\xf7", b"\xd0"])
        self.assertEqual(cpu.RAX, 9223372036854775807)
        self.assertEqual(cpu.RIP, 140737351980109)

    def test_NOT_2(self):
        """Instruction NOT_2
        Groups:
        0x4008f7:   not     esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008F7, "\xf7\xd6")
        cpu.RIP = 0x4008F7
        cpu.ESI = 0xFFFFFFF0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4008F7:0x4008F9], [b"\xf7", b"\xd6"])
        self.assertEqual(cpu.ESI, 15)
        self.assertEqual(cpu.RIP, 4196601)

    def test_NOT_3(self):
        """Instruction NOT_3
        Groups:
        0x7ffff7a78242:     not     rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78242, "H\xf7\xd0")
        cpu.RIP = 0x7FFFF7A78242
        cpu.RAX = 0xFFFFFFFFFFFFFFFC
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A78242:0x7FFFF7A78245], [b"H", b"\xf7", b"\xd0"])
        self.assertEqual(cpu.RAX, 3)
        self.assertEqual(cpu.RIP, 140737348338245)

    def test_NOT_4(self):
        """Instruction NOT_4
        Groups:
        0x7ffff7de5765:     not     r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5765, "I\xf7\xd2")
        cpu.RIP = 0x7FFFF7DE5765
        cpu.R10 = 0xFFFFFFFFFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5765:0x7FFFF7DE5768], [b"I", b"\xf7", b"\xd2"])
        self.assertEqual(cpu.R10, 0)
        self.assertEqual(cpu.RIP, 140737351931752)

    def test_NOT_5(self):
        """Instruction NOT_5
        Groups:
        0x7ffff7de5765:     not     r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5765, "I\xf7\xd2")
        cpu.RIP = 0x7FFFF7DE5765
        cpu.R10 = 0xFFFFFFFFFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5765:0x7FFFF7DE5768], [b"I", b"\xf7", b"\xd2"])
        self.assertEqual(cpu.R10, 0)
        self.assertEqual(cpu.RIP, 140737351931752)

    def test_NOT_6(self):
        """Instruction NOT_6
        Groups:
        0x7ffff7de5765:     not     r10
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5765, "I\xf7\xd2")
        cpu.RIP = 0x7FFFF7DE5765
        cpu.R10 = 0xFFFFFFFFFFFFFFFF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5765:0x7FFFF7DE5768], [b"I", b"\xf7", b"\xd2"])
        self.assertEqual(cpu.R10, 0)
        self.assertEqual(cpu.RIP, 140737351931752)

    def test_OR_1(self):
        """Instruction OR_1
        Groups:
        0x7ffff7de6235:     or      r9d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6235, "A\t\xc1")
        cpu.EAX = 0x0
        cpu.PF = False
        cpu.SF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6235
        cpu.R9D = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6235:0x7FFFF7DE6238], [b"A", b"\t", b"\xc1"])
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.R9D, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934520)
        self.assertEqual(cpu.SF, False)

    def test_OR_2(self):
        """Instruction OR_2
        Groups:
        0x7ffff7de4344:     or      qword ptr [rsp], 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4344, "H\x83\x0c$\x00")
        mem.write(0x7FFFFFFFC920, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4344
        cpu.PF = False
        cpu.RSP = 0x7FFFFFFFC920
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE4344:0x7FFFF7DE4349], [b"H", b"\x83", b"\x0c", b"$", b"\x00"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFC920:0x7FFFFFFFC928],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926601)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488341280)
        self.assertEqual(cpu.SF, False)

    def test_OR_3(self):
        """Instruction OR_3
        Groups:
        0x7ffff7de3814:     or      qword ptr [rsp], 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3814, "H\x83\x0c$\x00")
        mem.write(0x7FFFFFFFC790, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3814
        cpu.PF = True
        cpu.RSP = 0x7FFFFFFFC790
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE3814:0x7FFFF7DE3819], [b"H", b"\x83", b"\x0c", b"$", b"\x00"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFC790:0x7FFFFFFFC798],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923737)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488340880)
        self.assertEqual(cpu.SF, False)

    def test_OR_4(self):
        """Instruction OR_4
        Groups:
        0x7ffff7de3814:     or      qword ptr [rsp], 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3814, "H\x83\x0c$\x00")
        mem.write(0x7FFFFFFFC790, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3814
        cpu.PF = True
        cpu.RSP = 0x7FFFFFFFC790
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE3814:0x7FFFF7DE3819], [b"H", b"\x83", b"\x0c", b"$", b"\x00"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFC790:0x7FFFFFFFC798],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923737)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RSP, 140737488340880)
        self.assertEqual(cpu.SF, False)

    def test_OR_5(self):
        """Instruction OR_5
        Groups:
        0x40a38c:   or      qword ptr [rsp], 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040A000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x40A38C, "H\x83\x0c$\x00")
        mem.write(0x7FFFFFFFCB00, "/home/fe")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x40A38C
        cpu.PF = True
        cpu.RSP = 0x7FFFFFFFCB00
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40A38C:0x40A391], [b"H", b"\x83", b"\x0c", b"$", b"\x00"])
        self.assertEqual(
            mem[0x7FFFFFFFCB00:0x7FFFFFFFCB08], [b"/", b"h", b"o", b"m", b"e", b"/", b"f", b"e"]
        )
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4236177)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.RSP, 140737488341760)
        self.assertEqual(cpu.SF, False)

    def test_OR_6(self):
        """Instruction OR_6
        Groups:
        0x7ffff7de6212:     or      r9d, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6212, "A\t\xc1")
        cpu.EAX = 0xFFFFFF00
        cpu.PF = True
        cpu.SF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = True
        cpu.RIP = 0x7FFFF7DE6212
        cpu.R9D = 0xF7FF7600
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6212:0x7FFFF7DE6215], [b"A", b"\t", b"\xc1"])
        self.assertEqual(cpu.EAX, 4294967040)
        self.assertEqual(cpu.R9D, 4294967040)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934485)
        self.assertEqual(cpu.SF, True)

    def test_PCMPEQB_1(self):
        """Instruction PCMPEQB_1
        Groups: sse2
        0x457e12:   pcmpeqb xmm5, xmm2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457E12, "f\x0ft\xea")
        cpu.XMM2 = 0x0
        cpu.RIP = 0x457E12
        cpu.XMM5 = 0x2F65726F6369746E614D2F737463656A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457E12:0x457E16], [b"f", b"\x0f", b"t", b"\xea"])
        self.assertEqual(cpu.XMM2, 0)
        self.assertEqual(cpu.RIP, 4554262)
        self.assertEqual(cpu.XMM5, 0)

    def test_PCMPEQB_2(self):
        """Instruction PCMPEQB_2
        Groups: sse2
        0x4184bf:   pcmpeqb xmm12, xmm8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184BF, "fE\x0ft\xe0")
        cpu.XMM12 = 0x6E696874796E61206F642074276E6F44
        cpu.XMM8 = 0x0
        cpu.RIP = 0x4184BF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4184BF:0x4184C4], [b"f", b"E", b"\x0f", b"t", b"\xe0"])
        self.assertEqual(cpu.XMM12, 0)
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293828)

    def test_PCMPEQB_3(self):
        """Instruction PCMPEQB_3
        Groups: sse2
        0x457a26:   pcmpeqb xmm0, xmm7
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457A26, "f\x0ft\xc7")
        cpu.XMM0 = 0x5400324E2F2F00313D524E00455F4744
        cpu.XMM7 = 0x0
        cpu.RIP = 0x457A26
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457A26:0x457A2A], [b"f", b"\x0f", b"t", b"\xc7"])
        self.assertEqual(cpu.XMM0, 1324035698927585248728409418697277440)
        self.assertEqual(cpu.XMM7, 0)
        self.assertEqual(cpu.RIP, 4553258)

    def test_PCMPEQB_4(self):
        """Instruction PCMPEQB_4
        Groups: sse2
        0x4579e8:   pcmpeqb xmm0, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x4579E8, "f\x0ft\xc1")
        cpu.XMM0 = 0x2F78756E696C2F73656C706D6178652F
        cpu.XMM1 = 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F
        cpu.RIP = 0x4579E8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4579E8:0x4579EC], [b"f", b"\x0f", b"t", b"\xc1"])
        self.assertEqual(cpu.XMM0, 338953138925154751793923932131017359615)
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 4553196)

    def test_PCMPEQB_5(self):
        """Instruction PCMPEQB_5
        Groups: sse2
        0x7ffff7ab7ac6:     pcmpeqb xmm0, xmm7
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB7AC6, "f\x0ft\xc7")
        cpu.XMM0 = 0x322F2F4D00313D522F00565F474458
        cpu.XMM7 = 0x0
        cpu.RIP = 0x7FFFF7AB7AC6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AB7AC6:0x7FFFF7AB7ACA], [b"f", b"\x0f", b"t", b"\xc7"])
        self.assertEqual(cpu.XMM0, 338953138925461823674472811186503024640)
        self.assertEqual(cpu.XMM7, 0)
        self.assertEqual(cpu.RIP, 140737348598474)

    def test_PCMPEQB_6(self):
        """Instruction PCMPEQB_6
        Groups: sse2
        0x7ffff7ab79b1:     pcmpeqb xmm0, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB79B1, "f\x0ft\xc1")
        cpu.XMM0 = 0x6F72502F6570696C65662F656D6F682F
        cpu.XMM1 = 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F
        cpu.RIP = 0x7FFFF7AB79B1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AB79B1:0x7FFFF7AB79B5], [b"f", b"\x0f", b"t", b"\xc1"])
        self.assertEqual(cpu.XMM0, 20203181441137406366729172418815)
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 140737348598197)

    def test_PMINUB_1(self):
        """Instruction PMINUB_1
        Groups: sse2
        0x41b15f:   pminub  xmm8, xmmword ptr [rax + 0x10]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041B000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        mem.write(0x41B15F, "fD\x0f\xda@\x10")
        mem.write(0x494290, "                ")
        cpu.XMM8 = 0x5F5F5F5F5F200A2E646574726F706572
        cpu.RIP = 0x41B15F
        cpu.RAX = 0x494280
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41B15F:0x41B165], [b"f", b"D", b"\x0f", b"\xda", b"@", b"\x10"])
        self.assertEqual(
            mem[0x494290:0x4942A0],
            [
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
            ],
        )
        self.assertEqual(cpu.XMM8, 42702100946941193483733406035713466400)
        self.assertEqual(cpu.RAX, 4801152)
        self.assertEqual(cpu.RIP, 4305253)

    def test_PMINUB_2(self):
        """Instruction PMINUB_2
        Groups: sse2
        0x41b142:   pminub  xmm8, xmmword ptr [rax + 0x70]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041B000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        mem.write(0x41B142, "fD\x0f\xda@p")
        mem.write(0x4942F0, "___ _____      _")
        cpu.XMM8 = 0x2020202020202020202020200A202020
        cpu.RIP = 0x41B142
        cpu.RAX = 0x494280
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41B142:0x41B148], [b"f", b"D", b"\x0f", b"\xda", b"@", b"p"])
        self.assertEqual(
            mem[0x4942F0:0x494300],
            [
                b"_",
                b"_",
                b"_",
                b" ",
                b"_",
                b"_",
                b"_",
                b"_",
                b"_",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b" ",
                b"_",
            ],
        )
        self.assertEqual(cpu.XMM8, 42702100946941297375796029167539068960)
        self.assertEqual(cpu.RAX, 4801152)
        self.assertEqual(cpu.RIP, 4305224)

    def test_PMINUB_3(self):
        """Instruction PMINUB_3
        Groups: sse2
        0x457af6:   pminub  xmm0, xmm2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457AF6, "f\x0f\xda\xc2")
        cpu.XMM2 = 0x504E414D00323D524E54565F47445800
        cpu.XMM0 = 0x32677261003167726100706D636E7274
        cpu.RIP = 0x457AF6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457AF6:0x457AFA], [b"f", b"\x0f", b"\xda", b"\xc2"])
        self.assertEqual(cpu.XMM2, 106744563275012473217874926561820694528)
        self.assertEqual(cpu.XMM0, 66867723401463788104917456226191955968)
        self.assertEqual(cpu.RIP, 4553466)

    def test_PMINUB_4(self):
        """Instruction PMINUB_4
        Groups: sse2
        0x41b13c:   pminub  xmm8, xmmword ptr [rax + 0x60]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041B000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        mem.write(0x41B13C, "fD\x0f\xda@`")
        mem.write(0x4941E0, "hecked by system")
        cpu.XMM8 = 0x632067676F6120736720720A646E6120
        cpu.RIP = 0x41B13C
        cpu.RAX = 0x494180
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41B13C:0x41B142], [b"f", b"D", b"\x0f", b"\xda", b"@", b"`"])
        self.assertEqual(
            mem[0x4941E0:0x4941F0],
            [
                b"h",
                b"e",
                b"c",
                b"k",
                b"e",
                b"d",
                b" ",
                b"b",
                b"y",
                b" ",
                b"s",
                b"y",
                b"s",
                b"t",
                b"e",
                b"m",
            ],
        )
        self.assertEqual(cpu.XMM8, 131761822365339956131716016926609334560)
        self.assertEqual(cpu.RAX, 4800896)
        self.assertEqual(cpu.RIP, 4305218)

    def test_PMINUB_5(self):
        """Instruction PMINUB_5
        Groups: sse2
        0x457ee2:   pminub  xmm0, xmm5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457EE2, "f\x0f\xda\xc5")
        cpu.XMM0 = 0x4D00313D524E00565F472F2F00326763
        cpu.RIP = 0x457EE2
        cpu.XMM5 = 0x65784563696C6F626D79532F65726F63
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457EE2:0x457EE6], [b"f", b"\x0f", b"\xda", b"\xc5"])
        self.assertEqual(cpu.XMM0, 102351554371899083128134245349023967075)
        self.assertEqual(cpu.RIP, 4554470)
        self.assertEqual(cpu.XMM5, 134876510559778439374245404375482789731)

    def test_PMINUB_6(self):
        """Instruction PMINUB_6
        Groups: sse2
        0x7ffff7ab7abe:     pminub  xmm0, xmm4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB7ABE, "f\x0f\xda\xc4")
        cpu.XMM0 = 0x324E414D00313D524E00565F474458
        cpu.RIP = 0x7FFFF7AB7ABE
        cpu.XMM4 = 0x7274732F78756E696C2F73656C706D61
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AB7ABE:0x7FFFF7AB7AC2], [b"f", b"\x0f", b"\xda", b"\xc4"])
        self.assertEqual(cpu.XMM0, 261200618430042665518031405314425944)
        self.assertEqual(cpu.XMM4, 152136634193178674532939302896952962401)
        self.assertEqual(cpu.RIP, 140737348598466)

    def test_PMOVMSKB_1(self):
        """Instruction PMOVMSKB_1
        Groups: sse2
        0x4184f1:   pmovmskb        ecx, xmm11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184F1, "fA\x0f\xd7\xcb")
        cpu.XMM11 = 0x0
        cpu.RIP = 0x4184F1
        cpu.ECX = 0x10E
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4184F1:0x4184F6], [b"f", b"A", b"\x0f", b"\xd7", b"\xcb"])
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293878)
        self.assertEqual(cpu.ECX, 0)

    def test_PMOVMSKB_2(self):
        """Instruction PMOVMSKB_2
        Groups: sse2
        0x457d6e:   pmovmskb        r10d, xmm3
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457D6E, "fD\x0f\xd7\xd3")
        cpu.XMM3 = 0xFF00000000FF0000000000000000
        cpu.RIP = 0x457D6E
        cpu.R10D = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457D6E:0x457D73], [b"f", b"D", b"\x0f", b"\xd7", b"\xd3"])
        self.assertEqual(cpu.XMM3, 5172014448935879877845345013596160)
        self.assertEqual(cpu.RIP, 4554099)
        self.assertEqual(cpu.R10D, 8448)

    def test_PMOVMSKB_3(self):
        """Instruction PMOVMSKB_3
        Groups: sse2
        0x457ddd:   pmovmskb        edx, xmm3
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DDD, "f\x0f\xd7\xd3")
        cpu.XMM3 = 0x0
        cpu.EDX = 0xFFFFDCC8
        cpu.RIP = 0x457DDD
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457DDD:0x457DE1], [b"f", b"\x0f", b"\xd7", b"\xd3"])
        self.assertEqual(cpu.XMM3, 0)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.RIP, 4554209)

    def test_PMOVMSKB_4(self):
        """Instruction PMOVMSKB_4
        Groups: sse2
        0x7ffff7ab5ce1:     pmovmskb        ecx, xmm11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5CE1, "fA\x0f\xd7\xcb")
        cpu.XMM11 = 0xFFFFFF0000000000FFFFFF0000000000
        cpu.RIP = 0x7FFFF7AB5CE1
        cpu.ECX = 0xA00
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AB5CE1:0x7FFFF7AB5CE6], [b"f", b"A", b"\x0f", b"\xd7", b"\xcb"]
        )
        self.assertEqual(cpu.XMM11, 340282346638528859830150926458714849280)
        self.assertEqual(cpu.RIP, 140737348590822)
        self.assertEqual(cpu.ECX, 57568)

    def test_PMOVMSKB_5(self):
        """Instruction PMOVMSKB_5
        Groups: sse2
        0x4184e7:   pmovmskb        edx, xmm9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184E7, "fA\x0f\xd7\xd1")
        cpu.EDX = 0x0
        cpu.XMM9 = 0xFF00000000000000000000000000
        cpu.RIP = 0x4184E7
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4184E7:0x4184EC], [b"f", b"A", b"\x0f", b"\xd7", b"\xd1"])
        self.assertEqual(cpu.EDX, 8192)
        self.assertEqual(cpu.XMM9, 5172014448931175958106549077934080)
        self.assertEqual(cpu.RIP, 4293868)

    def test_PMOVMSKB_6(self):
        """Instruction PMOVMSKB_6
        Groups: sse2
        0x4184c4:   pmovmskb        edx, xmm12
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184C4, "fA\x0f\xd7\xd4")
        cpu.EDX = 0x100
        cpu.XMM12 = 0x0
        cpu.RIP = 0x4184C4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4184C4:0x4184C9], [b"f", b"A", b"\x0f", b"\xd7", b"\xd4"])
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.XMM12, 0)
        self.assertEqual(cpu.RIP, 4293833)

    def test_POP_1(self):
        """Instruction POP_1
        Groups: mode64
        0x7ffff7de3b0b:     pop     rbp
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3B0B, "]")
        mem.write(
            0x7FFFFFFFD878, "p\xda\xff\xff\xff\x7f\x00\x00\xb0\xd9\xff\xff\xff\x7f\x00\x00\x7f"
        )
        cpu.RSP = 0x7FFFFFFFD880
        cpu.RIP = 0x7FFFF7DE3B0B
        cpu.RBP = 0x7FFFFFFFD880
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3B0B:0x7FFFF7DE3B0C], [b"]"])
        self.assertEqual(
            mem[0x7FFFFFFFD878:0x7FFFFFFFD889],
            [
                b"p",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xb0",
                b"\xd9",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x7f",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345224)
        self.assertEqual(cpu.RIP, 140737351924492)
        self.assertEqual(cpu.RBP, 140737488345520)

    def test_POP_2(self):
        """Instruction POP_2
        Groups: mode64
        0x7ffff7dea3ad:     pop     r14
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEA000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DEA3AD, "A^")
        mem.write(0x7FFFFFFFDA08, "\x01\x00\x00\x00\x00\x00\x00\x000\xda\xff\xff\xff\x7f\x00\x00`")
        cpu.R14 = 0x4
        cpu.RSP = 0x7FFFFFFFDA10
        cpu.RIP = 0x7FFFF7DEA3AD
        cpu.RBP = 0x7FFFFFFFDA20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DEA3AD:0x7FFFF7DEA3AF], [b"A", b"^"])
        self.assertEqual(
            mem[0x7FFFFFFFDA08:0x7FFFFFFFDA19],
            [
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"0",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"`",
            ],
        )
        self.assertEqual(cpu.R14, 140737488345648)
        self.assertEqual(cpu.RSP, 140737488345624)
        self.assertEqual(cpu.RIP, 140737351951279)
        self.assertEqual(cpu.RBP, 140737488345632)

    def test_POP_3(self):
        """Instruction POP_3
        Groups: mode64
        0x4624e4:   pop     r12
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x4624E4, "A\\")
        mem.write(0x7FFFFFFFDAF8, "\x03\x00\x00\x00\x00\x00\x00\x00H\xd4k\x00\x00\x00\x00\x00\xb8")
        cpu.RSP = 0x7FFFFFFFDB00
        cpu.R12 = 0x1
        cpu.RIP = 0x4624E4
        cpu.RBP = 0x7FFFFFFFDB20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4624E4:0x4624E6], [b"A", b"\\"])
        self.assertEqual(
            mem[0x7FFFFFFFDAF8:0x7FFFFFFFDB09],
            [
                b"\x03",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"H",
                b"\xd4",
                b"k",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xb8",
            ],
        )
        self.assertEqual(cpu.R12, 7066696)
        self.assertEqual(cpu.RSP, 140737488345864)
        self.assertEqual(cpu.RIP, 4596966)
        self.assertEqual(cpu.RBP, 140737488345888)

    def test_POP_4(self):
        """Instruction POP_4
        Groups: mode64
        0x6ff233:   pop     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006FF000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x6FF233, "Z")
        mem.write(
            0x7FFFFFFFCCA0, "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00@"
        )
        cpu.RSP = 0x7FFFFFFFCCA8
        cpu.RDX = 0x80000001
        cpu.RIP = 0x6FF233
        cpu.RBP = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x6FF233:0x6FF234], [b"Z"])
        self.assertEqual(
            mem[0x7FFFFFFFCCA0:0x7FFFFFFFCCB1],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x01",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"@",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RDX, 1)
        self.assertEqual(cpu.RIP, 7336500)
        self.assertEqual(cpu.RBP, 0)

    def test_POP_5(self):
        """Instruction POP_5
        Groups: mode64
        0x632f8a:   pop     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00632000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x632F8A, "Z")
        mem.write(
            0x7FFFFFFFCCA0, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00"
        )
        cpu.RSP = 0x7FFFFFFFCCA8
        cpu.RDX = 0x7F
        cpu.RIP = 0x632F8A
        cpu.RBP = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x632F8A:0x632F8B], [b"Z"])
        self.assertEqual(
            mem[0x7FFFFFFFCCA0:0x7FFFFFFFCCB1],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RDX, 2147483648)
        self.assertEqual(cpu.RIP, 6500235)
        self.assertEqual(cpu.RBP, 0)

    def test_POP_6(self):
        """Instruction POP_6
        Groups: mode64
        0x737db3:   pop     rdx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00737000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x737DB3, "Z")
        mem.write(
            0x7FFFFFFFCCA0, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00@"
        )
        cpu.RSP = 0x7FFFFFFFCCA8
        cpu.RDX = 0x40
        cpu.RIP = 0x737DB3
        cpu.RBP = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x737DB3:0x737DB4], [b"Z"])
        self.assertEqual(
            mem[0x7FFFFFFFCCA0:0x7FFFFFFFCCB1],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xff",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"@",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RDX, 65280)
        self.assertEqual(cpu.RIP, 7568820)
        self.assertEqual(cpu.RBP, 0)

    def test_POR_1(self):
        """Instruction POR_1
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF43A7:0x7FFFF7DF43AB], [b"f", b"\x0f", b"\xeb", b"\xc4"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM4, 0)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_2(self):
        """Instruction POR_2
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF43A7:0x7FFFF7DF43AB], [b"f", b"\x0f", b"\xeb", b"\xc4"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM4, 0)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_3(self):
        """Instruction POR_3
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = 0xFF00000000FF000000000000000000
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF43A7:0x7FFFF7DF43AB], [b"f", b"\x0f", b"\xeb", b"\xc4"])
        self.assertEqual(cpu.XMM0, 1324035698927585248728408323480616960)
        self.assertEqual(cpu.XMM4, 1324035698927585248728408323480616960)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_4(self):
        """Instruction POR_4
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF43A7:0x7FFFF7DF43AB], [b"f", b"\x0f", b"\xeb", b"\xc4"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM4, 0)
        self.assertEqual(cpu.RIP, 140737351992235)

    def test_POR_5(self):
        """Instruction POR_5
        Groups: sse2
        0x7ffff7df4412:     por     xmm0, xmm3
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4412, "f\x0f\xeb\xc3")
        cpu.XMM3 = 0xFF000000000000
        cpu.XMM0 = 0x0
        cpu.RIP = 0x7FFFF7DF4412
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4412:0x7FFFF7DF4416], [b"f", b"\x0f", b"\xeb", b"\xc3"])
        self.assertEqual(cpu.XMM3, 71776119061217280)
        self.assertEqual(cpu.XMM0, 71776119061217280)
        self.assertEqual(cpu.RIP, 140737351992342)

    def test_POR_6(self):
        """Instruction POR_6
        Groups: sse2
        0x7ffff7ac0b17:     por     xmm0, xmm4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0B17, "f\x0f\xeb\xc4")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x7FFFF7AC0B17
        cpu.XMM4 = 0xFFFFFF000000FF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AC0B17:0x7FFFF7AC0B1B], [b"f", b"\x0f", b"\xeb", b"\xc4"])
        self.assertEqual(cpu.XMM0, 72057589742960895)
        self.assertEqual(cpu.XMM4, 72057589742960895)
        self.assertEqual(cpu.RIP, 140737348635419)

    def test_PSHUFD_1(self):
        """Instruction PSHUFD_1
        Groups: sse2
        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AF8, "f\x0fp\xc9\x00")
        cpu.XMM1 = 0x25252525
        cpu.RIP = 0x7FFFF7AC0AF8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AC0AF8:0x7FFFF7AC0AFD], [b"f", b"\x0f", b"p", b"\xc9", b"\x00"]
        )
        self.assertEqual(cpu.XMM1, 49374304219900875090764158725393818917)
        self.assertEqual(cpu.RIP, 140737348635389)

    def test_PSHUFD_2(self):
        """Instruction PSHUFD_2
        Groups: sse2
        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AF8, "f\x0fp\xc9\x00")
        cpu.XMM1 = 0x25252525
        cpu.RIP = 0x7FFFF7AC0AF8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AC0AF8:0x7FFFF7AC0AFD], [b"f", b"\x0f", b"p", b"\xc9", b"\x00"]
        )
        self.assertEqual(cpu.XMM1, 49374304219900875090764158725393818917)
        self.assertEqual(cpu.RIP, 140737348635389)

    def test_PSHUFD_3(self):
        """Instruction PSHUFD_3
        Groups: sse2
        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4388, "f\x0fp\xc9\x00")
        cpu.XMM1 = 0x24242424
        cpu.RIP = 0x7FFFF7DF4388
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DF4388:0x7FFFF7DF438D], [b"f", b"\x0f", b"p", b"\xc9", b"\x00"]
        )
        self.assertEqual(cpu.XMM1, 48039863565308959547770532813896688676)
        self.assertEqual(cpu.RIP, 140737351992205)

    def test_PSHUFD_4(self):
        """Instruction PSHUFD_4
        Groups: sse2
        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB799A, "f\x0fp\xc9\x00")
        cpu.XMM1 = 0x2F2F2F2F
        cpu.RIP = 0x7FFFF7AB799A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AB799A:0x7FFFF7AB799F], [b"f", b"\x0f", b"p", b"\xc9", b"\x00"]
        )
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 140737348598175)

    def test_PSHUFD_5(self):
        """Instruction PSHUFD_5
        Groups: sse2
        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4388, "f\x0fp\xc9\x00")
        cpu.XMM1 = 0x24242424
        cpu.RIP = 0x7FFFF7DF4388
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DF4388:0x7FFFF7DF438D], [b"f", b"\x0f", b"p", b"\xc9", b"\x00"]
        )
        self.assertEqual(cpu.XMM1, 48039863565308959547770532813896688676)
        self.assertEqual(cpu.RIP, 140737351992205)

    def test_PSHUFD_6(self):
        """Instruction PSHUFD_6
        Groups: sse2
        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB799A, "f\x0fp\xc9\x00")
        cpu.XMM1 = 0x2F2F2F2F
        cpu.RIP = 0x7FFFF7AB799A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7AB799A:0x7FFFF7AB799F], [b"f", b"\x0f", b"p", b"\xc9", b"\x00"]
        )
        self.assertEqual(cpu.XMM1, 62718710765820030520700417840365121327)
        self.assertEqual(cpu.RIP, 140737348598175)

    def test_PUNPCKLBW_1(self):
        """Instruction PUNPCKLBW_1
        Groups: sse2
        0x7ffff7df437b:     punpcklbw       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF437B, "f\x0f`\xc9")
        cpu.XMM1 = 0x24
        cpu.RIP = 0x7FFFF7DF437B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF437B:0x7FFFF7DF437F], [b"f", b"\x0f", b"`", b"\xc9"])
        self.assertEqual(cpu.XMM1, 9252)
        self.assertEqual(cpu.RIP, 140737351992191)

    def test_PUNPCKLBW_2(self):
        """Instruction PUNPCKLBW_2
        Groups: sse2
        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AEB, "f\x0f`\xc9")
        cpu.XMM1 = 0x25
        cpu.RIP = 0x7FFFF7AC0AEB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AC0AEB:0x7FFFF7AC0AEF], [b"f", b"\x0f", b"`", b"\xc9"])
        self.assertEqual(cpu.XMM1, 9509)
        self.assertEqual(cpu.RIP, 140737348635375)

    def test_PUNPCKLBW_3(self):
        """Instruction PUNPCKLBW_3
        Groups: sse2
        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AEB, "f\x0f`\xc9")
        cpu.XMM1 = 0x25
        cpu.RIP = 0x7FFFF7AC0AEB
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AC0AEB:0x7FFFF7AC0AEF], [b"f", b"\x0f", b"`", b"\xc9"])
        self.assertEqual(cpu.XMM1, 9509)
        self.assertEqual(cpu.RIP, 140737348635375)

    def test_PUNPCKLBW_4(self):
        """Instruction PUNPCKLBW_4
        Groups: sse2
        0x4579cc:   punpcklbw       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x4579CC, "f\x0f`\xc9")
        cpu.XMM1 = 0x2F
        cpu.RIP = 0x4579CC
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4579CC:0x4579D0], [b"f", b"\x0f", b"`", b"\xc9"])
        self.assertEqual(cpu.XMM1, 12079)
        self.assertEqual(cpu.RIP, 4553168)

    def test_PUNPCKLBW_5(self):
        """Instruction PUNPCKLBW_5
        Groups: sse2
        0x45794c:   punpcklbw       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x45794C, "f\x0f`\xc9")
        cpu.XMM1 = 0x2F
        cpu.RIP = 0x45794C
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x45794C:0x457950], [b"f", b"\x0f", b"`", b"\xc9"])
        self.assertEqual(cpu.XMM1, 12079)
        self.assertEqual(cpu.RIP, 4553040)

    def test_PUNPCKLBW_6(self):
        """Instruction PUNPCKLBW_6
        Groups: sse2
        0x7ffff7df437b:     punpcklbw       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF437B, "f\x0f`\xc9")
        cpu.XMM1 = 0x24
        cpu.RIP = 0x7FFFF7DF437B
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF437B:0x7FFFF7DF437F], [b"f", b"\x0f", b"`", b"\xc9"])
        self.assertEqual(cpu.XMM1, 9252)
        self.assertEqual(cpu.RIP, 140737351992191)

    def test_PUNPCKLWD_1(self):
        """Instruction PUNPCKLWD_1
        Groups: sse2
        0x457a46:   punpcklwd       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457A46, "f\x0fa\xc9")
        cpu.XMM1 = 0x2F2F
        cpu.RIP = 0x457A46
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x457A46:0x457A4A], [b"f", b"\x0f", b"a", b"\xc9"])
        self.assertEqual(cpu.XMM1, 791621423)
        self.assertEqual(cpu.RIP, 4553290)

    def test_PUNPCKLWD_2(self):
        """Instruction PUNPCKLWD_2
        Groups: sse2
        0x421b24:   punpcklwd       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00421000, 0x1000, "rwx")
        mem.write(0x421B24, "f\x0fa\xc9")
        cpu.XMM1 = 0x2525
        cpu.RIP = 0x421B24
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x421B24:0x421B28], [b"f", b"\x0f", b"a", b"\xc9"])
        self.assertEqual(cpu.XMM1, 623191333)
        self.assertEqual(cpu.RIP, 4332328)

    def test_PUNPCKLWD_3(self):
        """Instruction PUNPCKLWD_3
        Groups: sse2
        0x7ffff7df4384:     punpcklwd       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4384, "f\x0fa\xc9")
        cpu.XMM1 = 0x2424
        cpu.RIP = 0x7FFFF7DF4384
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4384:0x7FFFF7DF4388], [b"f", b"\x0f", b"a", b"\xc9"])
        self.assertEqual(cpu.XMM1, 606348324)
        self.assertEqual(cpu.RIP, 140737351992200)

    def test_PUNPCKLWD_4(self):
        """Instruction PUNPCKLWD_4
        Groups: sse2
        0x7ffff7df4384:     punpcklwd       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4384, "f\x0fa\xc9")
        cpu.XMM1 = 0x2424
        cpu.RIP = 0x7FFFF7DF4384
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF4384:0x7FFFF7DF4388], [b"f", b"\x0f", b"a", b"\xc9"])
        self.assertEqual(cpu.XMM1, 606348324)
        self.assertEqual(cpu.RIP, 140737351992200)

    def test_PUNPCKLWD_5(self):
        """Instruction PUNPCKLWD_5
        Groups: sse2
        0x45a576:   punpcklwd       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045A000, 0x1000, "rwx")
        mem.write(0x45A576, "f\x0fa\xc9")
        cpu.XMM1 = 0x2F2F
        cpu.RIP = 0x45A576
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x45A576:0x45A57A], [b"f", b"\x0f", b"a", b"\xc9"])
        self.assertEqual(cpu.XMM1, 791621423)
        self.assertEqual(cpu.RIP, 4564346)

    def test_PUNPCKLWD_6(self):
        """Instruction PUNPCKLWD_6
        Groups: sse2
        0x7ffff7ac0af4:     punpcklwd       xmm1, xmm1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AF4, "f\x0fa\xc9")
        cpu.XMM1 = 0x2525
        cpu.RIP = 0x7FFFF7AC0AF4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7AC0AF4:0x7FFFF7AC0AF8], [b"f", b"\x0f", b"a", b"\xc9"])
        self.assertEqual(cpu.XMM1, 623191333)
        self.assertEqual(cpu.RIP, 140737348635384)

    def test_PUSH_1(self):
        """Instruction PUSH_1
        Groups: mode64
        0x7ffff7de407a:     push    r12
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE407A, "AT")
        mem.write(0x7FFFFFFFD790, "Xv\xff\xf7\xff\x7f\x00\x008\xd8\xff\xff\xff\x7f\x00\x004")
        cpu.RSP = 0x7FFFFFFFD798
        cpu.R12 = 0x7FFFF7FF7658
        cpu.RIP = 0x7FFFF7DE407A
        cpu.RBP = 0x7FFFFFFFD870
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE407A:0x7FFFF7DE407C], [b"A", b"T"])
        self.assertEqual(
            mem[0x7FFFFFFFD790:0x7FFFFFFFD7A1],
            [
                b"X",
                b"v",
                b"\xff",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"8",
                b"\xd8",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"4",
            ],
        )
        self.assertEqual(cpu.R12, 140737354102360)
        self.assertEqual(cpu.RSP, 140737488344976)
        self.assertEqual(cpu.RIP, 140737351925884)
        self.assertEqual(cpu.RBP, 140737488345200)

    def test_PUSH_2(self):
        """Instruction PUSH_2
        Groups: mode64
        0x722546:   push    0xff00
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00722000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x722546, "h\x00\xff\x00\x00")
        mem.write(
            0x7FFFFFFFCCA8, "\x00\xff\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff@\x00\x00\x00\xfe"
        )
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x722546
        cpu.RBP = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x722546:0x72254B], [b"h", b"\x00", b"\xff", b"\x00", b"\x00"])
        self.assertEqual(
            mem[0x7FFFFFFFCCA8:0x7FFFFFFFCCB9],
            [
                b"\x00",
                b"\xff",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xfe",
                b"\xff",
                b"\xff",
                b"\xff",
                b"@",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xfe",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RIP, 7480651)
        self.assertEqual(cpu.RBP, 0)

    def test_PUSH_3(self):
        """Instruction PUSH_3
        Groups: mode64
        0x744c3e:   push    0xf00aabb
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00744000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x744C3E, "h\xbb\xaa\x00\x0f")
        mem.write(0x7FFFFFFFCCA8, "\xbb\xaa\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x80!Ce\x87@")
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x744C3E
        cpu.RBP = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x744C3E:0x744C43], [b"h", b"\xbb", b"\xaa", b"\x00", b"\x0f"])
        self.assertEqual(
            mem[0x7FFFFFFFCCA8:0x7FFFFFFFCCB9],
            [
                b"\xbb",
                b"\xaa",
                b"\x00",
                b"\x0f",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x80",
                b"!",
                b"C",
                b"e",
                b"\x87",
                b"@",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RIP, 7621699)
        self.assertEqual(cpu.RBP, 0)

    def test_PUSH_4(self):
        """Instruction PUSH_4
        Groups: mode64
        0x6651fa:   push    rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00665000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x6651FA, "P")
        mem.write(0x7FFFFFFFCCA8, "\x7f\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00 \x00\x00\x00!")
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x6651FA
        cpu.RAX = 0x7F
        cpu.RBP = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x6651FA:0x6651FB], [b"P"])
        self.assertEqual(
            mem[0x7FFFFFFFCCA8:0x7FFFFFFFCCB9],
            [
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x00",
                b" ",
                b"\x00",
                b"\x00",
                b"\x00",
                b"!",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RAX, 127)
        self.assertEqual(cpu.RIP, 6705659)
        self.assertEqual(cpu.RBP, 0)

    def test_PUSH_5(self):
        """Instruction PUSH_5
        Groups: mode64
        0x7ffff7de4330:     push    rbp
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4330, "U")
        mem.write(0x7FFFFFFFDA30, "p\xdb\xff\xff\xff\x7f\x00\x00\x94b\xde\xf7\xff\x7f\x00\x00\x01")
        cpu.RSP = 0x7FFFFFFFDA38
        cpu.RIP = 0x7FFFF7DE4330
        cpu.RBP = 0x7FFFFFFFDB70
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4330:0x7FFFF7DE4331], [b"U"])
        self.assertEqual(
            mem[0x7FFFFFFFDA30:0x7FFFFFFFDA41],
            [
                b"p",
                b"\xdb",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x94",
                b"b",
                b"\xde",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x01",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345648)
        self.assertEqual(cpu.RIP, 140737351926577)
        self.assertEqual(cpu.RBP, 140737488345968)

    def test_PUSH_6(self):
        """Instruction PUSH_6
        Groups: mode64
        0x75c167:   push    0xf00aabb
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0075C000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x75C167, "h\xbb\xaa\x00\x0f")
        mem.write(
            0x7FFFFFFFCCA8, "\xbb\xaa\x00\x0f\x00\x00\x00\x00\xfe\xff\xff\xff\x80\x00\x00\x00x"
        )
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x75C167
        cpu.RBP = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x75C167:0x75C16C], [b"h", b"\xbb", b"\xaa", b"\x00", b"\x0f"])
        self.assertEqual(
            mem[0x7FFFFFFFCCA8:0x7FFFFFFFCCB9],
            [
                b"\xbb",
                b"\xaa",
                b"\x00",
                b"\x0f",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xfe",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x80",
                b"\x00",
                b"\x00",
                b"\x00",
                b"x",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488342184)
        self.assertEqual(cpu.RIP, 7717228)
        self.assertEqual(cpu.RBP, 0)

    def test_PXOR_1(self):
        """Instruction PXOR_1
        Groups: sse2
        0x418490:   pxor    xmm8, xmm8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x418490, "fE\x0f\xef\xc0")
        cpu.XMM8 = 0x0
        cpu.RIP = 0x418490
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x418490:0x418495], [b"f", b"E", b"\x0f", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293781)

    def test_PXOR_2(self):
        """Instruction PXOR_2
        Groups: sse2
        0x41848f:   pxor    xmm11, xmm11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x41848F, "fE\x0f\xef\xdb")
        cpu.XMM11 = 0x0
        cpu.RIP = 0x41848F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x41848F:0x418494], [b"f", b"E", b"\x0f", b"\xef", b"\xdb"])
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293780)

    def test_PXOR_3(self):
        """Instruction PXOR_3
        Groups: sse2
        0x4184bf:   pxor    xmm11, xmm11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184BF, "fE\x0f\xef\xdb")
        cpu.XMM11 = 0x0
        cpu.RIP = 0x4184BF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4184BF:0x4184C4], [b"f", b"E", b"\x0f", b"\xef", b"\xdb"])
        self.assertEqual(cpu.XMM11, 0)
        self.assertEqual(cpu.RIP, 4293828)

    def test_PXOR_4(self):
        """Instruction PXOR_4
        Groups: sse2
        0x418480:   pxor    xmm8, xmm8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x418480, "fE\x0f\xef\xc0")
        cpu.XMM8 = 0x0
        cpu.RIP = 0x418480
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x418480:0x418485], [b"f", b"E", b"\x0f", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM8, 0)
        self.assertEqual(cpu.RIP, 4293765)

    def test_PXOR_5(self):
        """Instruction PXOR_5
        Groups: sse2
        0x4183b5:   pxor    xmm9, xmm9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4183B5, "fE\x0f\xef\xc9")
        cpu.XMM9 = 0x0
        cpu.RIP = 0x4183B5
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4183B5:0x4183BA], [b"f", b"E", b"\x0f", b"\xef", b"\xc9"])
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293562)

    def test_PXOR_6(self):
        """Instruction PXOR_6
        Groups: sse2
        0x418495:   pxor    xmm9, xmm9
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x418495, "fE\x0f\xef\xc9")
        cpu.XMM9 = 0x0
        cpu.RIP = 0x418495
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x418495:0x41849A], [b"f", b"E", b"\x0f", b"\xef", b"\xc9"])
        self.assertEqual(cpu.XMM9, 0)
        self.assertEqual(cpu.RIP, 4293786)

    def test_RET_1(self):
        """Instruction RET_1
        Groups: ret, mode64
        0x7ffff7de3748:     ret
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3748, "\xc3")
        mem.write(0x7FFFFFFFD770, "p\xd8\xff\xff\xff\x7f\x00\x00\xab@\xde\xf7\xff\x7f\x00\x00]")
        cpu.RSP = 0x7FFFFFFFD778
        cpu.RIP = 0x7FFFF7DE3748
        cpu.RBP = 0x7FFFFFFFD870
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3748:0x7FFFF7DE3749], [b"\xc3"])
        self.assertEqual(
            mem[0x7FFFFFFFD770:0x7FFFFFFFD781],
            [
                b"p",
                b"\xd8",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xab",
                b"@",
                b"\xde",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"]",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488344960)
        self.assertEqual(cpu.RIP, 140737351925931)
        self.assertEqual(cpu.RBP, 140737488345200)

    def test_RET_2(self):
        """Instruction RET_2
        Groups: ret, mode64
        0x7ffff7df537f:     ret
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF5000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF537F, "\xc3")
        mem.write(
            0x7FFFFFFFD830, "\x03\x00\x00\x00\x00\x00\x00\x00\xdb\x7f\xde\xf7\xff\x7f\x00\x00\x00"
        )
        cpu.RSP = 0x7FFFFFFFD838
        cpu.RIP = 0x7FFFF7DF537F
        cpu.RBP = 0x7FFFFFFFDAE0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF537F:0x7FFFF7DF5380], [b"\xc3"])
        self.assertEqual(
            mem[0x7FFFFFFFD830:0x7FFFFFFFD841],
            [
                b"\x03",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\xdb",
                b"\x7f",
                b"\xde",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x00",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345152)
        self.assertEqual(cpu.RIP, 140737351942107)
        self.assertEqual(cpu.RBP, 140737488345824)

    def test_RET_3(self):
        """Instruction RET_3
        Groups: ret, mode64
        0x406e67:   ret
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x406E67, "\xc3")
        mem.write(0x7FFFFFFFDB20, "p\xdb\xff\xff\xff\x7f\x00\x00NoC\x00\x00\x00\x00\x00@")
        cpu.RSP = 0x7FFFFFFFDB28
        cpu.RIP = 0x406E67
        cpu.RBP = 0x7FFFFFFFDB70
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406E67:0x406E68], [b"\xc3"])
        self.assertEqual(
            mem[0x7FFFFFFFDB20:0x7FFFFFFFDB31],
            [
                b"p",
                b"\xdb",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"N",
                b"o",
                b"C",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"@",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345904)
        self.assertEqual(cpu.RIP, 4419406)
        self.assertEqual(cpu.RBP, 140737488345968)

    def test_RET_4(self):
        """Instruction RET_4
        Groups: ret, mode64
        0x7ffff7de2af3:     ret
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE2AF3, "\xc3")
        mem.write(0x7FFFFFFFD700, " \xd7\xff\xff\xff\x7f\x00\x00)u\xde\xf7\xff\x7f\x00\x00\xb0")
        cpu.RSP = 0x7FFFFFFFD708
        cpu.RIP = 0x7FFFF7DE2AF3
        cpu.RBP = 0x7FFFFFFFD720
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE2AF3:0x7FFFF7DE2AF4], [b"\xc3"])
        self.assertEqual(
            mem[0x7FFFFFFFD700:0x7FFFFFFFD711],
            [
                b" ",
                b"\xd7",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b")",
                b"u",
                b"\xde",
                b"\xf7",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xb0",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488344848)
        self.assertEqual(cpu.RIP, 140737351939369)
        self.assertEqual(cpu.RBP, 140737488344864)

    def test_RET_5(self):
        """Instruction RET_5
        Groups: ret, mode64
        0x4118a1:   ret
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x4118A1, "\xc3")
        mem.write(0x7FFFFFFFDAE0, "\x00\xdb\xff\xff\xff\x7f\x00\x00\x1c6A\x00\x00\x00\x00\x00\x02")
        cpu.RSP = 0x7FFFFFFFDAE8
        cpu.RIP = 0x4118A1
        cpu.RBP = 0x7FFFFFFFDB00
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4118A1:0x4118A2], [b"\xc3"])
        self.assertEqual(
            mem[0x7FFFFFFFDAE0:0x7FFFFFFFDAF1],
            [
                b"\x00",
                b"\xdb",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x1c",
                b"6",
                b"A",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x02",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345840)
        self.assertEqual(cpu.RIP, 4273692)
        self.assertEqual(cpu.RBP, 140737488345856)

    def test_RET_6(self):
        """Instruction RET_6
        Groups: ret, mode64
        0x40fc8d:   ret
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x40FC8D, "\xc3")
        mem.write(0x7FFFFFFFD9F0, "\xb0\xda\xff\xff\xff\x7f\x00\x00\xee}E\x00\x00\x00\x00\x00\x06")
        cpu.RSP = 0x7FFFFFFFD9F8
        cpu.RIP = 0x40FC8D
        cpu.RBP = 0x7FFFFFFFDAB0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40FC8D:0x40FC8E], [b"\xc3"])
        self.assertEqual(
            mem[0x7FFFFFFFD9F0:0x7FFFFFFFDA01],
            [
                b"\xb0",
                b"\xda",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xee",
                b"}",
                b"E",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x06",
            ],
        )
        self.assertEqual(cpu.RSP, 140737488345600)
        self.assertEqual(cpu.RIP, 4554222)
        self.assertEqual(cpu.RBP, 140737488345776)

    def test_ROL_1(self):
        """Instruction ROL_1
        Groups:
        0x44272a:   rol     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, "rwx")
        mem.write(0x44272A, "H\xc1\xc0\x11")
        cpu.OF = False
        cpu.RIP = 0x44272A
        cpu.CF = False
        cpu.RAX = 0x69FD1B8F25BEA73
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x44272A:0x44272E], [b"H", b"\xc1", b"\xc0", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 11777445978752552255)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4466478)

    def test_ROL_2(self):
        """Instruction ROL_2
        Groups:
        0x7ffff7df408d:     rol     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF408D, "H\xc1\xc0\x11")
        cpu.OF = False
        cpu.RIP = 0x7FFFF7DF408D
        cpu.CF = False
        cpu.RAX = 0x7FFFFFFFD9B0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF408D:0x7FFFF7DF4091], [b"H", b"\xc1", b"\xc0", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 18446744072423997440)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351991441)

    def test_ROL_3(self):
        """Instruction ROL_3
        Groups:
        0x409c7a:   rol     rdi, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00409000, 0x1000, "rwx")
        mem.write(0x409C7A, "H\xc1\xc7\x11")
        cpu.OF = False
        cpu.RDI = 0x4FB19F79D00A9C7E
        cpu.CF = False
        cpu.RIP = 0x409C7A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x409C7A:0x409C7E], [b"H", b"\xc1", b"\xc7", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RDI, 4536145262703058787)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4234366)

    def test_ROL_4(self):
        """Instruction ROL_4
        Groups:
        0x40725a:   rol     rdi, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, "rwx")
        mem.write(0x40725A, "H\xc1\xc7\x11")
        cpu.OF = False
        cpu.RDI = 0x1D13AA75A9FB0505
        cpu.CF = False
        cpu.RIP = 0x40725A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x40725A:0x40725E], [b"H", b"\xc1", b"\xc7", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RDI, 6119076834908453415)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4223582)

    def test_ROL_5(self):
        """Instruction ROL_5
        Groups:
        0x4452b5:   rol     rdx, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00445000, 0x1000, "rwx")
        mem.write(0x4452B5, "H\xc1\xc2\x11")
        cpu.OF = False
        cpu.CF = False
        cpu.RIP = 0x4452B5
        cpu.RDX = 0x4FB1E0862FB57B2E
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4452B5:0x4452B9], [b"H", b"\xc1", b"\xc2", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4477625)
        self.assertEqual(cpu.RDX, 13910598262045056867)

    def test_ROL_6(self):
        """Instruction ROL_6
        Groups:
        0x7ffff7a6220a:     rol     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A62000, 0x1000, "rwx")
        mem.write(0x7FFFF7A6220A, "H\xc1\xc0\x11")
        cpu.OF = False
        cpu.RIP = 0x7FFFF7A6220A
        cpu.CF = False
        cpu.RAX = 0x4D168F8071DCCC80
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A6220A:0x7FFFF7A6220E], [b"H", b"\xc1", b"\xc0", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 2234035801451174445)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737348248078)

    def test_ROR_1(self):
        """Instruction ROR_1
        Groups:
        0x406f53:   ror     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406F53, "H\xc1\xc8\x11")
        cpu.OF = False
        cpu.RIP = 0x406F53
        cpu.CF = False
        cpu.RAX = 0x9287E74AD78292FC
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406F53:0x406F57], [b"H", b"\xc1", b"\xc8", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 5295750768033622977)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222807)

    def test_ROR_2(self):
        """Instruction ROR_2
        Groups:
        0x7ffff7a65253:     ror     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.write(0x7FFFF7A65253, "H\xc1\xc8\x11")
        cpu.OF = False
        cpu.RIP = 0x7FFFF7A65253
        cpu.CF = False
        cpu.RAX = 0x42002153EFDD741E
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A65253:0x7FFFF7A65257], [b"H", b"\xc1", b"\xc8", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 13406970899868547054)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737348260439)

    def test_ROR_3(self):
        """Instruction ROR_3
        Groups:
        0x406fd3:   ror     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406FD3, "H\xc1\xc8\x11")
        cpu.OF = False
        cpu.RIP = 0x406FD3
        cpu.CF = False
        cpu.RAX = 0x4A02228A32751A47
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406FD3:0x406FD7], [b"H", b"\xc1", b"\xc8", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 10170153807536003386)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4222935)

    def test_ROR_4(self):
        """Instruction ROR_4
        Groups:
        0x7ffff7a65253:     ror     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.write(0x7FFFF7A65253, "H\xc1\xc8\x11")
        cpu.OF = False
        cpu.RIP = 0x7FFFF7A65253
        cpu.CF = False
        cpu.RAX = 0x1B65E4B049796683
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A65253:0x7FFFF7A65257], [b"H", b"\xc1", b"\xc8", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 12916761005984851132)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737348260439)

    def test_ROR_5(self):
        """Instruction ROR_5
        Groups:
        0x406f53:   ror     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406F53, "H\xc1\xc8\x11")
        cpu.OF = False
        cpu.RIP = 0x406F53
        cpu.CF = False
        cpu.RAX = 0x54EB53F60A0A3A27
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406F53:0x406F57], [b"H", b"\xc1", b"\xc8", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 2095205673997108485)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222807)

    def test_ROR_6(self):
        """Instruction ROR_6
        Groups:
        0x406fc3:   ror     rax, 0x11
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406FC3, "H\xc1\xc8\x11")
        cpu.OF = False
        cpu.RIP = 0x406FC3
        cpu.CF = False
        cpu.RAX = 0xF69983477B463CAA
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406FC3:0x406FC7], [b"H", b"\xc1", b"\xc8", b"\x11"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RAX, 2185788763754708387)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222919)

    def test_SAR_1(self):
        """Instruction SAR_1
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x15C8
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4085:0x7FFFF7DE4089], [b"H", b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1394)

    def test_SAR_2(self):
        """Instruction SAR_2
        Groups:
        0x7ffff7acfc78:     sar     r8d, 0x1f
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFC78, "A\xc1\xf8\x1f")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7ACFC78
        cpu.R8D = 0x9
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7ACFC78:0x7FFFF7ACFC7C], [b"A", b"\xc1", b"\xf8", b"\x1f"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737348697212)
        self.assertEqual(cpu.R8D, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SAR_3(self):
        """Instruction SAR_3
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = True
        cpu.SF = False
        cpu.RAX = 0x1290
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4085:0x7FFFF7DE4089], [b"H", b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1188)

    def test_SAR_4(self):
        """Instruction SAR_4
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x1450
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4085:0x7FFFF7DE4089], [b"H", b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1300)

    def test_SAR_5(self):
        """Instruction SAR_5
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x1420
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4085:0x7FFFF7DE4089], [b"H", b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1288)

    def test_SAR_6(self):
        """Instruction SAR_6
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x1070
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE4085:0x7FFFF7DE4089], [b"H", b"\xc1", b"\xf8", b"\x02"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925897)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 1052)

    def test_SCASB_1(self):
        """Instruction SCASB_1
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        mem.write(0x7FFFF7BA14B4, "tory\x00No ")
        mem.write(0x7FFFFFFFA9C8, "F{\xaa\xf7\xff\x7f\x00\x00")
        cpu.RDI = 0x7FFFF7BA14B4
        cpu.RCX = 0xFFFFFFFFFFFFFFEA
        cpu.RSI = 0x7FFFFFFFA9C8
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A78233:0x7FFFF7A78235], [b"\xf2", b"\xae"])
        self.assertEqual(
            mem[0x7FFFF7BA14B4:0x7FFFF7BA14BC], [b"t", b"o", b"r", b"y", b"\x00", b"N", b"o", b" "]
        )
        self.assertEqual(
            mem[0x7FFFFFFFA9C8:0x7FFFFFFFA9D0],
            [b"F", b"{", b"\xaa", b"\xf7", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 18446744073709551593)
        self.assertEqual(cpu.RDI, 140737349555381)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_2(self):
        """Instruction SCASB_2
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        mem.write(0x7FFFF7BA14A1, " such fi")
        mem.write(0x7FFFFFFFA9C8, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFF7BA14A1
        cpu.RCX = 0xFFFFFFFFFFFFFFFD
        cpu.RSI = 0x7FFFFFFFA9C8
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A78233:0x7FFFF7A78235], [b"\xf2", b"\xae"])
        self.assertEqual(
            mem[0x7FFFF7BA14A1:0x7FFFF7BA14A9], [b" ", b"s", b"u", b"c", b"h", b" ", b"f", b"i"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFA9C8:0x7FFFFFFFA9D0],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 18446744073709551612)
        self.assertEqual(cpu.RDI, 140737349555362)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_3(self):
        """Instruction SCASB_3
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        mem.write(0x7FFFF7BA14B2, "ectory\x00N")
        mem.write(0x7FFFFFFFA9C8, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFF7BA14B2
        cpu.RCX = 0xFFFFFFFFFFFFFFEC
        cpu.RSI = 0x7FFFFFFFA9C8
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A78233:0x7FFFF7A78235], [b"\xf2", b"\xae"])
        self.assertEqual(
            mem[0x7FFFF7BA14B2:0x7FFFF7BA14BA], [b"e", b"c", b"t", b"o", b"r", b"y", b"\x00", b"N"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFA9C8:0x7FFFFFFFA9D0],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 18446744073709551595)
        self.assertEqual(cpu.RDI, 140737349555379)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_4(self):
        """Instruction SCASB_4
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        mem.write(0x7FFFFFFFC2F8, "\x1f\xd5\xff\xff\xff\x7f\x00\x00")
        mem.write(0x7FFFFFFFE0A5, "gzip\x00arg")
        cpu.RDI = 0x7FFFFFFFE0A5
        cpu.RCX = 0xFFFFFFFFFFFFFFFF
        cpu.RSI = 0x7FFFFFFFC2F8
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A78233:0x7FFFF7A78235], [b"\xf2", b"\xae"])
        self.assertEqual(
            mem[0x7FFFFFFFC2F8:0x7FFFFFFFC300],
            [b"\x1f", b"\xd5", b"\xff", b"\xff", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFE0A5:0x7FFFFFFFE0AD], [b"g", b"z", b"i", b"p", b"\x00", b"a", b"r", b"g"]
        )
        self.assertEqual(cpu.RCX, 18446744073709551614)
        self.assertEqual(cpu.RDI, 140737488347302)
        self.assertEqual(cpu.RSI, 140737488339704)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_5(self):
        """Instruction SCASB_5
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        mem.write(0x7FFFF7BA14A5, "h file o")
        mem.write(0x7FFFFFFFA9C8, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFF7BA14A5
        cpu.RCX = 0xFFFFFFFFFFFFFFF9
        cpu.RSI = 0x7FFFFFFFA9C8
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A78233:0x7FFFF7A78235], [b"\xf2", b"\xae"])
        self.assertEqual(
            mem[0x7FFFF7BA14A5:0x7FFFF7BA14AD], [b"h", b" ", b"f", b"i", b"l", b"e", b" ", b"o"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFA9C8:0x7FFFFFFFA9D0],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 18446744073709551608)
        self.assertEqual(cpu.RDI, 140737349555366)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SCASB_6(self):
        """Instruction SCASB_6
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555771000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        mem.write(0x555555771DC0, "arg1\x00\x00\x00\x00")
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        mem.write(0x7FFFFFFFA9C8, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x555555771DC0
        cpu.RCX = 0xFFFFFFFFFFFFFFFF
        cpu.RSI = 0x7FFFFFFFA9C8
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x555555771DC0:0x555555771DC8],
            [b"a", b"r", b"g", b"1", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(mem[0x7FFFF7A78233:0x7FFFF7A78235], [b"\xf2", b"\xae"])
        self.assertEqual(
            mem[0x7FFFFFFFA9C8:0x7FFFFFFFA9D0],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 18446744073709551614)
        self.assertEqual(cpu.RDI, 93824994450881)
        self.assertEqual(cpu.RSI, 140737488333256)
        self.assertEqual(cpu.RIP, 140737348338227)
        self.assertEqual(cpu.AL, 0)

    def test_SETA_1(self):
        """Instruction SETA_1
        Groups:
        0x5555555548c2:     seta    dl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.write(0x5555555548C2, "\x0f\x97\xc2")
        cpu.DL = 0x0
        cpu.ZF = False
        cpu.RIP = 0x5555555548C2
        cpu.CF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555548C2:0x5555555548C5], [b"\x0f", b"\x97", b"\xc2"])
        self.assertEqual(cpu.DL, 1)
        self.assertEqual(cpu.RIP, 93824992233669)

    def test_SETBE_1(self):
        """Instruction SETBE_1
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = False
        cpu.R9B = 0x58
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6207
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6207:0x7FFFF7DE620B], [b"A", b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_2(self):
        """Instruction SETBE_2
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = False
        cpu.R9B = 0x58
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6207
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6207:0x7FFFF7DE620B], [b"A", b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_3(self):
        """Instruction SETBE_3
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = False
        cpu.R9B = 0x58
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6207
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6207:0x7FFFF7DE620B], [b"A", b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_4(self):
        """Instruction SETBE_4
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = False
        cpu.R9B = 0x58
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6207
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6207:0x7FFFF7DE620B], [b"A", b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_5(self):
        """Instruction SETBE_5
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = False
        cpu.R9B = 0x58
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6207
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6207:0x7FFFF7DE620B], [b"A", b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETBE_6(self):
        """Instruction SETBE_6
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = False
        cpu.R9B = 0x58
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6207
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6207:0x7FFFF7DE620B], [b"A", b"\x0f", b"\x96", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 140737351934475)

    def test_SETB_1(self):
        """Instruction SETB_1
        Groups:
        0x4342ea:   setb    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4342EA, "\x0f\x92\xc0")
        cpu.CF = False
        cpu.RIP = 0x4342EA
        cpu.AL = 0xC0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4342EA:0x4342ED], [b"\x0f", b"\x92", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408045)

    def test_SETB_2(self):
        """Instruction SETB_2
        Groups:
        0x43426a:   setb    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x43426A, "\x0f\x92\xc0")
        cpu.CF = False
        cpu.RIP = 0x43426A
        cpu.AL = 0xC0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43426A:0x43426D], [b"\x0f", b"\x92", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4407917)

    def test_SETB_3(self):
        """Instruction SETB_3
        Groups:
        0x4346ca:   setb    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4346CA, "\x0f\x92\xc0")
        cpu.CF = False
        cpu.RIP = 0x4346CA
        cpu.AL = 0xC0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4346CA:0x4346CD], [b"\x0f", b"\x92", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4409037)

    def test_SETB_4(self):
        """Instruction SETB_4
        Groups:
        0x4342ea:   setb    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4342EA, "\x0f\x92\xc0")
        cpu.CF = False
        cpu.RIP = 0x4342EA
        cpu.AL = 0xC0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4342EA:0x4342ED], [b"\x0f", b"\x92", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408045)

    def test_SETB_5(self):
        """Instruction SETB_5
        Groups:
        0x4342ea:   setb    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4342EA, "\x0f\x92\xc0")
        cpu.CF = False
        cpu.RIP = 0x4342EA
        cpu.AL = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4342EA:0x4342ED], [b"\x0f", b"\x92", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408045)

    def test_SETB_6(self):
        """Instruction SETB_6
        Groups:
        0x43430a:   setb    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x43430A, "\x0f\x92\xc0")
        cpu.CF = False
        cpu.RIP = 0x43430A
        cpu.AL = 0xC0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43430A:0x43430D], [b"\x0f", b"\x92", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 4408077)

    def test_SETE_1(self):
        """Instruction SETE_1
        Groups:
        0x7ffff7de36a2:     sete    r10b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36A2, "A\x0f\x94\xc2")
        cpu.R10B = 0x0
        cpu.ZF = False
        cpu.RIP = 0x7FFFF7DE36A2
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE36A2:0x7FFFF7DE36A6], [b"A", b"\x0f", b"\x94", b"\xc2"])
        self.assertEqual(cpu.R10B, 0)
        self.assertEqual(cpu.RIP, 140737351923366)

    def test_SETE_2(self):
        """Instruction SETE_2
        Groups:
        0x7ffff7de620f:     sete    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE620F, "\x0f\x94\xc0")
        cpu.ZF = False
        cpu.AL = 0xF5
        cpu.RIP = 0x7FFFF7DE620F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE620F:0x7FFFF7DE6212], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 140737351934482)

    def test_SETE_3(self):
        """Instruction SETE_3
        Groups:
        0x7ffff7de6229:     sete    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6229, "\x0f\x94\xc0")
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.RIP = 0x7FFFF7DE6229
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6229:0x7FFFF7DE622C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.AL, 1)
        self.assertEqual(cpu.RIP, 140737351934508)

    def test_SETE_4(self):
        """Instruction SETE_4
        Groups:
        0x7ffff7de6229:     sete    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6229, "\x0f\x94\xc0")
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.RIP = 0x7FFFF7DE6229
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6229:0x7FFFF7DE622C], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.AL, 1)
        self.assertEqual(cpu.RIP, 140737351934508)

    def test_SETE_5(self):
        """Instruction SETE_5
        Groups:
        0x432458:   sete    r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432458, "A\x0f\x94\xc1")
        cpu.ZF = False
        cpu.R9B = 0x30
        cpu.RIP = 0x432458
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432458:0x43245C], [b"A", b"\x0f", b"\x94", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 4400220)

    def test_SETE_6(self):
        """Instruction SETE_6
        Groups:
        0x7ffff7de620f:     sete    al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE620F, "\x0f\x94\xc0")
        cpu.ZF = False
        cpu.AL = 0xF5
        cpu.RIP = 0x7FFFF7DE620F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE620F:0x7FFFF7DE6212], [b"\x0f", b"\x94", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 140737351934482)

    def test_SETG_1(self):
        """Instruction SETG_1
        Groups:
        0x555555567df4:     setg    r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555567000, 0x1000, "rwx")
        mem.write(0x555555567DF4, "A\x0f\x9f\xc1")
        cpu.OF = False
        cpu.ZF = False
        cpu.R9B = 0x0
        cpu.SF = True
        cpu.RIP = 0x555555567DF4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555567DF4:0x555555567DF8], [b"A", b"\x0f", b"\x9f", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 93824992312824)

    def test_SETG_2(self):
        """Instruction SETG_2
        Groups:
        0x555555567df4:     setg    r9b
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555567000, 0x1000, "rwx")
        mem.write(0x555555567DF4, "A\x0f\x9f\xc1")
        cpu.OF = False
        cpu.ZF = False
        cpu.R9B = 0x0
        cpu.SF = True
        cpu.RIP = 0x555555567DF4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555567DF4:0x555555567DF8], [b"A", b"\x0f", b"\x9f", b"\xc1"])
        self.assertEqual(cpu.R9B, 0)
        self.assertEqual(cpu.RIP, 93824992312824)

    def test_SETLE_1(self):
        """Instruction SETLE_1
        Groups:
        0x448ae0:   setle   dl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448AE0, "\x0f\x9e\xc2")
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 0x448AE0
        cpu.DL = 0x1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x448AE0:0x448AE3], [b"\x0f", b"\x9e", b"\xc2"])
        self.assertEqual(cpu.DL, 1)
        self.assertEqual(cpu.RIP, 4492003)

    def test_SETLE_2(self):
        """Instruction SETLE_2
        Groups:
        0x448ae0:   setle   dl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448AE0, "\x0f\x9e\xc2")
        cpu.OF = False
        cpu.ZF = True
        cpu.SF = False
        cpu.RIP = 0x448AE0
        cpu.DL = 0x1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x448AE0:0x448AE3], [b"\x0f", b"\x9e", b"\xc2"])
        self.assertEqual(cpu.DL, 1)
        self.assertEqual(cpu.RIP, 4492003)

    def test_SETNE_1(self):
        """Instruction SETNE_1
        Groups:
        0x410ee5:   setne   cl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, "rwx")
        mem.write(0x410EE5, "\x0f\x95\xc1")
        cpu.ZF = True
        cpu.RIP = 0x410EE5
        cpu.CL = 0x6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x410EE5:0x410EE8], [b"\x0f", b"\x95", b"\xc1"])
        self.assertEqual(cpu.RIP, 4263656)
        self.assertEqual(cpu.CL, 0)

    def test_SETNE_2(self):
        """Instruction SETNE_2
        Groups:
        0x436d20:   setne   dl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.write(0x436D20, "\x0f\x95\xc2")
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x436D20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x436D20:0x436D23], [b"\x0f", b"\x95", b"\xc2"])
        self.assertEqual(cpu.DL, 0)
        self.assertEqual(cpu.RIP, 4418851)

    def test_SETNE_3(self):
        """Instruction SETNE_3
        Groups:
        0x410f05:   setne   cl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, "rwx")
        mem.write(0x410F05, "\x0f\x95\xc1")
        cpu.ZF = True
        cpu.RIP = 0x410F05
        cpu.CL = 0x6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x410F05:0x410F08], [b"\x0f", b"\x95", b"\xc1"])
        self.assertEqual(cpu.RIP, 4263688)
        self.assertEqual(cpu.CL, 0)

    def test_SETNE_4(self):
        """Instruction SETNE_4
        Groups:
        0x436f20:   setne   dl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.write(0x436F20, "\x0f\x95\xc2")
        cpu.ZF = True
        cpu.DL = 0x0
        cpu.RIP = 0x436F20
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x436F20:0x436F23], [b"\x0f", b"\x95", b"\xc2"])
        self.assertEqual(cpu.DL, 0)
        self.assertEqual(cpu.RIP, 4419363)

    def test_SETNE_5(self):
        """Instruction SETNE_5
        Groups:
        0x4120f9:   setne   cl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, "rwx")
        mem.write(0x4120F9, "\x0f\x95\xc1")
        cpu.ZF = True
        cpu.RIP = 0x4120F9
        cpu.CL = 0x40
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4120F9:0x4120FC], [b"\x0f", b"\x95", b"\xc1"])
        self.assertEqual(cpu.RIP, 4268284)
        self.assertEqual(cpu.CL, 0)

    def test_SETNE_6(self):
        """Instruction SETNE_6
        Groups:
        0x7ffff7de5de4:     setne   al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5DE4, "\x0f\x95\xc0")
        cpu.ZF = True
        cpu.AL = 0x0
        cpu.RIP = 0x7FFFF7DE5DE4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5DE4:0x7FFFF7DE5DE7], [b"\x0f", b"\x95", b"\xc0"])
        self.assertEqual(cpu.AL, 0)
        self.assertEqual(cpu.RIP, 140737351933415)

    def test_SHLX_1(self):
        """Instruction SHLX_1
        Groups: bmi2
        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x55555556594D, "\xc4\xc2\xf9\xf7FP")
        mem.write(0x7FFFFFFFC800, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.R14 = 0x7FFFFFFFC7B0
        cpu.RIP = 0x55555556594D
        cpu.RAX = 0x5
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x55555556594D:0x555555565953], [b"\xc4", b"\xc2", b"\xf9", b"\xf7", b"F", b"P"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFC800:0x7FFFFFFFC808],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.R14, 140737488340912)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 93824992303443)

    def test_SHLX_2(self):
        """Instruction SHLX_2
        Groups: bmi2
        0x55555556544a:     shlx    rax, rdx, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x55555556544A, "\xc4\xe2\xf9\xf7\xc2")
        cpu.RIP = 0x55555556544A
        cpu.RAX = 0x8
        cpu.RDX = 0x1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x55555556544A:0x55555556544F], [b"\xc4", b"\xe2", b"\xf9", b"\xf7", b"\xc2"]
        )
        self.assertEqual(cpu.RAX, 256)
        self.assertEqual(cpu.RIP, 93824992302159)
        self.assertEqual(cpu.RDX, 1)

    def test_SHLX_3(self):
        """Instruction SHLX_3
        Groups: bmi2
        0x55555556544a:     shlx    rax, rdx, rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x55555556544A, "\xc4\xe2\xf9\xf7\xc2")
        cpu.RIP = 0x55555556544A
        cpu.RAX = 0x8
        cpu.RDX = 0x1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x55555556544A:0x55555556544F], [b"\xc4", b"\xe2", b"\xf9", b"\xf7", b"\xc2"]
        )
        self.assertEqual(cpu.RAX, 256)
        self.assertEqual(cpu.RIP, 93824992302159)
        self.assertEqual(cpu.RDX, 1)

    def test_SHLX_4(self):
        """Instruction SHLX_4
        Groups: bmi2
        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x55555556594D, "\xc4\xc2\xf9\xf7FP")
        mem.write(0x7FFFFFFFC800, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.R14 = 0x7FFFFFFFC7B0
        cpu.RIP = 0x55555556594D
        cpu.RAX = 0x5
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x55555556594D:0x555555565953], [b"\xc4", b"\xc2", b"\xf9", b"\xf7", b"F", b"P"]
        )
        self.assertEqual(
            mem[0x7FFFFFFFC800:0x7FFFFFFFC808],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.R14, 140737488340912)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RIP, 93824992303443)

    def test_SHL_1(self):
        """Instruction SHL_1
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = 0x597904
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE438F:0x7FFFF7DE4393], [b"H", b"\xc1", b"\xe6", b"\x05"])
        self.assertEqual(cpu.RSI, 187637888)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_2(self):
        """Instruction SHL_2
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = 0x7144B72823EA49E0
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE438F:0x7FFFF7DE4393], [b"H", b"\xc1", b"\xe6", b"\x05"])
        self.assertEqual(cpu.RSI, 2924776815468297216)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_3(self):
        """Instruction SHL_3
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = 0xCC5C406168309853
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE438F:0x7FFFF7DE4393], [b"H", b"\xc1", b"\xe6", b"\x05"])
        self.assertEqual(cpu.RSI, 10054299555619605088)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, True)

    def test_SHL_4(self):
        """Instruction SHL_4
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = 0x726F9570CFB9645B
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE438F:0x7FFFF7DE4393], [b"H", b"\xc1", b"\xe6", b"\x05"])
        self.assertEqual(cpu.RSI, 5616743111828736864)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHL_5(self):
        """Instruction SHL_5
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = 0x2B60C
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE438F:0x7FFFF7DE4393], [b"H", b"\xc1", b"\xe6", b"\x05"])
        self.assertEqual(cpu.RSI, 5685632)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHL_6(self):
        """Instruction SHL_6
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = 0x377BEB912D8EAE5
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE438F:0x7FFFF7DE4393], [b"H", b"\xc1", b"\xe6", b"\x05"])
        self.assertEqual(cpu.RSI, 7996096205977115808)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351926675)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_1(self):
        """Instruction SHR_1
        Groups:
        0x7ffff7de405d:     shr     rdx, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE405D, "H\xd1\xea")
        cpu.ZF = False
        cpu.RDX = 0x144A5AD4
        cpu.RIP = 0x7FFFF7DE405D
        cpu.CF = False
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE405D:0x7FFFF7DE4060], [b"H", b"\xd1", b"\xea"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925856)
        self.assertEqual(cpu.RDX, 170208618)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_2(self):
        """Instruction SHR_2
        Groups:
        0x7ffff7de391d:     shr     rsi, cl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE391D, "H\xd3\xee")
        cpu.RSI = 0x20CE23F6
        cpu.CL = 0x6
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE391D
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE391D:0x7FFFF7DE3920], [b"H", b"\xd3", b"\xee"])
        self.assertEqual(cpu.RSI, 8599695)
        self.assertEqual(cpu.CL, 6)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351924000)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_3(self):
        """Instruction SHR_3
        Groups:
        0x7ffff7de3926:     shr     rsi, cl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3926, "H\xd3\xee")
        cpu.RSI = 0x800000001204088
        cpu.CL = 0xDA
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3926
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3926:0x7FFFF7DE3929], [b"H", b"\xd3", b"\xee"])
        self.assertEqual(cpu.RSI, 8589934592)
        self.assertEqual(cpu.CL, 218)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351924009)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_4(self):
        """Instruction SHR_4
        Groups:
        0x7ffff7de61d2:     shr     al, 4
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE61D2, "\xc0\xe8\x04")
        cpu.ZF = False
        cpu.AL = 0x22
        cpu.RIP = 0x7FFFF7DE61D2
        cpu.CF = False
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE61D2:0x7FFFF7DE61D5], [b"\xc0", b"\xe8", b"\x04"])
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934421)
        self.assertEqual(cpu.AL, 2)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.SF, False)

    def test_SHR_5(self):
        """Instruction SHR_5
        Groups:
        0x7ffff7de391d:     shr     rsi, cl
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE391D, "H\xd3\xee")
        cpu.RSI = 0x7C967E3F
        cpu.CL = 0xE
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE391D
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE391D:0x7FFFF7DE3920], [b"H", b"\xd3", b"\xee"])
        self.assertEqual(cpu.RSI, 127577)
        self.assertEqual(cpu.CL, 14)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 140737351924000)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_SHR_6(self):
        """Instruction SHR_6
        Groups:
        0x4322bd:   shr     rax, 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322BD, "H\xd1\xe8")
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x4322BD
        cpu.PF = False
        cpu.SF = False
        cpu.RAX = 0x1
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4322BD:0x4322C0], [b"H", b"\xd1", b"\xe8"])
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4399808)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.RAX, 0)

    def test_STC_1(self):
        """Instruction STC_1
        Groups:
        0x5667fa:   stc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00566000, 0x1000, "rwx")
        mem.write(0x5667FA, "\xf9")
        cpu.CF = False
        cpu.RIP = 0x5667FA
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5667FA:0x5667FB], [b"\xf9"])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 5662715)

    def test_STC_2(self):
        """Instruction STC_2
        Groups:
        0x42a889:   stc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0042A000, 0x1000, "rwx")
        mem.write(0x42A889, "\xf9")
        cpu.CF = False
        cpu.RIP = 0x42A889
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x42A889:0x42A88A], [b"\xf9"])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4368522)

    def test_STC_3(self):
        """Instruction STC_3
        Groups:
        0x60b5d5:   stc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0060B000, 0x1000, "rwx")
        mem.write(0x60B5D5, "\xf9")
        cpu.CF = False
        cpu.RIP = 0x60B5D5
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x60B5D5:0x60B5D6], [b"\xf9"])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 6338006)

    def test_STC_4(self):
        """Instruction STC_4
        Groups:
        0x52da4d:   stc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0052D000, 0x1000, "rwx")
        mem.write(0x52DA4D, "\xf9")
        cpu.CF = False
        cpu.RIP = 0x52DA4D
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x52DA4D:0x52DA4E], [b"\xf9"])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 5429838)

    def test_STC_5(self):
        """Instruction STC_5
        Groups:
        0x56ba0e:   stc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0056B000, 0x1000, "rwx")
        mem.write(0x56BA0E, "\xf9")
        cpu.CF = False
        cpu.RIP = 0x56BA0E
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x56BA0E:0x56BA0F], [b"\xf9"])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 5683727)

    def test_STC_6(self):
        """Instruction STC_6
        Groups:
        0x61a7d6:   stc
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0061A000, 0x1000, "rwx")
        mem.write(0x61A7D6, "\xf9")
        cpu.CF = False
        cpu.RIP = 0x61A7D6
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x61A7D6:0x61A7D7], [b"\xf9"])
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 6399959)

    def test_STOSD_1(self):
        """Instruction STOSD_1
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        mem.write(0x7FFFFFFFDA88, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDB70, "\xa0\xdb\xff\xff\xff\x7f\x00\x00")
        cpu.RDI = 0x7FFFFFFFDB70
        cpu.RCX = 0x6
        cpu.RSI = 0x7FFFFFFFDA88
        cpu.RIP = 0x5555555547C2
        cpu.EAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555547C2:0x5555555547C4], [b"\xf3", b"\xab"])
        self.assertEqual(
            mem[0x7FFFFFFFDA88:0x7FFFFFFFDA90],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB70:0x7FFFFFFFDB78],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 5)
        self.assertEqual(cpu.RDI, 140737488345972)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_2(self):
        """Instruction STOSD_2
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        mem.write(0x7FFFFFFFDA88, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDB1C, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFFFFFDB1C
        cpu.RCX = 0x1B
        cpu.RSI = 0x7FFFFFFFDA88
        cpu.RIP = 0x5555555547C2
        cpu.EAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555547C2:0x5555555547C4], [b"\xf3", b"\xab"])
        self.assertEqual(
            mem[0x7FFFFFFFDA88:0x7FFFFFFFDA90],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB1C:0x7FFFFFFFDB24],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 26)
        self.assertEqual(cpu.RDI, 140737488345888)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_3(self):
        """Instruction STOSD_3
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        mem.write(0x7FFFFFFFDA88, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDA9C, "\xff\x7f\x00\x00&\xb0be")
        cpu.RDI = 0x7FFFFFFFDA9C
        cpu.RCX = 0x3B
        cpu.RSI = 0x7FFFFFFFDA88
        cpu.RIP = 0x5555555547C2
        cpu.EAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555547C2:0x5555555547C4], [b"\xf3", b"\xab"])
        self.assertEqual(
            mem[0x7FFFFFFFDA88:0x7FFFFFFFDA90],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDA9C:0x7FFFFFFFDAA4],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"&", b"\xb0", b"b", b"e"],
        )
        self.assertEqual(cpu.RCX, 58)
        self.assertEqual(cpu.RDI, 140737488345760)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_4(self):
        """Instruction STOSD_4
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        mem.write(0x7FFFFFFFDA88, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDAEC, "\xff\x7f\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFFFFFDAEC
        cpu.RCX = 0x27
        cpu.RSI = 0x7FFFFFFFDA88
        cpu.RIP = 0x5555555547C2
        cpu.EAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555547C2:0x5555555547C4], [b"\xf3", b"\xab"])
        self.assertEqual(
            mem[0x7FFFFFFFDA88:0x7FFFFFFFDA90],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDAEC:0x7FFFFFFFDAF4],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 38)
        self.assertEqual(cpu.RDI, 140737488345840)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_5(self):
        """Instruction STOSD_5
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        mem.write(0x7FFFFFFFDA88, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDB7C, "\x00\x00\x00\x00PIUU")
        cpu.RDI = 0x7FFFFFFFDB7C
        cpu.RCX = 0x3
        cpu.RSI = 0x7FFFFFFFDA88
        cpu.RIP = 0x5555555547C2
        cpu.EAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555547C2:0x5555555547C4], [b"\xf3", b"\xab"])
        self.assertEqual(
            mem[0x7FFFFFFFDA88:0x7FFFFFFFDA90],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDB7C:0x7FFFFFFFDB84],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"P", b"I", b"U", b"U"],
        )
        self.assertEqual(cpu.RCX, 2)
        self.assertEqual(cpu.RDI, 140737488345984)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSD_6(self):
        """Instruction STOSD_6
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        mem.write(0x7FFFFFFFDA88, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDAF0, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFFFFFDAF0
        cpu.RCX = 0x26
        cpu.RSI = 0x7FFFFFFFDA88
        cpu.RIP = 0x5555555547C2
        cpu.EAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x5555555547C2:0x5555555547C4], [b"\xf3", b"\xab"])
        self.assertEqual(
            mem[0x7FFFFFFFDA88:0x7FFFFFFFDA90],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDAF0:0x7FFFFFFFDAF8],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 37)
        self.assertEqual(cpu.RDI, 140737488345844)
        self.assertEqual(cpu.RSI, 140737488345736)
        self.assertEqual(cpu.RIP, 93824992233410)
        self.assertEqual(cpu.EAX, 0)

    def test_STOSQ_1(self):
        """Instruction STOSQ_1
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        mem.write(0x7FFFF7FD7700, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFF7FD7F38, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFF7FD7F38
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = 0x19
        cpu.RSI = 0x7FFFF7FD7700
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DED09B:0x7FFFF7DED09E], [b"\xf3", b"H", b"\xab"])
        self.assertEqual(
            mem[0x7FFFF7FD7700:0x7FFFF7FD7708],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFF7FD7F38:0x7FFFF7FD7F40],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 24)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353973568)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_STOSQ_2(self):
        """Instruction STOSQ_2
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        mem.write(0x7FFFF7FD7700, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFF7FD7CB8, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFF7FD7CB8
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = 0x69
        cpu.RSI = 0x7FFFF7FD7700
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DED09B:0x7FFFF7DED09E], [b"\xf3", b"H", b"\xab"])
        self.assertEqual(
            mem[0x7FFFF7FD7700:0x7FFFF7FD7708],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFF7FD7CB8:0x7FFFF7FD7CC0],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 104)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353972928)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_STOSQ_3(self):
        """Instruction STOSQ_3
        Groups:
        0x7ffff7de5ebf:     rep stosq       qword ptr [rdi], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FFE000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5EBF, "\xf3H\xab")
        mem.write(0x7FFFF7FFE4A0, "\x00\xe4\xff\xf7\xff\x7f\x00\x00")
        mem.write(0x7FFFFFFFDA88, "\x90x\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFFFFFDA88
        cpu.RIP = 0x7FFFF7DE5EBF
        cpu.RCX = 0x7
        cpu.RSI = 0x7FFFF7FFE4A0
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE5EBF:0x7FFFF7DE5EC2], [b"\xf3", b"H", b"\xab"])
        self.assertEqual(
            mem[0x7FFFF7FFE4A0:0x7FFFF7FFE4A8],
            [b"\x00", b"\xe4", b"\xff", b"\xf7", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDA88:0x7FFFFFFFDA90],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 6)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737488345744)
        self.assertEqual(cpu.RSI, 140737354130592)
        self.assertEqual(cpu.RIP, 140737351933631)

    def test_STOSQ_4(self):
        """Instruction STOSQ_4
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        mem.write(0x7FFFF7FD7700, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFF7FD7730, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFF7FD7730
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = 0x11A
        cpu.RSI = 0x7FFFF7FD7700
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DED09B:0x7FFFF7DED09E], [b"\xf3", b"H", b"\xab"])
        self.assertEqual(
            mem[0x7FFFF7FD7700:0x7FFFF7FD7708],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFF7FD7730:0x7FFFF7FD7738],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 281)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353971512)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_STOSQ_5(self):
        """Instruction STOSQ_5
        Groups:
        0x555555554895:     rep stosq       qword ptr [rdi], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555554895, "\xf3H\xab")
        mem.write(0x7FFFFFFFDA90, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFFFFFDC98, "\x1d\xe0\xff\xff\xff\x7f\x00\x00")
        cpu.RDI = 0x7FFFFFFFDA90
        cpu.RIP = 0x555555554895
        cpu.RCX = 0x1E
        cpu.RSI = 0x7FFFFFFFDC98
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x555555554895:0x555555554898], [b"\xf3", b"H", b"\xab"])
        self.assertEqual(
            mem[0x7FFFFFFFDA90:0x7FFFFFFFDA98],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFFFFFDC98:0x7FFFFFFFDCA0],
            [b"\x1d", b"\xe0", b"\xff", b"\xff", b"\xff", b"\x7f", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 29)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737488345752)
        self.assertEqual(cpu.RSI, 140737488346264)
        self.assertEqual(cpu.RIP, 93824992233621)

    def test_STOSQ_6(self):
        """Instruction STOSQ_6
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        mem.write(0x7FFFF7FD7700, "\x00\x00\x00\x00\x00\x00\x00\x00")
        mem.write(0x7FFFF7FD7EF0, "\x00\x00\x00\x00\x00\x00\x00\x00")
        cpu.RDI = 0x7FFFF7FD7EF0
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = 0x22
        cpu.RSI = 0x7FFFF7FD7700
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DED09B:0x7FFFF7DED09E], [b"\xf3", b"H", b"\xab"])
        self.assertEqual(
            mem[0x7FFFF7FD7700:0x7FFFF7FD7708],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(
            mem[0x7FFFF7FD7EF0:0x7FFFF7FD7EF8],
            [b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.RCX, 33)
        self.assertEqual(cpu.RAX, 0)
        self.assertEqual(cpu.RDI, 140737353973496)
        self.assertEqual(cpu.RSI, 140737353971456)
        self.assertEqual(cpu.RIP, 140737351962779)

    def test_SUB_1(self):
        """Instruction SUB_1
        Groups:
        0x4326c3:   sub     rsp, 0x1020
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4326C3, "H\x81\xec \x10\x00\x00")
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7FFFFFFFDAB0
        cpu.CF = False
        cpu.RIP = 0x4326C3
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x4326C3:0x4326CA], [b"H", b"\x81", b"\xec", b" ", b"\x10", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341648)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4400842)
        self.assertEqual(cpu.SF, False)

    def test_SUB_2(self):
        """Instruction SUB_2
        Groups:
        0x40b6dd:   sub     rsp, 0x1028
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040B000, 0x1000, "rwx")
        mem.write(0x40B6DD, "H\x81\xec(\x10\x00\x00")
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7FFFFFFFDA18
        cpu.CF = False
        cpu.RIP = 0x40B6DD
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x40B6DD:0x40B6E4], [b"H", b"\x81", b"\xec", b"(", b"\x10", b"\x00", b"\x00"]
        )
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341488)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4241124)
        self.assertEqual(cpu.SF, False)

    def test_SUB_3(self):
        """Instruction SUB_3
        Groups:
        0x7ffff7de406d:     sub     rsp, 8
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE406D, "H\x83\xec\x08")
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7FFFFFFFD840
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE406D
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE406D:0x7FFFF7DE4071], [b"H", b"\x83", b"\xec", b"\x08"])
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488345144)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925873)
        self.assertEqual(cpu.SF, False)

    def test_SUB_4(self):
        """Instruction SUB_4
        Groups:
        0x7ffff7decc04:     sub     rsp, 0x1020
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DECC04, "H\x81\xec \x10\x00\x00")
        cpu.PF = True
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.RSP = 0x7FFFFFFFD0C0
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DECC04
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DECC04:0x7FFFF7DECC0B],
            [b"H", b"\x81", b"\xec", b" ", b"\x10", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488339104)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351961611)
        self.assertEqual(cpu.SF, False)

    def test_SUB_5(self):
        """Instruction SUB_5
        Groups:
        0x7ffff7de060d:     sub     rsp, 0x1020
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE0000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE060D, "H\x81\xec \x10\x00\x00")
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7FFFFFFFD2E0
        cpu.CF = True
        cpu.RIP = 0x7FFFF7DE060D
        cpu.SF = True
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DE060D:0x7FFFF7DE0614],
            [b"H", b"\x81", b"\xec", b" ", b"\x10", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488339648)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351910932)
        self.assertEqual(cpu.SF, False)

    def test_SUB_6(self):
        """Instruction SUB_6
        Groups:
        0x7ffff7deb22d:     sub     rsp, 0x1078
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEB000, 0x1000, "rwx")
        mem.write(0x7FFFF7DEB22D, "H\x81\xecx\x10\x00\x00")
        cpu.PF = False
        cpu.AF = True
        cpu.OF = False
        cpu.ZF = False
        cpu.RSP = 0x7FFFFFFFD9F8
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DEB22D
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(
            mem[0x7FFFF7DEB22D:0x7FFFF7DEB234],
            [b"H", b"\x81", b"\xec", b"x", b"\x10", b"\x00", b"\x00"],
        )
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.RSP, 140737488341376)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351954996)
        self.assertEqual(cpu.SF, False)

    def test_TEST_1(self):
        """Instruction TEST_1
        Groups:
        0x7ffff7df459c:     test    al, al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459C, "\x84\xc0")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF459C
        cpu.AL = 0x6C
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF459C:0x7FFFF7DF459E], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351992734)
        self.assertEqual(cpu.AL, 108)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_2(self):
        """Instruction TEST_2
        Groups:
        0x7ffff7df459c:     test    al, al
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459C, "\x84\xc0")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF459C
        cpu.AL = 0x5F
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF459C:0x7FFFF7DF459E], [b"\x84", b"\xc0"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351992734)
        self.assertEqual(cpu.AL, 95)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_3(self):
        """Instruction TEST_3
        Groups:
        0x7ffff7de3892:     test    r15d, r15d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3892, "E\x85\xff")
        cpu.R15D = 0x0
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3892
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3892:0x7FFFF7DE3895], [b"E", b"\x85", b"\xff"])
        self.assertEqual(cpu.R15D, 0)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923861)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_4(self):
        """Instruction TEST_4
        Groups:
        0x7ffff7b58f07:     test    byte ptr [r8 - 4], 1
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A31000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7A3193C, "\xbc")
        mem.write(0x7FFFF7B58F07, "A\xf6@\xfc\x01")
        cpu.OF = False
        cpu.ZF = False
        cpu.R8 = 0x7FFFF7A31940
        cpu.CF = False
        cpu.RIP = 0x7FFFF7B58F07
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A3193C:0x7FFFF7A3193D], [b"\xbc"])
        self.assertEqual(
            mem[0x7FFFF7B58F07:0x7FFFF7B58F0C], [b"A", b"\xf6", b"@", b"\xfc", b"\x01"]
        )
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.R8, 140737348049216)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737349259020)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_TEST_5(self):
        """Instruction TEST_5
        Groups:
        0x7ffff7ddc6b7:     test    rdi, rdi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC6B7, "H\x85\xff")
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DDC6B7
        cpu.PF = True
        cpu.RDI = 0x7FFFF7FFA3A0
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DDC6B7:0x7FFFF7DDC6BA], [b"H", b"\x85", b"\xff"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351894714)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.RDI, 140737354113952)
        self.assertEqual(cpu.SF, False)

    def test_TEST_6(self):
        """Instruction TEST_6
        Groups:
        0x406e88:   test    rbx, rbx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406E88, "H\x85\xdb")
        cpu.RBX = 0x7FFFFFFFE927
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x406E88
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x406E88:0x406E8B], [b"H", b"\x85", b"\xdb"])
        self.assertEqual(cpu.RBX, 140737488349479)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4222603)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_VMOVD_1(self):
        """Instruction VMOVD_1
        Groups: avx
        0x432054:   vmovd   xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432054, "\xc5\xf9n\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x432054
        cpu.ESI = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432054:0x432058], [b"\xc5", b"\xf9", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399192)

    def test_VMOVD_2(self):
        """Instruction VMOVD_2
        Groups: avx
        0x432154:   vmovd   xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432154, "\xc5\xf9n\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x432154
        cpu.ESI = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432154:0x432158], [b"\xc5", b"\xf9", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399448)

    def test_VMOVD_3(self):
        """Instruction VMOVD_3
        Groups: avx
        0x432124:   vmovd   xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432124, "\xc5\xf9n\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x432124
        cpu.ESI = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432124:0x432128], [b"\xc5", b"\xf9", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399400)

    def test_VMOVD_4(self):
        """Instruction VMOVD_4
        Groups: avx
        0x434cd4:   vmovd   xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x434CD4, "\xc5\xf9n\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x434CD4
        cpu.ESI = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x434CD4:0x434CD8], [b"\xc5", b"\xf9", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4410584)

    def test_VMOVD_5(self):
        """Instruction VMOVD_5
        Groups: avx
        0x432134:   vmovd   xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432134, "\xc5\xf9n\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x432134
        cpu.ESI = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432134:0x432138], [b"\xc5", b"\xf9", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4399416)

    def test_VMOVD_6(self):
        """Instruction VMOVD_6
        Groups: avx
        0x432514:   vmovd   xmm1, esi
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432514, "\xc5\xf9n\xce")
        cpu.XMM1 = 0x0
        cpu.RIP = 0x432514
        cpu.ESI = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432514:0x432518], [b"\xc5", b"\xf9", b"n", b"\xce"])
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.ESI, 0)
        self.assertEqual(cpu.RIP, 4400408)

    def test_VPSHUFB_1(self):
        """Instruction VPSHUFB_1
        Groups: avx
        0x4321af:   vpshufb xmm0, xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4321AF, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.RIP = 0x4321AF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4321AF:0x4321B4], [b"\xc4", b"\xe2", b"q", b"\x00", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399540)

    def test_VPSHUFB_2(self):
        """Instruction VPSHUFB_2
        Groups: avx
        0x43215f:   vpshufb xmm0, xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43215F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.RIP = 0x43215F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43215F:0x432164], [b"\xc4", b"\xe2", b"q", b"\x00", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399460)

    def test_VPSHUFB_3(self):
        """Instruction VPSHUFB_3
        Groups: avx
        0x43205f:   vpshufb xmm0, xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43205F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.RIP = 0x43205F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43205F:0x432064], [b"\xc4", b"\xe2", b"q", b"\x00", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399204)

    def test_VPSHUFB_4(self):
        """Instruction VPSHUFB_4
        Groups: avx
        0x43212f:   vpshufb xmm0, xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43212F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.RIP = 0x43212F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43212F:0x432134], [b"\xc4", b"\xe2", b"q", b"\x00", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399412)

    def test_VPSHUFB_5(self):
        """Instruction VPSHUFB_5
        Groups: avx
        0x43213f:   vpshufb xmm0, xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43213F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.RIP = 0x43213F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43213F:0x432144], [b"\xc4", b"\xe2", b"q", b"\x00", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4399428)

    def test_VPSHUFB_6(self):
        """Instruction VPSHUFB_6
        Groups: avx
        0x434cdf:   vpshufb xmm0, xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x434CDF, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = 0x0
        cpu.XMM1 = 0x0
        cpu.RIP = 0x434CDF
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x434CDF:0x434CE4], [b"\xc4", b"\xe2", b"q", b"\x00", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.XMM1, 0)
        self.assertEqual(cpu.RIP, 4410596)

    def test_VPXOR_1(self):
        """Instruction VPXOR_1
        Groups: avx
        0x4321a0:   vpxor   xmm0, xmm0, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4321A0, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x4321A0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4321A0:0x4321A4], [b"\xc5", b"\xf9", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399524)

    def test_VPXOR_2(self):
        """Instruction VPXOR_2
        Groups: avx
        0x432510:   vpxor   xmm0, xmm0, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432510, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x432510
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432510:0x432514], [b"\xc5", b"\xf9", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4400404)

    def test_VPXOR_3(self):
        """Instruction VPXOR_3
        Groups: avx
        0x432050:   vpxor   xmm0, xmm0, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432050, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x432050
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432050:0x432054], [b"\xc5", b"\xf9", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399188)

    def test_VPXOR_4(self):
        """Instruction VPXOR_4
        Groups: avx
        0x432150:   vpxor   xmm0, xmm0, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432150, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x432150
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432150:0x432154], [b"\xc5", b"\xf9", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399444)

    def test_VPXOR_5(self):
        """Instruction VPXOR_5
        Groups: avx
        0x432130:   vpxor   xmm0, xmm0, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432130, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x432130
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432130:0x432134], [b"\xc5", b"\xf9", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399412)

    def test_VPXOR_6(self):
        """Instruction VPXOR_6
        Groups: avx
        0x432130:   vpxor   xmm0, xmm0, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432130, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = 0x0
        cpu.RIP = 0x432130
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432130:0x432134], [b"\xc5", b"\xf9", b"\xef", b"\xc0"])
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RIP, 4399412)

    def test_VZEROUPPER_1(self):
        """Instruction VZEROUPPER_1
        Groups: avx
        0x4322a9:   vzeroupper
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322A9, "\xc5\xf8w")
        cpu.RIP = 0x4322A9
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4322A9:0x4322AC], [b"\xc5", b"\xf8", b"w"])
        self.assertEqual(cpu.RIP, 4399788)

    def test_VZEROUPPER_2(self):
        """Instruction VZEROUPPER_2
        Groups: avx
        0x432319:   vzeroupper
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432319, "\xc5\xf8w")
        cpu.RIP = 0x432319
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432319:0x43231C], [b"\xc5", b"\xf8", b"w"])
        self.assertEqual(cpu.RIP, 4399900)

    def test_VZEROUPPER_3(self):
        """Instruction VZEROUPPER_3
        Groups: avx
        0x4322c9:   vzeroupper
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322C9, "\xc5\xf8w")
        cpu.RIP = 0x4322C9
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4322C9:0x4322CC], [b"\xc5", b"\xf8", b"w"])
        self.assertEqual(cpu.RIP, 4399820)

    def test_VZEROUPPER_4(self):
        """Instruction VZEROUPPER_4
        Groups: avx
        0x432229:   vzeroupper
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432229, "\xc5\xf8w")
        cpu.RIP = 0x432229
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432229:0x43222C], [b"\xc5", b"\xf8", b"w"])
        self.assertEqual(cpu.RIP, 4399660)

    def test_VZEROUPPER_5(self):
        """Instruction VZEROUPPER_5
        Groups: avx
        0x4322a9:   vzeroupper
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322A9, "\xc5\xf8w")
        cpu.RIP = 0x4322A9
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x4322A9:0x4322AC], [b"\xc5", b"\xf8", b"w"])
        self.assertEqual(cpu.RIP, 4399788)

    def test_VZEROUPPER_6(self):
        """Instruction VZEROUPPER_6
        Groups: avx
        0x432689:   vzeroupper
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432689, "\xc5\xf8w")
        cpu.RIP = 0x432689
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x432689:0x43268C], [b"\xc5", b"\xf8", b"w"])
        self.assertEqual(cpu.RIP, 4400780)

    def test_XGETBV_1(self):
        """Instruction XGETBV_1
        Groups:
        0x7ffff7a4eb1b:     xgetbv
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4EB1B, "\x0f\x01\xd0")
        cpu.RIP = 0x7FFFF7A4EB1B
        cpu.RCX = 0x0
        cpu.RDX = 0x0
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4EB1B:0x7FFFF7A4EB1E], [b"\x0f", b"\x01", b"\xd0"])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348168478)

    def test_XGETBV_2(self):
        """Instruction XGETBV_2
        Groups:
        0x437c0e:   xgetbv
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x437C0E, "\x0f\x01\xd0")
        cpu.RIP = 0x437C0E
        cpu.RCX = 0x0
        cpu.RDX = 0x0
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x437C0E:0x437C11], [b"\x0f", b"\x01", b"\xd0"])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4422673)

    def test_XGETBV_3(self):
        """Instruction XGETBV_3
        Groups:
        0x7ffff7a4eb1b:     xgetbv
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4EB1B, "\x0f\x01\xd0")
        cpu.RIP = 0x7FFFF7A4EB1B
        cpu.RCX = 0x0
        cpu.RDX = 0x0
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7A4EB1B:0x7FFFF7A4EB1E], [b"\x0f", b"\x01", b"\xd0"])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 140737348168478)

    def test_XGETBV_4(self):
        """Instruction XGETBV_4
        Groups:
        0x43a59e:   xgetbv
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0043A000, 0x1000, "rwx")
        mem.write(0x43A59E, "\x0f\x01\xd0")
        cpu.RIP = 0x43A59E
        cpu.RCX = 0x0
        cpu.RDX = 0x0
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43A59E:0x43A5A1], [b"\x0f", b"\x01", b"\xd0"])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4433313)

    def test_XGETBV_5(self):
        """Instruction XGETBV_5
        Groups:
        0x43791e:   xgetbv
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x43791E, "\x0f\x01\xd0")
        cpu.RIP = 0x43791E
        cpu.RCX = 0x0
        cpu.RDX = 0x0
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x43791E:0x437921], [b"\x0f", b"\x01", b"\xd0"])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4421921)

    def test_XGETBV_6(self):
        """Instruction XGETBV_6
        Groups:
        0x437a6e:   xgetbv
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x437A6E, "\x0f\x01\xd0")
        cpu.RIP = 0x437A6E
        cpu.RCX = 0x0
        cpu.RDX = 0x0
        cpu.RAX = 0x0
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x437A6E:0x437A71], [b"\x0f", b"\x01", b"\xd0"])
        self.assertEqual(cpu.RAX, 7)
        self.assertEqual(cpu.RCX, 0)
        self.assertEqual(cpu.RDX, 0)
        self.assertEqual(cpu.RIP, 4422257)

    def test_XORPS_1(self):
        """Instruction XORPS_1
        Groups: sse1
        0x530d2f:   xorps   xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00530000, 0x1000, "rwx")
        mem.write(0x530D2F, "\x0fW\xc8")
        cpu.XMM0 = 0xFFFFFFFE0000002100000040FFFFFFFE
        cpu.XMM1 = 0xFFFFFFBEFFFFFFDF00000061FFFFFFBE
        cpu.RIP = 0x530D2F
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x530D2F:0x530D32], [b"\x0f", b"W", b"\xc8"])
        self.assertEqual(cpu.XMM0, 340282366762482139043588486956268388350)
        self.assertEqual(cpu.XMM1, 5149830563390288455574671589440)
        self.assertEqual(cpu.RIP, 5442866)

    def test_XORPS_2(self):
        """Instruction XORPS_2
        Groups: sse1
        0x530a6c:   xorps   xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00530000, 0x1000, "rwx")
        mem.write(0x530A6C, "\x0fW\xc8")
        cpu.XMM0 = 0xFFFFFFFE8000000100000040FFFFFFFE
        cpu.XMM1 = 0xFFFFFFBE7FFFFFFF80000041FFFFFFBE
        cpu.RIP = 0x530A6C
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x530A6C:0x530A6F], [b"\x0f", b"W", b"\xc8"])
        self.assertEqual(cpu.XMM0, 340282366802096219710424845394334711806)
        self.assertEqual(cpu.XMM1, 5149830563399511827474087411776)
        self.assertEqual(cpu.RIP, 5442159)

    def test_XORPS_3(self):
        """Instruction XORPS_3
        Groups: sse1
        0x54f76a:   xorps   xmm0, xmmword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0054F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x54F76A, "\x0fW\x04$")
        mem.write(
            0x7FFFFFFFCCB0, "\x00\x00\x00\x80\xff\x7f\x00\x00\xff\x7f\x00\x00\x00\x00\x00\x80"
        )
        cpu.XMM0 = 0x0
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x54F76A
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x54F76A:0x54F76E], [b"\x0f", b"W", b"\x04", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCC0],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x80",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x80",
            ],
        )
        self.assertEqual(cpu.XMM0, 170141183460469836176150507692102778880)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5568366)

    def test_XORPS_4(self):
        """Instruction XORPS_4
        Groups: sse1
        0x540f22:   xorps   xmm1, xmm0
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00540000, 0x1000, "rwx")
        mem.write(0x540F22, "\x0fW\xc8")
        cpu.XMM0 = 0x200000007F0000002100000020
        cpu.XMM1 = 0x21000000200000007F00000021
        cpu.RIP = 0x540F22
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x540F22:0x540F25], [b"\x0f", b"W", b"\xc8"])
        self.assertEqual(cpu.XMM0, 2535301202799195300496253386784)
        self.assertEqual(cpu.XMM1, 79228164266705024999678279681)
        self.assertEqual(cpu.RIP, 5508901)

    def test_XORPS_5(self):
        """Instruction XORPS_5
        Groups: sse1
        0x560955:   xorps   xmm0, xmmword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00560000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x560955, "\x0fW\x04$")
        mem.write(0x7FFFFFFFCCB0, "\xff\xff\xff\xff\xff\x7f\x00\x00!Ce\x87\xff\xff\xff\xff")
        cpu.XMM0 = 0xFFFFFFFF8765432100007FFFFFFFFFFF
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x560955
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x560955:0x560959], [b"\x0f", b"W", b"\x04", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCC0],
            [
                b"\xff",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\x7f",
                b"\x00",
                b"\x00",
                b"!",
                b"C",
                b"e",
                b"\x87",
                b"\xff",
                b"\xff",
                b"\xff",
                b"\xff",
            ],
        )
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5638489)

    def test_XORPS_6(self):
        """Instruction XORPS_6
        Groups: sse1
        0x551ec4:   xorps   xmm0, xmmword ptr [rsp]
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00551000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x551EC4, "\x0fW\x04$")
        mem.write(0x7FFFFFFFCCB0, "\x00\x00\x00\x80 \x00\x00\x00 \x00\x00\x00\x00\x00\x00\x80")
        cpu.XMM0 = 0x80000000000000200000002080000000
        cpu.RSP = 0x7FFFFFFFCCB0
        cpu.RIP = 0x551EC4
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x551EC4:0x551EC8], [b"\x0f", b"W", b"\x04", b"$"])
        self.assertEqual(
            mem[0x7FFFFFFFCCB0:0x7FFFFFFFCCC0],
            [
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x80",
                b" ",
                b"\x00",
                b"\x00",
                b"\x00",
                b" ",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x00",
                b"\x80",
            ],
        )
        self.assertEqual(cpu.XMM0, 0)
        self.assertEqual(cpu.RSP, 140737488342192)
        self.assertEqual(cpu.RIP, 5578440)

    def test_XOR_1(self):
        """Instruction XOR_1
        Groups:
        0x7ffff7de6223:     xor     eax, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6223, "1\xc0")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE6223
        cpu.EAX = 0xFFFFFF00
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE6223:0x7FFFF7DE6225], [b"1", b"\xc0"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351934501)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_2(self):
        """Instruction XOR_2
        Groups:
        0x7ffff7de405a:     xor     rdx, r13
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE405A, "L1\xea")
        cpu.PF = True
        cpu.R13 = 0x7C96F087
        cpu.SF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE405A
        cpu.RDX = 0x7C96F087
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE405A:0x7FFFF7DE405D], [b"L", b"1", b"\xea"])
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.R13, 2090266759)
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925853)
        self.assertEqual(cpu.RDX, 0)

    def test_XOR_3(self):
        """Instruction XOR_3
        Groups:
        0x7ffff7df45a0:     xor     eax, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45A0, "1\xc0")
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF45A0
        cpu.EAX = 0xF7FF7C00
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF45A0:0x7FFFF7DF45A2], [b"1", b"\xc0"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351992738)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_4(self):
        """Instruction XOR_4
        Groups:
        0x7ffff7de3ff6:     xor     edx, edx
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF6, "1\xd2")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3FF6
        cpu.PF = False
        cpu.EDX = 0x3F3
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3FF6:0x7FFFF7DE3FF8], [b"1", b"\xd2"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351925752)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.EDX, 0)
        self.assertEqual(cpu.SF, False)

    def test_XOR_5(self):
        """Instruction XOR_5
        Groups:
        0x7ffff7df40cc:     xor     eax, eax
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF40CC, "1\xc0")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DF40CC
        cpu.EAX = 0x3C340000
        cpu.PF = False
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DF40CC:0x7FFFF7DF40CE], [b"1", b"\xc0"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351991502)
        self.assertEqual(cpu.EAX, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_XOR_6(self):
        """Instruction XOR_6
        Groups:
        0x7ffff7de3699:     xor     r10d, r10d
        """
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3699, "E1\xd2")
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x7FFFF7DE3699
        cpu.R10D = 0xF7A2E000
        cpu.PF = True
        cpu.SF = False
        cpu.execute()
        # cpu.writeback()
        self.assertEqual(mem[0x7FFFF7DE3699:0x7FFFF7DE369C], [b"E", b"1", b"\xd2"])
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 140737351923356)
        self.assertEqual(cpu.R10D, 0)
        self.assertEqual(cpu.PF, True)
        self.assertEqual(cpu.SF, False)

    def test_ADD_1_symbolic(self):
        """Instruction ADD_1
        Groups:
        0x7ffff7de438b:     add     rcx, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438B, "H\x83\xc1\x01")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7FFFF7BA0ABA)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE438B
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438B, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438C, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438D, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438E, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RCX == 0x7FFFF7BA0ABB)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE438F)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_2_symbolic(self):
        """Instruction ADD_2
        Groups:
        0x7ffff7de4396:     add     rax, rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4396, "H\x01\xd0")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x310EF63C39)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4396
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x65)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4398, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4396, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4397, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x310EF63C9E)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4399)
        condition = Operators.AND(condition, cpu.RDX == 0x65)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_3_symbolic(self):
        """Instruction ADD_3
        Groups:
        0x7ffff7de6128:     add     rdx, 0x18
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6128, "H\x83\xc2\x18")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6128
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7FFFF7A4C978)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6128, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6129, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE612A, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE612B, 8) == ord("\x18"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE612C)
        condition = Operators.AND(condition, cpu.RDX == 0x7FFFF7A4C990)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_4_symbolic(self):
        """Instruction ADD_4
        Groups:
        0x7ffff7de3960:     add     r12, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3960, "I\x83\xc4\x01")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3960
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3960, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3961, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3962, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3963, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 0x1)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3964)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_5_symbolic(self):
        """Instruction ADD_5
        Groups:
        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A49000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5B)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x17)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A490D7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE6124, "H\x03B\x10")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFF7A2E000)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6124
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7FFFF7A490C0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D0, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D1, 8) == ord("["))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D2, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A490D7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6124, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6125, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6126, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6127, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFF7BA3B25)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6128)
        condition = Operators.AND(condition, cpu.RDX == 0x7FFFF7A490C0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ADD_6_symbolic(self):
        """Instruction ADD_6
        Groups:
        0x7ffff7de6124:     add     rax, qword ptr [rdx + 0x10]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4B000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCC8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCC9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x88)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCCA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCCB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCCC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCCD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCCE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A4BCCF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE6124, "H\x03B\x10")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFF7A2E000)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6124
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7FFFF7A4BCB8)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCC8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCC9, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCCA, 8) == ord("\x07"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCCB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCCC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCCD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCCE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4BCCF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6124, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6125, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6126, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6127, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFF7AA68C0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6128)
        condition = Operators.AND(condition, cpu.RDX == 0x7FFFF7A4BCB8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_1_symbolic(self):
        """Instruction AND_1
        Groups:
        0x7ffff7b58f2f:     and     r9d, 0xf
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F2F, "A\x83\xe1\x0f")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7B58F2F
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0x12)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F30, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F31, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F32, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F2F, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F33)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R9D == 0x2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_2_symbolic(self):
        """Instruction AND_2
        Groups:
        0x7ffff7aa7bd0:     and     edx, 0x808
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA7BD0, "\x81\xe2\x08\x08\x00\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7AA7BD0
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFBAD2807)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA7BD0, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA7BD1, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA7BD2, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA7BD3, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA7BD4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA7BD5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AA7BD6)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x800)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_3_symbolic(self):
        """Instruction AND_3
        Groups:
        0x7ffff7b58f2f:     and     r9d, 0xf
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F2F, "A\x83\xe1\x0f")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7B58F2F
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0x12)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F30, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F31, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F32, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F2F, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F33)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R9D == 0x2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_4_symbolic(self):
        """Instruction AND_4
        Groups:
        0x7ffff7de3930:     and     rax, rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3930, "H!\xf0")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x13)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x9)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7DE3930
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3930, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3931, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3932, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RSI == 0x13)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x1)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3933)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_5_symbolic(self):
        """Instruction AND_5
        Groups:
        0x7ffff7b58f2f:     and     r9d, 0xf
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F2F, "A\x83\xe1\x0f")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7B58F2F
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0x12)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F30, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F31, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F32, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F2F, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F33)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R9D == 0x2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_AND_6_symbolic(self):
        """Instruction AND_6
        Groups:
        0x7ffff7de3909:     and     ecx, dword ptr [rbx + 0x2f0]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FF7000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE390B, "\xf0")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FF794A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FF7949)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FF7948)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x7FFFF7DE3909, "#\x8b")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FF794B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE390C, "\x02\x00\x00")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7FFFF7FF7658)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1C5E843)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3909
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FF794B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FF794A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FF7949, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FF7948, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3909, 8) == ord("#"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE390A, 8) == ord("\x8b"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE390B, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE390C, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE390D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE390E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RBX == 0x7FFFF7FF7658)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x43)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE390F)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_1_symbolic(self):
        """Instruction BSF_1
        Groups:
        0x4184cd:   bsf     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184CD, "\x0f\xbc\xc2")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x495045)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x80)
        cpu.RIP = 0x4184CD

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4184CD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184CE, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x4184CF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EAX == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x80)
        condition = Operators.AND(condition, cpu.RIP == 0x4184D0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_2_symbolic(self):
        """Instruction BSF_2
        Groups:
        0x4183ed:   bsf     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4183ED, "\x0f\xbc\xc2")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x4A5301)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x5)
        cpu.RIP = 0x4183ED

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183ED, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4183EE, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x4183EF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x5)
        condition = Operators.AND(condition, cpu.RIP == 0x4183F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_3_symbolic(self):
        """Instruction BSF_3
        Groups:
        0x4184bd:   bsf     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184BD, "\x0f\xbc\xc2")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x495085)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x80)
        cpu.RIP = 0x4184BD

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4184BD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184BE, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x4184BF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EAX == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x80)
        condition = Operators.AND(condition, cpu.RIP == 0x4184C0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_4_symbolic(self):
        """Instruction BSF_4
        Groups:
        0x41850a:   bsf     rax, rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x41850A, "H\x0f\xbc\xc2")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41850A
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x495100)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x800200020000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41850A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x41850B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41850C, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x41850D, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x11)
        condition = Operators.AND(condition, cpu.RIP == 0x41850E)
        condition = Operators.AND(condition, cpu.RDX == 0x800200020000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_5_symbolic(self):
        """Instruction BSF_5
        Groups:
        0x7ffff7ab5d0a:     bsf     rax, rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5D0A, "H\x0f\xbc\xc2")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7AB5D0A
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x5555555549C0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xE0E0E0E0EE080000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5D0A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5D0B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5D0C, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5D0D, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x13)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB5D0E)
        condition = Operators.AND(condition, cpu.RDX == 0xE0E0E0E0EE080000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSF_6_symbolic(self):
        """Instruction BSF_6
        Groups:
        0x4183ed:   bsf     eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4183ED, "\x0f\xbc\xc2")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x494D05)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x80)
        cpu.RIP = 0x4183ED

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183ED, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4183EE, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.read_int(0x4183EF, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.EAX == 0x7)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x80)
        condition = Operators.AND(condition, cpu.RIP == 0x4183F0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_1_symbolic(self):
        """Instruction BSR_1
        Groups:
        0x4008b7:   bsr     esi, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008B7, "\x0f\xbd\xf6")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x4008B7
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008B8, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B9, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x4008B7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x3)
        condition = Operators.AND(condition, cpu.RIP == 0x4008BA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_2_symbolic(self):
        """Instruction BSR_2
        Groups:
        0x400907:   bsr     esi, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400907, "\x0f\xbd\xf6")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x400907
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400908, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x400909, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x400907, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x3)
        condition = Operators.AND(condition, cpu.RIP == 0x40090A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_3_symbolic(self):
        """Instruction BSR_3
        Groups:
        0x457ac8:   bsr     rsi, rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457AC8, "H\x0f\xbd\xf6")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x4100800)
        cpu.RIP = 0x457AC8

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457AC8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x457AC9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457ACA, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x457ACB, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSI == 0x1A)
        condition = Operators.AND(condition, cpu.RIP == 0x457ACC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_4_symbolic(self):
        """Instruction BSR_4
        Groups:
        0x400847:   bsr     esi, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400847, "\x0f\xbd\xf6")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x400847
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400848, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x400849, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x400847, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x3)
        condition = Operators.AND(condition, cpu.RIP == 0x40084A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_5_symbolic(self):
        """Instruction BSR_5
        Groups:
        0x457c18:   bsr     rsi, rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457C18, "H\x0f\xbd\xf6")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x41008000)
        cpu.RIP = 0x457C18

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457C18, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x457C19, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457C1A, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x457C1B, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSI == 0x1E)
        condition = Operators.AND(condition, cpu.RIP == 0x457C1C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BSR_6_symbolic(self):
        """Instruction BSR_6
        Groups:
        0x457db8:   bsr     rsi, rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DB8, "H\x0f\xbd\xf6")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x4100800)
        cpu.RIP = 0x457DB8

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457DB8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x457DB9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457DBA, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x457DBB, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSI == 0x1A)
        condition = Operators.AND(condition, cpu.RIP == 0x457DBC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_1_symbolic(self):
        """Instruction BT_1
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B5, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B7, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE36B9)
        condition = Operators.AND(condition, cpu.R8D == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_2_symbolic(self):
        """Instruction BT_2
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B5, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B7, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.EAX == 0x2)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE36B9)
        condition = Operators.AND(condition, cpu.R8D == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_3_symbolic(self):
        """Instruction BT_3
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B5, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B7, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.EAX == 0x2)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE36B9)
        condition = Operators.AND(condition, cpu.R8D == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_4_symbolic(self):
        """Instruction BT_4
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B5, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B7, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE36B9)
        condition = Operators.AND(condition, cpu.R8D == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_5_symbolic(self):
        """Instruction BT_5
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B5, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B7, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE36B9)
        condition = Operators.AND(condition, cpu.R8D == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_BT_6_symbolic(self):
        """Instruction BT_6
        Groups:
        0x7ffff7de36b5:     bt      r8d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36B5, "A\x0f\xa3\xc0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x2)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE36B5
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x467)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B8, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B5, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36B7, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.EAX == 0x2)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE36B9)
        condition = Operators.AND(condition, cpu.R8D == 0x467)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_1_symbolic(self):
        """Instruction CALL_1
        Groups: call, mode64
        0x7ffff7de447a:     call    0x7ffff7de3800
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD880)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD881)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD882)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD883)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD884)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD885)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD886)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD887)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD888)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        mem.write(0x7FFFF7DE447A, "\xe8\x81\xf3\xff\xff")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD878)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD879)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD880)
        cpu.RIP = 0x7FFFF7DE447A
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD9A0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD880, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD881, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD882, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD883, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD884, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD885, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD886, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD887, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD888, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87A, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD878, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD879, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447A, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447B, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD878)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3800)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD9A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_2_symbolic(self):
        """Instruction CALL_2
        Groups: call, mode64
        0x7ffff7a780e1:     call    qword ptr [r8 + 0x38]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD2000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFB000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFBDC8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A780E1, "A\xffP8")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD2578)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD2579)
        value = cs.new_bitvec(8)
        cs.add(value == 0x96)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD257A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD257B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD257C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD257D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD257E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD257F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFBDC0)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7DD2540)
        cpu.RIP = 0x7FFFF7A780E1
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFC330)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDB8, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDB9, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDBA, 8) == ord("\xa7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDBB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDBC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDBD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDBF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFBDC8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A780E1, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A780E2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A780E3, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A780E4, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD2578, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD2579, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD257A, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD257B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD257C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD257D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD257E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD257F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7DD2540)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFBDB8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AA9660)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFC330)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_3_symbolic(self):
        """Instruction CALL_3
        Groups: call, mode64
        0x4554b0:   call    0x45c7a0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00455000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA18)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA19)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA1A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA1B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA1C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA1D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA1E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA1F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA24)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        mem.write(0x4554B0, "\xe8\xebr\x00\x00")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDA20)
        cpu.RIP = 0x4554B0
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDAD0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA18, 8) == ord("\xb5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA19, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA1A, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA1B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA1C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA1D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA1E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA1F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA20, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA21, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA22, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA23, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA24, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA25, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA26, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA27, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA28, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x4554B0, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0x4554B1, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x4554B2, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x4554B3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4554B4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDA18)
        condition = Operators.AND(condition, cpu.RIP == 0x45C7A0)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDAD0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_4_symbolic(self):
        """Instruction CALL_4
        Groups: call, mode64
        0x7ffff7de447a:     call    0x7ffff7de3800
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD880)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD881)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD882)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD883)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD884)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD885)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD886)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD887)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD888)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        mem.write(0x7FFFF7DE447A, "\xe8\x81\xf3\xff\xff")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD878)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD879)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD880)
        cpu.RIP = 0x7FFFF7DE447A
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD9A0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD880, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD881, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD882, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD883, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD884, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD885, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD886, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD887, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD888, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87A, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD878, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD879, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447A, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447B, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE447E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD878)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3800)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD9A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_5_symbolic(self):
        """Instruction CALL_5
        Groups: call, mode64
        0x7ffff7de40a6:     call    0x7ffff7de3660
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD808)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD809)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD80A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD80B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD80C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD80D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD80E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD80F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD810)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEC)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD811)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD812)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD813)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD814)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD815)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD816)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD817)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD818)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD8)
        mem[addr] = value
        mem.write(0x7FFFF7DE40A6, "\xe8\xb5\xf5\xff\xff")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD810)
        cpu.RIP = 0x7FFFF7DE40A6
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD900)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD808, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD809, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD80A, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD80B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD80C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD80D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD80E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD80F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD810, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD811, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD812, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD813, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD814, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD815, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD816, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD817, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD818, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE40A6, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE40A7, 8) == ord("\xb5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE40A8, 8) == ord("\xf5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE40A9, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE40AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD808)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3660)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD900)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CALL_6_symbolic(self):
        """Instruction CALL_6
        Groups: call, mode64
        0x45f878:   call    0x413490
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB01)
        value = cs.new_bitvec(8)
        cs.add(value == 0x53)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB08)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF4)
        mem[addr] = value
        mem.write(0x45F878, "\xe8\x13<\xfb\xff")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x39)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDB00)
        cpu.RIP = 0x45F878
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDB20)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB00, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB01, 8) == ord("S"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB02, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB03, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB04, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB05, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB06, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB07, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB08, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF8, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF9, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFA, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x45F878, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0x45F879, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x45F87A, 8) == ord("<"))
        condition = Operators.AND(condition, cpu.read_int(0x45F87B, 8) == ord("\xfb"))
        condition = Operators.AND(condition, cpu.read_int(0x45F87C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDAF8)
        condition = Operators.AND(condition, cpu.RIP == 0x413490)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDB20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_1_symbolic(self):
        """Instruction CDQE_1
        Groups:
        0x400aa0:   cdqe
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x92)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AA0, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA1, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.RAX == 0x92)
        condition = Operators.AND(condition, cpu.RIP == 0x400AA2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_2_symbolic(self):
        """Instruction CDQE_2
        Groups:
        0x400aa0:   cdqe
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x5A)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AA0, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA1, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.RAX == 0x5A)
        condition = Operators.AND(condition, cpu.RIP == 0x400AA2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_3_symbolic(self):
        """Instruction CDQE_3
        Groups:
        0x400aa0:   cdqe
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x80)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AA0, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA1, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.RAX == 0x80)
        condition = Operators.AND(condition, cpu.RIP == 0x400AA2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_4_symbolic(self):
        """Instruction CDQE_4
        Groups:
        0x400acf:   cdqe
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400ACF, "H\x98")
        cpu.RIP = 0x400ACF
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x98)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AD0, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.read_int(0x400ACF, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RAX == 0x98)
        condition = Operators.AND(condition, cpu.RIP == 0x400AD1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_5_symbolic(self):
        """Instruction CDQE_5
        Groups:
        0x400aa0:   cdqe
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AA0, "H\x98")
        cpu.RIP = 0x400AA0
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x73)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AA0, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x400AA1, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.RAX == 0x73)
        condition = Operators.AND(condition, cpu.RIP == 0x400AA2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CDQE_6_symbolic(self):
        """Instruction CDQE_6
        Groups:
        0x400b07:   cdqe
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B07, "H\x98")
        cpu.RIP = 0x400B07
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xC6)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B08, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.read_int(0x400B07, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RAX == 0xC6)
        condition = Operators.AND(condition, cpu.RIP == 0x400B09)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_1_symbolic(self):
        """Instruction CLC_1
        Groups:
        0x46a9fc:   clc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0046A000, 0x1000, "rwx")
        mem.write(0x46A9FC, "\xf8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x46A9FC

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x46A9FC, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x46A9FD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_2_symbolic(self):
        """Instruction CLC_2
        Groups:
        0x7542c8:   clc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00754000, 0x1000, "rwx")
        mem.write(0x7542C8, "\xf8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7542C8

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7542C8, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7542C9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_3_symbolic(self):
        """Instruction CLC_3
        Groups:
        0x4b473c:   clc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004B4000, 0x1000, "rwx")
        mem.write(0x4B473C, "\xf8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4B473C

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4B473C, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4B473D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_4_symbolic(self):
        """Instruction CLC_4
        Groups:
        0x49d4dd:   clc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0049D000, 0x1000, "rwx")
        mem.write(0x49D4DD, "\xf8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x49D4DD

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x49D4DD, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x49D4DE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_5_symbolic(self):
        """Instruction CLC_5
        Groups:
        0x4fd621:   clc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004FD000, 0x1000, "rwx")
        mem.write(0x4FD621, "\xf8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4FD621

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4FD621, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4FD622)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CLC_6_symbolic(self):
        """Instruction CLC_6
        Groups:
        0x4fadef:   clc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004FA000, 0x1000, "rwx")
        mem.write(0x4FADEF, "\xf8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4FADEF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4FADEF, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4FADF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_1_symbolic(self):
        """Instruction CMOVAE_1
        Groups: cmov
        0x4117e8:   cmovae  rax, r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x4117E8, "I\x0fC\xc2")
        cpu.RIP = 0x4117E8
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x20)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4117E8, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x4117E9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4117EA, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x4117EB, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.RAX == 0x20)
        condition = Operators.AND(condition, cpu.RIP == 0x4117EC)
        condition = Operators.AND(condition, cpu.R10 == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_2_symbolic(self):
        """Instruction CMOVAE_2
        Groups: cmov
        0x414318:   cmovae  rax, r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x414318, "I\x0fC\xc2")
        cpu.RIP = 0x414318
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x20)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x414318, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x414319, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41431A, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x41431B, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.RAX == 0x20)
        condition = Operators.AND(condition, cpu.RIP == 0x41431C)
        condition = Operators.AND(condition, cpu.R10 == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_3_symbolic(self):
        """Instruction CMOVAE_3
        Groups: cmov
        0x5555555662c8:     cmovae  rdx, rbx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555566000, 0x1000, "rwx")
        mem.write(0x5555555662C8, "H\x0fC\xd3")
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xFFFFFFFFFFFFFFFF)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x5555555662C8
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5555555662C8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555662C9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555662CA, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555662CB, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.RDX == 0x7)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555662CC)
        condition = Operators.AND(condition, cpu.RBX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_4_symbolic(self):
        """Instruction CMOVAE_4
        Groups: cmov
        0x411778:   cmovae  rax, r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411778, "I\x0fC\xc2")
        cpu.RIP = 0x411778
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x4A0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411778, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x411779, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41177A, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x41177B, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.RAX == 0x4A0)
        condition = Operators.AND(condition, cpu.RIP == 0x41177C)
        condition = Operators.AND(condition, cpu.R10 == 0x4A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_5_symbolic(self):
        """Instruction CMOVAE_5
        Groups: cmov
        0x411778:   cmovae  rax, r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411778, "I\x0fC\xc2")
        cpu.RIP = 0x411778
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x20)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411778, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x411779, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41177A, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x41177B, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.RAX == 0x20)
        condition = Operators.AND(condition, cpu.RIP == 0x41177C)
        condition = Operators.AND(condition, cpu.R10 == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVAE_6_symbolic(self):
        """Instruction CMOVAE_6
        Groups: cmov
        0x411b58:   cmovae  rax, r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411B58, "I\x0fC\xc2")
        cpu.RIP = 0x411B58
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x20)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x50)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411B58, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x411B59, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x411B5A, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x411B5B, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.RAX == 0x50)
        condition = Operators.AND(condition, cpu.RIP == 0x411B5C)
        condition = Operators.AND(condition, cpu.R10 == 0x50)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_1_symbolic(self):
        """Instruction CMOVA_1
        Groups: cmov
        0x7ffff7de0ab0:     cmova   rax, r8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE0000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE0AB0, "I\x0fG\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE0AB0
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7DD9398)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFF7DD5000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0AB0, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0AB1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0AB2, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0AB3, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7DD9398)
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFF7DD5000)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE0AB4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_2_symbolic(self):
        """Instruction CMOVA_2
        Groups: cmov
        0x7ffff7a9d404:     cmova   rbx, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A9D000, 0x1000, "rwx")
        mem.write(0x7FFFF7A9D404, "H\x0fG\xd8")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7A9D404
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFFFFF)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x14)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A9D404, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A9D405, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A9D406, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A9D407, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFFFFF)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A9D408)
        condition = Operators.AND(condition, cpu.RBX == 0x14)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_3_symbolic(self):
        """Instruction CMOVA_3
        Groups: cmov
        0x4082a4:   cmova   rbx, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00408000, 0x1000, "rwx")
        mem.write(0x4082A4, "H\x0fG\xd8")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x4082A4
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFFFFF)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0xB)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4082A4, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x4082A5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4082A6, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x4082A7, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFFFFF)
        condition = Operators.AND(condition, cpu.RIP == 0x4082A8)
        condition = Operators.AND(condition, cpu.RBX == 0xB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_4_symbolic(self):
        """Instruction CMOVA_4
        Groups: cmov
        0x41462a:   cmova   rdx, r13
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x41462A, "I\x0fG\xd5")
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4A0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x21DF0)
        cpu.RIP = 0x41462A
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41462A, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x41462B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41462C, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x41462D, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.RDX == 0x4A0)
        condition = Operators.AND(condition, cpu.RIP == 0x41462E)
        condition = Operators.AND(condition, cpu.R13 == 0x21DF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_5_symbolic(self):
        """Instruction CMOVA_5
        Groups: cmov
        0x41424a:   cmova   rdx, r13
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x41424A, "I\x0fG\xd5")
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4A0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x21DF0)
        cpu.RIP = 0x41424A
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41424A, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x41424B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41424C, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x41424D, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.RDX == 0x4A0)
        condition = Operators.AND(condition, cpu.RIP == 0x41424E)
        condition = Operators.AND(condition, cpu.R13 == 0x21DF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVA_6_symbolic(self):
        """Instruction CMOVA_6
        Groups: cmov
        0x4142ba:   cmova   rdx, r13
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x4142BA, "I\x0fG\xd5")
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4A0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x21DF0)
        cpu.RIP = 0x4142BA
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4142BA, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x4142BB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4142BC, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x4142BD, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.RDX == 0x4A0)
        condition = Operators.AND(condition, cpu.RIP == 0x4142BE)
        condition = Operators.AND(condition, cpu.R13 == 0x21DF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_1_symbolic(self):
        """Instruction CMOVBE_1
        Groups: cmov
        0x40d233:   cmovbe  rbx, r14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40D233, "I\x0fF\xde")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x1000)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x20)
        cpu.RIP = 0x40D233
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40D233, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x40D234, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40D235, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x40D236, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.R14 == 0x20)
        condition = Operators.AND(condition, cpu.RIP == 0x40D237)
        condition = Operators.AND(condition, cpu.RBX == 0x20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_2_symbolic(self):
        """Instruction CMOVBE_2
        Groups: cmov
        0x7ffff7aa96b3:     cmovbe  rbx, r14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96B3, "I\x0fF\xde")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x2000)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x4)
        cpu.RIP = 0x7FFFF7AA96B3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B3, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B5, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B6, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.R14 == 0x4)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AA96B7)
        condition = Operators.AND(condition, cpu.RBX == 0x4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_3_symbolic(self):
        """Instruction CMOVBE_3
        Groups: cmov
        0x7ffff7aa96b3:     cmovbe  rbx, r14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96B3, "I\x0fF\xde")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x1000)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x13)
        cpu.RIP = 0x7FFFF7AA96B3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B3, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B5, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B6, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.R14 == 0x13)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AA96B7)
        condition = Operators.AND(condition, cpu.RBX == 0x13)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_4_symbolic(self):
        """Instruction CMOVBE_4
        Groups: cmov
        0x40d263:   cmovbe  rbx, r14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40D263, "I\x0fF\xde")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x1000)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x13)
        cpu.RIP = 0x40D263
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40D263, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x40D264, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40D265, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x40D266, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.R14 == 0x13)
        condition = Operators.AND(condition, cpu.RIP == 0x40D267)
        condition = Operators.AND(condition, cpu.RBX == 0x13)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_5_symbolic(self):
        """Instruction CMOVBE_5
        Groups: cmov
        0x7ffff7aa96b3:     cmovbe  rbx, r14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96B3, "I\x0fF\xde")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x1000)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x13)
        cpu.RIP = 0x7FFFF7AA96B3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B3, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B5, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96B6, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.R14 == 0x13)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AA96B7)
        condition = Operators.AND(condition, cpu.RBX == 0x13)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVBE_6_symbolic(self):
        """Instruction CMOVBE_6
        Groups: cmov
        0x40fde3:   cmovbe  rbx, r14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040F000, 0x1000, "rwx")
        mem.write(0x40FDE3, "I\x0fF\xde")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x1000)
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x240)
        cpu.RIP = 0x40FDE3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40FDE3, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x40FDE4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40FDE5, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x40FDE6, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.R14 == 0x240)
        condition = Operators.AND(condition, cpu.RIP == 0x40FDE7)
        condition = Operators.AND(condition, cpu.RBX == 0x240)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_1_symbolic(self):
        """Instruction CMOVB_1
        Groups: cmov
        0x7ffff7deb97f:     cmovb   r12d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEB000, 0x1000, "rwx")
        mem.write(0x7FFFF7DEB97F, "D\x0fB\xe0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xA)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DEB97F
        cpu.R12D = cs.new_bitvec(32)
        cs.add(cpu.R12D == 0x1A)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB980, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB981, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB982, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB97F, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EAX == 0xA)
        condition = Operators.AND(condition, cpu.R12D == 0x1A)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DEB983)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_2_symbolic(self):
        """Instruction CMOVB_2
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AE, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AF, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF45B0)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_3_symbolic(self):
        """Instruction CMOVB_3
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AE, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AF, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF45B0)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_4_symbolic(self):
        """Instruction CMOVB_4
        Groups: cmov
        0x7ffff7deb97f:     cmovb   r12d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEB000, 0x1000, "rwx")
        mem.write(0x7FFFF7DEB97F, "D\x0fB\xe0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x12)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DEB97F
        cpu.R12D = cs.new_bitvec(32)
        cs.add(cpu.R12D == 0x1A)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB980, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB981, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB982, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB97F, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.EAX == 0x12)
        condition = Operators.AND(condition, cpu.R12D == 0x1A)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DEB983)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_5_symbolic(self):
        """Instruction CMOVB_5
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AE, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AF, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF45B0)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVB_6_symbolic(self):
        """Instruction CMOVB_6
        Groups: cmov
        0x7ffff7df45ad:     cmovb   eax, ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45AD, "\x0fB\xc1")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF45AD
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AE, 8) == ord("B"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45AF, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF45B0)
        condition = Operators.AND(condition, cpu.ECX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_1_symbolic(self):
        """Instruction CMOVE_1
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7FF7C48)
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6260, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6261, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625E, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7FF7C48)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6262)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_2_symbolic(self):
        """Instruction CMOVE_2
        Groups: cmov
        0x415f05:   cmove   rax, rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00415000, 0x1000, "rwx")
        mem.write(0x415F05, "H\x0fD\xc2")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x415F05
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x6E01C0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x415F08, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x415F05, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x415F06, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x415F07, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.RAX == 0x6E01C0)
        condition = Operators.AND(condition, cpu.RIP == 0x415F09)
        condition = Operators.AND(condition, cpu.RDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_3_symbolic(self):
        """Instruction CMOVE_3
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7FF7C48)
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6260, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6261, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625E, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7FF7C48)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6262)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_4_symbolic(self):
        """Instruction CMOVE_4
        Groups: cmov
        0x7ffff7df2822:     cmove   rdi, qword ptr [rip + 0x20b886]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FFE000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF2822, "H\x0fD=\x86\xb8 \x00")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE0B7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7FD8000)
        cpu.RIP = 0x7FFFF7DF2822

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2822, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2823, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2824, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2825, 8) == ord("="))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2826, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2827, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2828, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF2829, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B0, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE0B7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7FD8000)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF282A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_5_symbolic(self):
        """Instruction CMOVE_5
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7FF7C48)
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6260, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6261, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625E, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7FF7C48)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6262)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVE_6_symbolic(self):
        """Instruction CMOVE_6
        Groups: cmov
        0x7ffff7de625e:     cmove   r8, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE625E, "L\x0fD\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7FF7C48)
        cpu.RIP = 0x7FFFF7DE625E
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6260, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6261, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625E, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE625F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7FF7C48)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6262)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_1_symbolic(self):
        """Instruction CMOVNE_1
        Groups: cmov
        0x462435:   cmovne  rbx, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, "rwx")
        mem.write(0x462435, "H\x0fE\xd8")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x462435
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4A5441)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6BF6B0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x462438, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x462435, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x462436, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x462437, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.RAX == 0x4A5441)
        condition = Operators.AND(condition, cpu.RIP == 0x462439)
        condition = Operators.AND(condition, cpu.RBX == 0x6BF6B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_2_symbolic(self):
        """Instruction CMOVNE_2
        Groups: cmov
        0x7ffff7de5776:     cmovne  r14d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5776, "D\x0fE\xf0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x10)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.R14D = cs.new_bitvec(32)
        cs.add(cpu.R14D == 0x0)
        cpu.RIP = 0x7FFFF7DE5776

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5778, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5779, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5776, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5777, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.EAX == 0x10)
        condition = Operators.AND(condition, cpu.R14D == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE577A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_3_symbolic(self):
        """Instruction CMOVNE_3
        Groups: cmov
        0x7ffff7de57f6:     cmovne  rbx, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE57F6, "H\x0fE\xd8")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE57F6
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFF7FF7640)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7FFFF7FF7AF1)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE57F8, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE57F9, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE57F6, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE57F7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFF7FF7640)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE57FA)
        condition = Operators.AND(condition, cpu.RBX == 0x7FFFF7FF7640)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_4_symbolic(self):
        """Instruction CMOVNE_4
        Groups: cmov
        0x457ba4:   cmovne  rsi, rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457BA4, "H\x0fE\xf2")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x8201000080201021)
        cpu.RIP = 0x457BA4
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x41008000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457BA4, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x457BA5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457BA6, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x457BA7, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.RSI == 0x41008000)
        condition = Operators.AND(condition, cpu.RIP == 0x457BA8)
        condition = Operators.AND(condition, cpu.RDX == 0x41008000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_5_symbolic(self):
        """Instruction CMOVNE_5
        Groups: cmov
        0x7ffff7de0910:     cmovne  esi, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE0000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE0910, "\x0fE\xf0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE0910
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0910, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0911, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0912, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE0913)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNE_6_symbolic(self):
        """Instruction CMOVNE_6
        Groups: cmov
        0x457db0:   cmovne  rcx, rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DB0, "H\x0fE\xcf")
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7FFFFFFFE01B)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFE040)
        cpu.RIP = 0x457DB0

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457DB0, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x457DB1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457DB2, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x457DB3, 8) == ord("\xcf"))
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFE040)
        condition = Operators.AND(condition, cpu.RCX == 0x7FFFFFFFE040)
        condition = Operators.AND(condition, cpu.RIP == 0x457DB4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_1_symbolic(self):
        """Instruction CMOVNS_1
        Groups: cmov
        0x448555:   cmovns  rax, r11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448555, "I\x0fI\xc3")
        cpu.RIP = 0x448555
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.R11 = cs.new_bitvec(64)
        cs.add(cpu.R11 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x448558, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0x448555, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x448556, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x448557, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x448559)
        condition = Operators.AND(condition, cpu.R11 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMOVNS_2_symbolic(self):
        """Instruction CMOVNS_2
        Groups: cmov
        0x448555:   cmovns  rax, r11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448555, "I\x0fI\xc3")
        cpu.RIP = 0x448555
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.R11 = cs.new_bitvec(64)
        cs.add(cpu.R11 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x448558, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0x448555, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x448556, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x448557, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x448559)
        condition = Operators.AND(condition, cpu.R11 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_1_symbolic(self):
        """Instruction CMPSB_1
        Groups:
        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA81)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA82)
        value = cs.new_bitvec(8)
        cs.add(value == 0xCF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA83)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49160A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49160B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA87)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x94)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA84)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        mem.write(0x40065B, "\xf3\xa6")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA85)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x491604)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA80)
        cpu.RIP = 0x40065B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA80, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA81, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA82, 8) == ord("\xcf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA83, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x491604, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x491605, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x491606, 8) == ord("R"))
        condition = Operators.AND(condition, cpu.read_int(0x491607, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x491608, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x491609, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x49160A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x49160B, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA87, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA86, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA84, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x40065B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x40065C, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA85, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.RCX == 0x6)
        condition = Operators.AND(condition, cpu.RDI == 0x491605)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA81)
        condition = Operators.AND(condition, cpu.RIP == 0x40065B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_2_symbolic(self):
        """Instruction CMPSB_2
        Groups:
        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x400658, "\xa6")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x31)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE070)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE071)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        mem.write(0x400657, "\xf3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491818)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491819)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491817)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x491817)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xA)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFE06A)
        cpu.RIP = 0x400657

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06B, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE071, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06A, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400657, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06C, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06D, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06F, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE070, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x491818, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0x491817, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0x400658, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0x491819, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0x49181A, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x49181B, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x49181C, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x49181D, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x49181E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.RCX == 0x9)
        condition = Operators.AND(condition, cpu.RDI == 0x491818)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFE06B)
        condition = Operators.AND(condition, cpu.RIP == 0x400659)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_3_symbolic(self):
        """Instruction CMPSB_3
        Groups:
        0x40065b:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA81)
        value = cs.new_bitvec(8)
        cs.add(value == 0xED)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA82)
        value = cs.new_bitvec(8)
        cs.add(value == 0xCF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA83)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA84)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49160A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49160B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49160C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x94)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA87)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x40065B, "\xf3\xa6")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA85)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x491605)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x6)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA81)
        cpu.RIP = 0x40065B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA81, 8) == ord("\xed"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA82, 8) == ord("\xcf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA83, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA84, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x491605, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x491606, 8) == ord("R"))
        condition = Operators.AND(condition, cpu.read_int(0x491607, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x491608, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x491609, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x49160A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x49160B, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x49160C, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA86, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA87, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x40065B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x40065C, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA85, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.RCX == 0x5)
        condition = Operators.AND(condition, cpu.RDI == 0x491606)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA82)
        condition = Operators.AND(condition, cpu.RIP == 0x40065D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_4_symbolic(self):
        """Instruction CMPSB_4
        Groups:
        0x400657:   repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.mmap(0x00491000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE065)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE066)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE067)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE068)
        value = cs.new_bitvec(8)
        cs.add(value == 0x31)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE069)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE06C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        mem.write(0x400657, "\xf3\xa6")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491818)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491819)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49181E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x491817)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2D)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x491817)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xA)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFE065)
        cpu.RIP = 0x400657

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06B, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE065, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE066, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE067, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE068, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE069, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06A, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x400657, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE06C, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x491818, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0x491817, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0x400658, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0x491819, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0x49181A, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x49181B, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x49181C, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x49181D, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x49181E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.RCX == 0x9)
        condition = Operators.AND(condition, cpu.RDI == 0x491818)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFE066)
        condition = Operators.AND(condition, cpu.RIP == 0x400659)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_5_symbolic(self):
        """Instruction CMPSB_5
        Groups:
        0x55555555478b:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA80)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA81)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x25)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA84)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA85)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA86)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        mem.write(0x55555555478B, "\xf3\xa6")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555554998)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555554999)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555555499A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555555499B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555555499C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555555499D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555555499E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555555499F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x555555554998)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA80)
        cpu.RIP = 0x55555555478B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA80, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA81, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA82, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA83, 8) == ord("%"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA84, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA85, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA86, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA87, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555478B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555478C, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0x555555554998, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x555555554999, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555499A, 8) == ord("R"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555499B, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555499C, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555499D, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555499E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555499F, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.RCX == 0x6)
        condition = Operators.AND(condition, cpu.RDI == 0x555555554999)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA81)
        condition = Operators.AND(condition, cpu.RIP == 0x55555555478D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPSB_6_symbolic(self):
        """Instruction CMPSB_6
        Groups:
        0x5555555548c0:     repe cmpsb      byte ptr [rsi], byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555548C0, "\xf3\xa6")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA82)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA83)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1C)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x28)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x5555555549AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x91)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x5555555549A8)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA80)
        cpu.RIP = 0x5555555548C0

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5555555548C0, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555548C1, 8) == ord("\xa6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA82, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA83, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA84, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA85, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA86, 8) == ord("("))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA81, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549A8, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549A9, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549AA, 8) == ord("R"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA87, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549AC, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549AD, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549AE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549AF, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA80, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555549AB, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.RCX == 0x6)
        condition = Operators.AND(condition, cpu.RDI == 0x5555555549A9)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA81)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555548C2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_1_symbolic(self):
        """Instruction CMPXCHG8B_1
        Groups:
        0x5c68cb:   lock cmpxchg8b  qword ptr [rsp + 4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x005C6000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x5C68CB, "\xf0\x0f\xc7L$\x04")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x80000001)
        cpu.RIP = 0x5C68CB
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80000001)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8001)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5C68CB, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x5C68CC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x5C68CD, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x5C68CE, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x5C68CF, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x5C68D0, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x5C68D1)
        condition = Operators.AND(condition, cpu.EAX == 0x80)
        condition = Operators.AND(condition, cpu.EDX == 0x8001)
        condition = Operators.AND(condition, cpu.EBX == 0x80000001)
        condition = Operators.AND(condition, cpu.ECX == 0x80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_2_symbolic(self):
        """Instruction CMPXCHG8B_2
        Groups:
        0x5861a9:   lock cmpxchg8b  qword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00586000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x5861A9, "\xf0\x0f\xc7\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x80000000)
        cpu.RIP = 0x5861A9
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80000000)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFFFFF)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80000000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5861A9, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x5861AA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x5861AB, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x5861AC, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x5861AD, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x5861AE)
        condition = Operators.AND(condition, cpu.EAX == 0x80000000)
        condition = Operators.AND(condition, cpu.EDX == 0x80000000)
        condition = Operators.AND(condition, cpu.EBX == 0x80000000)
        condition = Operators.AND(condition, cpu.ECX == 0x80000000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_3_symbolic(self):
        """Instruction CMPXCHG8B_3
        Groups:
        0x58de05:   lock cmpxchg8b  qword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0058D000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x58DE05, "\xf0\x0f\xc7\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x80000001)
        cpu.RIP = 0x58DE05
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80000001)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x21)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x58DE05, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x58DE06, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x58DE07, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x58DE08, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x58DE09, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x58DE0A)
        condition = Operators.AND(condition, cpu.EAX == 0x80000001)
        condition = Operators.AND(condition, cpu.EDX == 0x40)
        condition = Operators.AND(condition, cpu.EBX == 0x80000001)
        condition = Operators.AND(condition, cpu.ECX == 0x40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_4_symbolic(self):
        """Instruction CMPXCHG8B_4
        Groups:
        0x59b473:   lock cmpxchg8b  qword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0059B000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x59B473, "\xf0")
        mem.write(0x59B476, "\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x59B474, "\x0f\xc7")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0xFFFFFFFF)
        cpu.RIP = 0x59B473
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFFFF)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x80)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x80)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x59B473, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x59B474, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x59B475, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x59B476, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x59B477, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x59B478)
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.EDX == 0x80)
        condition = Operators.AND(condition, cpu.EBX == 0xFFFFFFFF)
        condition = Operators.AND(condition, cpu.ECX == 0x80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_5_symbolic(self):
        """Instruction CMPXCHG8B_5
        Groups:
        0x624e14:   lock cmpxchg8b  qword ptr [rsp + 8]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00624000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x624E14, "\xf0\x0f\xc7L$\x08")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x40)
        cpu.RIP = 0x624E14
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x40)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x80000000)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8001)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x624E14, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x624E15, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x624E16, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x624E17, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x624E18, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x624E19, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x624E1A)
        condition = Operators.AND(condition, cpu.EAX == 0x80000000)
        condition = Operators.AND(condition, cpu.EDX == 0x40)
        condition = Operators.AND(condition, cpu.EBX == 0x40)
        condition = Operators.AND(condition, cpu.ECX == 0x8001)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG8B_6_symbolic(self):
        """Instruction CMPXCHG8B_6
        Groups:
        0x5bfa73:   lock cmpxchg8b  qword ptr [rsp + 4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x005BF000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x5BFA76, "L$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        mem.write(0x5BFA73, "\xf0\x0f\xc7")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x5BFA78, "\x04")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x80000000)
        cpu.RIP = 0x5BFA73
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x80000000)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7F)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8001)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x5BFA78, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x5BFA73, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x5BFA75, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x5BFA76, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x5BFA77, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x5BFA74, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x5BFA79)
        condition = Operators.AND(condition, cpu.EAX == 0x8001)
        condition = Operators.AND(condition, cpu.EDX == 0x7F)
        condition = Operators.AND(condition, cpu.EBX == 0x80000000)
        condition = Operators.AND(condition, cpu.ECX == 0x8001)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_1_symbolic(self):
        """Instruction CMPXCHG_1
        Groups:
        0x7ffff7a65367:     cmpxchg dword ptr [rip + 0x36fde2], esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD5000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5150)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5151)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5152)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5153)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A65367, "\x0f\xb15\xe2\xfd6\x00")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7A65367
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5150, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5151, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5152, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5153, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65367, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65368, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65369, 8) == ord("5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6536A, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6536B, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6536C, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6536D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A6536E)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_2_symbolic(self):
        """Instruction CMPXCHG_2
        Groups:
        0x40abbf:   cmpxchg dword ptr [rdx], esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040A000, 0x1000, "rwx")
        mem.mmap(0x006BE000, 0x1000, "rwx")
        mem.write(0x40ABC0, "\xb12")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE762)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE763)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE761)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE760)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x40ABBF, "\x0f")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40ABBF
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6BE760)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40ABC0, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0x40ABC1, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0x6BE762, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BE763, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BE761, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x40ABBF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x6BE760, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40ABC2)
        condition = Operators.AND(condition, cpu.RDX == 0x6BE760)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_3_symbolic(self):
        """Instruction CMPXCHG_3
        Groups:
        0x413646:   cmpxchg dword ptr [rbx], esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, "rwx")
        mem.mmap(0x006B9000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6B9840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6B9841)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6B9842)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6B9843)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x413646, "\x0f\xb13")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x6B9840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x413646
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6B9840, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x6B9841, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6B9842, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6B9843, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x413646, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x413647, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0x413648, 8) == ord("3"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x6B9840)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x413649)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_4_symbolic(self):
        """Instruction CMPXCHG_4
        Groups:
        0x435a25:   cmpxchg qword ptr [rdx], rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00435000, 0x1000, "rwx")
        mem.mmap(0x006BD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD380)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD381)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD382)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD383)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD384)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD385)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD386)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BD387)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x435A25, "H\x0f\xb1:")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x6BB7C0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x435A25
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6BD380)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6BD380, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x6BD381, 8) == ord("\xb7"))
        condition = Operators.AND(condition, cpu.read_int(0x6BD382, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0x6BD383, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BD384, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BD385, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BD386, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BD387, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x435A25, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x435A26, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x435A27, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0x435A28, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RDI == 0x6BB7C0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x435A29)
        condition = Operators.AND(condition, cpu.RDX == 0x6BD380)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_5_symbolic(self):
        """Instruction CMPXCHG_5
        Groups:
        0x41086e:   cmpxchg dword ptr [rdx], ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, "rwx")
        mem.mmap(0x006BE000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE760)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE761)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE762)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x6BE763)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x41086E, "\x0f\xb1\n")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x41086E
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6BE760)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6BE760, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x6BE761, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BE762, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6BE763, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x41086E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41086F, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0x410870, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x410871)
        condition = Operators.AND(condition, cpu.RDX == 0x6BE760)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMPXCHG_6_symbolic(self):
        """Instruction CMPXCHG_6
        Groups:
        0x7ffff7aafa06:     cmpxchg dword ptr [rbx], esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AAF000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD3000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD3B80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD3B81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD3B82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD3B83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7AAFA06, "\x0f\xb13")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7FFFF7DD3B80)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7AAFA06
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD3B80, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD3B81, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD3B82, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD3B83, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AAFA06, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AAFA07, 8) == ord("\xb1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AAFA08, 8) == ord("3"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ESI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RBX == 0x7FFFF7DD3B80)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AAFA09)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_1_symbolic(self):
        """Instruction CMP_1
        Groups:
        0x7ffff7b58f43:     cmp     r12, r9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F43, "M9\xcc")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7FFFF7AB0F80)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7B58F43
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 0x7FFFF7B23C00)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F43, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F44, 8) == ord("9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F45, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.R12 == 0x7FFFF7AB0F80)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F46)
        condition = Operators.AND(condition, cpu.R9 == 0x7FFFF7B23C00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_2_symbolic(self):
        """Instruction CMP_2
        Groups:
        0x406e1d:   cmp     r14w, word ptr [rbx]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x406E20, "3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFEE69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x57)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFEE6A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        mem.write(0x406E1D, "fD;")
        cpu.R14W = cs.new_bitvec(16)
        cs.add(cpu.R14W == 0x444C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7FFFFFFFEE69)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406E1D
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406E20, 8) == ord("3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFEE69, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFEE6A, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x406E1D, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x406E1E, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x406E1F, 8) == ord(";"))
        condition = Operators.AND(condition, cpu.R14W == 0x444C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RBX == 0x7FFFFFFFEE69)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x406E21)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_3_symbolic(self):
        """Instruction CMP_3
        Groups:
        0x40d167:   cmp     eax, 0xff
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40D167, "\x83\xf8\xff")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x1)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40D167
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40D168, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x40D169, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x40D167, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.EAX == 0x1)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40D16A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_4_symbolic(self):
        """Instruction CMP_4
        Groups:
        0x7ffff7de4488:     cmp     qword ptr [rbp - 0x90], 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE4488, "H\x83\xbdp\xff\xff\xff\x00")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4488
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDA30)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A0, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A1, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A2, 8) == ord("\xa3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4488, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4489, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE448A, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE448B, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE448C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE448D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE448E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE448F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4490)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDA30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_5_symbolic(self):
        """Instruction CMP_5
        Groups:
        0x7ffff7de6111:     cmp     rax, 0x26
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6111, "H\x83\xf8&")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6111
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6111, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6112, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6113, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6114, 8) == ord("&"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x8)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6115)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CMP_6_symbolic(self):
        """Instruction CMP_6
        Groups:
        0x7ffff7de620b:     cmp     r12, 0x24
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE620B, "I\x83\xfc$")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x6)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE620B
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620B, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620C, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620D, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620E, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R12 == 0x6)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE620F)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_1_symbolic(self):
        """Instruction CQO_1
        Groups:
        0x400794:   cqo
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400794, "H\x99")
        cpu.RIP = 0x400794
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400794, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x400795, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.RAX == 0x600000)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x400796)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_2_symbolic(self):
        """Instruction CQO_2
        Groups:
        0x4006d4:   cqo
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D4, "H\x99")
        cpu.RIP = 0x4006D4
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006D4, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D5, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.RAX == 0x600000)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4006D6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_3_symbolic(self):
        """Instruction CQO_3
        Groups:
        0x7ffff7a4e234:     cqo
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E234, "H\x99")
        cpu.RIP = 0x7FFFF7A4E234
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E234, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E235, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.RAX == 0x600000)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4E236)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_4_symbolic(self):
        """Instruction CQO_4
        Groups:
        0x7ffff7a4e234:     cqo
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E234, "H\x99")
        cpu.RIP = 0x7FFFF7A4E234
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E234, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E235, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.RAX == 0x600000)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4E236)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_5_symbolic(self):
        """Instruction CQO_5
        Groups:
        0x4006d4:   cqo
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D4, "H\x99")
        cpu.RIP = 0x4006D4
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006D4, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D5, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.RAX == 0x600000)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4006D6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_CQO_6_symbolic(self):
        """Instruction CQO_6
        Groups:
        0x7ffff7a4e234:     cqo
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E234, "H\x99")
        cpu.RIP = 0x7FFFF7A4E234
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E234, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E235, 8) == ord("\x99"))
        condition = Operators.AND(condition, cpu.RAX == 0x600000)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4E236)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_1_symbolic(self):
        """Instruction DEC_1
        Groups: mode64
        0x41e10a:   dec     ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041E000, 0x1000, "rwx")
        mem.write(0x41E10A, "\xff\xc9")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x41E10A
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xD)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41E10A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x41E10B, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x41E10C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_2_symbolic(self):
        """Instruction DEC_2
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462D, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF462E)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_3_symbolic(self):
        """Instruction DEC_3
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462D, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF462E)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_4_symbolic(self):
        """Instruction DEC_4
        Groups: mode64
        0x7ffff7a65448:     dec     dword ptr [rip + 0x36fd02]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD5000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5150)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5151)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5152)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD5153)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A65448, "\xff\r\x02\xfd6\x00")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x7FFFF7A65448
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5150, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5151, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5152, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD5153, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65448, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65449, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6544A, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6544B, 8) == ord("\xfd"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6544C, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6544D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A6544E)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_5_symbolic(self):
        """Instruction DEC_5
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462D, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF462E)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DEC_6_symbolic(self):
        """Instruction DEC_6
        Groups: mode64
        0x7ffff7df462c:     dec     ecx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF462C, "\xff\xc9")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF462C
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF462D, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF462E)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_1_symbolic(self):
        """Instruction DIV_1
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x3F3)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3DE00EC7)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF9, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FFA, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.RAX == 0xFAAEF)
        condition = Operators.AND(condition, cpu.RCX == 0x3F3)
        condition = Operators.AND(condition, cpu.RDX == 0xEA)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3FFB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_2_symbolic(self):
        """Instruction DIV_2
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x3F3)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3DE00EC7)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF9, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FFA, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.RAX == 0xFAAEF)
        condition = Operators.AND(condition, cpu.RCX == 0x3F3)
        condition = Operators.AND(condition, cpu.RDX == 0xEA)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3FFB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_3_symbolic(self):
        """Instruction DIV_3
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x3F3)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x9E7650BC)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF9, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FFA, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.RAX == 0x281FFC)
        condition = Operators.AND(condition, cpu.RCX == 0x3F3)
        condition = Operators.AND(condition, cpu.RDX == 0x88)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3FFB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_4_symbolic(self):
        """Instruction DIV_4
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x3F3)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x10A8B550)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF9, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FFA, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.RAX == 0x437E2)
        condition = Operators.AND(condition, cpu.RCX == 0x3F3)
        condition = Operators.AND(condition, cpu.RDX == 0x3CA)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3FFB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_5_symbolic(self):
        """Instruction DIV_5
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x32)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3CBC6423)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF9, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FFA, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.RAX == 0x136F7C3)
        condition = Operators.AND(condition, cpu.RCX == 0x32)
        condition = Operators.AND(condition, cpu.RDX == 0xD)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3FFB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_DIV_6_symbolic(self):
        """Instruction DIV_6
        Groups:
        0x7ffff7de3ff8:     div     rcx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF8, "H\xf7\xf1")
        cpu.RIP = 0x7FFFF7DE3FF8
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x3F3)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x2E8912D8)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF9, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FFA, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.RAX == 0xBC890)
        condition = Operators.AND(condition, cpu.RCX == 0x3F3)
        condition = Operators.AND(condition, cpu.RDX == 0x228)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3FFB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_1_symbolic(self):
        """Instruction IDIV_1
        Groups:
        0x7ffff7a4e236:     idiv    r8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E236, "I\xf7\xf8")
        cpu.RIP = 0x7FFFF7A4E236
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E238, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E236, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E237, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.RAX == 0xC0000)
        condition = Operators.AND(condition, cpu.R8 == 0x8)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4E239)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_2_symbolic(self):
        """Instruction IDIV_2
        Groups:
        0x4006d6:   idiv    r8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D6, "I\xf7\xf8")
        cpu.RIP = 0x4006D6
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006D8, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D6, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.RAX == 0xC0000)
        condition = Operators.AND(condition, cpu.R8 == 0x8)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4006D9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_3_symbolic(self):
        """Instruction IDIV_3
        Groups:
        0x7ffff7a4e236:     idiv    r8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E236, "I\xf7\xf8")
        cpu.RIP = 0x7FFFF7A4E236
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E238, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E236, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E237, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.RAX == 0xC0000)
        condition = Operators.AND(condition, cpu.R8 == 0x8)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4E239)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_4_symbolic(self):
        """Instruction IDIV_4
        Groups:
        0x4006d6:   idiv    r8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D6, "I\xf7\xf8")
        cpu.RIP = 0x4006D6
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006D8, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D6, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.RAX == 0xC0000)
        condition = Operators.AND(condition, cpu.R8 == 0x8)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4006D9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_5_symbolic(self):
        """Instruction IDIV_5
        Groups:
        0x4006d6:   idiv    r8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4006D6, "I\xf7\xf8")
        cpu.RIP = 0x4006D6
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006D8, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D6, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x4006D7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.RAX == 0xC0000)
        condition = Operators.AND(condition, cpu.R8 == 0x8)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4006D9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IDIV_6_symbolic(self):
        """Instruction IDIV_6
        Groups:
        0x7ffff7a4e236:     idiv    r8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E236, "I\xf7\xf8")
        cpu.RIP = 0x7FFFF7A4E236
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E238, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E236, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E237, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.RAX == 0xC0000)
        condition = Operators.AND(condition, cpu.R8 == 0x8)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4E239)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_1_symbolic(self):
        """Instruction IMUL_1
        Groups:
        0x7ffff7acfec4:     imul    eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFEC4, "\x0f\xaf\xc2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7ACFEC4
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x600000)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x1)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x600000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFEC4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFEC5, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFEC6, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7ACFEC7)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EAX == 0x600000)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.RAX == 0x600000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_2_symbolic(self):
        """Instruction IMUL_2
        Groups:
        0x7ffff7acfeb3:     imul    eax, edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFEB3, "\x0f\xaf\xc2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7ACFEB3
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x8)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x40)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x8)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFEB3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFEB4, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFEB5, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7ACFEB6)
        condition = Operators.AND(condition, cpu.RDX == 0x8)
        condition = Operators.AND(condition, cpu.EAX == 0x200)
        condition = Operators.AND(condition, cpu.EDX == 0x8)
        condition = Operators.AND(condition, cpu.RAX == 0x200)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_3_symbolic(self):
        """Instruction IMUL_3
        Groups:
        0x43230c:   imul    edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43230C, "\xf7\xea")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43230C
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x55555556)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x55555556)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43230C, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x43230D, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43230E)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.RAX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_4_symbolic(self):
        """Instruction IMUL_4
        Groups:
        0x43230c:   imul    edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43230C, "\xf7\xea")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43230C
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x55555556)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x55555556)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43230C, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x43230D, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x43230E)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.EDX == 0x1)
        condition = Operators.AND(condition, cpu.RAX == 0x2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_5_symbolic(self):
        """Instruction IMUL_5
        Groups:
        0x41403c:   imul    r12, rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00414000, 0x1000, "rwx")
        mem.write(0x41403C, "L\x0f\xaf\xe6")
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x491)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x1)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x491)
        cpu.RIP = 0x41403C
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41403C, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x41403D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41403E, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0x41403F, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.R12 == 0x491)
        condition = Operators.AND(condition, cpu.RSI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x414040)
        condition = Operators.AND(condition, cpu.RDX == 0x491)
        condition = Operators.AND(condition, cpu.RAX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_IMUL_6_symbolic(self):
        """Instruction IMUL_6
        Groups:
        0x413fdc:   imul    r12, rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00413000, 0x1000, "rwx")
        mem.write(0x413FDC, "L\x0f\xaf\xe6")
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x491)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x1)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x491)
        cpu.RIP = 0x413FDC
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x413FDC, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x413FDD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x413FDE, 8) == ord("\xaf"))
        condition = Operators.AND(condition, cpu.read_int(0x413FDF, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.R12 == 0x491)
        condition = Operators.AND(condition, cpu.RSI == 0x1)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x413FE0)
        condition = Operators.AND(condition, cpu.RDX == 0x491)
        condition = Operators.AND(condition, cpu.RAX == 0xFFFFFFFF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_1_symbolic(self):
        """Instruction INC_1
        Groups:
        0x7ffff7df4596:     inc     rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4596, "H\xff\xc7")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x7FFFF7DF4596
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7A44729)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4598, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4596, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4597, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4599)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7A4472A)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_2_symbolic(self):
        """Instruction INC_2
        Groups:
        0x7ffff7df4596:     inc     rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4596, "H\xff\xc7")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x7FFFF7DF4596
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7DDA5EC)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4598, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4596, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4597, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4599)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7DDA5ED)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_3_symbolic(self):
        """Instruction INC_3
        Groups:
        0x7ffff7df4599:     inc     rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4599, "H\xff\xc6")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7A4472A)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF4599
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4599, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459B, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7A4472B)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF459C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_4_symbolic(self):
        """Instruction INC_4
        Groups:
        0x7ffff7df4596:     inc     rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4596, "H\xff\xc7")
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x7FFFF7DF4596
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7A4472E)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4598, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4596, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4597, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4599)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7A4472F)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_5_symbolic(self):
        """Instruction INC_5
        Groups:
        0x7ffff7df4599:     inc     rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4599, "H\xff\xc6")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x555555554CBB)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF4599
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4599, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459B, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.RSI == 0x555555554CBC)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF459C)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_INC_6_symbolic(self):
        """Instruction INC_6
        Groups:
        0x7ffff7df4599:     inc     rsi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4599, "H\xff\xc6")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7A44726)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF4599
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4599, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459B, 8) == ord("\xc6"))
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7A44727)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF459C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_1_symbolic(self):
        """Instruction JAE_1
        Groups: jump
        0x7ffff7aa96ab:     jae     0x7ffff7aa96e8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AA9000, 0x1000, "rwx")
        mem.write(0x7FFFF7AA96AB, "s;")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7AA96AB

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96AB, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AA96AC, 8) == ord(";"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AA96AD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_2_symbolic(self):
        """Instruction JAE_2
        Groups: jump
        0x400c11:   jae     0x400c69
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400C11, "sV")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400C11

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400C11, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x400C12, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.RIP == 0x400C69)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_3_symbolic(self):
        """Instruction JAE_3
        Groups: jump
        0x432400:   jae     0x432440
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432400, "s>")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x432400

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432400, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x432401, 8) == ord(">"))
        condition = Operators.AND(condition, cpu.RIP == 0x432402)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_4_symbolic(self):
        """Instruction JAE_4
        Groups: jump
        0x411d5b:   jae     0x412155
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411D5B, "\x0f\x83\xf4\x03\x00\x00")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411D5B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411D60, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x411D5B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x411D5C, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x411D5D, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0x411D5E, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x411D5F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x412155)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_5_symbolic(self):
        """Instruction JAE_5
        Groups: jump
        0x7ffff7b58f5d:     jae     0x7ffff7b58f00
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F5D, "s\xa1")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7B58F5D

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F5D, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F5E, 8) == ord("\xa1"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JAE_6_symbolic(self):
        """Instruction JAE_6
        Groups: jump
        0x400b82:   jae     0x400b9f
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B82, "s\x1b")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400B82

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B82, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x400B83, 8) == ord("\x1b"))
        condition = Operators.AND(condition, cpu.RIP == 0x400B84)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_1_symbolic(self):
        """Instruction JA_1
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6132

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6132, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6133, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6108)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_2_symbolic(self):
        """Instruction JA_2
        Groups: jump
        0x7ffff7ddf066:     ja      0x7ffff7ddf0b2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDF000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDF066, "wJ")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7DDF066

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDF066, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDF067, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDF068)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_3_symbolic(self):
        """Instruction JA_3
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6132

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6132, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6133, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6108)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_4_symbolic(self):
        """Instruction JA_4
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6132

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6132, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6133, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6108)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_5_symbolic(self):
        """Instruction JA_5
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6132

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6132, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6133, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6108)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JA_6_symbolic(self):
        """Instruction JA_6
        Groups: jump
        0x7ffff7de6132:     ja      0x7ffff7de6108
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6132, "w\xd4")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6132

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6132, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6133, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6108)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_1_symbolic(self):
        """Instruction JBE_1
        Groups: jump
        0x41188d:   jbe     0x411ec0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x41188D, "\x0f\x86-\x06\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x41188D

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41188D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41188E, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0x41188F, 8) == ord("-"))
        condition = Operators.AND(condition, cpu.read_int(0x411890, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0x411891, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x411892, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x411EC0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_2_symbolic(self):
        """Instruction JBE_2
        Groups: jump
        0x4325e3:   jbe     0x4326cf
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4325E3, "\x0f\x86\xe6\x00\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4325E3

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4325E3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E4, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E5, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x4325E9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_3_symbolic(self):
        """Instruction JBE_3
        Groups: jump
        0x432388:   jbe     0x4323aa
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432388, "v ")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x432388

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432388, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0x432389, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.RIP == 0x43238A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_4_symbolic(self):
        """Instruction JBE_4
        Groups: jump
        0x4325e3:   jbe     0x4326cf
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4325E3, "\x0f\x86\xe6\x00\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4325E3

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4325E3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E4, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E5, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4325E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x4325E9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_5_symbolic(self):
        """Instruction JBE_5
        Groups: jump
        0x7ffff7df1269:     jbe     0x7ffff7df1289
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1269, "v\x1e")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF1269

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1269, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF126A, 8) == ord("\x1e"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF126B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JBE_6_symbolic(self):
        """Instruction JBE_6
        Groups: jump
        0x7ffff7acff53:     jbe     0x7ffff7ad003f
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFF53, "\x0f\x86\xe6\x00\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7ACFF53

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFF53, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFF54, 8) == ord("\x86"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFF55, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFF56, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFF57, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFF58, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7ACFF59)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_1_symbolic(self):
        """Instruction JB_1
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7B58F46

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F46, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F47, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_2_symbolic(self):
        """Instruction JB_2
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7B58F46

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F46, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F47, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F48)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_3_symbolic(self):
        """Instruction JB_3
        Groups: jump
        0x400bab:   jb      0x400ab4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400BAB, "\x0f\x82\x03\xff\xff\xff")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400BAB

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400BAB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAC, 8) == ord("\x82"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAD, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x400BAF, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x400BB0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RIP == 0x400AB4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_4_symbolic(self):
        """Instruction JB_4
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7B58F46

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F46, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F47, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_5_symbolic(self):
        """Instruction JB_5
        Groups: jump
        0x7ffff7ddeff1:     jb      0x7ffff7ddefd0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDE000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDEFF1, "r\xdd")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7DDEFF1

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDEFF1, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDEFF2, 8) == ord("\xdd"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDEFD0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JB_6_symbolic(self):
        """Instruction JB_6
        Groups: jump
        0x7ffff7b58f46:     jb      0x7ffff7b58f00
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F46, "r\xb8")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7B58F46

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F46, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F47, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_1_symbolic(self):
        """Instruction JE_1
        Groups: jump
        0x7ffff7de3a9d:     je      0x7ffff7de3ed1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3A9D, "\x0f\x84.\x04\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE3A9D

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3AA0, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3AA1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3AA2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3A9D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3A9E, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3A9F, 8) == ord("."))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3AA3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_2_symbolic(self):
        """Instruction JE_2
        Groups: jump
        0x7ffff7de61be:     je      0x7ffff7de65b8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE61BE, "\x0f\x84\xf4\x03\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE61BE

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61C0, 8) == ord("\xf4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61C1, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61C2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61C3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61BE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61BF, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE61C4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_3_symbolic(self):
        """Instruction JE_3
        Groups: jump
        0x7ffff7de38c6:     je      0x7ffff7de3960
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE38C6, "\x0f\x84\x94\x00\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE38C6

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE38C6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE38C7, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE38C8, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE38C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE38CA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE38CB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE38CC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_4_symbolic(self):
        """Instruction JE_4
        Groups: jump
        0x7ffff7de440b:     je      0x7ffff7de4644
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE440B, "\x0f\x843\x02\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE440B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE440B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE440C, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE440D, 8) == ord("3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE440E, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE440F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4410, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4411)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_5_symbolic(self):
        """Instruction JE_5
        Groups: jump
        0x7ffff7de6115:     je      0x7ffff7de6121
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6115, "t\n")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE6115

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6115, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6116, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6117)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JE_6_symbolic(self):
        """Instruction JE_6
        Groups: jump
        0x406e0b:   je      0x406dc6
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406E0B, "t\xb9")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x406E0B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406E0B, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x406E0C, 8) == ord("\xb9"))
        condition = Operators.AND(condition, cpu.RIP == 0x406E0D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_1_symbolic(self):
        """Instruction JGE_1
        Groups: jump
        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5B02, "\x0f\x8d\xd8\x00\x00\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x7FFFF7AB5B02

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B02, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B03, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B04, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B05, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B06, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B07, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB5B08)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_2_symbolic(self):
        """Instruction JGE_2
        Groups: jump
        0x7ffff7b09879:     jge     0x7ffff7b0987f
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B09000, 0x1000, "rwx")
        mem.write(0x7FFFF7B09879, "}\x04")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7B09879

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B09879, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B0987A, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B0987F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JGE_3_symbolic(self):
        """Instruction JGE_3
        Groups: jump
        0x7ffff7ab5b02:     jge     0x7ffff7ab5be0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5B02, "\x0f\x8d\xd8\x00\x00\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x7FFFF7AB5B02

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B02, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B03, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B04, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B05, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B06, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5B07, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB5B08)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_1_symbolic(self):
        """Instruction JG_1
        Groups: jump
        0x403684:   jg      0x40361a
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00403000, 0x1000, "rwx")
        mem.write(0x403684, "\x7f\x94")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x403684

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x403684, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x403685, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.RIP == 0x40361A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_2_symbolic(self):
        """Instruction JG_2
        Groups: jump
        0x40c120:   jg      0x40c3f0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040C000, 0x1000, "rwx")
        mem.write(0x40C120, "\x0f\x8f\xca\x02\x00\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x40C120

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40C120, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40C121, 8) == ord("\x8f"))
        condition = Operators.AND(condition, cpu.read_int(0x40C122, 8) == ord("\xca"))
        condition = Operators.AND(condition, cpu.read_int(0x40C123, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x40C124, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x40C125, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x40C126)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_3_symbolic(self):
        """Instruction JG_3
        Groups: jump
        0x7ffff7df1357:     jg      0x7ffff7df13a0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1357, "\x7fG")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x7FFFF7DF1357

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1358, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1357, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1359)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_4_symbolic(self):
        """Instruction JG_4
        Groups: jump
        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC9FB, "\x0f\x8f\x15\x04\x00\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7DDC9FB

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDCA00, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FC, 8) == ord("\x8f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FD, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FE, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDCE16)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_5_symbolic(self):
        """Instruction JG_5
        Groups: jump
        0x7ffff7ddc9fb:     jg      0x7ffff7ddce16
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC9FB, "\x0f\x8f\x15\x04\x00\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7DDC9FB

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDCA00, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FC, 8) == ord("\x8f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FD, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FE, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC9FF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDCE16)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JG_6_symbolic(self):
        """Instruction JG_6
        Groups: jump
        0x40c2e4:   jg      0x40c250
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040C000, 0x1000, "rwx")
        mem.write(0x40C2E4, "\x0f\x8ff\xff\xff\xff")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x40C2E4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40C2E4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x40C2E5, 8) == ord("\x8f"))
        condition = Operators.AND(condition, cpu.read_int(0x40C2E6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x40C2E7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x40C2E8, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x40C2E9, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RIP == 0x40C2EA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_1_symbolic(self):
        """Instruction JLE_1
        Groups: jump
        0x400b2b:   jle     0x400b01
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400B2B, "~\xd4")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x400B2B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400B2B, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x400B2C, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.RIP == 0x400B01)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_2_symbolic(self):
        """Instruction JLE_2
        Groups: jump
        0x7ffff7a4e1cb:     jle     0x7ffff7a4e429
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4E1CB, "\x0f\x8eX\x02\x00\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7A4E1CB

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E1CB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E1CC, 8) == ord("\x8e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E1CD, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E1CE, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E1CF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4E1D0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4E1D1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_3_symbolic(self):
        """Instruction JLE_3
        Groups: jump
        0x437c08:   jle     0x437c1f
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x437C08, "~\x15")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x437C08

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437C08, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x437C09, 8) == ord("\x15"))
        condition = Operators.AND(condition, cpu.RIP == 0x437C0A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_4_symbolic(self):
        """Instruction JLE_4
        Groups: jump
        0x7ffff7de4486:     jle     0x7ffff7de4430
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4486, "~\xa8")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7DE4486

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4486, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4487, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4488)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_5_symbolic(self):
        """Instruction JLE_5
        Groups: jump
        0x7ffff7de4486:     jle     0x7ffff7de4430
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4486, "~\xa8")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7DE4486

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4486, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4487, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4488)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JLE_6_symbolic(self):
        """Instruction JLE_6
        Groups: jump
        0x7ffff7de4486:     jle     0x7ffff7de4430
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4486, "~\xa8")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7DE4486

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4486, 8) == ord("~"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4487, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4488)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_1_symbolic(self):
        """Instruction JL_1
        Groups: jump
        0x555555556f00:     jl      0x555555556ee2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.write(0x555555556F00, "|\xe0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x555555556F00

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555556F00, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556F01, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.RIP == 0x555555556EE2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_2_symbolic(self):
        """Instruction JL_2
        Groups: jump
        0x555555556f00:     jl      0x555555556ee2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.write(0x555555556F00, "|\xe0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x555555556F00

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555556F00, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556F01, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.RIP == 0x555555556F02)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JL_3_symbolic(self):
        """Instruction JL_3
        Groups: jump
        0x555555556f00:     jl      0x555555556ee2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.write(0x555555556F00, "|\xe0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x555555556F00

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555556F00, 8) == ord("|"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556F01, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.RIP == 0x555555556EE2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_1_symbolic(self):
        """Instruction JMP_1
        Groups: jump
        0x7ffff7de4279:     jmp     0x7ffff7de3a98
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4279, "\xe9\x1a\xf8\xff\xff")
        cpu.RIP = 0x7FFFF7DE4279

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4279, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE427A, 8) == ord("\x1a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE427B, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE427C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE427D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3A98)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_2_symbolic(self):
        """Instruction JMP_2
        Groups: jump
        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem[0x7FFFF7B58EE8] = "'"
        mem.write(0x7FFFF7B58EE7, "\xeb")
        cpu.RIP = 0x7FFFF7B58EE7

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE8, 8) == ord("'"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE7, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_3_symbolic(self):
        """Instruction JMP_3
        Groups: jump
        0x7ffff7df28e1:     jmp     0x7ffff7ddaa00
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF28E1, "\xe9\x1a\x81\xfe\xff")
        cpu.RIP = 0x7FFFF7DF28E1

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF28E1, 8) == ord("\xe9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF28E2, 8) == ord("\x1a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF28E3, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF28E4, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF28E5, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDAA00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_4_symbolic(self):
        """Instruction JMP_4
        Groups: mode64, jump
        0x7ffff7de62ee:     jmp     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE62EE, "\xff\xe2")
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7FFFF7DE63B8)
        cpu.RIP = 0x7FFFF7DE62EE

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE62EE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE62EF, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.RDX == 0x7FFFF7DE63B8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE63B8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_5_symbolic(self):
        """Instruction JMP_5
        Groups: jump
        0x7ffff7de4042:     jmp     0x7ffff7de4054
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4042, "\xeb\x10")
        cpu.RIP = 0x7FFFF7DE4042

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4042, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4043, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4054)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JMP_6_symbolic(self):
        """Instruction JMP_6
        Groups: jump
        0x7ffff7b58ee7:     jmp     0x7ffff7b58f10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem[0x7FFFF7B58EE8] = "'"
        mem.write(0x7FFFF7B58EE7, "\xeb")
        cpu.RIP = 0x7FFFF7B58EE7

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE8, 8) == ord("'"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE7, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_1_symbolic(self):
        """Instruction JNE_1
        Groups: jump
        0x7ffff7df459e:     jne     0x7ffff7df4590
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459E, "u\xf0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF459E

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459E, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459F, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4590)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_2_symbolic(self):
        """Instruction JNE_2
        Groups: jump
        0x7ffff7de5a4b:     jne     0x7ffff7de5a40
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5A4B, "u\xf3")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE5A4B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5A4B, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5A4C, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE5A40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_3_symbolic(self):
        """Instruction JNE_3
        Groups: jump
        0x7ffff7de611b:     jne     0x7ffff7de73ad
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE611B, "\x0f\x85\x8c\x12\x00\x00")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x7FFFF7DE611B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6120, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE611B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE611C, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE611D, 8) == ord("\x8c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE611E, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE611F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6121)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_4_symbolic(self):
        """Instruction JNE_4
        Groups: jump
        0x7ffff7aab197:     jne     0x7ffff7aab188
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AAB000, 0x1000, "rwx")
        mem.write(0x7FFFF7AAB197, "u\xef")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7AAB197

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AAB198, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AAB197, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AAB188)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_5_symbolic(self):
        """Instruction JNE_5
        Groups: jump
        0x7ffff7df4594:     jne     0x7ffff7df45a3
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4594, "u\r")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x7FFFF7DF4594

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4594, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4595, 8) == ord("\r"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4596)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNE_6_symbolic(self):
        """Instruction JNE_6
        Groups: jump
        0x7ffff7df459e:     jne     0x7ffff7df4590
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459E, "u\xf0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DF459E

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459E, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459F, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4590)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_1_symbolic(self):
        """Instruction JNS_1
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x7FFFF7DF138F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1390, 8) == ord("\xbf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF138F, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1391)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_2_symbolic(self):
        """Instruction JNS_2
        Groups: jump
        0x555555565fb2:     jns     0x5555555659ec
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x555555565FB2, "\x0f\x894\xfa\xff\xff")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x555555565FB2

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555565FB2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565FB3, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565FB4, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565FB5, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565FB6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565FB7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RIP == 0x5555555659EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_3_symbolic(self):
        """Instruction JNS_3
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x7FFFF7DF138F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1390, 8) == ord("\xbf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF138F, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1391)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_4_symbolic(self):
        """Instruction JNS_4
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7DF138F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1390, 8) == ord("\xbf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF138F, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1350)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_5_symbolic(self):
        """Instruction JNS_5
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x7FFFF7DF138F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1390, 8) == ord("\xbf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF138F, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1391)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JNS_6_symbolic(self):
        """Instruction JNS_6
        Groups: jump
        0x7ffff7df138f:     jns     0x7ffff7df1350
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF138F, "y\xbf")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x7FFFF7DF138F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1390, 8) == ord("\xbf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF138F, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1350)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_1_symbolic(self):
        """Instruction JS_1
        Groups: jump
        0x4326b2:   js      0x4328fb
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4326B2, "\x0f\x88C\x02\x00\x00")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4326B2

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4326B2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4326B3, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0x4326B4, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x4326B5, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x4326B6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4326B7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x4326B8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_2_symbolic(self):
        """Instruction JS_2
        Groups: jump
        0x4322d2:   js      0x43251b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322D2, "\x0f\x88C\x02\x00\x00")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x4322D2

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322D2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4322D3, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0x4322D4, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x4322D5, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x4322D6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4322D7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x4322D8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_3_symbolic(self):
        """Instruction JS_3
        Groups: jump
        0x555555565075:     js      0x555555566260
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x555555565075, "\x0f\x88\xe5\x11\x00\x00")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x555555565075

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555565075, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565076, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565077, 8) == ord("\xe5"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565078, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565079, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556507A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RIP == 0x55555556507B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_4_symbolic(self):
        """Instruction JS_4
        Groups: jump
        0x40dd40:   js      0x40dd4c
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040D000, 0x1000, "rwx")
        mem.write(0x40DD40, "x\n")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x40DD40

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40DD40, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x40DD41, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.RIP == 0x40DD4C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_5_symbolic(self):
        """Instruction JS_5
        Groups: jump
        0x555555559cb6:     js      0x555555559ccf
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555559000, 0x1000, "rwx")
        mem.write(0x555555559CB6, "x\x17")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x555555559CB6

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555559CB6, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x555555559CB7, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.RIP == 0x555555559CCF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_JS_6_symbolic(self):
        """Instruction JS_6
        Groups: jump
        0x5555555673d5:     js      0x555555567450
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555567000, 0x1000, "rwx")
        mem.write(0x5555555673D5, "xy")
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x5555555673D5

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5555555673D5, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555673D6, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.RIP == 0x5555555673D7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_1_symbolic(self):
        """Instruction LEAVE_1
        Groups: mode64
        0x7ffff7b30c15:     leave
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B30000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7B30C15, "\xc9")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA98)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA99)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB3)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDAA0)
        cpu.RIP = 0x7FFFF7B30C15
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDAB0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B30C15, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA98, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA99, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA0, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA1, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA8, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA9, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAAA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAAB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAAC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAAD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB0, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB1, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAB8, 8) == ord("\xb3"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDAB8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B30C16)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDAC0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_2_symbolic(self):
        """Instruction LEAVE_2
        Groups: mode64
        0x4176f4:   leave
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00417000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAD8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAD9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCADA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCADB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCADC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCADD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCADE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCADF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAE9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAEA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAEB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAEE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAEF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCAF8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2B)
        mem[addr] = value
        mem.write(0x4176F4, "\xc9")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCAE0)
        cpu.RIP = 0x4176F4
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFCAF0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAD8, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAD9, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCADA, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCADB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCADC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCADD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCADE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCADF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE0, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE8, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAE9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAEA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAEB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAEC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAED, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAEE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAEF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF0, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF1, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x4176F4, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF8, 8) == ord("+"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCAF4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCAF8)
        condition = Operators.AND(condition, cpu.RIP == 0x4176F5)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDB20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_3_symbolic(self):
        """Instruction LEAVE_3
        Groups: mode64
        0x7ffff7b59b18:     leave
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B59000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA08)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA09)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA10)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7B59B18, "\xc9")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9D9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9DA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9DB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9DC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9DD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9DE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9DF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9D8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x27)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD9E0)
        cpu.RIP = 0x7FFFF7B59B18
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDA10)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA08, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA09, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0A, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA10, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA11, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA12, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA13, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA14, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA15, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA16, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA17, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B59B18, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9D9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9DA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9DB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9DC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9DD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9DE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9DF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9D8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA18, 8) == ord("'"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E8, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9E4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDA18)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B59B19)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDA40)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_4_symbolic(self):
        """Instruction LEAVE_4
        Groups: mode64
        0x7ffff7b59b18:     leave
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7B59000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB71)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDC)
        mem[addr] = value
        mem.write(0x7FFFF7B59B18, "\xc9")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB99)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB70)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB72)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB73)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB74)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB78)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDB70)
        cpu.RIP = 0x7FFFF7B59B18
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDBA0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B59B18, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB71, 8) == ord("\xdc"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB98, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB99, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA0, 8) == ord("\xf0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA1, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA8, 8) == ord(":"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB69, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB70, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB68, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB72, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB73, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB74, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB75, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB76, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB77, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB78, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDBA8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B59B19)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDBF0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_5_symbolic(self):
        """Instruction LEAVE_5
        Groups: mode64
        0x7ffff7ae0541:     leave
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AE0000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7AE0541, "\xc9")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD988)
        value = cs.new_bitvec(8)
        cs.add(value == 0x37)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD989)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD98A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD98B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD98C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD98D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD98E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD98F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD990)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD991)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD992)
        value = cs.new_bitvec(8)
        cs.add(value == 0xBA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD993)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD994)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD995)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD996)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD997)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD998)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF6)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9AD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9AE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9AF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9B8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF8)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD990)
        cpu.RIP = 0x7FFFF7AE0541
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD9B0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AE0541, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD988, 8) == ord("7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD989, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD98A, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD98B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD98C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD98D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD98E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD98F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD990, 8) == ord("\xa8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD991, 8) == ord("\n"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD992, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD993, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD994, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD995, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD996, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD997, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD998, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A8, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9A9, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9AA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9AB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9AC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9AD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9AE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9AF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B0, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B1, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9B8, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD9B8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AE0542)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDAE0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEAVE_6_symbolic(self):
        """Instruction LEAVE_6
        Groups: mode64
        0x7ffff7a626cd:     leave
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A62000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA6C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA6B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA68)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A626CD, "\xc9")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA6D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA6E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA6F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA60)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA61)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA62)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA63)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA64)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA65)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA66)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA67)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB29)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB31)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDC)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB32)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB33)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB34)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA70)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA69)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA6A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDA68)
        cpu.RIP = 0x7FFFF7A626CD
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDB30)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA6C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA6B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA68, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A626CD, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA6D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA6E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA6F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA60, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA61, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA62, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA63, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA64, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA65, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA66, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA67, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB28, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB29, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB30, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB31, 8) == ord("\xdc"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB32, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB33, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB34, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB35, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB36, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB37, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB38, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA70, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA69, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA6A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDB38)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A626CE)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDC30)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_1_symbolic(self):
        """Instruction LEA_1
        Groups:
        0x7ffff7de44f3:     lea     rsp, qword ptr [rbp - 0x28]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE44F3, "H\x8de\xd8")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD978)
        value = cs.new_bitvec(8)
        cs.add(value == 0xC8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD979)
        value = cs.new_bitvec(8)
        cs.add(value == 0xCD)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD97A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD97B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD97C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD97D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD97E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD97F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD8B0)
        cpu.RIP = 0x7FFFF7DE44F3
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD9A0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE44F3, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE44F4, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE44F5, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE44F6, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD978, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD979, 8) == ord("\xcd"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD97A, 8) == ord("\xa4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD97B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD97C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD97D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD97E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD97F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD978)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE44F7)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD9A0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_2_symbolic(self):
        """Instruction LEA_2
        Groups:
        0x7ffff7b58ee3:     lea     r8, qword ptr [r8 + rdx*4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A2F000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD5)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x29)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xCE)
        mem[addr] = value
        mem.write(0x7FFFF7B58EE3, "M\x8d\x04\x90")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A2FDE6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x92)
        mem[addr] = value
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7A2FA7C)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xD9)
        cpu.RIP = 0x7FFFF7B58EE3

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE3, 8) == ord("\xb2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE4, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE5, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE0, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE1, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE2, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE3, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE4, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE5, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58EE6, 8) == ord("\x90"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE7, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A2FDE6, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7A2FDE0)
        condition = Operators.AND(condition, cpu.RDX == 0xD9)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58EE7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_3_symbolic(self):
        """Instruction LEA_3
        Groups:
        0x7ffff7de3841:     lea     rsi, qword ptr [rbp - 0x3c]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3841, "H\x8du\xc4")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8C5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8C6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8C7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD8C4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0xBDD69F1B)
        cpu.RIP = 0x7FFFF7DE3841
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD900)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3841, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3842, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3843, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3844, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8C5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8C6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8C7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8C8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8CA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8CB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD8C4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFD8C4)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3845)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD900)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_4_symbolic(self):
        """Instruction LEA_4
        Groups:
        0x7ffff7b58f14:     lea     rdx, qword ptr [rbx + rdx*8]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A34000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F14, "H\x8d\x14\xd3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34270)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB5)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34271)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34272)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34273)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34274)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34275)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34276)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A34277)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4A1)
        cpu.RIP = 0x7FFFF7B58F14
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7FFFF7A31D68)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F14, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F15, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F16, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F17, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34270, 8) == ord("\xb5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34271, 8) == ord("*"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34272, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34273, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34274, 8) == ord("\x1a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34275, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34276, 8) == ord("\x0b"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A34277, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RDX == 0x7FFFF7A34270)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F18)
        condition = Operators.AND(condition, cpu.RBX == 0x7FFFF7A31D68)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_5_symbolic(self):
        """Instruction LEA_5
        Groups:
        0x7ffff7a652b7:     lea     rsi, qword ptr [rip + 0x36e35a]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DD3000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD3618)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD3619)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD361A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDD)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD361B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD361C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD361D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD361E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DD361F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A652B7, "H\x8d5Z\xe36\x00")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x555555554A00)
        cpu.RIP = 0x7FFFF7A652B7

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD3618, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD3619, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD361A, 8) == ord("\xdd"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD361B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD361C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD361D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD361E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DD361F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A652B7, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A652B8, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A652B9, 8) == ord("5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A652BA, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A652BB, 8) == ord("\xe3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A652BC, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A652BD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7DD3618)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A652BE)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_LEA_6_symbolic(self):
        """Instruction LEA_6
        Groups:
        0x7ffff7de4418:     lea     rdi, qword ptr [rbp - 0xa0]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD910)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD911)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD912)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD913)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD914)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD915)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD916)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD917)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE4418, "H\x8d\xbd`\xff\xff\xff")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x555555554548)
        cpu.RIP = 0x7FFFF7DE4418
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD9B0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD910, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD911, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD912, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD913, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD914, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD915, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD916, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD917, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4418, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4419, 8) == ord("\x8d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE441A, 8) == ord("\xbd"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE441B, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE441C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE441D, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE441E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFD910)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE441F)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD9B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_1_symbolic(self):
        """Instruction MOVABS_1
        Groups:
        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC5DF, "I\xb8\xa0\xf1\xff\x7f\x03\x00\x00\x00")
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x0)
        cpu.RIP = 0x7FFFF7DDC5DF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E0, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E1, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E2, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E4, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5DF, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.R8 == 0x37FFFF1A0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDC5E9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_2_symbolic(self):
        """Instruction MOVABS_2
        Groups:
        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC5DF, "I\xb8\xa0\xf1\xff\x7f\x03\x00\x00\x00")
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x0)
        cpu.RIP = 0x7FFFF7DDC5DF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E0, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E1, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E2, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E4, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5DF, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.R8 == 0x37FFFF1A0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDC5E9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_3_symbolic(self):
        """Instruction MOVABS_3
        Groups:
        0x7ffff7df1435:     movabs  rcx, -0x8000000000000000
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1435, "H\xb9\x00\x00\x00\x00\x00\x00\x00\x80")
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x31)
        cpu.RIP = 0x7FFFF7DF1435

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1435, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1436, 8) == ord("\xb9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1437, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1438, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1439, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF143A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF143B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF143C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF143D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF143E, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.RCX == 0x8000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF143F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_4_symbolic(self):
        """Instruction MOVABS_4
        Groups:
        0x45f853:   movabs  rdx, -0x3333333333333333
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045F000, 0x1000, "rwx")
        mem.write(0x45F853, "H\xba\xcd\xcc\xcc\xcc\xcc\xcc\xcc\xcc")
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x6BF710)
        cpu.RIP = 0x45F853

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45F853, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x45F854, 8) == ord("\xba"))
        condition = Operators.AND(condition, cpu.read_int(0x45F855, 8) == ord("\xcd"))
        condition = Operators.AND(condition, cpu.read_int(0x45F856, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.read_int(0x45F857, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.read_int(0x45F858, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.read_int(0x45F859, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.read_int(0x45F85A, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.read_int(0x45F85B, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.read_int(0x45F85C, 8) == ord("\xcc"))
        condition = Operators.AND(condition, cpu.RDX == 0xCCCCCCCCCCCCCCCD)
        condition = Operators.AND(condition, cpu.RIP == 0x45F85D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_5_symbolic(self):
        """Instruction MOVABS_5
        Groups:
        0x7ffff7df4630:     movabs  r8, -0x101010101010101
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4630, "I\xb8\xff\xfe\xfe\xfe\xfe\xfe\xfe\xfe")
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7FDD5A0)
        cpu.RIP = 0x7FFFF7DF4630

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4630, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4631, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4632, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4633, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4634, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4635, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4636, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4637, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4638, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4639, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.R8 == 0xFEFEFEFEFEFEFEFF)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF463A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVABS_6_symbolic(self):
        """Instruction MOVABS_6
        Groups:
        0x7ffff7ddc5df:     movabs  r8, 0x37ffff1a0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC5DF, "I\xb8\xa0\xf1\xff\x7f\x03\x00\x00\x00")
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x0)
        cpu.RIP = 0x7FFFF7DDC5DF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E0, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E1, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E2, 8) == ord("\xf1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E4, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E5, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5E8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC5DF, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.R8 == 0x37FFFF1A0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDC5E9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_1_symbolic(self):
        """Instruction MOVDQA_1
        Groups: sse2
        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0B0B, "f\x0fo\xe0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x616572635F706374746E6C63000A7325)
        cpu.RIP = 0x7FFFF7AC0B0B
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0xFF0000000000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0D, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0E, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x616572635F706374746E6C63000A7325)
        condition = Operators.AND(condition, cpu.XMM4 == 0x616572635F706374746E6C63000A7325)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0B0F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_2_symbolic(self):
        """Instruction MOVDQA_2
        Groups: sse2
        0x457d38:   movdqa  xmm0, xmm2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457D38, "f\x0fo\xc2")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x414D00323D524E54565F474458003267)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFF0000)
        cpu.RIP = 0x457D38

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457D38, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457D39, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457D3A, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x457D3B, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x414D00323D524E54565F474458003267)
        condition = Operators.AND(condition, cpu.XMM0 == 0x414D00323D524E54565F474458003267)
        condition = Operators.AND(condition, cpu.RIP == 0x457D3C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_3_symbolic(self):
        """Instruction MOVDQA_3
        Groups: sse2
        0x457aaf:   movdqa  xmm5, xmm3
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457AAF, "f\x0fo\xeb")
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x726F74756365784563696C6F626D7953)
        cpu.RIP = 0x457AAF
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457AB0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457AB1, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x457AB2, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x457AAF, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM3 == 0x726F74756365784563696C6F626D7953)
        condition = Operators.AND(condition, cpu.RIP == 0x457AB3)
        condition = Operators.AND(condition, cpu.XMM5 == 0x726F74756365784563696C6F626D7953)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_4_symbolic(self):
        """Instruction MOVDQA_4
        Groups: sse2
        0x457a08:   movdqa  xmm2, xmmword ptr [rdi + 0x30]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        mem.write(0x457A08, "f\x0foW0")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE070)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE071)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE072)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE073)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE074)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE075)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE076)
        value = cs.new_bitvec(8)
        cs.add(value == 0x52)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE077)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE078)
        value = cs.new_bitvec(8)
        cs.add(value == 0x32)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE079)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE07A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE07B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE07C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE07D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE07E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE07F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x54)
        mem[addr] = value
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x0)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFE040)
        cpu.RIP = 0x457A08

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457A08, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457A09, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457A0A, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x457A0B, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x457A0C, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE070, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE071, 8) == ord("G"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE072, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE073, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE074, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE075, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE076, 8) == ord("R"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE077, 8) == ord("="))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE078, 8) == ord("2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE079, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE07A, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE07B, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE07C, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE07D, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE07E, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE07F, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x5441504E414D00323D524E54565F4744)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFE040)
        condition = Operators.AND(condition, cpu.RIP == 0x457A0D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_5_symbolic(self):
        """Instruction MOVDQA_5
        Groups: sse2
        0x457b38:   movdqa  xmm0, xmm2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457B38, "f\x0fo\xc2")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x504E414D00323D524E54565F47445800)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x457B38

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457B38, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457B39, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457B3A, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x457B3B, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x504E414D00323D524E54565F47445800)
        condition = Operators.AND(condition, cpu.XMM0 == 0x504E414D00323D524E54565F47445800)
        condition = Operators.AND(condition, cpu.RIP == 0x457B3C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQA_6_symbolic(self):
        """Instruction MOVDQA_6
        Groups: sse2
        0x7ffff7ac0b0b:     movdqa  xmm4, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0B0B, "f\x0fo\xe0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xCD202730FA0892A58D0000007FFFFF00)
        cpu.RIP = 0x7FFFF7AC0B0B
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0xFFFFFF000000FF0000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0D, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B0E, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xCD202730FA0892A58D0000007FFFFF00)
        condition = Operators.AND(condition, cpu.XMM4 == 0xCD202730FA0892A58D0000007FFFFF00)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0B0F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_1_symbolic(self):
        """Instruction MOVDQU_1
        Groups: sse2
        0x6a74d4:   movdqu  xmm0, xmmword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006A7000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        mem.write(0x6A74D6, "o")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x6A74D7, "\x04")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x6A74D4, "\xf3\x0f")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x6A74D8, "$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x7FFF800000000000002100007FFF)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x6A74D4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6A74D4, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x6A74D5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x6A74D6, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x6A74D7, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x6A74D8, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x7FFF800000010000002100007FFF)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x6A74D9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_2_symbolic(self):
        """Instruction MOVDQU_2
        Groups: sse2
        0x568fac:   movdqu  xmm0, xmmword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00568000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x568FAC, "\xf3\x0fo\x04$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x1234567800007FFF00007FFF12345678)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x568FAC

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x568FAC, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x568FAD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x568FAE, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x568FAF, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x568FB0, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x123456780000800100007FFF12345678)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x568FB1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_3_symbolic(self):
        """Instruction MOVDQU_3
        Groups: sse2
        0x6f4c12:   movdqu  xmm1, xmmword ptr [rsp + 4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006F4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x6F4C12, "\xf3\x0foL$\x04")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x7FFF000000210000002100007FFF)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x6F4C12

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6F4C12, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x6F4C13, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x6F4C14, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x6F4C15, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x6F4C16, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x6F4C17, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x7FFF000000210000002000007FFF)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x6F4C18)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_4_symbolic(self):
        """Instruction MOVDQU_4
        Groups: sse2
        0x56fa50:   movdqu  xmm1, xmmword ptr [rsp + 4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0056F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x87)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x56FA50, "\xf3\x0foL$\x04")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x20876543218765432100000020)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x56FA50

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC0, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x56FA50, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x56FA51, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x56FA52, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x56FA53, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x56FA54, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x56FA55, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x20876543210000002100000020)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x56FA56)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_5_symbolic(self):
        """Instruction MOVDQU_5
        Groups: sse2
        0x606649:   movdqu  xmm1, xmmword ptr [rsp + 4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00606000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCC3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x606649, "\xf3\x0foL$\x04")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0xFFFFFFFF0000800100007FFFFFFFFFFF)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x606649

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCC3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x606649, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x60664A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x60664B, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x60664C, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x60664D, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x60664E, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.XMM1 == 0xFFFFFFFF0000800100008001FFFFFFFF)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x60664F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVDQU_6_symbolic(self):
        """Instruction MOVDQU_6
        Groups: sse2
        0x6fc91e:   movdqu  xmm0, xmmword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006FC000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x6FC91E, "\xf3\x0fo\x04$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x40800000008000000100000040)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x6FC91E

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x6FC920, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x6FC921, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x6FC922, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x6FC91E, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x6FC91F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x40800000018000000100000040)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x6FC923)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_1_symbolic(self):
        """Instruction MOVD_1
        Groups: sse2
        0x7ffff7df4370:     movd    xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4370, "f\x0fn\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x24242424242424242424242424242424)
        cpu.RIP = 0x7FFFF7DF4370
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x2F)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4370, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4371, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4372, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4373, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F)
        condition = Operators.AND(condition, cpu.ESI == 0x2F)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4374)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_2_symbolic(self):
        """Instruction MOVD_2
        Groups: sse2
        0x7ffff7ab7980:     movd    xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB7980, "f\x0fn\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x24242424242424242424242424242424)
        cpu.RIP = 0x7FFFF7AB7980
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x2F)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7980, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7981, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7982, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7983, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F)
        condition = Operators.AND(condition, cpu.ESI == 0x2F)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB7984)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_3_symbolic(self):
        """Instruction MOVD_3
        Groups: sse2
        0x4578e0:   movd    xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x4578E0, "f\x0fn\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x4578E0
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x2F)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4578E0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4578E1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4578E2, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x4578E3, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F)
        condition = Operators.AND(condition, cpu.ESI == 0x2F)
        condition = Operators.AND(condition, cpu.RIP == 0x4578E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_4_symbolic(self):
        """Instruction MOVD_4
        Groups: sse2
        0x421b10:   movd    xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00421000, 0x1000, "rwx")
        mem.write(0x421B10, "f\x0fn\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x25252525252525252525252525252525)
        cpu.RIP = 0x421B10
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x25)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x421B10, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x421B11, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x421B12, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x421B13, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x25)
        condition = Operators.AND(condition, cpu.ESI == 0x25)
        condition = Operators.AND(condition, cpu.RIP == 0x421B14)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_5_symbolic(self):
        """Instruction MOVD_5
        Groups: sse2
        0x457da0:   movd    xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DA0, "f\x0fn\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x457DA0
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x2F)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457DA0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457DA1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457DA2, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x457DA3, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F)
        condition = Operators.AND(condition, cpu.ESI == 0x2F)
        condition = Operators.AND(condition, cpu.RIP == 0x457DA4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVD_6_symbolic(self):
        """Instruction MOVD_6
        Groups: sse2
        0x7ffff7ac0ae0:     movd    xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AE0, "f\x0fn\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x25252525252525252525252525252525)
        cpu.RIP = 0x7FFFF7AC0AE0
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x25)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AE0, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AE1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AE2, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AE3, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x25)
        condition = Operators.AND(condition, cpu.ESI == 0x25)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0AE4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_1_symbolic(self):
        """Instruction MOVLPD_1
        Groups: sse2
        0x50f61f:   movlpd  xmm1, qword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0050F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x50F61F, "f\x0f\x12\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x80000000400000008000000040)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x50F61F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x50F61F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x50F620, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x50F621, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0x50F622, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x50F623, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x80000000400000008000000040)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x50F624)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_2_symbolic(self):
        """Instruction MOVLPD_2
        Groups: sse2
        0x4aa891:   movlpd  qword ptr [rsp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004AA000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4AA891, "f\x0f\x13\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x87)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x87654321800000000000004087654321)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x4AA891

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4AA891, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4AA892, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4AA893, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x4AA894, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x4AA895, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x87654321800000000000004087654321)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x4AA896)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_3_symbolic(self):
        """Instruction MOVLPD_3
        Groups: sse2
        0x4adf87:   movlpd  qword ptr [rsp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004AD000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4ADF87, "f\x0f\x13\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0xFFFFFFFE8000000180000001FFFFFFFE)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x4ADF87

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4ADF87, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4ADF88, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4ADF89, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x4ADF8A, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x4ADF8B, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.XMM1 == 0xFFFFFFFE8000000180000001FFFFFFFE)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x4ADF8C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_4_symbolic(self):
        """Instruction MOVLPD_4
        Groups: sse2
        0x4acf88:   movlpd  qword ptr [rsp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004AC000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4ACF88, "f\x0f\x13\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x7FFF800000018000000100007FFF)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x4ACF88

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4ACF88, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4ACF89, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4ACF8A, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x4ACF8B, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x4ACF8C, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x7FFF800000018000000100007FFF)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x4ACF8D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_5_symbolic(self):
        """Instruction MOVLPD_5
        Groups: sse2
        0x50a2c7:   movlpd  xmm1, qword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0050A000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x50A2C7, "f\x0f\x12\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x21000000200000004000000021)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x50A2C7

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x50A2C7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x50A2C8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x50A2C9, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0x50A2CA, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x50A2CB, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x21000000200000002100000020)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x50A2CC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVLPD_6_symbolic(self):
        """Instruction MOVLPD_6
        Groups: sse2
        0x4d851b:   movlpd  qword ptr [rsp], xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004D8000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4D851B, "f\x0f\x13\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x7FFF0000008000007FFF00007FFF)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x4D851B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4D851B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4D851C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4D851D, 8) == ord("\x13"))
        condition = Operators.AND(condition, cpu.read_int(0x4D851E, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x4D851F, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x7FFF0000008000007FFF00007FFF)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x4D8520)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_1_symbolic(self):
        """Instruction MOVSD_1
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555556E3C, "\xa5")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E638)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E639)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555556E3B, "\xf3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDBA0)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x12)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x55555576E638)
        cpu.RIP = 0x555555556E3B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E638, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E639, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3C, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x11)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDBA4)
        condition = Operators.AND(condition, cpu.RSI == 0x55555576E63C)
        condition = Operators.AND(condition, cpu.RIP == 0x555555556E3B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_2_symbolic(self):
        """Instruction MOVSD_2
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E620)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E621)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E622)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E623)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB84)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB85)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB86)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB87)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E61C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555556E3B, "\xf3\xa5")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E61D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E61E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E61F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDB84)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x19)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x55555576E61C)
        cpu.RIP = 0x555555556E3B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x55555576E620, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E621, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E622, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E623, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB84, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB85, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB86, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB87, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3C, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E61C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E61D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E61E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E61F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x18)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDB88)
        condition = Operators.AND(condition, cpu.RSI == 0x55555576E620)
        condition = Operators.AND(condition, cpu.RIP == 0x555555556E3B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_3_symbolic(self):
        """Instruction MOVSD_3
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555556E3B, "\xf3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E64C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E64D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E64E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E64F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E650)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E651)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E652)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E653)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555556E3C, "\xa5")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDBB4)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xD)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x55555576E64C)
        cpu.RIP = 0x555555556E3B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E64C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E64D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E64E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E64F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E650, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E651, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E652, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E653, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBB4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBB8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3C, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.RCX == 0xC)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDBB8)
        condition = Operators.AND(condition, cpu.RSI == 0x55555576E650)
        condition = Operators.AND(condition, cpu.RIP == 0x555555556E3B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_4_symbolic(self):
        """Instruction MOVSD_4
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E640)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E641)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E642)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E643)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E644)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E645)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E646)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E647)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555556E3B, "\xf3\xa5")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDBA8)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x10)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x55555576E640)
        cpu.RIP = 0x555555556E3B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x55555576E640, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E641, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E642, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E643, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E644, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E645, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E646, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E647, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBAB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBAC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBAD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3C, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.RCX == 0xF)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDBAC)
        condition = Operators.AND(condition, cpu.RSI == 0x55555576E644)
        condition = Operators.AND(condition, cpu.RIP == 0x555555556E3B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_5_symbolic(self):
        """Instruction MOVSD_5
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDBA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555556E3B, "\xf3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E634)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E635)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E636)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E637)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E638)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E639)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E63B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555556E3C, "\xa5")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB9F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDB9C)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x13)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x55555576E634)
        cpu.RIP = 0x555555556E3B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA0, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA1, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDBA3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3C, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E634, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E635, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E636, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E637, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E638, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E639, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E63A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB9F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x12)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDBA0)
        condition = Operators.AND(condition, cpu.RSI == 0x55555576E638)
        condition = Operators.AND(condition, cpu.RIP == 0x555555556E3B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSD_6_symbolic(self):
        """Instruction MOVSD_6
        Groups:
        0x555555556e3b:     rep movsd       dword ptr [rdi], dword ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555556000, 0x1000, "rwx")
        mem.mmap(0x55555576E000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E604)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E605)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E606)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E607)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E608)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E609)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E60A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555576E60B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB6F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB70)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB71)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB72)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB73)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x555555556E3B, "\xf3\xa5")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDB6C)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x1F)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x55555576E604)
        cpu.RIP = 0x555555556E3B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x55555576E604, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E605, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E606, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E607, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E608, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E609, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E60A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555576E60B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB6F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB70, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB71, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB72, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB73, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x555555556E3C, 8) == ord("\xa5"))
        condition = Operators.AND(condition, cpu.RCX == 0x1E)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDB70)
        condition = Operators.AND(condition, cpu.RSI == 0x55555576E608)
        condition = Operators.AND(condition, cpu.RIP == 0x555555556E3B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_1_symbolic(self):
        """Instruction MOVSXD_1
        Groups:
        0x466083:   movsxd  rdi, edi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00466000, 0x1000, "rwx")
        mem.write(0x466083, "Hc\xff")
        cpu.EDI = cs.new_bitvec(32)
        cs.add(cpu.EDI == 0x41)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x41)
        cpu.RIP = 0x466083

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x466083, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x466084, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x466085, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.EDI == 0x41)
        condition = Operators.AND(condition, cpu.RDI == 0x41)
        condition = Operators.AND(condition, cpu.RIP == 0x466086)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_2_symbolic(self):
        """Instruction MOVSXD_2
        Groups:
        0x7ffff7ddf068:     movsxd  rdx, dword ptr [r8 + rbx*4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDF000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDF068, "Ic\x14\x98")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF5F1C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x8F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF5F1D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x91)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF5F1E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF5F1F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7DF5F1C)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x2)
        cpu.RIP = 0x7FFFF7DDF068
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDF068, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDF069, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDF06A, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDF06B, 8) == ord("\x98"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF5F1C, 8) == ord("\x8f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF5F1D, 8) == ord("\x91"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF5F1E, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF5F1F, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7DF5F1C)
        condition = Operators.AND(condition, cpu.RDX == 0xFFFFFFFFFFFE918F)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDF06C)
        condition = Operators.AND(condition, cpu.RBX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_3_symbolic(self):
        """Instruction MOVSXD_3
        Groups:
        0x436902:   movsxd  rax, dword ptr [rdx + rax*4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494CF0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494CF1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1C)
        mem[addr] = value
        mem.write(0x436902, "Hc\x04\x82")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494CF3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494CF2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFA)
        mem[addr] = value
        cpu.RIP = 0x436902
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1C)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494C80)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494CF0, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0x494CF1, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.read_int(0x436902, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x436903, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x436904, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x436905, 8) == ord("\x82"))
        condition = Operators.AND(condition, cpu.read_int(0x494CF3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x494CF2, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.RAX == 0xFFFFFFFFFFFA1CA0)
        condition = Operators.AND(condition, cpu.RIP == 0x436906)
        condition = Operators.AND(condition, cpu.RDX == 0x494C80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_4_symbolic(self):
        """Instruction MOVSXD_4
        Groups:
        0x7ffff7df214a:     movsxd  rax, dword ptr [rcx + rax*4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF6000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF674F)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF674C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        mem.write(0x7FFFF7DF214A, "Hc\x04\x81")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF674E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF674D)
        value = cs.new_bitvec(8)
        cs.add(value == 0xBB)
        mem[addr] = value
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7FFFF7DF6740)
        cpu.RIP = 0x7FFFF7DF214A
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF674F, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF214C, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF214A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF214B, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF674C, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF214D, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF674E, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF674D, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.RCX == 0x7FFFF7DF6740)
        condition = Operators.AND(condition, cpu.RAX == 0xFFFFFFFFFFFFBB30)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF214E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_5_symbolic(self):
        """Instruction MOVSXD_5
        Groups:
        0x436b12:   movsxd  rax, dword ptr [rdx + rax*4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494EA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x10)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494EA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494EA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494EA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x436B12, "Hc\x04\x82")
        cpu.RIP = 0x436B12
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x494E80)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494EA0, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x494EA1, 8) == ord("\x1d"))
        condition = Operators.AND(condition, cpu.read_int(0x494EA2, 8) == ord("\xfa"))
        condition = Operators.AND(condition, cpu.read_int(0x494EA3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x436B14, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x436B15, 8) == ord("\x82"))
        condition = Operators.AND(condition, cpu.read_int(0x436B13, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x436B12, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RAX == 0xFFFFFFFFFFFA1D10)
        condition = Operators.AND(condition, cpu.RIP == 0x436B16)
        condition = Operators.AND(condition, cpu.RDX == 0x494E80)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSXD_6_symbolic(self):
        """Instruction MOVSXD_6
        Groups:
        0x7ffff7de62e7:     movsxd  rdx, dword ptr [rax + r12*4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF6000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF6458)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF6459)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x7FFFF7DE62E7, "Jc\x14\xa0")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF645B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7DF645A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        cpu.RIP = 0x7FFFF7DE62E7
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x6)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7FFFF7A32FE0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFF7DF6440)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF6458, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF6459, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE62E7, 8) == ord("J"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE62E8, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE62E9, 8) == ord("\x14"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE62EA, 8) == ord("\xa0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF645B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF645A, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFF7DF6440)
        condition = Operators.AND(condition, cpu.R12 == 0x6)
        condition = Operators.AND(condition, cpu.RDX == 0xFFFFFFFFFFFEFF78)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE62EB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_1_symbolic(self):
        """Instruction MOVSX_1
        Groups:
        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1273, "\x0f\xbe\x17")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555554435)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2E)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x63)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x555555554435)
        cpu.RIP = 0x7FFFF7DF1273

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1273, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1274, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1275, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x555555554435, 8) == ord("."))
        condition = Operators.AND(condition, cpu.EDX == 0x2E)
        condition = Operators.AND(condition, cpu.RDI == 0x555555554435)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1276)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_2_symbolic(self):
        """Instruction MOVSX_2
        Groups:
        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1273, "\x0f\xbe\x17")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x55555555444D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2E)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x63)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x55555555444D)
        cpu.RIP = 0x7FFFF7DF1273

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1273, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1274, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1275, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.read_int(0x55555555444D, 8) == ord("."))
        condition = Operators.AND(condition, cpu.EDX == 0x2E)
        condition = Operators.AND(condition, cpu.RDI == 0x55555555444D)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1276)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_3_symbolic(self):
        """Instruction MOVSX_3
        Groups:
        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1260, "\x0f\xbe\x06")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FF23B6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x3C)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FF23B6)
        cpu.RIP = 0x7FFFF7DF1260

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1260, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1261, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1262, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FF23B6, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.EAX == 0x6C)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FF23B6)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1263)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_4_symbolic(self):
        """Instruction MOVSX_4
        Groups:
        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FED000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1260, "\x0f\xbe\x06")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FEDE8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x39)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FEDE8E)
        cpu.RIP = 0x7FFFF7DF1260

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1260, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1261, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1262, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FEDE8E, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.EAX == 0x69)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FEDE8E)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1263)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_5_symbolic(self):
        """Instruction MOVSX_5
        Groups:
        0x7ffff7df1260:     movsx   eax, byte ptr [rsi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FED000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1260, "\x0f\xbe\x06")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FEDE8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x32)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FEDE8F)
        cpu.RIP = 0x7FFFF7DF1260

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1260, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1261, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1262, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FEDE8F, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.EAX == 0x62)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FEDE8F)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1263)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVSX_6_symbolic(self):
        """Instruction MOVSX_6
        Groups:
        0x7ffff7df1273:     movsx   edx, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF1273, "\x0f\xbe")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555554434)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        mem.write(0x7FFFF7DF1275, "\x17")
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x62)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x555555554434)
        cpu.RIP = 0x7FFFF7DF1273

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555554434, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1273, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1274, 8) == ord("\xbe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF1275, 8) == ord("\x17"))
        condition = Operators.AND(condition, cpu.EDX == 0x63)
        condition = Operators.AND(condition, cpu.RDI == 0x555555554434)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF1276)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_1_symbolic(self):
        """Instruction MOVZX_1
        Groups:
        0x7ffff7de3aa3:     movzx   edx, byte ptr [rcx + 4]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A32000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3AA3, "\x0f\xb6")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A324BC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x11)
        mem[addr] = value
        mem.write(0x7FFFF7DE3AA5, "Q\x04")
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x6)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7FFFF7A324B8)
        cpu.RIP = 0x7FFFF7DE3AA3

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A324BC, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3AA3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3AA4, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3AA5, 8) == ord("Q"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3AA6, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.EDX == 0x11)
        condition = Operators.AND(condition, cpu.RCX == 0x7FFFF7A324B8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3AA7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_2_symbolic(self):
        """Instruction MOVZX_2
        Groups:
        0x7ffff7de4399:     movzx   edx, byte ptr [rcx]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4399, "\x0f\xb6\x11")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555554E44)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x6C)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x555555554E44)
        cpu.RIP = 0x7FFFF7DE4399

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4399, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE439A, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE439B, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x555555554E44, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.EDX == 0x5F)
        condition = Operators.AND(condition, cpu.RCX == 0x555555554E44)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE439C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_3_symbolic(self):
        """Instruction MOVZX_3
        Groups:
        0x400aaa:   movzx   eax, al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x400AAA, "\x0f\xb6\xc0")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x79)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x79)
        cpu.RIP = 0x400AAA

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400AAA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x400AAB, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0x400AAC, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.EAX == 0x79)
        condition = Operators.AND(condition, cpu.AL == 0x79)
        condition = Operators.AND(condition, cpu.RIP == 0x400AAD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_4_symbolic(self):
        """Instruction MOVZX_4
        Groups:
        0x7ffff7b58f18:     movzx   r10d, word ptr [rdx + 6]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A35000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F18, "D\x0f\xb7R\x06")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A3575E)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A3575F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7FFFF7A35758)
        cpu.RIP = 0x7FFFF7B58F18
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 0x24)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F18, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F19, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F1A, 8) == ord("\xb7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F1B, 8) == ord("R"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F1C, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A3575E, 8) == ord("\x0b"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A3575F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RDX == 0x7FFFF7A35758)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F1D)
        condition = Operators.AND(condition, cpu.R10D == 0xB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_5_symbolic(self):
        """Instruction MOVZX_5
        Groups:
        0x7ffff7de6219:     movzx   r9d, r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6219, "E\x0f\xb6\xc9")
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0xFFFFFF00)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x0)
        cpu.RIP = 0x7FFFF7DE6219

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6219, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE621A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE621B, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE621C, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.R9D == 0x0)
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE621D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOVZX_6_symbolic(self):
        """Instruction MOVZX_6
        Groups:
        0x7ffff7de3929:     movzx   ecx, byte ptr [rbp - 0x78]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD808)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        mem.write(0x7FFFF7DE3929, "\x0f\xb6M\x88")
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x2917737)
        cpu.RIP = 0x7FFFF7DE3929
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD880)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD808, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3929, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE392A, 8) == ord("\xb6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE392B, 8) == ord("M"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE392C, 8) == ord("\x88"))
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD880)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE392D)
        condition = Operators.AND(condition, cpu.ECX == 0x38)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_1_symbolic(self):
        """Instruction MOV_1
        Groups:
        0x737287:   mov     ebx, 0x40
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00737000, 0x1000, "rwx")
        mem.write(0x737287, "\xbb@\x00\x00\x00")
        cpu.EBX = cs.new_bitvec(32)
        cs.add(cpu.EBX == 0x40)
        cpu.RIP = 0x737287

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x737288, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x737289, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x73728A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x73728B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x737287, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.EBX == 0x40)
        condition = Operators.AND(condition, cpu.RIP == 0x73728C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_2_symbolic(self):
        """Instruction MOV_2
        Groups:
        0x7ffff7de6121:     mov     rax, r13
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6121, "L\x89\xe8")
        cpu.RIP = 0x7FFFF7DE6121
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x7FFFF7A2E000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6121, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6122, 8) == ord("\x89"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6123, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFF7A2E000)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6124)
        condition = Operators.AND(condition, cpu.R13 == 0x7FFFF7A2E000)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_3_symbolic(self):
        """Instruction MOV_3
        Groups:
        0x74dced:   mov     dword ptr [rsp], 0x7fff
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0074D000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x74DCED, "\xc7")
        mem.write(0x74DCF0, "\xff\x7f")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x74DCEE, "\x04$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        mem.write(0x74DCF2, "\x00")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x74DCF3, "\x00")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x74DCED

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x74DCED, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x74DCEE, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x74DCEF, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x74DCF0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x74DCF1, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x74DCF2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x74DCF3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x74DCF4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_4_symbolic(self):
        """Instruction MOV_4
        Groups:
        0x4b00dc:   mov     dword ptr [rsp + 4], 0x80
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004B0000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4B00DC, "\xc7D$\x04\x80\x00\x00\x00")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x4B00DC

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4B00DC, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x4B00DD, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x4B00DE, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x4B00DF, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x4B00E0, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x4B00E1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4B00E2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4B00E3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x4B00E4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_5_symbolic(self):
        """Instruction MOV_5
        Groups:
        0x7776d9:   mov     dword ptr [rsp + 8], 0x80000000
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00777000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7776D9, "\xc7D$\x08\x00\x00\x00\x80")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x7776D9

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7776D9, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x7776DA, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x7776DB, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7776DC, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0x7776DD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7776DE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7776DF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7776E0, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x7776E1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MOV_6_symbolic(self):
        """Instruction MOV_6
        Groups:
        0x4c3b88:   mov     dword ptr [rsp + 0xc], 0x12345678
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x004C3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x4C3B88, "\xc7D$\x0cxV4\x12")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x56)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x12)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x4C3B88

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4C3B88, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x4C3B89, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x4C3B8A, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x4C3B8B, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x4C3B8C, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x4C3B8D, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0x4C3B8E, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x4C3B8F, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("V"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x12"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x4C3B90)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_1_symbolic(self):
        """Instruction MUL_1
        Groups:
        0x7ffff7de253f:     mul     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE253F, "H\xf7\xe2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x7FFFF7DE253F
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x5F)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xCCCCCCCCCCCCCCCD)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE2540, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE2541, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE253F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x13)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE2542)
        condition = Operators.AND(condition, cpu.RDX == 0x4C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_2_symbolic(self):
        """Instruction MUL_2
        Groups:
        0x7ffff7de253f:     mul     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE253F, "H\xf7\xe2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x7FFFF7DE253F
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x5F)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xCCCCCCCCCCCCCCCD)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE2540, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE2541, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE253F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x13)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE2542)
        condition = Operators.AND(condition, cpu.RDX == 0x4C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_3_symbolic(self):
        """Instruction MUL_3
        Groups:
        0x7ffff7de253f:     mul     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE253F, "H\xf7\xe2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x7FFFF7DE253F
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x5F)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xCCCCCCCCCCCCCCCD)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE2540, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE2541, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE253F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x13)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE2542)
        condition = Operators.AND(condition, cpu.RDX == 0x4C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_4_symbolic(self):
        """Instruction MUL_4
        Groups:
        0x45f865:   mul     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045F000, 0x1000, "rwx")
        mem.write(0x45F865, "H\xf7\xe2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x45F865
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x57)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xCCCCCCCCCCCCCCCD)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45F865, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x45F866, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x45F867, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x99999999999999AB)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x45F868)
        condition = Operators.AND(condition, cpu.RDX == 0x45)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_5_symbolic(self):
        """Instruction MUL_5
        Groups:
        0x4624e5:   mul     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, "rwx")
        mem.write(0x4624E5, "H\xf7\xe2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4624E5
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x57)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xCCCCCCCCCCCCCCCD)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4624E5, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x4624E6, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x4624E7, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RAX == 0x99999999999999AB)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4624E8)
        condition = Operators.AND(condition, cpu.RDX == 0x45)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_MUL_6_symbolic(self):
        """Instruction MUL_6
        Groups:
        0x443dc7:   mul     r9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00443000, 0x1000, "rwx")
        mem.write(0x443DC7, "I\xf7\xe1")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.R9 = cs.new_bitvec(64)
        cs.add(cpu.R9 == 0xCCCCCCCCCCCCCCCD)
        cpu.RIP = 0x443DC7
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0xA)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x3)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x443DC8, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x443DC9, 8) == ord("\xe1"))
        condition = Operators.AND(condition, cpu.read_int(0x443DC7, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.RDX == 0x2)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x443DCA)
        condition = Operators.AND(condition, cpu.R9 == 0xCCCCCCCCCCCCCCCD)
        condition = Operators.AND(condition, cpu.RAX == 0x6666666666666667)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_1_symbolic(self):
        """Instruction NEG_1
        Groups:
        0x7ffff7df27cf:     neg     rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF27CF, "H\xf7\xd8")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFF7FFEB78)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7DF27CF
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27D0, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27D1, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27CF, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0xFFFF800008001488)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF27D2)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_2_symbolic(self):
        """Instruction NEG_2
        Groups:
        0x7ffff7de5c54:     neg     rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5C54, "H\xf7\xd8")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1000)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE5C54
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5C54, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5C55, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5C56, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RAX == 0xFFFFFFFFFFFFF000)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE5C57)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_3_symbolic(self):
        """Instruction NEG_3
        Groups:
        0x40baad:   neg     eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040B000, 0x1000, "rwx")
        mem.write(0x40BAAD, "\xf7\xd8")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40BAAD
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40BAAD, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x40BAAE, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40BAAF)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_4_symbolic(self):
        """Instruction NEG_4
        Groups:
        0x7ffff7df27b6:     neg     rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF27B6, "H\xf7\xdf")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF27B6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27B8, 8) == ord("\xdf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27B6, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27B7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0xFFFFFFFFFFFFFFF8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF27B9)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_5_symbolic(self):
        """Instruction NEG_5
        Groups:
        0x411176:   neg     r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.write(0x411176, "I\xf7\xda")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0x1000)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x411176
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x411178, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x411176, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x411177, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R10 == 0xFFFFFFFFFFFFF000)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x411179)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NEG_6_symbolic(self):
        """Instruction NEG_6
        Groups:
        0x7ffff7df27b6:     neg     rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF2000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF27B6, "H\xf7\xdf")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF27B6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27B8, 8) == ord("\xdf"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27B6, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF27B7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RDI == 0xFFFFFFFFFFFFFFF8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF27B9)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_1_symbolic(self):
        """Instruction NOT_1
        Groups:
        0x7ffff7df144a:     not     rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF1000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF144A, "H\xf7\xd0")
        cpu.RIP = 0x7FFFF7DF144A
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8000000000000000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF144A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF144B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF144C, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.RAX == 0x7FFFFFFFFFFFFFFF)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF144D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_2_symbolic(self):
        """Instruction NOT_2
        Groups:
        0x4008f7:   not     esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, "rwx")
        mem.write(0x4008F7, "\xf7\xd6")
        cpu.RIP = 0x4008F7
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0xFFFFFFF0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008F8, 8) == ord("\xd6"))
        condition = Operators.AND(condition, cpu.read_int(0x4008F7, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.ESI == 0xF)
        condition = Operators.AND(condition, cpu.RIP == 0x4008F9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_3_symbolic(self):
        """Instruction NOT_3
        Groups:
        0x7ffff7a78242:     not     rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78242, "H\xf7\xd0")
        cpu.RIP = 0x7FFFF7A78242
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xFFFFFFFFFFFFFFFC)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78242, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78243, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78244, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.RAX == 0x3)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A78245)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_4_symbolic(self):
        """Instruction NOT_4
        Groups:
        0x7ffff7de5765:     not     r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5765, "I\xf7\xd2")
        cpu.RIP = 0x7FFFF7DE5765
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0xFFFFFFFFFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5765, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5766, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5767, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.R10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE5768)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_5_symbolic(self):
        """Instruction NOT_5
        Groups:
        0x7ffff7de5765:     not     r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5765, "I\xf7\xd2")
        cpu.RIP = 0x7FFFF7DE5765
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0xFFFFFFFFFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5765, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5766, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5767, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.R10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE5768)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_NOT_6_symbolic(self):
        """Instruction NOT_6
        Groups:
        0x7ffff7de5765:     not     r10
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5765, "I\xf7\xd2")
        cpu.RIP = 0x7FFFF7DE5765
        cpu.R10 = cs.new_bitvec(64)
        cs.add(cpu.R10 == 0xFFFFFFFFFFFFFFFF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5765, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5766, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5767, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.R10 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE5768)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_1_symbolic(self):
        """Instruction OR_1
        Groups:
        0x7ffff7de6235:     or      r9d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6235, "A\t\xc1")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6235
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6235, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6236, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6237, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.R9D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6238)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_2_symbolic(self):
        """Instruction OR_2
        Groups:
        0x7ffff7de4344:     or      qword ptr [rsp], 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4344, "H\x83\x0c$\x00")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC920)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC921)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC922)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC923)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC924)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC925)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC926)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC927)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4344
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFC920)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4344, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4345, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4346, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4347, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4348, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC920, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC921, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC922, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC923, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC924, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC925, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC926, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC927, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4349)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFC920)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_3_symbolic(self):
        """Instruction OR_3
        Groups:
        0x7ffff7de3814:     or      qword ptr [rsp], 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3816, "\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC790)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC791)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC792)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC793)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE3814, "H\x83")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC796)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC797)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE3818, "\x00")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC794)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC795)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3814
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFC790)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC796, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC797, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC790, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC791, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC792, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC793, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3814, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3815, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3816, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3817, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3818, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC794, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC795, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3819)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFC790)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_4_symbolic(self):
        """Instruction OR_4
        Groups:
        0x7ffff7de3814:     or      qword ptr [rsp], 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3816, "\x0c$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC790)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC791)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC792)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC793)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE3814, "H\x83")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC796)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC797)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE3818, "\x00")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC794)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC795)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3814
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFC790)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC796, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC797, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC790, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC791, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC792, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC793, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3814, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3815, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3816, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3817, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3818, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC794, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC795, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3819)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFC790)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_5_symbolic(self):
        """Instruction OR_5
        Groups:
        0x40a38c:   or      qword ptr [rsp], 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040A000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB01)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCB07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        mem.write(0x40A38C, "H\x83\x0c$\x00")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40A38C
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCB00)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB00, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB01, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB02, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB03, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB04, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB05, 8) == ord("/"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB06, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCB07, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x40A38C, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x40A38D, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x40A38E, 8) == ord("\x0c"))
        condition = Operators.AND(condition, cpu.read_int(0x40A38F, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x40A390, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40A391)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCB00)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_OR_6_symbolic(self):
        """Instruction OR_6
        Groups:
        0x7ffff7de6212:     or      r9d, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6212, "A\t\xc1")
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFF00)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7DE6212
        cpu.R9D = cs.new_bitvec(32)
        cs.add(cpu.R9D == 0xF7FF7600)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6212, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6213, 8) == ord("\t"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6214, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.EAX == 0xFFFFFF00)
        condition = Operators.AND(condition, cpu.R9D == 0xFFFFFF00)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6215)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_1_symbolic(self):
        """Instruction PCMPEQB_1
        Groups: sse2
        0x457e12:   pcmpeqb xmm5, xmm2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457E12, "f\x0ft\xea")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x0)
        cpu.RIP = 0x457E12
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x2F65726F6369746E614D2F737463656A)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457E12, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457E13, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457E14, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x457E15, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x457E16)
        condition = Operators.AND(condition, cpu.XMM5 == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_2_symbolic(self):
        """Instruction PCMPEQB_2
        Groups: sse2
        0x4184bf:   pcmpeqb xmm12, xmm8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184BF, "fE\x0ft\xe0")
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x6E696874796E61206F642074276E6F44)
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x4184BF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4184C0, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C2, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C3, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x4184BF, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM12 == 0x0)
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4184C4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_3_symbolic(self):
        """Instruction PCMPEQB_3
        Groups: sse2
        0x457a26:   pcmpeqb xmm0, xmm7
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457A26, "f\x0ft\xc7")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x5400324E2F2F00313D524E00455F4744)
        cpu.XMM7 = cs.new_bitvec(128)
        cs.add(cpu.XMM7 == 0x0)
        cpu.RIP = 0x457A26

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457A28, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x457A29, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x457A26, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457A27, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFF00000000FF00000000FF00000000)
        condition = Operators.AND(condition, cpu.XMM7 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x457A2A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_4_symbolic(self):
        """Instruction PCMPEQB_4
        Groups: sse2
        0x4579e8:   pcmpeqb xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x4579E8, "f\x0ft\xc1")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x2F78756E696C2F73656C706D6178652F)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F)
        cpu.RIP = 0x4579E8

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4579E8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4579E9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4579EA, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x4579EB, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFF0000000000FF0000000000000000FF)
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x4579EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_5_symbolic(self):
        """Instruction PCMPEQB_5
        Groups: sse2
        0x7ffff7ab7ac6:     pcmpeqb xmm0, xmm7
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB7AC6, "f\x0ft\xc7")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x322F2F4D00313D522F00565F474458)
        cpu.XMM7 = cs.new_bitvec(128)
        cs.add(cpu.XMM7 == 0x0)
        cpu.RIP = 0x7FFFF7AB7AC6

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7AC8, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7AC9, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7AC6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7AC7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFF00000000FF00000000FF0000000000)
        condition = Operators.AND(condition, cpu.XMM7 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB7ACA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PCMPEQB_6_symbolic(self):
        """Instruction PCMPEQB_6
        Groups: sse2
        0x7ffff7ab79b1:     pcmpeqb xmm0, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB79B1, "f\x0ft\xc1")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x6F72502F6570696C65662F656D6F682F)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F)
        cpu.RIP = 0x7FFFF7AB79B1

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB79B1, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB79B2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB79B3, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB79B4, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFF000000000000FF00000000FF)
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB79B5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_1_symbolic(self):
        """Instruction PMINUB_1
        Groups: sse2
        0x41b15f:   pminub  xmm8, xmmword ptr [rax + 0x10]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041B000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494290)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494291)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494292)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494293)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494294)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494295)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494296)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494297)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494298)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x494299)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49429A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49429B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49429C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49429D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49429E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x49429F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        mem.write(0x41B15F, "fD\x0f\xda@\x10")
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x5F5F5F5F5F200A2E646574726F706572)
        cpu.RIP = 0x41B15F
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494280)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x494290, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494291, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494292, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494293, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494294, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494295, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494296, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494297, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494298, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x494299, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x49429A, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x49429B, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x49429C, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x49429D, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x49429E, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x49429F, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x41B15F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x41B160, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x41B161, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41B162, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x41B163, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x41B164, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.XMM8 == 0x2020202020200A202020202020202020)
        condition = Operators.AND(condition, cpu.RAX == 0x494280)
        condition = Operators.AND(condition, cpu.RIP == 0x41B165)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_2_symbolic(self):
        """Instruction PMINUB_2
        Groups: sse2
        0x41b142:   pminub  xmm8, xmmword ptr [rax + 0x70]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041B000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        mem.write(0x41B142, "fD\x0f\xda@p")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942FD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4942FF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5F)
        mem[addr] = value
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x2020202020202020202020200A202020)
        cpu.RIP = 0x41B142
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494280)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41B142, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x41B143, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x41B144, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41B145, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x41B146, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x41B147, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F0, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F1, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F2, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F3, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4942F4, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F5, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F6, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F7, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F8, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.read_int(0x4942F9, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4942FA, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4942FB, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4942FC, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4942FD, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4942FE, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4942FF, 8) == ord("_"))
        condition = Operators.AND(condition, cpu.XMM8 == 0x2020202020202020202020200A202020)
        condition = Operators.AND(condition, cpu.RAX == 0x494280)
        condition = Operators.AND(condition, cpu.RIP == 0x41B148)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_3_symbolic(self):
        """Instruction PMINUB_3
        Groups: sse2
        0x457af6:   pminub  xmm0, xmm2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457AF6, "f\x0f\xda\xc2")
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x504E414D00323D524E54565F47445800)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x32677261003167726100706D636E7274)
        cpu.RIP = 0x457AF6

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457AF8, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x457AF9, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x457AF6, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457AF7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM2 == 0x504E414D00323D524E54565F47445800)
        condition = Operators.AND(condition, cpu.XMM0 == 0x324E414D00313D524E00565F47445800)
        condition = Operators.AND(condition, cpu.RIP == 0x457AFA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_4_symbolic(self):
        """Instruction PMINUB_4
        Groups: sse2
        0x41b13c:   pminub  xmm8, xmmword ptr [rax + 0x60]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0041B000, 0x1000, "rwx")
        mem.mmap(0x00494000, 0x1000, "rwx")
        mem.write(0x41B13C, "fD\x0f\xda@`")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6B)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x64)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x79)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941E9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941EA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941EB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x79)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941EC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941ED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941EE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x4941EF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6D)
        mem[addr] = value
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x632067676F6120736720720A646E6120)
        cpu.RIP = 0x41B13C
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x494180)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x41B13C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x41B13D, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.read_int(0x41B13E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x41B13F, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x41B140, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x41B141, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E0, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E1, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E2, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E3, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E4, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E5, 8) == ord("d"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E6, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4941E7, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E8, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x4941E9, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4941EA, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x4941EB, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x4941EC, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x4941ED, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x4941EE, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x4941EF, 8) == ord("m"))
        condition = Operators.AND(condition, cpu.XMM8 == 0x632067676F6120736220640A64636120)
        condition = Operators.AND(condition, cpu.RAX == 0x494180)
        condition = Operators.AND(condition, cpu.RIP == 0x41B142)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_5_symbolic(self):
        """Instruction PMINUB_5
        Groups: sse2
        0x457ee2:   pminub  xmm0, xmm5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457EE2, "f\x0f\xda\xc5")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x4D00313D524E00565F472F2F00326763)
        cpu.RIP = 0x457EE2
        cpu.XMM5 = cs.new_bitvec(128)
        cs.add(cpu.XMM5 == 0x65784563696C6F626D79532F65726F63)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457EE2, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457EE3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457EE4, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x457EE5, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x4D00313D524E00565F472F2F00326763)
        condition = Operators.AND(condition, cpu.RIP == 0x457EE6)
        condition = Operators.AND(condition, cpu.XMM5 == 0x65784563696C6F626D79532F65726F63)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMINUB_6_symbolic(self):
        """Instruction PMINUB_6
        Groups: sse2
        0x7ffff7ab7abe:     pminub  xmm0, xmm4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB7ABE, "f\x0f\xda\xc4")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x324E414D00313D524E00565F474458)
        cpu.RIP = 0x7FFFF7AB7ABE
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0x7274732F78756E696C2F73656C706D61)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7AC0, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7AC1, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7ABE, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB7ABF, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x324E2F4D00313D522F00565F474458)
        condition = Operators.AND(condition, cpu.XMM4 == 0x7274732F78756E696C2F73656C706D61)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB7AC2)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_1_symbolic(self):
        """Instruction PMOVMSKB_1
        Groups: sse2
        0x4184f1:   pmovmskb        ecx, xmm11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184F1, "fA\x0f\xd7\xcb")
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x4184F1
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10E)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4184F1, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184F2, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x4184F3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184F4, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0x4184F5, 8) == ord("\xcb"))
        condition = Operators.AND(condition, cpu.XMM11 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4184F6)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_2_symbolic(self):
        """Instruction PMOVMSKB_2
        Groups: sse2
        0x457d6e:   pmovmskb        r10d, xmm3
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457D6E, "fD\x0f\xd7\xd3")
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0xFF00000000FF0000000000000000)
        cpu.RIP = 0x457D6E
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457D70, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457D71, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0x457D72, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0x457D6E, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457D6F, 8) == ord("D"))
        condition = Operators.AND(condition, cpu.XMM3 == 0xFF00000000FF0000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x457D73)
        condition = Operators.AND(condition, cpu.R10D == 0x2100)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_3_symbolic(self):
        """Instruction PMOVMSKB_3
        Groups: sse2
        0x457ddd:   pmovmskb        edx, xmm3
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457DDD, "f\x0f\xd7\xd3")
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0x0)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0xFFFFDCC8)
        cpu.RIP = 0x457DDD

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457DE0, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0x457DDD, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457DDE, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x457DDF, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.XMM3 == 0x0)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x457DE1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_4_symbolic(self):
        """Instruction PMOVMSKB_4
        Groups: sse2
        0x7ffff7ab5ce1:     pmovmskb        ecx, xmm11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB5000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB5CE1, "fA\x0f\xd7\xcb")
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0xFFFFFF0000000000FFFFFF0000000000)
        cpu.RIP = 0x7FFFF7AB5CE1
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xA00)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5CE1, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5CE2, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5CE3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5CE4, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB5CE5, 8) == ord("\xcb"))
        condition = Operators.AND(condition, cpu.XMM11 == 0xFFFFFF0000000000FFFFFF0000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB5CE6)
        condition = Operators.AND(condition, cpu.ECX == 0xE0E0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_5_symbolic(self):
        """Instruction PMOVMSKB_5
        Groups: sse2
        0x4184e7:   pmovmskb        edx, xmm9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184E7, "fA\x0f\xd7\xd1")
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x0)
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0xFF00000000000000000000000000)
        cpu.RIP = 0x4184E7

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4184E8, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x4184E9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184EA, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0x4184EB, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x4184E7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.EDX == 0x2000)
        condition = Operators.AND(condition, cpu.XMM9 == 0xFF00000000000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x4184EC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PMOVMSKB_6_symbolic(self):
        """Instruction PMOVMSKB_6
        Groups: sse2
        0x4184c4:   pmovmskb        edx, xmm12
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184C4, "fA\x0f\xd7\xd4")
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x100)
        cpu.XMM12 = cs.new_bitvec(128)
        cs.add(cpu.XMM12 == 0x0)
        cpu.RIP = 0x4184C4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4184C8, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C5, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C6, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C7, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.XMM12 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4184C9)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_1_symbolic(self):
        """Instruction POP_1
        Groups: mode64
        0x7ffff7de3b0b:     pop     rbp
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD880)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD881)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD9)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD882)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD883)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD884)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD885)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD886)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD887)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD888)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        mem.write(0x7FFFF7DE3B0B, "]")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD878)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD879)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD87F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD880)
        cpu.RIP = 0x7FFFF7DE3B0B
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD880)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD880, 8) == ord("\xb0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD881, 8) == ord("\xd9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD882, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD883, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD884, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD885, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD886, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD887, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD888, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3B0B, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD878, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD879, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD87F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD888)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3B0C)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD9B0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_2_symbolic(self):
        """Instruction POP_2
        Groups: mode64
        0x7ffff7dea3ad:     pop     r14
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEA000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA08)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA09)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DEA3AD, "A^")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA10)
        value = cs.new_bitvec(8)
        cs.add(value == 0x30)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA11)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA12)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA13)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA14)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA16)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA17)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA18)
        value = cs.new_bitvec(8)
        cs.add(value == 0x60)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA0F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA15)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x4)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDA10)
        cpu.RIP = 0x7FFFF7DEA3AD
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDA20)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEA3AE, 8) == ord("^"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA08, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA09, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA0F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA10, 8) == ord("0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA11, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA12, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA13, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA14, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA15, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA16, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA17, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA18, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEA3AD, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.R14 == 0x7FFFFFFFDA30)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDA18)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DEA3AF)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDA20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_3_symbolic(self):
        """Instruction POP_3
        Groups: mode64
        0x4624e4:   pop     r12
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00462000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB01)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB02)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6B)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB03)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x4624E4, "A\\")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB06)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB07)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB08)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB04)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAFE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB05)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDB00)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x1)
        cpu.RIP = 0x4624E4
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDB20)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB00, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB01, 8) == ord("\xd4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB02, 8) == ord("k"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB03, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB04, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB05, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB06, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB07, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB08, 8) == ord("\xb8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF8, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x4624E4, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAFE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4624E5, 8) == ord("\\"))
        condition = Operators.AND(condition, cpu.R12 == 0x6BD448)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDB08)
        condition = Operators.AND(condition, cpu.RIP == 0x4624E6)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDB20)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_4_symbolic(self):
        """Instruction POP_4
        Groups: mode64
        0x6ff233:   pop     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x006FF000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        mem.write(0x6FF233, "Z")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCA8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x80000001)
        cpu.RIP = 0x6FF233
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA8, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x6FF233, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RDX == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x6FF234)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_5_symbolic(self):
        """Instruction POP_5
        Groups: mode64
        0x632f8a:   pop     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00632000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x632F8A, "Z")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCA8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7F)
        cpu.RIP = 0x632F8A
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x632F8A, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAB, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RDX == 0x80000000)
        condition = Operators.AND(condition, cpu.RIP == 0x632F8B)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POP_6_symbolic(self):
        """Instruction POP_6
        Groups: mode64
        0x737db3:   pop     rdx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00737000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        mem.write(0x737DB3, "Z")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCA8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x40)
        cpu.RIP = 0x737DB3
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA9, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x737DB3, 8) == ord("Z"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RDX == 0xFF00)
        condition = Operators.AND(condition, cpu.RIP == 0x737DB4)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_1_symbolic(self):
        """Instruction POR_1
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A9, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43AA, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM4 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF43AB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_2_symbolic(self):
        """Instruction POR_2
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A9, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43AA, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM4 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF43AB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_3_symbolic(self):
        """Instruction POR_3
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0xFF00000000FF000000000000000000)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A9, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43AA, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFF00000000FF000000000000000000)
        condition = Operators.AND(condition, cpu.XMM4 == 0xFF00000000FF000000000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF43AB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_4_symbolic(self):
        """Instruction POR_4
        Groups: sse2
        0x7ffff7df43a7:     por     xmm0, xmm4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF43A7, "f\x0f\xeb\xc4")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x7FFFF7DF43A7
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A8, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A9, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43AA, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF43A7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM4 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF43AB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_5_symbolic(self):
        """Instruction POR_5
        Groups: sse2
        0x7ffff7df4412:     por     xmm0, xmm3
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4412, "f\x0f\xeb\xc3")
        cpu.XMM3 = cs.new_bitvec(128)
        cs.add(cpu.XMM3 == 0xFF000000000000)
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x7FFFF7DF4412

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4412, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4413, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4414, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4415, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.XMM3 == 0xFF000000000000)
        condition = Operators.AND(condition, cpu.XMM0 == 0xFF000000000000)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4416)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_POR_6_symbolic(self):
        """Instruction POR_6
        Groups: sse2
        0x7ffff7ac0b17:     por     xmm0, xmm4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0B17, "f\x0f\xeb\xc4")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x7FFFF7AC0B17
        cpu.XMM4 = cs.new_bitvec(128)
        cs.add(cpu.XMM4 == 0xFFFFFF000000FF)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B18, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B19, 8) == ord("\xeb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B1A, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0B17, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFFFFFF000000FF)
        condition = Operators.AND(condition, cpu.XMM4 == 0xFFFFFF000000FF)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0B1B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_1_symbolic(self):
        """Instruction PSHUFD_1
        Groups: sse2
        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AF8, "f\x0fp\xc9\x00")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x25252525)
        cpu.RIP = 0x7FFFF7AC0AF8

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AFA, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AFB, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AFC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x25252525252525252525252525252525)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0AFD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_2_symbolic(self):
        """Instruction PSHUFD_2
        Groups: sse2
        0x7ffff7ac0af8:     pshufd  xmm1, xmm1, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AF8, "f\x0fp\xc9\x00")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x25252525)
        cpu.RIP = 0x7FFFF7AC0AF8

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF8, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AFA, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AFB, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AFC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x25252525252525252525252525252525)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0AFD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_3_symbolic(self):
        """Instruction PSHUFD_3
        Groups: sse2
        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4388, "f\x0fp\xc9\x00")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x24242424)
        cpu.RIP = 0x7FFFF7DF4388

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4388, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4389, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF438A, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF438B, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF438C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x24242424242424242424242424242424)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF438D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_4_symbolic(self):
        """Instruction PSHUFD_4
        Groups: sse2
        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB799A, "f\x0fp\xc9\x00")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F2F2F2F)
        cpu.RIP = 0x7FFFF7AB799A

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799C, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799D, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB799F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_5_symbolic(self):
        """Instruction PSHUFD_5
        Groups: sse2
        0x7ffff7df4388:     pshufd  xmm1, xmm1, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4388, "f\x0fp\xc9\x00")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x24242424)
        cpu.RIP = 0x7FFFF7DF4388

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4388, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4389, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF438A, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF438B, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF438C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x24242424242424242424242424242424)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF438D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PSHUFD_6_symbolic(self):
        """Instruction PSHUFD_6
        Groups: sse2
        0x7ffff7ab799a:     pshufd  xmm1, xmm1, 0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AB7000, 0x1000, "rwx")
        mem.write(0x7FFFF7AB799A, "f\x0fp\xc9\x00")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F2F2F2F)
        cpu.RIP = 0x7FFFF7AB799A

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799A, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799C, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799D, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AB799E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AB799F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_1_symbolic(self):
        """Instruction PUNPCKLBW_1
        Groups: sse2
        0x7ffff7df437b:     punpcklbw       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF437B, "f\x0f`\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x24)
        cpu.RIP = 0x7FFFF7DF437B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437E, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2424)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF437F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_2_symbolic(self):
        """Instruction PUNPCKLBW_2
        Groups: sse2
        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AEB, "f\x0f`\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x25)
        cpu.RIP = 0x7FFFF7AC0AEB

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AEB, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AEC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AED, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AEE, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2525)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0AEF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_3_symbolic(self):
        """Instruction PUNPCKLBW_3
        Groups: sse2
        0x7ffff7ac0aeb:     punpcklbw       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AEB, "f\x0f`\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x25)
        cpu.RIP = 0x7FFFF7AC0AEB

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AEB, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AEC, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AED, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AEE, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2525)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0AEF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_4_symbolic(self):
        """Instruction PUNPCKLBW_4
        Groups: sse2
        0x4579cc:   punpcklbw       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x4579CC, "f\x0f`\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F)
        cpu.RIP = 0x4579CC

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4579CC, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4579CD, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4579CE, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x4579CF, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x4579D0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_5_symbolic(self):
        """Instruction PUNPCKLBW_5
        Groups: sse2
        0x45794c:   punpcklbw       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x45794C, "f\x0f`\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F)
        cpu.RIP = 0x45794C

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45794C, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x45794D, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x45794E, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x45794F, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x457950)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLBW_6_symbolic(self):
        """Instruction PUNPCKLBW_6
        Groups: sse2
        0x7ffff7df437b:     punpcklbw       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF437B, "f\x0f`\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x24)
        cpu.RIP = 0x7FFFF7DF437B

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437B, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437D, 8) == ord("`"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF437E, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2424)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF437F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_1_symbolic(self):
        """Instruction PUNPCKLWD_1
        Groups: sse2
        0x457a46:   punpcklwd       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00457000, 0x1000, "rwx")
        mem.write(0x457A46, "f\x0fa\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F2F)
        cpu.RIP = 0x457A46

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x457A48, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x457A49, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x457A46, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x457A47, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x457A4A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_2_symbolic(self):
        """Instruction PUNPCKLWD_2
        Groups: sse2
        0x421b24:   punpcklwd       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00421000, 0x1000, "rwx")
        mem.write(0x421B24, "f\x0fa\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2525)
        cpu.RIP = 0x421B24

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x421B24, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x421B25, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x421B26, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x421B27, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x25252525)
        condition = Operators.AND(condition, cpu.RIP == 0x421B28)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_3_symbolic(self):
        """Instruction PUNPCKLWD_3
        Groups: sse2
        0x7ffff7df4384:     punpcklwd       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4384, "f\x0fa\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2424)
        cpu.RIP = 0x7FFFF7DF4384

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4384, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4385, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4386, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4387, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x24242424)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4388)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_4_symbolic(self):
        """Instruction PUNPCKLWD_4
        Groups: sse2
        0x7ffff7df4384:     punpcklwd       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF4384, "f\x0fa\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2424)
        cpu.RIP = 0x7FFFF7DF4384

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4384, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4385, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4386, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4387, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x24242424)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4388)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_5_symbolic(self):
        """Instruction PUNPCKLWD_5
        Groups: sse2
        0x45a576:   punpcklwd       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0045A000, 0x1000, "rwx")
        mem.write(0x45A576, "f\x0fa\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2F2F)
        cpu.RIP = 0x45A576

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x45A578, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x45A579, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x45A576, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x45A577, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x2F2F2F2F)
        condition = Operators.AND(condition, cpu.RIP == 0x45A57A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUNPCKLWD_6_symbolic(self):
        """Instruction PUNPCKLWD_6
        Groups: sse2
        0x7ffff7ac0af4:     punpcklwd       xmm1, xmm1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7AC0000, 0x1000, "rwx")
        mem.write(0x7FFFF7AC0AF4, "f\x0fa\xc9")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x2525)
        cpu.RIP = 0x7FFFF7AC0AF4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF4, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF6, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7AC0AF7, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x25252525)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7AC0AF8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_1_symbolic(self):
        """Instruction PUSH_1
        Groups: mode64
        0x7ffff7de407a:     push    r12
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD7A0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x34)
        mem[addr] = value
        mem.write(0x7FFFF7DE407B, "T")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD79A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD790)
        value = cs.new_bitvec(8)
        cs.add(value == 0x58)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD791)
        value = cs.new_bitvec(8)
        cs.add(value == 0x76)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD792)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD793)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD794)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD795)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD796)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD797)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD798)
        value = cs.new_bitvec(8)
        cs.add(value == 0x38)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD799)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD8)
        mem[addr] = value
        mem.write(0x7FFFF7DE407A, "A")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD79B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD79C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD79D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD79E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD79F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD798)
        cpu.R12 = cs.new_bitvec(64)
        cs.add(cpu.R12 == 0x7FFFF7FF7658)
        cpu.RIP = 0x7FFFF7DE407A
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD870)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD7A0, 8) == ord("4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE407B, 8) == ord("T"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE407A, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD790, 8) == ord("X"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD791, 8) == ord("v"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD792, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD793, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD794, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD795, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD796, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD797, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD798, 8) == ord("8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD799, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD79A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD79B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD79C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD79D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD79E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD79F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.R12 == 0x7FFFF7FF7658)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD790)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE407C)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD870)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_2_symbolic(self):
        """Instruction PUSH_2
        Groups: mode64
        0x722546:   push    0xff00
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00722000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        mem.write(0x722546, "h\x00\xff\x00\x00")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x722546
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA9, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x722546, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.read_int(0x722547, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x722548, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x722549, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x72254A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCA8)
        condition = Operators.AND(condition, cpu.RIP == 0x72254B)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_3_symbolic(self):
        """Instruction PUSH_3
        Groups: mode64
        0x744c3e:   push    0xf00aabb
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00744000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xBB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x87)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        mem.write(0x744C3E, "h\xbb\xaa\x00\x0f")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x744C3E
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA8, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA9, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x744C3E, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.read_int(0x744C3F, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.read_int(0x744C40, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0x744C41, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x744C42, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCA8)
        condition = Operators.AND(condition, cpu.RIP == 0x744C43)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_4_symbolic(self):
        """Instruction PUSH_4
        Groups: mode64
        0x6651fa:   push    rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00665000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        mem.write(0x6651FA, "P")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x6651FA
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7F)
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA8, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x6651FA, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCA8)
        condition = Operators.AND(condition, cpu.RAX == 0x7F)
        condition = Operators.AND(condition, cpu.RIP == 0x6651FB)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_5_symbolic(self):
        """Instruction PUSH_5
        Groups: mode64
        0x7ffff7de4330:     push    rbp
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA40)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1)
        mem[addr] = value
        mem.write(0x7FFFF7DE4330, "U")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA31)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA32)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA33)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA34)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA35)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA36)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA37)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x94)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA39)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA3A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA3B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA3C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA3D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA3E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA3F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDA38)
        cpu.RIP = 0x7FFFF7DE4330
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDB70)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA40, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA30, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4330, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA31, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA32, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA33, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA34, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA35, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA36, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA37, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA38, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA39, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA3A, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA3B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA3C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA3D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA3E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA3F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDA30)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4331)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDB70)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PUSH_6_symbolic(self):
        """Instruction PUSH_6
        Groups: mode64
        0x75c167:   push    0xf00aabb
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0075C000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xBB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCA9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCAF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        mem.write(0x75C167, "h\xbb\xaa\x00\x0f")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x75C167
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA8, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCA9, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAB, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCAF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xfe"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x75C167, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.read_int(0x75C168, 8) == ord("\xbb"))
        condition = Operators.AND(condition, cpu.read_int(0x75C169, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0x75C16A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x75C16B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCA8)
        condition = Operators.AND(condition, cpu.RIP == 0x75C16C)
        condition = Operators.AND(condition, cpu.RBP == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_1_symbolic(self):
        """Instruction PXOR_1
        Groups: sse2
        0x418490:   pxor    xmm8, xmm8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x418490, "fE\x0f\xef\xc0")
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x418490

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418490, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x418491, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x418492, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x418493, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x418494, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x418495)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_2_symbolic(self):
        """Instruction PXOR_2
        Groups: sse2
        0x41848f:   pxor    xmm11, xmm11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x41848F, "fE\x0f\xef\xdb")
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x41848F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418490, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x418491, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x418492, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x418493, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x41848F, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM11 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x418494)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_3_symbolic(self):
        """Instruction PXOR_3
        Groups: sse2
        0x4184bf:   pxor    xmm11, xmm11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4184BF, "fE\x0f\xef\xdb")
        cpu.XMM11 = cs.new_bitvec(128)
        cs.add(cpu.XMM11 == 0x0)
        cpu.RIP = 0x4184BF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4184C0, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C1, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C2, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x4184C3, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x4184BF, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.XMM11 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4184C4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_4_symbolic(self):
        """Instruction PXOR_4
        Groups: sse2
        0x418480:   pxor    xmm8, xmm8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x418480, "fE\x0f\xef\xc0")
        cpu.XMM8 = cs.new_bitvec(128)
        cs.add(cpu.XMM8 == 0x0)
        cpu.RIP = 0x418480

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418480, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x418481, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x418482, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x418483, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x418484, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM8 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x418485)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_5_symbolic(self):
        """Instruction PXOR_5
        Groups: sse2
        0x4183b5:   pxor    xmm9, xmm9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x4183B5, "fE\x0f\xef\xc9")
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x4183B5

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4183B8, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x4183B9, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x4183B5, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x4183B6, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x4183B7, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4183BA)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_PXOR_6_symbolic(self):
        """Instruction PXOR_6
        Groups: sse2
        0x418495:   pxor    xmm9, xmm9
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00418000, 0x1000, "rwx")
        mem.write(0x418495, "fE\x0f\xef\xc9")
        cpu.XMM9 = cs.new_bitvec(128)
        cs.add(cpu.XMM9 == 0x0)
        cpu.RIP = 0x418495

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x418498, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x418499, 8) == ord("\xc9"))
        condition = Operators.AND(condition, cpu.read_int(0x418495, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x418496, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x418497, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM9 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x41849A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_1_symbolic(self):
        """Instruction RET_1
        Groups: ret, mode64
        0x7ffff7de3748:     ret
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD780)
        value = cs.new_bitvec(8)
        cs.add(value == 0x5D)
        mem[addr] = value
        mem.write(0x7FFFF7DE3748, "\xc3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD770)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD771)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD8)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD772)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD773)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD774)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD775)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD776)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD777)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD778)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD779)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD77A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD77B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD77C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD77D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD77E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD77F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD778)
        cpu.RIP = 0x7FFFF7DE3748
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD870)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD780, 8) == ord("]"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3748, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD770, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD771, 8) == ord("\xd8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD772, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD773, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD774, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD775, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD776, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD777, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD778, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD779, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD77A, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD77B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD77C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD77D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD77E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD77F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD780)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE40AB)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD870)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_2_symbolic(self):
        """Instruction RET_2
        Groups: ret, mode64
        0x7ffff7df537f:     ret
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF5000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD840)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DF537F, "\xc3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD830)
        value = cs.new_bitvec(8)
        cs.add(value == 0x3)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD831)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD832)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD833)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD834)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD835)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD836)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD837)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD838)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD839)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD83A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD83B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD83C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD83D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD83E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD83F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD838)
        cpu.RIP = 0x7FFFF7DF537F
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDAE0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD840, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD83F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD830, 8) == ord("\x03"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD831, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD832, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD833, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD834, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD835, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD836, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD837, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD838, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD839, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD83A, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD83B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD83C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD83D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD83E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF537F, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD840)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE7FDB)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDAE0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_3_symbolic(self):
        """Instruction RET_3
        Groups: ret, mode64
        0x406e67:   ret
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB21)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB22)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB23)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB24)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB25)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB26)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x406E67, "\xc3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB28)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB29)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB27)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB30)
        value = cs.new_bitvec(8)
        cs.add(value == 0x40)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB2B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDB28)
        cpu.RIP = 0x406E67
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDB70)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB20, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB21, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB22, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB23, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB24, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB25, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB26, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x406E67, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB28, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB29, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2A, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB2F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB30, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB27, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDB30)
        condition = Operators.AND(condition, cpu.RIP == 0x436F4E)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDB70)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_4_symbolic(self):
        """Instruction RET_4
        Groups: ret, mode64
        0x7ffff7de2af3:     ret
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE2000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD700)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD701)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD702)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD703)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD704)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD705)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD706)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD707)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD708)
        value = cs.new_bitvec(8)
        cs.add(value == 0x29)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD709)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD70A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD70B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD70C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD70D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD70E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD70F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD710)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB0)
        mem[addr] = value
        mem.write(0x7FFFF7DE2AF3, "\xc3")
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD708)
        cpu.RIP = 0x7FFFF7DE2AF3
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFD720)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD700, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD701, 8) == ord("\xd7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD702, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD703, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD704, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD705, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD706, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD707, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD708, 8) == ord(")"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD709, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD70A, 8) == ord("\xde"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD70B, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD70C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD70D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD70E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD70F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD710, 8) == ord("\xb0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE2AF3, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD710)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE7529)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFD720)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_5_symbolic(self):
        """Instruction RET_5
        Groups: ret, mode64
        0x4118a1:   ret
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00411000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x4118A1, "\xc3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1C)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x36)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAE7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x2)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDAE8)
        cpu.RIP = 0x4118A1
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDB00)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE1, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4118A1, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE8, 8) == ord("\x1c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE9, 8) == ord("6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEA, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAE7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAED, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF0, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDAF0)
        condition = Operators.AND(condition, cpu.RIP == 0x41361C)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDB00)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_RET_6_symbolic(self):
        """Instruction RET_6
        Groups: ret, mode64
        0x40fc8d:   ret
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA00)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6)
        mem[addr] = value
        mem.write(0x40FC8D, "\xc3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xEE)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9FD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFD9FF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD9F8)
        cpu.RIP = 0x40FC8D
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7FFFFFFFDAB0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA00, 8) == ord("\x06"))
        condition = Operators.AND(condition, cpu.read_int(0x40FC8D, 8) == ord("\xc3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F0, 8) == ord("\xb0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F1, 8) == ord("\xda"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F8, 8) == ord("\xee"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9F9, 8) == ord("}"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9FA, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9FB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9FC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9FD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9FE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFD9FF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFDA00)
        condition = Operators.AND(condition, cpu.RIP == 0x457DEE)
        condition = Operators.AND(condition, cpu.RBP == 0x7FFFFFFFDAB0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_1_symbolic(self):
        """Instruction ROL_1
        Groups:
        0x44272a:   rol     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00442000, 0x1000, "rwx")
        mem.write(0x44272A, "H\xc1\xc0\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x44272A
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x69FD1B8F25BEA73)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x44272A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x44272B, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x44272C, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x44272D, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0xA371E4B7D4E60D3F)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x44272E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_2_symbolic(self):
        """Instruction ROL_2
        Groups:
        0x7ffff7df408d:     rol     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF408D, "H\xc1\xc0\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x7FFFF7DF408D
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x7FFFFFFFD9B0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF4090, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF408D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF408E, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF408F, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0xFFFFFFFFB3600000)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF4091)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_3_symbolic(self):
        """Instruction ROL_3
        Groups:
        0x409c7a:   rol     rdi, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00409000, 0x1000, "rwx")
        mem.write(0x409C7A, "H\xc1\xc7\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x4FB19F79D00A9C7E)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x409C7A

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x409C7A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x409C7B, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x409C7C, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x409C7D, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x3EF3A01538FC9F63)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x409C7E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_4_symbolic(self):
        """Instruction ROL_4
        Groups:
        0x40725a:   rol     rdi, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00407000, 0x1000, "rwx")
        mem.write(0x40725A, "H\xc1\xc7\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x1D13AA75A9FB0505)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40725A

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40725A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x40725B, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x40725C, 8) == ord("\xc7"))
        condition = Operators.AND(condition, cpu.read_int(0x40725D, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RDI == 0x54EB53F60A0A3A27)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40725E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_5_symbolic(self):
        """Instruction ROL_5
        Groups:
        0x4452b5:   rol     rdx, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00445000, 0x1000, "rwx")
        mem.write(0x4452B5, "H\xc1\xc2\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4452B5
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x4FB1E0862FB57B2E)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4452B8, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.read_int(0x4452B5, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x4452B6, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x4452B7, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4452B9)
        condition = Operators.AND(condition, cpu.RDX == 0xC10C5F6AF65C9F63)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROL_6_symbolic(self):
        """Instruction ROL_6
        Groups:
        0x7ffff7a6220a:     rol     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A62000, 0x1000, "rwx")
        mem.write(0x7FFFF7A6220A, "H\xc1\xc0\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x7FFFF7A6220A
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4D168F8071DCCC80)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6220A, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6220B, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6220C, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A6220D, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x1F00E3B999009A2D)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A6220E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_1_symbolic(self):
        """Instruction ROR_1
        Groups:
        0x406f53:   ror     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406F53, "H\xc1\xc8\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x406F53
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x9287E74AD78292FC)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406F53, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x406F54, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x406F55, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x406F56, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x497E4943F3A56BC1)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406F57)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_2_symbolic(self):
        """Instruction ROR_2
        Groups:
        0x7ffff7a65253:     ror     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.write(0x7FFFF7A65253, "H\xc1\xc8\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x7FFFF7A65253
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x42002153EFDD741E)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65253, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65254, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65255, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65256, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0xBA0F210010A9F7EE)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A65257)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_3_symbolic(self):
        """Instruction ROR_3
        Groups:
        0x406fd3:   ror     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406FD3, "H\xc1\xc8\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x406FD3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x4A02228A32751A47)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406FD3, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x406FD4, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x406FD5, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x406FD6, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x8D23A5011145193A)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x406FD7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_4_symbolic(self):
        """Instruction ROR_4
        Groups:
        0x7ffff7a65253:     ror     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A65000, 0x1000, "rwx")
        mem.write(0x7FFFF7A65253, "H\xc1\xc8\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x7FFFF7A65253
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1B65E4B049796683)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65253, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65254, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65255, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A65256, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0xB3418DB2F25824BC)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A65257)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_5_symbolic(self):
        """Instruction ROR_5
        Groups:
        0x406f53:   ror     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406F53, "H\xc1\xc8\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x406F53
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x54EB53F60A0A3A27)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406F53, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x406F54, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x406F55, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x406F56, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x1D13AA75A9FB0505)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406F57)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_ROR_6_symbolic(self):
        """Instruction ROR_6
        Groups:
        0x406fc3:   ror     rax, 0x11
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406FC3, "H\xc1\xc8\x11")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x406FC3
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0xF69983477B463CAA)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406FC3, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x406FC4, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x406FC5, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x406FC6, 8) == ord("\x11"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x1E557B4CC1A3BDA3)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406FC7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_1_symbolic(self):
        """Instruction SAR_1
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x15C8)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4088, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4085, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4086, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4087, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4089)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x572)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_2_symbolic(self):
        """Instruction SAR_2
        Groups:
        0x7ffff7acfc78:     sar     r8d, 0x1f
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7ACF000, 0x1000, "rwx")
        mem.write(0x7FFFF7ACFC78, "A\xc1\xf8\x1f")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7ACFC78
        cpu.R8D = cs.new_bitvec(32)
        cs.add(cpu.R8D == 0x9)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFC78, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFC79, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFC7A, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7ACFC7B, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7ACFC7C)
        condition = Operators.AND(condition, cpu.R8D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_3_symbolic(self):
        """Instruction SAR_3
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1290)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4088, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4085, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4086, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4087, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4089)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x4A4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_4_symbolic(self):
        """Instruction SAR_4
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1450)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4088, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4085, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4086, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4087, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4089)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x514)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_5_symbolic(self):
        """Instruction SAR_5
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1420)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4088, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4085, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4086, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4087, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4089)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x508)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SAR_6_symbolic(self):
        """Instruction SAR_6
        Groups:
        0x7ffff7de4085:     sar     rax, 2
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE4085, "H\xc1\xf8\x02")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE4085
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1070)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4088, 8) == ord("\x02"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4085, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4086, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4087, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4089)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x41C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_1_symbolic(self):
        """Instruction SCASB_1
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78234, "\xae")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7B)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xAA)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A78233, "\xf2")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x79)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14BA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14BB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7BA14B4)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xFFFFFFFFFFFFFFEA)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFA9C8)
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B9, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C8, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C9, 8) == ord("{"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CA, 8) == ord("\xaa"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CB, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78233, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78234, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B5, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B6, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B7, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B4, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14BA, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14BB, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.RCX == 0xFFFFFFFFFFFFFFE9)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7BA14B5)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFA9C8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A78233)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_2_symbolic(self):
        """Instruction SCASB_2
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x73)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x75)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7BA14A1)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xFFFFFFFFFFFFFFFD)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFA9C8)
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A1, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A2, 8) == ord("s"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A3, 8) == ord("u"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A4, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A5, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A6, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A8, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78233, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78234, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.RCX == 0xFFFFFFFFFFFFFFFC)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7BA14A2)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFA9C8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A78233)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_3_symbolic(self):
        """Instruction SCASB_3
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        mem.write(0x7FFFF7A78234, "\xae")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A78233, "\xf2")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x63)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x74)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x79)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14B9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x4E)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7BA14B2)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xFFFFFFFFFFFFFFEC)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFA9C8)
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B9, 8) == ord("N"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B3, 8) == ord("c"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B2, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78233, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78234, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B5, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B6, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B7, 8) == ord("y"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14B4, 8) == ord("t"))
        condition = Operators.AND(condition, cpu.RCX == 0xFFFFFFFFFFFFFFEB)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7BA14B3)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFA9C8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A78233)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_4_symbolic(self):
        """Instruction SCASB_4
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFE000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0A5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0A6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7A)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0A7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x70)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFE0AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2F8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2F9)
        value = cs.new_bitvec(8)
        cs.add(value == 0xD5)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2FA)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2FB)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2FC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2FD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2FE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC2FF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFE0A5)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xFFFFFFFFFFFFFFFF)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFC2F8)
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0A5, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0A6, 8) == ord("z"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0A7, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0A8, 8) == ord("p"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0A9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0AA, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0AB, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFE0AC, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78233, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78234, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2F8, 8) == ord("\x1f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2F9, 8) == ord("\xd5"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2FA, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2FB, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2FC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2FD, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2FE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC2FF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0xFFFFFFFFFFFFFFFE)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFE0A6)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFC2F8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A78233)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_5_symbolic(self):
        """Instruction SCASB_5
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7BA1000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14AB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x68)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x66)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x69)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14A9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6C)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14AA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7BA14AC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x6F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7BA14A5)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xFFFFFFFFFFFFFFF9)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFA9C8)
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14AB, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A5, 8) == ord("h"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A6, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A7, 8) == ord("f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A8, 8) == ord("i"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14AC, 8) == ord("o"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78234, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78233, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14A9, 8) == ord("l"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7BA14AA, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.RCX == 0xFFFFFFFFFFFFFFF8)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7BA14A6)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFA9C8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A78233)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SCASB_6_symbolic(self):
        """Instruction SCASB_6
        Groups:
        0x7ffff7a78233:     repne scasb     al, byte ptr [rdi]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555771000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7A78000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFA000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x61)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x72)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x67)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x31)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x555555771DC7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9C9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFA9CF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7A78233, "\xf2\xae")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x555555771DC0)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0xFFFFFFFFFFFFFFFF)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFA9C8)
        cpu.RIP = 0x7FFFF7A78233
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC0, 8) == ord("a"))
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC1, 8) == ord("r"))
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC2, 8) == ord("g"))
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC3, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555771DC7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFA9CF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78233, 8) == ord("\xf2"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A78234, 8) == ord("\xae"))
        condition = Operators.AND(condition, cpu.RCX == 0xFFFFFFFFFFFFFFFE)
        condition = Operators.AND(condition, cpu.RDI == 0x555555771DC1)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFA9C8)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A78233)
        condition = Operators.AND(condition, cpu.AL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETA_1_symbolic(self):
        """Instruction SETA_1
        Groups:
        0x5555555548c2:     seta    dl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.write(0x5555555548C2, "\x0f\x97\xc2")
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x5555555548C2
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5555555548C2, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555548C3, 8) == ord("\x97"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555548C4, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555548C5)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_1_symbolic(self):
        """Instruction SETBE_1
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x58)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6207

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6208, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6209, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6207, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE620B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_2_symbolic(self):
        """Instruction SETBE_2
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x58)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6207

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6208, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6209, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6207, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE620B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_3_symbolic(self):
        """Instruction SETBE_3
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x58)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6207

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6208, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6209, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6207, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE620B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_4_symbolic(self):
        """Instruction SETBE_4
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x58)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6207

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6208, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6209, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6207, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE620B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_5_symbolic(self):
        """Instruction SETBE_5
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x58)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6207

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6208, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6209, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6207, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE620B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETBE_6_symbolic(self):
        """Instruction SETBE_6
        Groups:
        0x7ffff7de6207:     setbe   r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6207, "A\x0f\x96\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x58)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6207

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6208, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6209, 8) == ord("\x96"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620A, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6207, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE620B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_1_symbolic(self):
        """Instruction SETB_1
        Groups:
        0x4342ea:   setb    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4342EA, "\x0f\x92\xc0")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4342EA
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xC0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4342EA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4342EB, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x4342EC, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4342ED)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_2_symbolic(self):
        """Instruction SETB_2
        Groups:
        0x43426a:   setb    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x43426A, "\x0f\x92\xc0")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43426A
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xC0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43426A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x43426B, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x43426C, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x43426D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_3_symbolic(self):
        """Instruction SETB_3
        Groups:
        0x4346ca:   setb    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4346CA, "\x0f\x92\xc0")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4346CA
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xC0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4346CA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4346CB, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x4346CC, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4346CD)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_4_symbolic(self):
        """Instruction SETB_4
        Groups:
        0x4342ea:   setb    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4342EA, "\x0f\x92\xc0")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4342EA
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xC0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4342EA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4342EB, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x4342EC, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4342ED)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_5_symbolic(self):
        """Instruction SETB_5
        Groups:
        0x4342ea:   setb    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x4342EA, "\x0f\x92\xc0")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4342EA
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4342EA, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4342EB, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x4342EC, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4342ED)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETB_6_symbolic(self):
        """Instruction SETB_6
        Groups:
        0x43430a:   setb    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x43430A, "\x0f\x92\xc0")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x43430A
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xC0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43430A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x43430B, 8) == ord("\x92"))
        condition = Operators.AND(condition, cpu.read_int(0x43430C, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x43430D)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_1_symbolic(self):
        """Instruction SETE_1
        Groups:
        0x7ffff7de36a2:     sete    r10b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE36A2, "A\x0f\x94\xc2")
        cpu.R10B = cs.new_bitvec(8)
        cs.add(cpu.R10B == 0x0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RIP = 0x7FFFF7DE36A2

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36A2, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36A3, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36A4, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE36A5, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.R10B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE36A6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_2_symbolic(self):
        """Instruction SETE_2
        Groups:
        0x7ffff7de620f:     sete    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE620F, "\x0f\x94\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xF5)
        cpu.RIP = 0x7FFFF7DE620F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6210, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6211, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6212)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_3_symbolic(self):
        """Instruction SETE_3
        Groups:
        0x7ffff7de6229:     sete    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6229, "\x0f\x94\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.RIP = 0x7FFFF7DE6229

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6229, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE622A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE622B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE622C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_4_symbolic(self):
        """Instruction SETE_4
        Groups:
        0x7ffff7de6229:     sete    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6229, "\x0f\x94\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.RIP = 0x7FFFF7DE6229

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6229, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE622A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE622B, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE622C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_5_symbolic(self):
        """Instruction SETE_5
        Groups:
        0x432458:   sete    r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432458, "A\x0f\x94\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x30)
        cpu.RIP = 0x432458

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432458, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x432459, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x43245A, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x43245B, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x43245C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETE_6_symbolic(self):
        """Instruction SETE_6
        Groups:
        0x7ffff7de620f:     sete    al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE620F, "\x0f\x94\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0xF5)
        cpu.RIP = 0x7FFFF7DE620F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6210, 8) == ord("\x94"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6211, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE620F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6212)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_1_symbolic(self):
        """Instruction SETG_1
        Groups:
        0x555555567df4:     setg    r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555567000, 0x1000, "rwx")
        mem.write(0x555555567DF4, "A\x0f\x9f\xc1")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x555555567DF4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF4, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF6, 8) == ord("\x9f"))
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x555555567DF8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETG_2_symbolic(self):
        """Instruction SETG_2
        Groups:
        0x555555567df4:     setg    r9b
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555567000, 0x1000, "rwx")
        mem.write(0x555555567DF4, "A\x0f\x9f\xc1")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R9B = cs.new_bitvec(8)
        cs.add(cpu.R9B == 0x0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.RIP = 0x555555567DF4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF4, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF6, 8) == ord("\x9f"))
        condition = Operators.AND(condition, cpu.read_int(0x555555567DF7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.R9B == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x555555567DF8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_1_symbolic(self):
        """Instruction SETLE_1
        Groups:
        0x448ae0:   setle   dl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448AE0, "\x0f\x9e\xc2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x448AE0
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x448AE0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x448AE1, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.read_int(0x448AE2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x448AE3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETLE_2_symbolic(self):
        """Instruction SETLE_2
        Groups:
        0x448ae0:   setle   dl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00448000, 0x1000, "rwx")
        mem.write(0x448AE0, "\x0f\x9e\xc2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RIP = 0x448AE0
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x448AE0, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x448AE1, 8) == ord("\x9e"))
        condition = Operators.AND(condition, cpu.read_int(0x448AE2, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.DL == 0x1)
        condition = Operators.AND(condition, cpu.RIP == 0x448AE3)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_1_symbolic(self):
        """Instruction SETNE_1
        Groups:
        0x410ee5:   setne   cl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, "rwx")
        mem.write(0x410EE5, "\x0f\x95\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x410EE5
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410EE5, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x410EE6, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x410EE7, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.RIP == 0x410EE8)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_2_symbolic(self):
        """Instruction SETNE_2
        Groups:
        0x436d20:   setne   dl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.write(0x436D20, "\x0f\x95\xc2")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x436D20

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436D20, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x436D21, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x436D22, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.DL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x436D23)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_3_symbolic(self):
        """Instruction SETNE_3
        Groups:
        0x410f05:   setne   cl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00410000, 0x1000, "rwx")
        mem.write(0x410F05, "\x0f\x95\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x410F05
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x410F05, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x410F06, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x410F07, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.RIP == 0x410F08)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_4_symbolic(self):
        """Instruction SETNE_4
        Groups:
        0x436f20:   setne   dl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00436000, 0x1000, "rwx")
        mem.write(0x436F20, "\x0f\x95\xc2")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.DL = cs.new_bitvec(8)
        cs.add(cpu.DL == 0x0)
        cpu.RIP = 0x436F20

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x436F20, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x436F21, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x436F22, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.DL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x436F23)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_5_symbolic(self):
        """Instruction SETNE_5
        Groups:
        0x4120f9:   setne   cl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00412000, 0x1000, "rwx")
        mem.write(0x4120F9, "\x0f\x95\xc1")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RIP = 0x4120F9
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x40)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4120F9, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x4120FA, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x4120FB, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.RIP == 0x4120FC)
        condition = Operators.AND(condition, cpu.CL == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SETNE_6_symbolic(self):
        """Instruction SETNE_6
        Groups:
        0x7ffff7de5de4:     setne   al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5DE4, "\x0f\x95\xc0")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x0)
        cpu.RIP = 0x7FFFF7DE5DE4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5DE4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5DE5, 8) == ord("\x95"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5DE6, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.AL == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE5DE7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_1_symbolic(self):
        """Instruction SHLX_1
        Groups: bmi2
        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC800)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC801)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC802)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC803)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC804)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC805)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC806)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC807)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x55555556594D, "\xc4\xc2\xf9\xf7FP")
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x7FFFFFFFC7B0)
        cpu.RIP = 0x55555556594D
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x5)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC800, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC801, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC802, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC803, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC804, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC805, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC806, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC807, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556594D, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556594E, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556594F, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565950, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565951, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565952, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.R14 == 0x7FFFFFFFC7B0)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x555555565953)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_2_symbolic(self):
        """Instruction SHLX_2
        Groups: bmi2
        0x55555556544a:     shlx    rax, rdx, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x55555556544A, "\xc4\xe2\xf9\xf7\xc2")
        cpu.RIP = 0x55555556544A
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x55555556544A, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544B, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544C, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544D, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544E, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.RAX == 0x100)
        condition = Operators.AND(condition, cpu.RIP == 0x55555556544F)
        condition = Operators.AND(condition, cpu.RDX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_3_symbolic(self):
        """Instruction SHLX_3
        Groups: bmi2
        0x55555556544a:     shlx    rax, rdx, rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.write(0x55555556544A, "\xc4\xe2\xf9\xf7\xc2")
        cpu.RIP = 0x55555556544A
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x8)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x55555556544A, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544B, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544C, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544D, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556544E, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.RAX == 0x100)
        condition = Operators.AND(condition, cpu.RIP == 0x55555556544F)
        condition = Operators.AND(condition, cpu.RDX == 0x1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHLX_4_symbolic(self):
        """Instruction SHLX_4
        Groups: bmi2
        0x55555556594d:     shlx    rax, qword ptr [r14 + 0x50], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555565000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC800)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC801)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC802)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC803)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC804)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC805)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC806)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFC807)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x55555556594D, "\xc4\xc2\xf9\xf7FP")
        cpu.R14 = cs.new_bitvec(64)
        cs.add(cpu.R14 == 0x7FFFFFFFC7B0)
        cpu.RIP = 0x55555556594D
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x5)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC800, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC801, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC802, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC803, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC804, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC805, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC806, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFC807, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556594D, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556594E, 8) == ord("\xc2"))
        condition = Operators.AND(condition, cpu.read_int(0x55555556594F, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565950, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565951, 8) == ord("F"))
        condition = Operators.AND(condition, cpu.read_int(0x555555565952, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.R14 == 0x7FFFFFFFC7B0)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x555555565953)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_1_symbolic(self):
        """Instruction SHL_1
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x597904)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4390, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4391, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4392, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RSI == 0xB2F2080)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4393)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_2_symbolic(self):
        """Instruction SHL_2
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7144B72823EA49E0)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4390, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4391, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4392, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RSI == 0x2896E5047D493C00)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4393)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_3_symbolic(self):
        """Instruction SHL_3
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0xCC5C406168309853)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4390, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4391, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4392, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RSI == 0x8B880C2D06130A60)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4393)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_4_symbolic(self):
        """Instruction SHL_4
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x726F9570CFB9645B)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4390, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4391, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4392, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RSI == 0x4DF2AE19F72C8B60)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4393)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_5_symbolic(self):
        """Instruction SHL_5
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x2B60C)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4390, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4391, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4392, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RSI == 0x56C180)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4393)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHL_6_symbolic(self):
        """Instruction SHL_6
        Groups:
        0x7ffff7de438f:     shl     rsi, 5
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE438F, "H\xc1\xe6\x05")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x377BEB912D8EAE5)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE438F
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4390, 8) == ord("\xc1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4391, 8) == ord("\xe6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4392, 8) == ord("\x05"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE438F, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.RSI == 0x6EF7D7225B1D5CA0)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4393)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_1_symbolic(self):
        """Instruction SHR_1
        Groups:
        0x7ffff7de405d:     shr     rdx, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE405D, "H\xd1\xea")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x144A5AD4)
        cpu.RIP = 0x7FFFF7DE405D
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE405D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE405E, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE405F, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4060)
        condition = Operators.AND(condition, cpu.RDX == 0xA252D6A)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_2_symbolic(self):
        """Instruction SHR_2
        Groups:
        0x7ffff7de391d:     shr     rsi, cl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE391D, "H\xd3\xee")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x20CE23F6)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0x6)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE391D
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE391D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE391E, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE391F, 8) == ord("\xee"))
        condition = Operators.AND(condition, cpu.RSI == 0x83388F)
        condition = Operators.AND(condition, cpu.CL == 0x6)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3920)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_3_symbolic(self):
        """Instruction SHR_3
        Groups:
        0x7ffff7de3926:     shr     rsi, cl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3926, "H\xd3\xee")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x800000001204088)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xDA)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3926
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3928, 8) == ord("\xee"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3926, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3927, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.RSI == 0x200000000)
        condition = Operators.AND(condition, cpu.CL == 0xDA)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3929)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_4_symbolic(self):
        """Instruction SHR_4
        Groups:
        0x7ffff7de61d2:     shr     al, 4
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE61D2, "\xc0\xe8\x04")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x22)
        cpu.RIP = 0x7FFFF7DE61D2
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61D2, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61D3, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE61D4, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE61D5)
        condition = Operators.AND(condition, cpu.AL == 0x2)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_5_symbolic(self):
        """Instruction SHR_5
        Groups:
        0x7ffff7de391d:     shr     rsi, cl
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE391D, "H\xd3\xee")
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7C967E3F)
        cpu.CL = cs.new_bitvec(8)
        cs.add(cpu.CL == 0xE)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE391D
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE391D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE391E, 8) == ord("\xd3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE391F, 8) == ord("\xee"))
        condition = Operators.AND(condition, cpu.RSI == 0x1F259)
        condition = Operators.AND(condition, cpu.CL == 0xE)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3920)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SHR_6_symbolic(self):
        """Instruction SHR_6
        Groups:
        0x4322bd:   shr     rax, 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322BD, "H\xd1\xe8")
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4322BD
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x1)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322BD, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x4322BE, 8) == ord("\xd1"))
        condition = Operators.AND(condition, cpu.read_int(0x4322BF, 8) == ord("\xe8"))
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4322C0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.RAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_1_symbolic(self):
        """Instruction STC_1
        Groups:
        0x5667fa:   stc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00566000, 0x1000, "rwx")
        mem.write(0x5667FA, "\xf9")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x5667FA

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5667FA, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x5667FB)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_2_symbolic(self):
        """Instruction STC_2
        Groups:
        0x42a889:   stc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0042A000, 0x1000, "rwx")
        mem.write(0x42A889, "\xf9")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x42A889

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x42A889, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x42A88A)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_3_symbolic(self):
        """Instruction STC_3
        Groups:
        0x60b5d5:   stc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0060B000, 0x1000, "rwx")
        mem.write(0x60B5D5, "\xf9")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x60B5D5

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x60B5D5, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x60B5D6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_4_symbolic(self):
        """Instruction STC_4
        Groups:
        0x52da4d:   stc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0052D000, 0x1000, "rwx")
        mem.write(0x52DA4D, "\xf9")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x52DA4D

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x52DA4D, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x52DA4E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_5_symbolic(self):
        """Instruction STC_5
        Groups:
        0x56ba0e:   stc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0056B000, 0x1000, "rwx")
        mem.write(0x56BA0E, "\xf9")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x56BA0E

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x56BA0E, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x56BA0F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STC_6_symbolic(self):
        """Instruction STC_6
        Groups:
        0x61a7d6:   stc
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0061A000, 0x1000, "rwx")
        mem.write(0x61A7D6, "\xf9")
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x61A7D6

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x61A7D6, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x61A7D7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_1_symbolic(self):
        """Instruction STOSD_1
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB70)
        value = cs.new_bitvec(8)
        cs.add(value == 0xA0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB71)
        value = cs.new_bitvec(8)
        cs.add(value == 0xDB)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB72)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB73)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB74)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB75)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB76)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB77)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDB70)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x6)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA88)
        cpu.RIP = 0x5555555547C2
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C2, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C3, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB70, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB71, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB72, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB73, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB74, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB75, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB76, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB77, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x5)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDB74)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA88)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555547C2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_2_symbolic(self):
        """Instruction STOSD_2
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB20)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB21)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x5555555547C2, "\xf3\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB22)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB23)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB1C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB1D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB1E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB1F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDB1C)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x1B)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA88)
        cpu.RIP = 0x5555555547C2
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB20, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB21, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C2, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C3, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB23, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB22, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB1C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB1D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB1E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB1F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x1A)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDB20)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA88)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555547C2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_3_symbolic(self):
        """Instruction STOSD_3
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x26)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xB0)
        mem[addr] = value
        mem.write(0x5555555547C2, "\xf3\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x62)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAA3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA9F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDA9C)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x3B)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA88)
        cpu.RIP = 0x5555555547C2
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA0, 8) == ord("&"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA1, 8) == ord("\xb0"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C2, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C3, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA3, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAA2, 8) == ord("b"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA9F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x3A)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDAA0)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA88)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555547C2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_4_symbolic(self):
        """Instruction STOSD_4
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAED)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAEF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDAEC)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x27)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA88)
        cpu.RIP = 0x5555555547C2
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C2, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C3, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAED, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAEF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x26)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDAF0)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA88)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555547C2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_5_symbolic(self):
        """Instruction STOSD_5
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB80)
        value = cs.new_bitvec(8)
        cs.add(value == 0x50)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB81)
        value = cs.new_bitvec(8)
        cs.add(value == 0x49)
        mem[addr] = value
        mem.write(0x5555555547C2, "\xf3\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB82)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB83)
        value = cs.new_bitvec(8)
        cs.add(value == 0x55)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB7C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB7D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB7E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDB7F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDB7C)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x3)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA88)
        cpu.RIP = 0x5555555547C2
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB80, 8) == ord("P"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB81, 8) == ord("I"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C2, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C3, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB82, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB83, 8) == ord("U"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB7C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB7D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB7E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDB7F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x2)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDB80)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA88)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555547C2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSD_6_symbolic(self):
        """Instruction STOSD_6
        Groups:
        0x5555555547c2:     rep stosd       dword ptr [rdi], eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x5555555547C2, "\xf3\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDAF7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDAF0)
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x26)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDA88)
        cpu.RIP = 0x5555555547C2
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C2, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x5555555547C3, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDAF7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x25)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDAF4)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDA88)
        condition = Operators.AND(condition, cpu.RIP == 0x5555555547C2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_1_symbolic(self):
        """Instruction STOSQ_1
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7700)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7701)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7702)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7703)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7704)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7705)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7706)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7707)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F38)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F39)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F3A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F3B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F3C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F3D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F3E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7F3F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7FD7F38)
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x19)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FD7700)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7700, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7701, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7702, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7703, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7704, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7705, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7706, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7707, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F3B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F3C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F3D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F38, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F39, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F3A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09C, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09D, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F3E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7F3F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x18)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7FD7F40)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FD7700)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DED09B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_2_symbolic(self):
        """Instruction STOSQ_2
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7700)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7701)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7702)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7703)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7704)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7705)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7706)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7707)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7CBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7FD7CB8)
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x69)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FD7700)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7700, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7701, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7702, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7703, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7704, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7705, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7706, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7707, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CBC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CBD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CB8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09C, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09D, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7CBF, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x68)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7FD7CC0)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FD7700)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DED09B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_3_symbolic(self):
        """Instruction STOSQ_3
        Groups:
        0x7ffff7de5ebf:     rep stosq       qword ptr [rdi], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE5000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FFE000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE5EC0, "H\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xF7)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE4)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA88)
        value = cs.new_bitvec(8)
        cs.add(value == 0x90)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA89)
        value = cs.new_bitvec(8)
        cs.add(value == 0x78)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8A)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8B)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8C)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA8F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FFE4A7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DE5EBF, "\xf3")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDA88)
        cpu.RIP = 0x7FFFF7DE5EBF
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x7)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FFE4A0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5EC0, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5EC1, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A3, 8) == ord("\xf7"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A1, 8) == ord("\xe4"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA88, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA89, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8B, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8C, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8D, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA8F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FFE4A7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE5EBF, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.RCX == 0x6)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDA90)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FFE4A0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE5EBF)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_4_symbolic(self):
        """Instruction STOSQ_4
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7700)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7701)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7702)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7703)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7704)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7705)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7706)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7707)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7730)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7731)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7732)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7733)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7734)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7735)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7736)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7737)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7FD7730)
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x11A)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FD7700)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7700, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7701, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7702, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7703, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7704, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7705, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7706, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7707, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7730, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7731, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7732, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7733, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7734, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7735, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7736, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7737, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09C, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09D, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.RCX == 0x119)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7FD7738)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FD7700)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DED09B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_5_symbolic(self):
        """Instruction STOSQ_5
        Groups:
        0x555555554895:     rep stosq       qword ptr [rdi], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x555555554000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFD000, 0x1000, "rwx")
        mem.write(0x555555554896, "H")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA95)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555554897, "\xab")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA90)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA91)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA92)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA93)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA94)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x555555554895, "\xf3")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA96)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDA97)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC98)
        value = cs.new_bitvec(8)
        cs.add(value == 0x1D)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC99)
        value = cs.new_bitvec(8)
        cs.add(value == 0xE0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC9A)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC9B)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC9C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC9D)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC9E)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFDC9F)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFFFFFDA90)
        cpu.RIP = 0x555555554895
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x1E)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFFFFFDC98)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA96, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA95, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA97, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA90, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA91, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA92, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA93, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDA94, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x555555554895, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x555555554896, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x555555554897, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC98, 8) == ord("\x1d"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC99, 8) == ord("\xe0"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC9A, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC9B, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC9C, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC9D, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC9E, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFDC9F, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.RCX == 0x1D)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFFFFFDA98)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFFFFFDC98)
        condition = Operators.AND(condition, cpu.RIP == 0x555555554895)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_STOSQ_6_symbolic(self):
        """Instruction STOSQ_6
        Groups:
        0x7ffff7ded09b:     rep stosq       qword ptr [rdi], rax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DED000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7FD7000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7700)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7701)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7702)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7703)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7704)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7705)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7706)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7707)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7FD7EF7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x7FFFF7DED09B, "\xf3H\xab")
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7FD7EF0)
        cpu.RIP = 0x7FFFF7DED09B
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x22)
        cpu.RSI = cs.new_bitvec(64)
        cs.add(cpu.RSI == 0x7FFFF7FD7700)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7700, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7701, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7702, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7703, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7704, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7705, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7706, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7707, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF4, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7FD7EF7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09B, 8) == ord("\xf3"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09C, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DED09D, 8) == ord("\xab"))
        condition = Operators.AND(condition, cpu.RCX == 0x21)
        condition = Operators.AND(condition, cpu.RAX == 0x0)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7FD7EF8)
        condition = Operators.AND(condition, cpu.RSI == 0x7FFFF7FD7700)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DED09B)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_1_symbolic(self):
        """Instruction SUB_1
        Groups:
        0x4326c3:   sub     rsp, 0x1020
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4326C3, "H\x81\xec \x10\x00\x00")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDAB0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4326C3
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4326C3, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x4326C4, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x4326C5, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0x4326C6, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x4326C7, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x4326C8, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4326C9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCA90)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4326CA)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_2_symbolic(self):
        """Instruction SUB_2
        Groups:
        0x40b6dd:   sub     rsp, 0x1028
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0040B000, 0x1000, "rwx")
        mem.write(0x40B6DD, "H\x81\xec(\x10\x00\x00")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFDA18)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40B6DD
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40B6E0, 8) == ord("("))
        condition = Operators.AND(condition, cpu.read_int(0x40B6E1, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x40B6E2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x40B6E3, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x40B6DD, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x40B6DE, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x40B6DF, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFC9F0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40B6E4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_3_symbolic(self):
        """Instruction SUB_3
        Groups:
        0x7ffff7de406d:     sub     rsp, 8
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE406D, "H\x83\xec\x08")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD840)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE406D
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE4070, 8) == ord("\x08"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE406D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE406E, 8) == ord("\x83"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE406F, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFD838)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE4071)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_4_symbolic(self):
        """Instruction SUB_4
        Groups:
        0x7ffff7decc04:     sub     rsp, 0x1020
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DECC04, "H\x81\xec \x10\x00\x00")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD0C0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DECC04
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DECC04, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DECC05, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DECC06, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DECC07, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DECC08, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DECC09, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DECC0A, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFC0A0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DECC0B)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_5_symbolic(self):
        """Instruction SUB_5
        Groups:
        0x7ffff7de060d:     sub     rsp, 0x1020
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE0000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE060D, "H\x81\xec \x10\x00\x00")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD2E0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x7FFFF7DE060D
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE060D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE060E, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE060F, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0610, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0611, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0612, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE0613, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFC2C0)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE0614)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_SUB_6_symbolic(self):
        """Instruction SUB_6
        Groups:
        0x7ffff7deb22d:     sub     rsp, 0x1078
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DEB000, 0x1000, "rwx")
        mem.write(0x7FFFF7DEB22D, "H\x81\xecx\x10\x00\x00")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFD9F8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DEB22D
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB22D, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB22E, 8) == ord("\x81"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB22F, 8) == ord("\xec"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB230, 8) == ord("x"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB231, 8) == ord("\x10"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB232, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DEB233, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFC980)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DEB234)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_1_symbolic(self):
        """Instruction TEST_1
        Groups:
        0x7ffff7df459c:     test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459C, "\x84\xc0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF459C
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x6C)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459C, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459D, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF459E)
        condition = Operators.AND(condition, cpu.AL == 0x6C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_2_symbolic(self):
        """Instruction TEST_2
        Groups:
        0x7ffff7df459c:     test    al, al
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF459C, "\x84\xc0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF459C
        cpu.AL = cs.new_bitvec(8)
        cs.add(cpu.AL == 0x5F)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459C, 8) == ord("\x84"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF459D, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF459E)
        condition = Operators.AND(condition, cpu.AL == 0x5F)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_3_symbolic(self):
        """Instruction TEST_3
        Groups:
        0x7ffff7de3892:     test    r15d, r15d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3892, "E\x85\xff")
        cpu.R15D = cs.new_bitvec(32)
        cs.add(cpu.R15D == 0x0)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3892
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3892, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3893, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3894, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.R15D == 0x0)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3895)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_4_symbolic(self):
        """Instruction TEST_4
        Groups:
        0x7ffff7b58f07:     test    byte ptr [r8 - 4], 1
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A31000, 0x1000, "rwx")
        mem.mmap(0x7FFFF7B58000, 0x1000, "rwx")
        mem.write(0x7FFFF7B58F07, "A\xf6@\xfc\x01")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFF7A3193C)
        value = cs.new_bitvec(8)
        cs.add(value == 0xBC)
        mem[addr] = value
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.R8 = cs.new_bitvec(64)
        cs.add(cpu.R8 == 0x7FFFF7A31940)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7B58F07
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F07, 8) == ord("A"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F08, 8) == ord("\xf6"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F09, 8) == ord("@"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F0A, 8) == ord("\xfc"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7B58F0B, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A3193C, 8) == ord("\xbc"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.R8 == 0x7FFFF7A31940)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7B58F0C)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_5_symbolic(self):
        """Instruction TEST_5
        Groups:
        0x7ffff7ddc6b7:     test    rdi, rdi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DDC000, 0x1000, "rwx")
        mem.write(0x7FFFF7DDC6B7, "H\x85\xff")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DDC6B7
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.RDI = cs.new_bitvec(64)
        cs.add(cpu.RDI == 0x7FFFF7FFA3A0)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC6B8, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC6B9, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DDC6B7, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DDC6BA)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.RDI == 0x7FFFF7FFA3A0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_TEST_6_symbolic(self):
        """Instruction TEST_6
        Groups:
        0x406e88:   test    rbx, rbx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00406000, 0x1000, "rwx")
        mem.write(0x406E88, "H\x85\xdb")
        cpu.RBX = cs.new_bitvec(64)
        cs.add(cpu.RBX == 0x7FFFFFFFE927)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x406E88
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x406E88, 8) == ord("H"))
        condition = Operators.AND(condition, cpu.read_int(0x406E89, 8) == ord("\x85"))
        condition = Operators.AND(condition, cpu.read_int(0x406E8A, 8) == ord("\xdb"))
        condition = Operators.AND(condition, cpu.RBX == 0x7FFFFFFFE927)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x406E8B)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_1_symbolic(self):
        """Instruction VMOVD_1
        Groups: avx
        0x432054:   vmovd   xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432054, "\xc5\xf9n\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x432054
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432054, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432055, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432056, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x432057, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ESI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432058)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_2_symbolic(self):
        """Instruction VMOVD_2
        Groups: avx
        0x432154:   vmovd   xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432154, "\xc5\xf9n\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x432154
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432154, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432155, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432156, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x432157, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ESI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432158)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_3_symbolic(self):
        """Instruction VMOVD_3
        Groups: avx
        0x432124:   vmovd   xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432124, "\xc5\xf9n\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x432124
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432124, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432125, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432126, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x432127, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ESI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432128)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_4_symbolic(self):
        """Instruction VMOVD_4
        Groups: avx
        0x434cd4:   vmovd   xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x434CD4, "\xc5\xf9n\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x434CD4
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x434CD4, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x434CD5, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x434CD6, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x434CD7, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ESI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x434CD8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_5_symbolic(self):
        """Instruction VMOVD_5
        Groups: avx
        0x432134:   vmovd   xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432134, "\xc5\xf9n\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x432134
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432134, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432135, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432136, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x432137, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ESI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432138)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VMOVD_6_symbolic(self):
        """Instruction VMOVD_6
        Groups: avx
        0x432514:   vmovd   xmm1, esi
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432514, "\xc5\xf9n\xce")
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x432514
        cpu.ESI = cs.new_bitvec(32)
        cs.add(cpu.ESI == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432514, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432515, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432516, 8) == ord("n"))
        condition = Operators.AND(condition, cpu.read_int(0x432517, 8) == ord("\xce"))
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.ESI == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432518)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_1_symbolic(self):
        """Instruction VPSHUFB_1
        Groups: avx
        0x4321af:   vpshufb xmm0, xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4321AF, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x4321AF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321B0, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x4321B1, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x4321B2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x4321B3, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x4321AF, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4321B4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_2_symbolic(self):
        """Instruction VPSHUFB_2
        Groups: avx
        0x43215f:   vpshufb xmm0, xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43215F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x43215F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432160, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x432161, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x432162, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x432163, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x43215F, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432164)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_3_symbolic(self):
        """Instruction VPSHUFB_3
        Groups: avx
        0x43205f:   vpshufb xmm0, xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43205F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x43205F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432060, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x432061, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x432062, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x432063, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x43205F, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432064)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_4_symbolic(self):
        """Instruction VPSHUFB_4
        Groups: avx
        0x43212f:   vpshufb xmm0, xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43212F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x43212F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432130, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x432131, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x432132, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x432133, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x43212F, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432134)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_5_symbolic(self):
        """Instruction VPSHUFB_5
        Groups: avx
        0x43213f:   vpshufb xmm0, xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x43213F, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x43213F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432140, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x432141, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x432142, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x432143, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x43213F, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432144)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPSHUFB_6_symbolic(self):
        """Instruction VPSHUFB_6
        Groups: avx
        0x434cdf:   vpshufb xmm0, xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00434000, 0x1000, "rwx")
        mem.write(0x434CDF, "\xc4\xe2q\x00\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x0)
        cpu.RIP = 0x434CDF

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x434CE0, 8) == ord("\xe2"))
        condition = Operators.AND(condition, cpu.read_int(0x434CE1, 8) == ord("q"))
        condition = Operators.AND(condition, cpu.read_int(0x434CE2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x434CE3, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.read_int(0x434CDF, 8) == ord("\xc4"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.XMM1 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x434CE4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_1_symbolic(self):
        """Instruction VPXOR_1
        Groups: avx
        0x4321a0:   vpxor   xmm0, xmm0, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4321A0, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x4321A0

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4321A0, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x4321A1, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x4321A2, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x4321A3, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x4321A4)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_2_symbolic(self):
        """Instruction VPXOR_2
        Groups: avx
        0x432510:   vpxor   xmm0, xmm0, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432510, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x432510

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432510, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432511, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432512, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x432513, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432514)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_3_symbolic(self):
        """Instruction VPXOR_3
        Groups: avx
        0x432050:   vpxor   xmm0, xmm0, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432050, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x432050

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432050, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432051, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432052, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x432053, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432054)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_4_symbolic(self):
        """Instruction VPXOR_4
        Groups: avx
        0x432150:   vpxor   xmm0, xmm0, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432150, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x432150

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432150, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432151, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432152, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x432153, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432154)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_5_symbolic(self):
        """Instruction VPXOR_5
        Groups: avx
        0x432130:   vpxor   xmm0, xmm0, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432130, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x432130

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432130, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432131, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432132, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x432133, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432134)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VPXOR_6_symbolic(self):
        """Instruction VPXOR_6
        Groups: avx
        0x432130:   vpxor   xmm0, xmm0, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432130, "\xc5\xf9\xef\xc0")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RIP = 0x432130

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432130, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x432131, 8) == ord("\xf9"))
        condition = Operators.AND(condition, cpu.read_int(0x432132, 8) == ord("\xef"))
        condition = Operators.AND(condition, cpu.read_int(0x432133, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x432134)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_1_symbolic(self):
        """Instruction VZEROUPPER_1
        Groups: avx
        0x4322a9:   vzeroupper
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322A9, "\xc5\xf8w")
        cpu.RIP = 0x4322A9

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322A9, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x4322AA, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x4322AB, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.RIP == 0x4322AC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_2_symbolic(self):
        """Instruction VZEROUPPER_2
        Groups: avx
        0x432319:   vzeroupper
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432319, "\xc5\xf8w")
        cpu.RIP = 0x432319

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432319, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x43231A, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x43231B, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.RIP == 0x43231C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_3_symbolic(self):
        """Instruction VZEROUPPER_3
        Groups: avx
        0x4322c9:   vzeroupper
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322C9, "\xc5\xf8w")
        cpu.RIP = 0x4322C9

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322C9, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x4322CA, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x4322CB, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.RIP == 0x4322CC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_4_symbolic(self):
        """Instruction VZEROUPPER_4
        Groups: avx
        0x432229:   vzeroupper
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432229, "\xc5\xf8w")
        cpu.RIP = 0x432229

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432229, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x43222A, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x43222B, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.RIP == 0x43222C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_5_symbolic(self):
        """Instruction VZEROUPPER_5
        Groups: avx
        0x4322a9:   vzeroupper
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x4322A9, "\xc5\xf8w")
        cpu.RIP = 0x4322A9

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4322A9, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x4322AA, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x4322AB, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.RIP == 0x4322AC)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_VZEROUPPER_6_symbolic(self):
        """Instruction VZEROUPPER_6
        Groups: avx
        0x432689:   vzeroupper
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00432000, 0x1000, "rwx")
        mem.write(0x432689, "\xc5\xf8w")
        cpu.RIP = 0x432689

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x432689, 8) == ord("\xc5"))
        condition = Operators.AND(condition, cpu.read_int(0x43268A, 8) == ord("\xf8"))
        condition = Operators.AND(condition, cpu.read_int(0x43268B, 8) == ord("w"))
        condition = Operators.AND(condition, cpu.RIP == 0x43268C)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_1_symbolic(self):
        """Instruction XGETBV_1
        Groups:
        0x7ffff7a4eb1b:     xgetbv
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4EB1B, "\x0f\x01\xd0")
        cpu.RIP = 0x7FFFF7A4EB1B
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4EB1B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4EB1C, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4EB1D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.RAX == 0x7)
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4EB1E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_2_symbolic(self):
        """Instruction XGETBV_2
        Groups:
        0x437c0e:   xgetbv
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x437C0E, "\x0f\x01\xd0")
        cpu.RIP = 0x437C0E
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437C10, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x437C0E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x437C0F, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.RAX == 0x7)
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x437C11)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_3_symbolic(self):
        """Instruction XGETBV_3
        Groups:
        0x7ffff7a4eb1b:     xgetbv
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7A4E000, 0x1000, "rwx")
        mem.write(0x7FFFF7A4EB1B, "\x0f\x01\xd0")
        cpu.RIP = 0x7FFFF7A4EB1B
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4EB1B, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4EB1C, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7A4EB1D, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.RAX == 0x7)
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7A4EB1E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_4_symbolic(self):
        """Instruction XGETBV_4
        Groups:
        0x43a59e:   xgetbv
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0043A000, 0x1000, "rwx")
        mem.write(0x43A59E, "\x0f\x01\xd0")
        cpu.RIP = 0x43A59E
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x43A5A0, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x43A59E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x43A59F, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.RAX == 0x7)
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x43A5A1)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_5_symbolic(self):
        """Instruction XGETBV_5
        Groups:
        0x43791e:   xgetbv
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x43791E, "\x0f\x01\xd0")
        cpu.RIP = 0x43791E
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437920, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x43791E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x43791F, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.RAX == 0x7)
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x437921)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XGETBV_6_symbolic(self):
        """Instruction XGETBV_6
        Groups:
        0x437a6e:   xgetbv
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00437000, 0x1000, "rwx")
        mem.write(0x437A6E, "\x0f\x01\xd0")
        cpu.RIP = 0x437A6E
        cpu.RCX = cs.new_bitvec(64)
        cs.add(cpu.RCX == 0x0)
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x0)
        cpu.RAX = cs.new_bitvec(64)
        cs.add(cpu.RAX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x437A70, 8) == ord("\xd0"))
        condition = Operators.AND(condition, cpu.read_int(0x437A6E, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x437A6F, 8) == ord("\x01"))
        condition = Operators.AND(condition, cpu.RAX == 0x7)
        condition = Operators.AND(condition, cpu.RCX == 0x0)
        condition = Operators.AND(condition, cpu.RDX == 0x0)
        condition = Operators.AND(condition, cpu.RIP == 0x437A71)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_1_symbolic(self):
        """Instruction XORPS_1
        Groups: sse1
        0x530d2f:   xorps   xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00530000, 0x1000, "rwx")
        mem.write(0x530D2F, "\x0fW\xc8")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFFFFFFFE0000002100000040FFFFFFFE)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0xFFFFFFBEFFFFFFDF00000061FFFFFFBE)
        cpu.RIP = 0x530D2F

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x530D30, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x530D31, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.read_int(0x530D2F, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFFFFFFFE0000002100000040FFFFFFFE)
        condition = Operators.AND(condition, cpu.XMM1 == 0x40FFFFFFFE0000002100000040)
        condition = Operators.AND(condition, cpu.RIP == 0x530D32)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_2_symbolic(self):
        """Instruction XORPS_2
        Groups: sse1
        0x530a6c:   xorps   xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00530000, 0x1000, "rwx")
        mem.write(0x530A6C, "\x0fW\xc8")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFFFFFFFE8000000100000040FFFFFFFE)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0xFFFFFFBE7FFFFFFF80000041FFFFFFBE)
        cpu.RIP = 0x530A6C

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x530A6C, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x530A6D, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x530A6E, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.XMM0 == 0xFFFFFFFE8000000100000040FFFFFFFE)
        condition = Operators.AND(condition, cpu.XMM1 == 0x40FFFFFFFE8000000100000040)
        condition = Operators.AND(condition, cpu.RIP == 0x530A6F)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_3_symbolic(self):
        """Instruction XORPS_3
        Groups: sse1
        0x54f76a:   xorps   xmm0, xmmword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x0054F000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x54F76A, "\x0fW\x04$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x0)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x54F76A

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x54F76A, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x54F76B, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x54F76C, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x54F76D, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x8000000000007FFF00007FFF80000000)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x54F76E)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_4_symbolic(self):
        """Instruction XORPS_4
        Groups: sse1
        0x540f22:   xorps   xmm1, xmm0
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00540000, 0x1000, "rwx")
        mem.write(0x540F22, "\x0fW\xc8")
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x200000007F0000002100000020)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x21000000200000007F00000021)
        cpu.RIP = 0x540F22

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x540F22, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x540F23, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x540F24, 8) == ord("\xc8"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x200000007F0000002100000020)
        condition = Operators.AND(condition, cpu.XMM1 == 0x10000005F0000005E00000001)
        condition = Operators.AND(condition, cpu.RIP == 0x540F25)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_5_symbolic(self):
        """Instruction XORPS_5
        Groups: sse1
        0x560955:   xorps   xmm0, xmmword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00560000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x7F)
        mem[addr] = value
        mem.write(0x560956, "W")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x21)
        mem[addr] = value
        mem.write(0x560957, "\x04")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        mem.write(0x560955, "\x0f")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        mem.write(0x560958, "$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x65)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x87)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0xFF)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0xFFFFFFFF8765432100007FFFFFFFFFFF)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x560955

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x87"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x560955, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x560956, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x560957, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x560958, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("C"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("e"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord("!"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\xff"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x7f"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x560959)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XORPS_6_symbolic(self):
        """Instruction XORPS_6
        Groups: sse1
        0x551ec4:   xorps   xmm0, xmmword ptr [rsp]
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00551000, 0x1000, "rwx")
        mem.mmap(0x7FFFFFFFC000, 0x1000, "rwx")
        mem.write(0x551EC4, "\x0fW\x04$")
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB0)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB1)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB2)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB3)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB4)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB5)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB6)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB7)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB8)
        value = cs.new_bitvec(8)
        cs.add(value == 0x20)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCB9)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBA)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBB)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBC)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBD)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBE)
        value = cs.new_bitvec(8)
        cs.add(value == 0x0)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7FFFFFFFCCBF)
        value = cs.new_bitvec(8)
        cs.add(value == 0x80)
        mem[addr] = value
        cpu.XMM0 = cs.new_bitvec(128)
        cs.add(cpu.XMM0 == 0x80000000000000200000002080000000)
        cpu.RSP = cs.new_bitvec(64)
        cs.add(cpu.RSP == 0x7FFFFFFFCCB0)
        cpu.RIP = 0x551EC4

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x551EC4, 8) == ord("\x0f"))
        condition = Operators.AND(condition, cpu.read_int(0x551EC5, 8) == ord("W"))
        condition = Operators.AND(condition, cpu.read_int(0x551EC6, 8) == ord("\x04"))
        condition = Operators.AND(condition, cpu.read_int(0x551EC7, 8) == ord("$"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB0, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB1, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB2, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB3, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB4, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB5, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB6, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB7, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB8, 8) == ord(" "))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCB9, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBA, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBB, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBC, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBD, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBE, 8) == ord("\x00"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFFFFFCCBF, 8) == ord("\x80"))
        condition = Operators.AND(condition, cpu.XMM0 == 0x0)
        condition = Operators.AND(condition, cpu.RSP == 0x7FFFFFFFCCB0)
        condition = Operators.AND(condition, cpu.RIP == 0x551EC8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_1_symbolic(self):
        """Instruction XOR_1
        Groups:
        0x7ffff7de6223:     xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE6000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE6223, "1\xc0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE6223
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xFFFFFF00)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6223, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE6224, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE6225)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_2_symbolic(self):
        """Instruction XOR_2
        Groups:
        0x7ffff7de405a:     xor     rdx, r13
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE405A, "L1\xea")
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.R13 = cs.new_bitvec(64)
        cs.add(cpu.R13 == 0x7C96F087)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE405A
        cpu.RDX = cs.new_bitvec(64)
        cs.add(cpu.RDX == 0x7C96F087)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE405A, 8) == ord("L"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE405B, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE405C, 8) == ord("\xea"))
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.R13 == 0x7C96F087)
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE405D)
        condition = Operators.AND(condition, cpu.RDX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_3_symbolic(self):
        """Instruction XOR_3
        Groups:
        0x7ffff7df45a0:     xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF45A0, "1\xc0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF45A0
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0xF7FF7C00)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45A0, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF45A1, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF45A2)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_4_symbolic(self):
        """Instruction XOR_4
        Groups:
        0x7ffff7de3ff6:     xor     edx, edx
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3FF6, "1\xd2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3FF6
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x3F3)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF6, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3FF7, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE3FF8)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.EDX == 0x0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_5_symbolic(self):
        """Instruction XOR_5
        Groups:
        0x7ffff7df40cc:     xor     eax, eax
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DF4000, 0x1000, "rwx")
        mem.write(0x7FFFF7DF40CC, "1\xc0")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DF40CC
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x3C340000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF40CC, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DF40CD, 8) == ord("\xc0"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DF40CE)
        condition = Operators.AND(condition, cpu.EAX == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))

    def test_XOR_6_symbolic(self):
        """Instruction XOR_6
        Groups:
        0x7ffff7de3699:     xor     r10d, r10d
        """
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x7FFFF7DE3000, 0x1000, "rwx")
        mem.write(0x7FFFF7DE3699, "E1\xd2")
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x7FFFF7DE3699
        cpu.R10D = cs.new_bitvec(32)
        cs.add(cpu.R10D == 0xF7A2E000)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == True)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                # cpu.writeback()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE3699, 8) == ord("E"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE369A, 8) == ord("1"))
        condition = Operators.AND(condition, cpu.read_int(0x7FFFF7DE369B, 8) == ord("\xd2"))
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x7FFFF7DE369C)
        condition = Operators.AND(condition, cpu.R10D == 0x0)
        condition = Operators.AND(condition, cpu.PF == True)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))


if __name__ == "__main__":
    unittest.main()
