
import unittest
import functools
from manticore.core.cpu.x86 import *
from manticore.core.smtlib import Operators
from manticore.core.memory import *


def skipIfNotImplemented(f):
    # XXX(yan) the inner function name must start with test_
    @functools.wraps(f)
    def test_inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except NotImplementedError as e:
            raise unittest.SkipTest(str(e))

    return test_inner

def forAllTests(decorator):
    def decorate(cls):
        for attr in cls.__dict__:
            if not attr.startswith('test_'):
                continue
            method = getattr(cls, attr)
            if callable(method):
                setattr(cls, attr, decorator(method))
        return cls

    return decorate

@forAllTests(skipIfNotImplemented)
class CPUTest(unittest.TestCase):
    _multiprocess_can_split_ = True

    class ROOperand(object):
        ''' Mocking class for operand ronly '''
        def __init__(self, size, value):
            self.size = size
            self.value = value
        def read(self):
            return self.value & ((1<<self.size)-1)

    class RWOperand(ROOperand):
        ''' Mocking class for operand rw '''
        def write(self, value):
            self.value = value & ((1<<self.size)-1)
            return self.value


    def test_PCMPESTRI_1(self):
        ''' Instruction PCMPESTRI_1
            Groups: sse42
            0x400bec:	pcmpestri	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bec] = b'f'
        mem[0x00400bed] = b'\x0f'
        mem[0x00400bee] = b':'
        mem[0x00400bef] = b'a'
        mem[0x00400bf0] = b'\xca'
        mem[0x00400bf1] = b'd'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bec
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400bec],  b'f')
        self.assertEqual(mem[0x400bed],  b'\x0f')
        self.assertEqual(mem[0x400bee],  b':')
        self.assertEqual(mem[0x400bef],  b'a')
        self.assertEqual(mem[0x400bf0],  b'\xca')
        self.assertEqual(mem[0x400bf1],  b'd')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197362)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_10(self):
        ''' Instruction PCMPESTRI_10
            Groups: sse42
            0x400b20:	pcmpestri	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b20] = b'f'
        mem[0x00400b21] = b'\x0f'
        mem[0x00400b22] = b':'
        mem[0x00400b23] = b'a'
        mem[0x00400b24] = b'\xca'
        mem[0x00400b25] = b' '
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b20
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b20],  b'f')
        self.assertEqual(mem[0x400b21],  b'\x0f')
        self.assertEqual(mem[0x400b22],  b':')
        self.assertEqual(mem[0x400b23],  b'a')
        self.assertEqual(mem[0x400b24],  b'\xca')
        self.assertEqual(mem[0x400b25],  b' ')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197158)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_11(self):
        ''' Instruction PCMPESTRI_11
            Groups: sse42
            0x400b38:	pcmpestri	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b38] = b'f'
        mem[0x00400b39] = b'\x0f'
        mem[0x00400b3a] = b':'
        mem[0x00400b3b] = b'a'
        mem[0x00400b3c] = b'\xca'
        mem[0x00400b3d] = b'('
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b38
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b38],  b'f')
        self.assertEqual(mem[0x400b39],  b'\x0f')
        self.assertEqual(mem[0x400b3a],  b':')
        self.assertEqual(mem[0x400b3b],  b'a')
        self.assertEqual(mem[0x400b3c],  b'\xca')
        self.assertEqual(mem[0x400b3d],  b'(')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197182)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_12(self):
        ''' Instruction PCMPESTRI_12
            Groups: sse42
            0x400bfe:	pcmpestri	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c00] = b':'
        mem[0x00400c01] = b'a'
        mem[0x00400c02] = b'\xca'
        mem[0x00400c03] = b'i'
        mem[0x00400bfe] = b'f'
        mem[0x00400bff] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400bfe
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400c00],  b':')
        self.assertEqual(mem[0x400c01],  b'a')
        self.assertEqual(mem[0x400c02],  b'\xca')
        self.assertEqual(mem[0x400c03],  b'i')
        self.assertEqual(mem[0x400bfe],  b'f')
        self.assertEqual(mem[0x400bff],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197380)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_13(self):
        ''' Instruction PCMPESTRI_13
            Groups: sse42
            0x400b86:	pcmpestri	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b86] = b'f'
        mem[0x00400b87] = b'\x0f'
        mem[0x00400b88] = b':'
        mem[0x00400b89] = b'a'
        mem[0x00400b8a] = b'\xca'
        mem[0x00400b8b] = b'A'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b86
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b86],  b'f')
        self.assertEqual(mem[0x400b87],  b'\x0f')
        self.assertEqual(mem[0x400b88],  b':')
        self.assertEqual(mem[0x400b89],  b'a')
        self.assertEqual(mem[0x400b8a],  b'\xca')
        self.assertEqual(mem[0x400b8b],  b'A')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197260)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_14(self):
        ''' Instruction PCMPESTRI_14
            Groups: sse42
            0x400ae4:	pcmpestri	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ae4] = b'f'
        mem[0x00400ae5] = b'\x0f'
        mem[0x00400ae6] = b':'
        mem[0x00400ae7] = b'a'
        mem[0x00400ae8] = b'\xca'
        mem[0x00400ae9] = b'\x0c'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400ae4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400ae4],  b'f')
        self.assertEqual(mem[0x400ae5],  b'\x0f')
        self.assertEqual(mem[0x400ae6],  b':')
        self.assertEqual(mem[0x400ae7],  b'a')
        self.assertEqual(mem[0x400ae8],  b'\xca')
        self.assertEqual(mem[0x400ae9],  b'\x0c')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197098)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_15(self):
        ''' Instruction PCMPESTRI_15
            Groups: sse42
            0x400c04:	pcmpestri	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c04] = b'f'
        mem[0x00400c05] = b'\x0f'
        mem[0x00400c06] = b':'
        mem[0x00400c07] = b'a'
        mem[0x00400c08] = b'\xca'
        mem[0x00400c09] = b'l'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400c04
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400c04],  b'f')
        self.assertEqual(mem[0x400c05],  b'\x0f')
        self.assertEqual(mem[0x400c06],  b':')
        self.assertEqual(mem[0x400c07],  b'a')
        self.assertEqual(mem[0x400c08],  b'\xca')
        self.assertEqual(mem[0x400c09],  b'l')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197386)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_16(self):
        ''' Instruction PCMPESTRI_16
            Groups: sse42
            0x400b6e:	pcmpestri	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b6e] = b'f'
        mem[0x00400b6f] = b'\x0f'
        mem[0x00400b70] = b':'
        mem[0x00400b71] = b'a'
        mem[0x00400b72] = b'\xca'
        mem[0x00400b73] = b'9'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b6e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b6e],  b'f')
        self.assertEqual(mem[0x400b6f],  b'\x0f')
        self.assertEqual(mem[0x400b70],  b':')
        self.assertEqual(mem[0x400b71],  b'a')
        self.assertEqual(mem[0x400b72],  b'\xca')
        self.assertEqual(mem[0x400b73],  b'9')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197236)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_17(self):
        ''' Instruction PCMPESTRI_17
            Groups: sse42
            0x400b2c:	pcmpestri	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b2c] = b'f'
        mem[0x00400b2d] = b'\x0f'
        mem[0x00400b2e] = b':'
        mem[0x00400b2f] = b'a'
        mem[0x00400b30] = b'\xca'
        mem[0x00400b31] = b'$'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b2c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b2c],  b'f')
        self.assertEqual(mem[0x400b2d],  b'\x0f')
        self.assertEqual(mem[0x400b2e],  b':')
        self.assertEqual(mem[0x400b2f],  b'a')
        self.assertEqual(mem[0x400b30],  b'\xca')
        self.assertEqual(mem[0x400b31],  b'$')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197170)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_18(self):
        ''' Instruction PCMPESTRI_18
            Groups: sse42
            0x400af0:	pcmpestri	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400af0] = b'f'
        mem[0x00400af1] = b'\x0f'
        mem[0x00400af2] = b':'
        mem[0x00400af3] = b'a'
        mem[0x00400af4] = b'\xca'
        mem[0x00400af5] = b'\x10'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400af0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400af0],  b'f')
        self.assertEqual(mem[0x400af1],  b'\x0f')
        self.assertEqual(mem[0x400af2],  b':')
        self.assertEqual(mem[0x400af3],  b'a')
        self.assertEqual(mem[0x400af4],  b'\xca')
        self.assertEqual(mem[0x400af5],  b'\x10')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197110)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_19(self):
        ''' Instruction PCMPESTRI_19
            Groups: sse42
            0x400be0:	pcmpestri	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400be0] = b'f'
        mem[0x00400be1] = b'\x0f'
        mem[0x00400be2] = b':'
        mem[0x00400be3] = b'a'
        mem[0x00400be4] = b'\xca'
        mem[0x00400be5] = b'`'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400be0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400be0],  b'f')
        self.assertEqual(mem[0x400be1],  b'\x0f')
        self.assertEqual(mem[0x400be2],  b':')
        self.assertEqual(mem[0x400be3],  b'a')
        self.assertEqual(mem[0x400be4],  b'\xca')
        self.assertEqual(mem[0x400be5],  b'`')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197350)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_2(self):
        ''' Instruction PCMPESTRI_2
            Groups: sse42
            0x400b4a:	pcmpestri	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b4a] = b'f'
        mem[0x00400b4b] = b'\x0f'
        mem[0x00400b4c] = b':'
        mem[0x00400b4d] = b'a'
        mem[0x00400b4e] = b'\xca'
        mem[0x00400b4f] = b'-'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b4a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b4a],  b'f')
        self.assertEqual(mem[0x400b4b],  b'\x0f')
        self.assertEqual(mem[0x400b4c],  b':')
        self.assertEqual(mem[0x400b4d],  b'a')
        self.assertEqual(mem[0x400b4e],  b'\xca')
        self.assertEqual(mem[0x400b4f],  b'-')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197200)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_20(self):
        ''' Instruction PCMPESTRI_20
            Groups: sse42
            0x400c0a:	pcmpestri	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c0a] = b'f'
        mem[0x00400c0b] = b'\x0f'
        mem[0x00400c0c] = b':'
        mem[0x00400c0d] = b'a'
        mem[0x00400c0e] = b'\xca'
        mem[0x00400c0f] = b'm'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400c0a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400c0a],  b'f')
        self.assertEqual(mem[0x400c0b],  b'\x0f')
        self.assertEqual(mem[0x400c0c],  b':')
        self.assertEqual(mem[0x400c0d],  b'a')
        self.assertEqual(mem[0x400c0e],  b'\xca')
        self.assertEqual(mem[0x400c0f],  b'm')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197392)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_21(self):
        ''' Instruction PCMPESTRI_21
            Groups: sse42
            0x400b14:	pcmpestri	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b14] = b'f'
        mem[0x00400b15] = b'\x0f'
        mem[0x00400b16] = b':'
        mem[0x00400b17] = b'a'
        mem[0x00400b18] = b'\xca'
        mem[0x00400b19] = b'\x1c'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b14
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b14],  b'f')
        self.assertEqual(mem[0x400b15],  b'\x0f')
        self.assertEqual(mem[0x400b16],  b':')
        self.assertEqual(mem[0x400b17],  b'a')
        self.assertEqual(mem[0x400b18],  b'\xca')
        self.assertEqual(mem[0x400b19],  b'\x1c')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197146)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_22(self):
        ''' Instruction PCMPESTRI_22
            Groups: sse42
            0x400bb6:	pcmpestri	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bb6] = b'f'
        mem[0x00400bb7] = b'\x0f'
        mem[0x00400bb8] = b':'
        mem[0x00400bb9] = b'a'
        mem[0x00400bba] = b'\xca'
        mem[0x00400bbb] = b'Q'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bb6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400bb6],  b'f')
        self.assertEqual(mem[0x400bb7],  b'\x0f')
        self.assertEqual(mem[0x400bb8],  b':')
        self.assertEqual(mem[0x400bb9],  b'a')
        self.assertEqual(mem[0x400bba],  b'\xca')
        self.assertEqual(mem[0x400bbb],  b'Q')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197308)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_23(self):
        ''' Instruction PCMPESTRI_23
            Groups: sse42
            0x400b08:	pcmpestri	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b08] = b'f'
        mem[0x00400b09] = b'\x0f'
        mem[0x00400b0a] = b':'
        mem[0x00400b0b] = b'a'
        mem[0x00400b0c] = b'\xca'
        mem[0x00400b0d] = b'\x18'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b08
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b08],  b'f')
        self.assertEqual(mem[0x400b09],  b'\x0f')
        self.assertEqual(mem[0x400b0a],  b':')
        self.assertEqual(mem[0x400b0b],  b'a')
        self.assertEqual(mem[0x400b0c],  b'\xca')
        self.assertEqual(mem[0x400b0d],  b'\x18')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197134)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_24(self):
        ''' Instruction PCMPESTRI_24
            Groups: sse42
            0x400c1c:	pcmpestri	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c20] = b'\xca'
        mem[0x00400c21] = b't'
        mem[0x00400c1c] = b'f'
        mem[0x00400c1d] = b'\x0f'
        mem[0x00400c1e] = b':'
        mem[0x00400c1f] = b'a'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c1c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c20],  b'\xca')
        self.assertEqual(mem[0x400c21],  b't')
        self.assertEqual(mem[0x400c1c],  b'f')
        self.assertEqual(mem[0x400c1d],  b'\x0f')
        self.assertEqual(mem[0x400c1e],  b':')
        self.assertEqual(mem[0x400c1f],  b'a')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197410)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_25(self):
        ''' Instruction PCMPESTRI_25
            Groups: sse42
            0x400bda:	pcmpestri	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bda] = b'f'
        mem[0x00400bdb] = b'\x0f'
        mem[0x00400bdc] = b':'
        mem[0x00400bdd] = b'a'
        mem[0x00400bde] = b'\xca'
        mem[0x00400bdf] = b']'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bda
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400bda],  b'f')
        self.assertEqual(mem[0x400bdb],  b'\x0f')
        self.assertEqual(mem[0x400bdc],  b':')
        self.assertEqual(mem[0x400bdd],  b'a')
        self.assertEqual(mem[0x400bde],  b'\xca')
        self.assertEqual(mem[0x400bdf],  b']')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197344)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_26(self):
        ''' Instruction PCMPESTRI_26
            Groups: sse42
            0x400c10:	pcmpestri	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c10] = b'f'
        mem[0x00400c11] = b'\x0f'
        mem[0x00400c12] = b':'
        mem[0x00400c13] = b'a'
        mem[0x00400c14] = b'\xca'
        mem[0x00400c15] = b'p'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400c10
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400c10],  b'f')
        self.assertEqual(mem[0x400c11],  b'\x0f')
        self.assertEqual(mem[0x400c12],  b':')
        self.assertEqual(mem[0x400c13],  b'a')
        self.assertEqual(mem[0x400c14],  b'\xca')
        self.assertEqual(mem[0x400c15],  b'p')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197398)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_27(self):
        ''' Instruction PCMPESTRI_27
            Groups: sse42
            0x400c34:	pcmpestri	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c34] = b'f'
        mem[0x00400c35] = b'\x0f'
        mem[0x00400c36] = b':'
        mem[0x00400c37] = b'a'
        mem[0x00400c38] = b'\xca'
        mem[0x00400c39] = b'|'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c34
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400c34],  b'f')
        self.assertEqual(mem[0x400c35],  b'\x0f')
        self.assertEqual(mem[0x400c36],  b':')
        self.assertEqual(mem[0x400c37],  b'a')
        self.assertEqual(mem[0x400c38],  b'\xca')
        self.assertEqual(mem[0x400c39],  b'|')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197434)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_28(self):
        ''' Instruction PCMPESTRI_28
            Groups: sse42
            0x400c2e:	pcmpestri	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c2e] = b'f'
        mem[0x00400c2f] = b'\x0f'
        mem[0x00400c30] = b':'
        mem[0x00400c31] = b'a'
        mem[0x00400c32] = b'\xca'
        mem[0x00400c33] = b'y'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c2e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400c2e],  b'f')
        self.assertEqual(mem[0x400c2f],  b'\x0f')
        self.assertEqual(mem[0x400c30],  b':')
        self.assertEqual(mem[0x400c31],  b'a')
        self.assertEqual(mem[0x400c32],  b'\xca')
        self.assertEqual(mem[0x400c33],  b'y')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197428)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_29(self):
        ''' Instruction PCMPESTRI_29
            Groups: sse42
            0x400b80:	pcmpestri	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b80] = b'f'
        mem[0x00400b81] = b'\x0f'
        mem[0x00400b82] = b':'
        mem[0x00400b83] = b'a'
        mem[0x00400b84] = b'\xca'
        mem[0x00400b85] = b'@'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b80
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b80],  b'f')
        self.assertEqual(mem[0x400b81],  b'\x0f')
        self.assertEqual(mem[0x400b82],  b':')
        self.assertEqual(mem[0x400b83],  b'a')
        self.assertEqual(mem[0x400b84],  b'\xca')
        self.assertEqual(mem[0x400b85],  b'@')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197254)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_3(self):
        ''' Instruction PCMPESTRI_3
            Groups: sse42
            0x400ac6:	pcmpestri	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ac6] = b'f'
        mem[0x00400ac7] = b'\x0f'
        mem[0x00400ac8] = b':'
        mem[0x00400ac9] = b'a'
        mem[0x00400aca] = b'\xca'
        mem[0x00400acb] = b'\x01'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400ac6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400ac6],  b'f')
        self.assertEqual(mem[0x400ac7],  b'\x0f')
        self.assertEqual(mem[0x400ac8],  b':')
        self.assertEqual(mem[0x400ac9],  b'a')
        self.assertEqual(mem[0x400aca],  b'\xca')
        self.assertEqual(mem[0x400acb],  b'\x01')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197068)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_30(self):
        ''' Instruction PCMPESTRI_30
            Groups: sse42
            0x400ba4:	pcmpestri	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ba4] = b'f'
        mem[0x00400ba5] = b'\x0f'
        mem[0x00400ba6] = b':'
        mem[0x00400ba7] = b'a'
        mem[0x00400ba8] = b'\xca'
        mem[0x00400ba9] = b'L'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400ba4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400ba4],  b'f')
        self.assertEqual(mem[0x400ba5],  b'\x0f')
        self.assertEqual(mem[0x400ba6],  b':')
        self.assertEqual(mem[0x400ba7],  b'a')
        self.assertEqual(mem[0x400ba8],  b'\xca')
        self.assertEqual(mem[0x400ba9],  b'L')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197290)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_31(self):
        ''' Instruction PCMPESTRI_31
            Groups: sse42
            0x400ad8:	pcmpestri	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ad8] = b'f'
        mem[0x00400ad9] = b'\x0f'
        mem[0x00400ada] = b':'
        mem[0x00400adb] = b'a'
        mem[0x00400adc] = b'\xca'
        mem[0x00400add] = b'\x08'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400ad8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400ad8],  b'f')
        self.assertEqual(mem[0x400ad9],  b'\x0f')
        self.assertEqual(mem[0x400ada],  b':')
        self.assertEqual(mem[0x400adb],  b'a')
        self.assertEqual(mem[0x400adc],  b'\xca')
        self.assertEqual(mem[0x400add],  b'\x08')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197086)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_32(self):
        ''' Instruction PCMPESTRI_32
            Groups: sse42
            0x400b50:	pcmpestri	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b50] = b'f'
        mem[0x00400b51] = b'\x0f'
        mem[0x00400b52] = b':'
        mem[0x00400b53] = b'a'
        mem[0x00400b54] = b'\xca'
        mem[0x00400b55] = b'0'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b50
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b50],  b'f')
        self.assertEqual(mem[0x400b51],  b'\x0f')
        self.assertEqual(mem[0x400b52],  b':')
        self.assertEqual(mem[0x400b53],  b'a')
        self.assertEqual(mem[0x400b54],  b'\xca')
        self.assertEqual(mem[0x400b55],  b'0')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197206)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_33(self):
        ''' Instruction PCMPESTRI_33
            Groups: sse42
            0x400b44:	pcmpestri	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b44] = b'f'
        mem[0x00400b45] = b'\x0f'
        mem[0x00400b46] = b':'
        mem[0x00400b47] = b'a'
        mem[0x00400b48] = b'\xca'
        mem[0x00400b49] = b','
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400b44
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400b44],  b'f')
        self.assertEqual(mem[0x400b45],  b'\x0f')
        self.assertEqual(mem[0x400b46],  b':')
        self.assertEqual(mem[0x400b47],  b'a')
        self.assertEqual(mem[0x400b48],  b'\xca')
        self.assertEqual(mem[0x400b49],  b',')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197194)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_34(self):
        ''' Instruction PCMPESTRI_34
            Groups: sse42
            0x400bbc:	pcmpestri	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bc0] = b'\xca'
        mem[0x00400bc1] = b'T'
        mem[0x00400bbc] = b'f'
        mem[0x00400bbd] = b'\x0f'
        mem[0x00400bbe] = b':'
        mem[0x00400bbf] = b'a'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bbc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400bc0],  b'\xca')
        self.assertEqual(mem[0x400bc1],  b'T')
        self.assertEqual(mem[0x400bbc],  b'f')
        self.assertEqual(mem[0x400bbd],  b'\x0f')
        self.assertEqual(mem[0x400bbe],  b':')
        self.assertEqual(mem[0x400bbf],  b'a')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197314)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_35(self):
        ''' Instruction PCMPESTRI_35
            Groups: sse42
            0x400ad2:	pcmpestri	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ad2] = b'f'
        mem[0x00400ad3] = b'\x0f'
        mem[0x00400ad4] = b':'
        mem[0x00400ad5] = b'a'
        mem[0x00400ad6] = b'\xca'
        mem[0x00400ad7] = b'\x05'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400ad2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400ad2],  b'f')
        self.assertEqual(mem[0x400ad3],  b'\x0f')
        self.assertEqual(mem[0x400ad4],  b':')
        self.assertEqual(mem[0x400ad5],  b'a')
        self.assertEqual(mem[0x400ad6],  b'\xca')
        self.assertEqual(mem[0x400ad7],  b'\x05')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197080)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_36(self):
        ''' Instruction PCMPESTRI_36
            Groups: sse42
            0x400b26:	pcmpestri	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b26] = b'f'
        mem[0x00400b27] = b'\x0f'
        mem[0x00400b28] = b':'
        mem[0x00400b29] = b'a'
        mem[0x00400b2a] = b'\xca'
        mem[0x00400b2b] = b'!'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b26
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b26],  b'f')
        self.assertEqual(mem[0x400b27],  b'\x0f')
        self.assertEqual(mem[0x400b28],  b':')
        self.assertEqual(mem[0x400b29],  b'a')
        self.assertEqual(mem[0x400b2a],  b'\xca')
        self.assertEqual(mem[0x400b2b],  b'!')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197164)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_37(self):
        ''' Instruction PCMPESTRI_37
            Groups: sse42
            0x400bc8:	pcmpestri	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bc8] = b'f'
        mem[0x00400bc9] = b'\x0f'
        mem[0x00400bca] = b':'
        mem[0x00400bcb] = b'a'
        mem[0x00400bcc] = b'\xca'
        mem[0x00400bcd] = b'X'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bc8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400bc8],  b'f')
        self.assertEqual(mem[0x400bc9],  b'\x0f')
        self.assertEqual(mem[0x400bca],  b':')
        self.assertEqual(mem[0x400bcb],  b'a')
        self.assertEqual(mem[0x400bcc],  b'\xca')
        self.assertEqual(mem[0x400bcd],  b'X')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197326)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_38(self):
        ''' Instruction PCMPESTRI_38
            Groups: sse42
            0x400b98:	pcmpestri	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b98] = b'f'
        mem[0x00400b99] = b'\x0f'
        mem[0x00400b9a] = b':'
        mem[0x00400b9b] = b'a'
        mem[0x00400b9c] = b'\xca'
        mem[0x00400b9d] = b'H'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b98
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b98],  b'f')
        self.assertEqual(mem[0x400b99],  b'\x0f')
        self.assertEqual(mem[0x400b9a],  b':')
        self.assertEqual(mem[0x400b9b],  b'a')
        self.assertEqual(mem[0x400b9c],  b'\xca')
        self.assertEqual(mem[0x400b9d],  b'H')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197278)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_39(self):
        ''' Instruction PCMPESTRI_39
            Groups: sse42
            0x400b02:	pcmpestri	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b02] = b'f'
        mem[0x00400b03] = b'\x0f'
        mem[0x00400b04] = b':'
        mem[0x00400b05] = b'a'
        mem[0x00400b06] = b'\xca'
        mem[0x00400b07] = b'\x15'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b02
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b02],  b'f')
        self.assertEqual(mem[0x400b03],  b'\x0f')
        self.assertEqual(mem[0x400b04],  b':')
        self.assertEqual(mem[0x400b05],  b'a')
        self.assertEqual(mem[0x400b06],  b'\xca')
        self.assertEqual(mem[0x400b07],  b'\x15')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197128)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_4(self):
        ''' Instruction PCMPESTRI_4
            Groups: sse42
            0x400c22:	pcmpestri	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c22] = b'f'
        mem[0x00400c23] = b'\x0f'
        mem[0x00400c24] = b':'
        mem[0x00400c25] = b'a'
        mem[0x00400c26] = b'\xca'
        mem[0x00400c27] = b'u'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c22
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c22],  b'f')
        self.assertEqual(mem[0x400c23],  b'\x0f')
        self.assertEqual(mem[0x400c24],  b':')
        self.assertEqual(mem[0x400c25],  b'a')
        self.assertEqual(mem[0x400c26],  b'\xca')
        self.assertEqual(mem[0x400c27],  b'u')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197416)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_40(self):
        ''' Instruction PCMPESTRI_40
            Groups: sse42
            0x400c3a:	pcmpestri	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c3a] = b'f'
        mem[0x00400c3b] = b'\x0f'
        mem[0x00400c3c] = b':'
        mem[0x00400c3d] = b'a'
        mem[0x00400c3e] = b'\xca'
        mem[0x00400c3f] = b'}'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c3a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c3a],  b'f')
        self.assertEqual(mem[0x400c3b],  b'\x0f')
        self.assertEqual(mem[0x400c3c],  b':')
        self.assertEqual(mem[0x400c3d],  b'a')
        self.assertEqual(mem[0x400c3e],  b'\xca')
        self.assertEqual(mem[0x400c3f],  b'}')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197440)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_41(self):
        ''' Instruction PCMPESTRI_41
            Groups: sse42
            0x400af6:	pcmpestri	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400af6] = b'f'
        mem[0x00400af7] = b'\x0f'
        mem[0x00400af8] = b':'
        mem[0x00400af9] = b'a'
        mem[0x00400afa] = b'\xca'
        mem[0x00400afb] = b'\x11'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400af6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400af6],  b'f')
        self.assertEqual(mem[0x400af7],  b'\x0f')
        self.assertEqual(mem[0x400af8],  b':')
        self.assertEqual(mem[0x400af9],  b'a')
        self.assertEqual(mem[0x400afa],  b'\xca')
        self.assertEqual(mem[0x400afb],  b'\x11')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197116)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_42(self):
        ''' Instruction PCMPESTRI_42
            Groups: sse42
            0x400c28:	pcmpestri	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c28] = b'f'
        mem[0x00400c29] = b'\x0f'
        mem[0x00400c2a] = b':'
        mem[0x00400c2b] = b'a'
        mem[0x00400c2c] = b'\xca'
        mem[0x00400c2d] = b'x'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c28
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c28],  b'f')
        self.assertEqual(mem[0x400c29],  b'\x0f')
        self.assertEqual(mem[0x400c2a],  b':')
        self.assertEqual(mem[0x400c2b],  b'a')
        self.assertEqual(mem[0x400c2c],  b'\xca')
        self.assertEqual(mem[0x400c2d],  b'x')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197422)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_43(self):
        ''' Instruction PCMPESTRI_43
            Groups: sse42
            0x400b62:	pcmpestri	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b62] = b'f'
        mem[0x00400b63] = b'\x0f'
        mem[0x00400b64] = b':'
        mem[0x00400b65] = b'a'
        mem[0x00400b66] = b'\xca'
        mem[0x00400b67] = b'5'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b62
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b62],  b'f')
        self.assertEqual(mem[0x400b63],  b'\x0f')
        self.assertEqual(mem[0x400b64],  b':')
        self.assertEqual(mem[0x400b65],  b'a')
        self.assertEqual(mem[0x400b66],  b'\xca')
        self.assertEqual(mem[0x400b67],  b'5')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197224)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_44(self):
        ''' Instruction PCMPESTRI_44
            Groups: sse42
            0x400baa:	pcmpestri	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400baa] = b'f'
        mem[0x00400bab] = b'\x0f'
        mem[0x00400bac] = b':'
        mem[0x00400bad] = b'a'
        mem[0x00400bae] = b'\xca'
        mem[0x00400baf] = b'M'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400baa
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400baa],  b'f')
        self.assertEqual(mem[0x400bab],  b'\x0f')
        self.assertEqual(mem[0x400bac],  b':')
        self.assertEqual(mem[0x400bad],  b'a')
        self.assertEqual(mem[0x400bae],  b'\xca')
        self.assertEqual(mem[0x400baf],  b'M')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197296)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_45(self):
        ''' Instruction PCMPESTRI_45
            Groups: sse42
            0x400b68:	pcmpestri	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b68] = b'f'
        mem[0x00400b69] = b'\x0f'
        mem[0x00400b6a] = b':'
        mem[0x00400b6b] = b'a'
        mem[0x00400b6c] = b'\xca'
        mem[0x00400b6d] = b'8'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b68
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b68],  b'f')
        self.assertEqual(mem[0x400b69],  b'\x0f')
        self.assertEqual(mem[0x400b6a],  b':')
        self.assertEqual(mem[0x400b6b],  b'a')
        self.assertEqual(mem[0x400b6c],  b'\xca')
        self.assertEqual(mem[0x400b6d],  b'8')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197230)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_46(self):
        ''' Instruction PCMPESTRI_46
            Groups: sse42
            0x400c16:	pcmpestri	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400c16] = b'f'
        mem[0x00400c17] = b'\x0f'
        mem[0x00400c18] = b':'
        mem[0x00400c19] = b'a'
        mem[0x00400c1a] = b'\xca'
        mem[0x00400c1b] = b'q'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c16
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c16],  b'f')
        self.assertEqual(mem[0x400c17],  b'\x0f')
        self.assertEqual(mem[0x400c18],  b':')
        self.assertEqual(mem[0x400c19],  b'a')
        self.assertEqual(mem[0x400c1a],  b'\xca')
        self.assertEqual(mem[0x400c1b],  b'q')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197404)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_47(self):
        ''' Instruction PCMPESTRI_47
            Groups: sse42
            0x400acc:	pcmpestri	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400acc] = b'f'
        mem[0x00400acd] = b'\x0f'
        mem[0x00400ace] = b':'
        mem[0x00400acf] = b'a'
        mem[0x00400ad0] = b'\xca'
        mem[0x00400ad1] = b'\x04'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400acc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400acc],  b'f')
        self.assertEqual(mem[0x400acd],  b'\x0f')
        self.assertEqual(mem[0x400ace],  b':')
        self.assertEqual(mem[0x400acf],  b'a')
        self.assertEqual(mem[0x400ad0],  b'\xca')
        self.assertEqual(mem[0x400ad1],  b'\x04')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197074)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_48(self):
        ''' Instruction PCMPESTRI_48
            Groups: sse42
            0x400b92:	pcmpestri	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b92] = b'f'
        mem[0x00400b93] = b'\x0f'
        mem[0x00400b94] = b':'
        mem[0x00400b95] = b'a'
        mem[0x00400b96] = b'\xca'
        mem[0x00400b97] = b'E'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b92
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b92],  b'f')
        self.assertEqual(mem[0x400b93],  b'\x0f')
        self.assertEqual(mem[0x400b94],  b':')
        self.assertEqual(mem[0x400b95],  b'a')
        self.assertEqual(mem[0x400b96],  b'\xca')
        self.assertEqual(mem[0x400b97],  b'E')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197272)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_49(self):
        ''' Instruction PCMPESTRI_49
            Groups: sse42
            0x400afc:	pcmpestri	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b00] = b'\xca'
        mem[0x00400b01] = b'\x14'
        mem[0x00400afc] = b'f'
        mem[0x00400afd] = b'\x0f'
        mem[0x00400afe] = b':'
        mem[0x00400aff] = b'a'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400afc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b00],  b'\xca')
        self.assertEqual(mem[0x400b01],  b'\x14')
        self.assertEqual(mem[0x400afc],  b'f')
        self.assertEqual(mem[0x400afd],  b'\x0f')
        self.assertEqual(mem[0x400afe],  b':')
        self.assertEqual(mem[0x400aff],  b'a')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197122)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_5(self):
        ''' Instruction PCMPESTRI_5
            Groups: sse42
            0x400be6:	pcmpestri	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400be6] = b'f'
        mem[0x00400be7] = b'\x0f'
        mem[0x00400be8] = b':'
        mem[0x00400be9] = b'a'
        mem[0x00400bea] = b'\xca'
        mem[0x00400beb] = b'a'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400be6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400be6],  b'f')
        self.assertEqual(mem[0x400be7],  b'\x0f')
        self.assertEqual(mem[0x400be8],  b':')
        self.assertEqual(mem[0x400be9],  b'a')
        self.assertEqual(mem[0x400bea],  b'\xca')
        self.assertEqual(mem[0x400beb],  b'a')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197356)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_50(self):
        ''' Instruction PCMPESTRI_50
            Groups: sse42
            0x400b9e:	pcmpestri	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ba0] = b':'
        mem[0x00400ba1] = b'a'
        mem[0x00400ba2] = b'\xca'
        mem[0x00400ba3] = b'I'
        mem[0x00400b9e] = b'f'
        mem[0x00400b9f] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400b9e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400ba0],  b':')
        self.assertEqual(mem[0x400ba1],  b'a')
        self.assertEqual(mem[0x400ba2],  b'\xca')
        self.assertEqual(mem[0x400ba3],  b'I')
        self.assertEqual(mem[0x400b9e],  b'f')
        self.assertEqual(mem[0x400b9f],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197284)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_51(self):
        ''' Instruction PCMPESTRI_51
            Groups: sse42
            0x400ac0:	pcmpestri	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ac0] = b'f'
        mem[0x00400ac1] = b'\x0f'
        mem[0x00400ac2] = b':'
        mem[0x00400ac3] = b'a'
        mem[0x00400ac4] = b'\xca'
        mem[0x00400ac5] = b'\x00'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400ac0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400ac0],  b'f')
        self.assertEqual(mem[0x400ac1],  b'\x0f')
        self.assertEqual(mem[0x400ac2],  b':')
        self.assertEqual(mem[0x400ac3],  b'a')
        self.assertEqual(mem[0x400ac4],  b'\xca')
        self.assertEqual(mem[0x400ac5],  b'\x00')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197062)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_52(self):
        ''' Instruction PCMPESTRI_52
            Groups: sse42
            0x400b74:	pcmpestri	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b74] = b'f'
        mem[0x00400b75] = b'\x0f'
        mem[0x00400b76] = b':'
        mem[0x00400b77] = b'a'
        mem[0x00400b78] = b'\xca'
        mem[0x00400b79] = b'<'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b74
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b74],  b'f')
        self.assertEqual(mem[0x400b75],  b'\x0f')
        self.assertEqual(mem[0x400b76],  b':')
        self.assertEqual(mem[0x400b77],  b'a')
        self.assertEqual(mem[0x400b78],  b'\xca')
        self.assertEqual(mem[0x400b79],  b'<')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197242)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_53(self):
        ''' Instruction PCMPESTRI_53
            Groups: sse42
            0x400bce:	pcmpestri	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bce] = b'f'
        mem[0x00400bcf] = b'\x0f'
        mem[0x00400bd0] = b':'
        mem[0x00400bd1] = b'a'
        mem[0x00400bd2] = b'\xca'
        mem[0x00400bd3] = b'Y'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bce
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400bce],  b'f')
        self.assertEqual(mem[0x400bcf],  b'\x0f')
        self.assertEqual(mem[0x400bd0],  b':')
        self.assertEqual(mem[0x400bd1],  b'a')
        self.assertEqual(mem[0x400bd2],  b'\xca')
        self.assertEqual(mem[0x400bd3],  b'Y')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197332)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_54(self):
        ''' Instruction PCMPESTRI_54
            Groups: sse42
            0x400b56:	pcmpestri	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b56] = b'f'
        mem[0x00400b57] = b'\x0f'
        mem[0x00400b58] = b':'
        mem[0x00400b59] = b'a'
        mem[0x00400b5a] = b'\xca'
        mem[0x00400b5b] = b'1'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b56
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b56],  b'f')
        self.assertEqual(mem[0x400b57],  b'\x0f')
        self.assertEqual(mem[0x400b58],  b':')
        self.assertEqual(mem[0x400b59],  b'a')
        self.assertEqual(mem[0x400b5a],  b'\xca')
        self.assertEqual(mem[0x400b5b],  b'1')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197212)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_55(self):
        ''' Instruction PCMPESTRI_55
            Groups: sse42
            0x400b7a:	pcmpestri	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b7a] = b'f'
        mem[0x00400b7b] = b'\x0f'
        mem[0x00400b7c] = b':'
        mem[0x00400b7d] = b'a'
        mem[0x00400b7e] = b'\xca'
        mem[0x00400b7f] = b'='
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b7a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b7a],  b'f')
        self.assertEqual(mem[0x400b7b],  b'\x0f')
        self.assertEqual(mem[0x400b7c],  b':')
        self.assertEqual(mem[0x400b7d],  b'a')
        self.assertEqual(mem[0x400b7e],  b'\xca')
        self.assertEqual(mem[0x400b7f],  b'=')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197248)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_56(self):
        ''' Instruction PCMPESTRI_56
            Groups: sse42
            0x400b5c:	pcmpestri	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b60] = b'\xca'
        mem[0x00400b61] = b'4'
        mem[0x00400b5c] = b'f'
        mem[0x00400b5d] = b'\x0f'
        mem[0x00400b5e] = b':'
        mem[0x00400b5f] = b'a'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b5c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b60],  b'\xca')
        self.assertEqual(mem[0x400b61],  b'4')
        self.assertEqual(mem[0x400b5c],  b'f')
        self.assertEqual(mem[0x400b5d],  b'\x0f')
        self.assertEqual(mem[0x400b5e],  b':')
        self.assertEqual(mem[0x400b5f],  b'a')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197218)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_57(self):
        ''' Instruction PCMPESTRI_57
            Groups: sse42
            0x400ade:	pcmpestri	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400ae0] = b':'
        mem[0x00400ae1] = b'a'
        mem[0x00400ae2] = b'\xca'
        mem[0x00400ae3] = b'\t'
        mem[0x00400ade] = b'f'
        mem[0x00400adf] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400ade
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400ae0],  b':')
        self.assertEqual(mem[0x400ae1],  b'a')
        self.assertEqual(mem[0x400ae2],  b'\xca')
        self.assertEqual(mem[0x400ae3],  b'\t')
        self.assertEqual(mem[0x400ade],  b'f')
        self.assertEqual(mem[0x400adf],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197092)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_58(self):
        ''' Instruction PCMPESTRI_58
            Groups: sse42
            0x400b3e:	pcmpestri	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b40] = b':'
        mem[0x00400b41] = b'a'
        mem[0x00400b42] = b'\xca'
        mem[0x00400b43] = b')'
        mem[0x00400b3e] = b'f'
        mem[0x00400b3f] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400b3e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400b40],  b':')
        self.assertEqual(mem[0x400b41],  b'a')
        self.assertEqual(mem[0x400b42],  b'\xca')
        self.assertEqual(mem[0x400b43],  b')')
        self.assertEqual(mem[0x400b3e],  b'f')
        self.assertEqual(mem[0x400b3f],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197188)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_59(self):
        ''' Instruction PCMPESTRI_59
            Groups: sse42
            0x400bb0:	pcmpestri	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bb0] = b'f'
        mem[0x00400bb1] = b'\x0f'
        mem[0x00400bb2] = b':'
        mem[0x00400bb3] = b'a'
        mem[0x00400bb4] = b'\xca'
        mem[0x00400bb5] = b'P'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bb0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400bb0],  b'f')
        self.assertEqual(mem[0x400bb1],  b'\x0f')
        self.assertEqual(mem[0x400bb2],  b':')
        self.assertEqual(mem[0x400bb3],  b'a')
        self.assertEqual(mem[0x400bb4],  b'\xca')
        self.assertEqual(mem[0x400bb5],  b'P')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197302)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_6(self):
        ''' Instruction PCMPESTRI_6
            Groups: sse42
            0x400b0e:	pcmpestri	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b0e] = b'f'
        mem[0x00400b0f] = b'\x0f'
        mem[0x00400b10] = b':'
        mem[0x00400b11] = b'a'
        mem[0x00400b12] = b'\xca'
        mem[0x00400b13] = b'\x19'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b0e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b0e],  b'f')
        self.assertEqual(mem[0x400b0f],  b'\x0f')
        self.assertEqual(mem[0x400b10],  b':')
        self.assertEqual(mem[0x400b11],  b'a')
        self.assertEqual(mem[0x400b12],  b'\xca')
        self.assertEqual(mem[0x400b13],  b'\x19')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197140)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_60(self):
        ''' Instruction PCMPESTRI_60
            Groups: sse42
            0x400b1a:	pcmpestri	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b1a] = b'f'
        mem[0x00400b1b] = b'\x0f'
        mem[0x00400b1c] = b':'
        mem[0x00400b1d] = b'a'
        mem[0x00400b1e] = b'\xca'
        mem[0x00400b1f] = b'\x1d'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b1a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b1a],  b'f')
        self.assertEqual(mem[0x400b1b],  b'\x0f')
        self.assertEqual(mem[0x400b1c],  b':')
        self.assertEqual(mem[0x400b1d],  b'a')
        self.assertEqual(mem[0x400b1e],  b'\xca')
        self.assertEqual(mem[0x400b1f],  b'\x1d')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197152)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_61(self):
        ''' Instruction PCMPESTRI_61
            Groups: sse42
            0x400bf2:	pcmpestri	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bf2] = b'f'
        mem[0x00400bf3] = b'\x0f'
        mem[0x00400bf4] = b':'
        mem[0x00400bf5] = b'a'
        mem[0x00400bf6] = b'\xca'
        mem[0x00400bf7] = b'e'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bf2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400bf2],  b'f')
        self.assertEqual(mem[0x400bf3],  b'\x0f')
        self.assertEqual(mem[0x400bf4],  b':')
        self.assertEqual(mem[0x400bf5],  b'a')
        self.assertEqual(mem[0x400bf6],  b'\xca')
        self.assertEqual(mem[0x400bf7],  b'e')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197368)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_62(self):
        ''' Instruction PCMPESTRI_62
            Groups: sse42
            0x400bd4:	pcmpestri	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bd4] = b'f'
        mem[0x00400bd5] = b'\x0f'
        mem[0x00400bd6] = b':'
        mem[0x00400bd7] = b'a'
        mem[0x00400bd8] = b'\xca'
        mem[0x00400bd9] = b'\\'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bd4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400bd4],  b'f')
        self.assertEqual(mem[0x400bd5],  b'\x0f')
        self.assertEqual(mem[0x400bd6],  b':')
        self.assertEqual(mem[0x400bd7],  b'a')
        self.assertEqual(mem[0x400bd8],  b'\xca')
        self.assertEqual(mem[0x400bd9],  b'\\')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197338)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_63(self):
        ''' Instruction PCMPESTRI_63
            Groups: sse42
            0x400bf8:	pcmpestri	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bf8] = b'f'
        mem[0x00400bf9] = b'\x0f'
        mem[0x00400bfa] = b':'
        mem[0x00400bfb] = b'a'
        mem[0x00400bfc] = b'\xca'
        mem[0x00400bfd] = b'h'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bf8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400bf8],  b'f')
        self.assertEqual(mem[0x400bf9],  b'\x0f')
        self.assertEqual(mem[0x400bfa],  b':')
        self.assertEqual(mem[0x400bfb],  b'a')
        self.assertEqual(mem[0x400bfc],  b'\xca')
        self.assertEqual(mem[0x400bfd],  b'h')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197374)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_64(self):
        ''' Instruction PCMPESTRI_64
            Groups: sse42
            0x400bc2:	pcmpestri	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400bc2] = b'f'
        mem[0x00400bc3] = b'\x0f'
        mem[0x00400bc4] = b':'
        mem[0x00400bc5] = b'a'
        mem[0x00400bc6] = b'\xca'
        mem[0x00400bc7] = b'U'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bc2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400bc2],  b'f')
        self.assertEqual(mem[0x400bc3],  b'\x0f')
        self.assertEqual(mem[0x400bc4],  b':')
        self.assertEqual(mem[0x400bc5],  b'a')
        self.assertEqual(mem[0x400bc6],  b'\xca')
        self.assertEqual(mem[0x400bc7],  b'U')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197320)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_7(self):
        ''' Instruction PCMPESTRI_7
            Groups: sse42
            0x400b8c:	pcmpestri	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b8c] = b'f'
        mem[0x00400b8d] = b'\x0f'
        mem[0x00400b8e] = b':'
        mem[0x00400b8f] = b'a'
        mem[0x00400b90] = b'\xca'
        mem[0x00400b91] = b'D'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b8c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b8c],  b'f')
        self.assertEqual(mem[0x400b8d],  b'\x0f')
        self.assertEqual(mem[0x400b8e],  b':')
        self.assertEqual(mem[0x400b8f],  b'a')
        self.assertEqual(mem[0x400b90],  b'\xca')
        self.assertEqual(mem[0x400b91],  b'D')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197266)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_8(self):
        ''' Instruction PCMPESTRI_8
            Groups: sse42
            0x400aea:	pcmpestri	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aea] = b'f'
        mem[0x00400aeb] = b'\x0f'
        mem[0x00400aec] = b':'
        mem[0x00400aed] = b'a'
        mem[0x00400aee] = b'\xca'
        mem[0x00400aef] = b'\r'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400aea
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400aea],  b'f')
        self.assertEqual(mem[0x400aeb],  b'\x0f')
        self.assertEqual(mem[0x400aec],  b':')
        self.assertEqual(mem[0x400aed],  b'a')
        self.assertEqual(mem[0x400aee],  b'\xca')
        self.assertEqual(mem[0x400aef],  b'\r')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197104)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_9(self):
        ''' Instruction PCMPESTRI_9
            Groups: sse42
            0x400b32:	pcmpestri	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400b32] = b'f'
        mem[0x00400b33] = b'\x0f'
        mem[0x00400b34] = b':'
        mem[0x00400b35] = b'a'
        mem[0x00400b36] = b'\xca'
        mem[0x00400b37] = b'%'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b32
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b32],  b'f')
        self.assertEqual(mem[0x400b33],  b'\x0f')
        self.assertEqual(mem[0x400b34],  b':')
        self.assertEqual(mem[0x400b35],  b'a')
        self.assertEqual(mem[0x400b36],  b'\xca')
        self.assertEqual(mem[0x400b37],  b'%')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197176)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRM_1(self):
        ''' Instruction PCMPESTRM_1
            Groups: sse42
            0x4009d0:	pcmpestrm	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009d0] = b'f'
        mem[0x004009d1] = b'\x0f'
        mem[0x004009d2] = b':'
        mem[0x004009d3] = b'`'
        mem[0x004009d4] = b'\xca'
        mem[0x004009d5] = b'8'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009d0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009d0],  b'f')
        self.assertEqual(mem[0x4009d1],  b'\x0f')
        self.assertEqual(mem[0x4009d2],  b':')
        self.assertEqual(mem[0x4009d3],  b'`')
        self.assertEqual(mem[0x4009d4],  b'\xca')
        self.assertEqual(mem[0x4009d5],  b'8')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196822)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_10(self):
        ''' Instruction PCMPESTRM_10
            Groups: sse42
            0x4009ac:	pcmpestrm	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009ac] = b'f'
        mem[0x004009ad] = b'\x0f'
        mem[0x004009ae] = b':'
        mem[0x004009af] = b'`'
        mem[0x004009b0] = b'\xca'
        mem[0x004009b1] = b','
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x4009ac
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009ac],  b'f')
        self.assertEqual(mem[0x4009ad],  b'\x0f')
        self.assertEqual(mem[0x4009ae],  b':')
        self.assertEqual(mem[0x4009af],  b'`')
        self.assertEqual(mem[0x4009b0],  b'\xca')
        self.assertEqual(mem[0x4009b1],  b',')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196786)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_11(self):
        ''' Instruction PCMPESTRM_11
            Groups: sse42
            0x400a24:	pcmpestrm	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a24] = b'f'
        mem[0x00400a25] = b'\x0f'
        mem[0x00400a26] = b':'
        mem[0x00400a27] = b'`'
        mem[0x00400a28] = b'\xca'
        mem[0x00400a29] = b'T'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a24
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a24],  b'f')
        self.assertEqual(mem[0x400a25],  b'\x0f')
        self.assertEqual(mem[0x400a26],  b':')
        self.assertEqual(mem[0x400a27],  b'`')
        self.assertEqual(mem[0x400a28],  b'\xca')
        self.assertEqual(mem[0x400a29],  b'T')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196906)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_12(self):
        ''' Instruction PCMPESTRM_12
            Groups: sse42
            0x4009f4:	pcmpestrm	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009f4] = b'f'
        mem[0x004009f5] = b'\x0f'
        mem[0x004009f6] = b':'
        mem[0x004009f7] = b'`'
        mem[0x004009f8] = b'\xca'
        mem[0x004009f9] = b'D'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009f4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009f4],  b'f')
        self.assertEqual(mem[0x4009f5],  b'\x0f')
        self.assertEqual(mem[0x4009f6],  b':')
        self.assertEqual(mem[0x4009f7],  b'`')
        self.assertEqual(mem[0x4009f8],  b'\xca')
        self.assertEqual(mem[0x4009f9],  b'D')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196858)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_13(self):
        ''' Instruction PCMPESTRM_13
            Groups: sse42
            0x400a1e:	pcmpestrm	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a20] = b':'
        mem[0x00400a21] = b'`'
        mem[0x00400a22] = b'\xca'
        mem[0x00400a23] = b'Q'
        mem[0x00400a1e] = b'f'
        mem[0x00400a1f] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a1e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a20],  b':')
        self.assertEqual(mem[0x400a21],  b'`')
        self.assertEqual(mem[0x400a22],  b'\xca')
        self.assertEqual(mem[0x400a23],  b'Q')
        self.assertEqual(mem[0x400a1e],  b'f')
        self.assertEqual(mem[0x400a1f],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196900)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_14(self):
        ''' Instruction PCMPESTRM_14
            Groups: sse42
            0x400a7e:	pcmpestrm	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a80] = b':'
        mem[0x00400a81] = b'`'
        mem[0x00400a82] = b'\xca'
        mem[0x00400a83] = b'q'
        mem[0x00400a7e] = b'f'
        mem[0x00400a7f] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a7e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a80],  b':')
        self.assertEqual(mem[0x400a81],  b'`')
        self.assertEqual(mem[0x400a82],  b'\xca')
        self.assertEqual(mem[0x400a83],  b'q')
        self.assertEqual(mem[0x400a7e],  b'f')
        self.assertEqual(mem[0x400a7f],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196996)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_15(self):
        ''' Instruction PCMPESTRM_15
            Groups: sse42
            0x400994:	pcmpestrm	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400994] = b'f'
        mem[0x00400995] = b'\x0f'
        mem[0x00400996] = b':'
        mem[0x00400997] = b'`'
        mem[0x00400998] = b'\xca'
        mem[0x00400999] = b'$'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400994
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400994],  b'f')
        self.assertEqual(mem[0x400995],  b'\x0f')
        self.assertEqual(mem[0x400996],  b':')
        self.assertEqual(mem[0x400997],  b'`')
        self.assertEqual(mem[0x400998],  b'\xca')
        self.assertEqual(mem[0x400999],  b'$')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196762)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_16(self):
        ''' Instruction PCMPESTRM_16
            Groups: sse42
            0x400934:	pcmpestrm	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400934] = b'f'
        mem[0x00400935] = b'\x0f'
        mem[0x00400936] = b':'
        mem[0x00400937] = b'`'
        mem[0x00400938] = b'\xca'
        mem[0x00400939] = b'\x04'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400934
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400934],  b'f')
        self.assertEqual(mem[0x400935],  b'\x0f')
        self.assertEqual(mem[0x400936],  b':')
        self.assertEqual(mem[0x400937],  b'`')
        self.assertEqual(mem[0x400938],  b'\xca')
        self.assertEqual(mem[0x400939],  b'\x04')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196666)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_17(self):
        ''' Instruction PCMPESTRM_17
            Groups: sse42
            0x400a9c:	pcmpestrm	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aa0] = b'\xca'
        mem[0x00400aa1] = b'|'
        mem[0x00400a9c] = b'f'
        mem[0x00400a9d] = b'\x0f'
        mem[0x00400a9e] = b':'
        mem[0x00400a9f] = b'`'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a9c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400aa0],  b'\xca')
        self.assertEqual(mem[0x400aa1],  b'|')
        self.assertEqual(mem[0x400a9c],  b'f')
        self.assertEqual(mem[0x400a9d],  b'\x0f')
        self.assertEqual(mem[0x400a9e],  b':')
        self.assertEqual(mem[0x400a9f],  b'`')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197026)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_18(self):
        ''' Instruction PCMPESTRM_18
            Groups: sse42
            0x40092e:	pcmpestrm	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040092e] = b'f'
        mem[0x0040092f] = b'\x0f'
        mem[0x00400930] = b':'
        mem[0x00400931] = b'`'
        mem[0x00400932] = b'\xca'
        mem[0x00400933] = b'\x01'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40092e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40092e],  b'f')
        self.assertEqual(mem[0x40092f],  b'\x0f')
        self.assertEqual(mem[0x400930],  b':')
        self.assertEqual(mem[0x400931],  b'`')
        self.assertEqual(mem[0x400932],  b'\xca')
        self.assertEqual(mem[0x400933],  b'\x01')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196660)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_19(self):
        ''' Instruction PCMPESTRM_19
            Groups: sse42
            0x4009a6:	pcmpestrm	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009a6] = b'f'
        mem[0x004009a7] = b'\x0f'
        mem[0x004009a8] = b':'
        mem[0x004009a9] = b'`'
        mem[0x004009aa] = b'\xca'
        mem[0x004009ab] = b')'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x4009a6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009a6],  b'f')
        self.assertEqual(mem[0x4009a7],  b'\x0f')
        self.assertEqual(mem[0x4009a8],  b':')
        self.assertEqual(mem[0x4009a9],  b'`')
        self.assertEqual(mem[0x4009aa],  b'\xca')
        self.assertEqual(mem[0x4009ab],  b')')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196780)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_2(self):
        ''' Instruction PCMPESTRM_2
            Groups: sse42
            0x400a54:	pcmpestrm	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a54] = b'f'
        mem[0x00400a55] = b'\x0f'
        mem[0x00400a56] = b':'
        mem[0x00400a57] = b'`'
        mem[0x00400a58] = b'\xca'
        mem[0x00400a59] = b'd'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a54
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a54],  b'f')
        self.assertEqual(mem[0x400a55],  b'\x0f')
        self.assertEqual(mem[0x400a56],  b':')
        self.assertEqual(mem[0x400a57],  b'`')
        self.assertEqual(mem[0x400a58],  b'\xca')
        self.assertEqual(mem[0x400a59],  b'd')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196954)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_20(self):
        ''' Instruction PCMPESTRM_20
            Groups: sse42
            0x400a66:	pcmpestrm	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a66] = b'f'
        mem[0x00400a67] = b'\x0f'
        mem[0x00400a68] = b':'
        mem[0x00400a69] = b'`'
        mem[0x00400a6a] = b'\xca'
        mem[0x00400a6b] = b'i'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a66
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a66],  b'f')
        self.assertEqual(mem[0x400a67],  b'\x0f')
        self.assertEqual(mem[0x400a68],  b':')
        self.assertEqual(mem[0x400a69],  b'`')
        self.assertEqual(mem[0x400a6a],  b'\xca')
        self.assertEqual(mem[0x400a6b],  b'i')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196972)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_21(self):
        ''' Instruction PCMPESTRM_21
            Groups: sse42
            0x400958:	pcmpestrm	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400958] = b'f'
        mem[0x00400959] = b'\x0f'
        mem[0x0040095a] = b':'
        mem[0x0040095b] = b'`'
        mem[0x0040095c] = b'\xca'
        mem[0x0040095d] = b'\x10'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400958
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400958],  b'f')
        self.assertEqual(mem[0x400959],  b'\x0f')
        self.assertEqual(mem[0x40095a],  b':')
        self.assertEqual(mem[0x40095b],  b'`')
        self.assertEqual(mem[0x40095c],  b'\xca')
        self.assertEqual(mem[0x40095d],  b'\x10')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196702)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_22(self):
        ''' Instruction PCMPESTRM_22
            Groups: sse42
            0x40095e:	pcmpestrm	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400960] = b':'
        mem[0x00400961] = b'`'
        mem[0x00400962] = b'\xca'
        mem[0x00400963] = b'\x11'
        mem[0x0040095e] = b'f'
        mem[0x0040095f] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40095e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400960],  b':')
        self.assertEqual(mem[0x400961],  b'`')
        self.assertEqual(mem[0x400962],  b'\xca')
        self.assertEqual(mem[0x400963],  b'\x11')
        self.assertEqual(mem[0x40095e],  b'f')
        self.assertEqual(mem[0x40095f],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196708)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_23(self):
        ''' Instruction PCMPESTRM_23
            Groups: sse42
            0x400976:	pcmpestrm	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400976] = b'f'
        mem[0x00400977] = b'\x0f'
        mem[0x00400978] = b':'
        mem[0x00400979] = b'`'
        mem[0x0040097a] = b'\xca'
        mem[0x0040097b] = b'\x19'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400976
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400976],  b'f')
        self.assertEqual(mem[0x400977],  b'\x0f')
        self.assertEqual(mem[0x400978],  b':')
        self.assertEqual(mem[0x400979],  b'`')
        self.assertEqual(mem[0x40097a],  b'\xca')
        self.assertEqual(mem[0x40097b],  b'\x19')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196732)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_24(self):
        ''' Instruction PCMPESTRM_24
            Groups: sse42
            0x400a8a:	pcmpestrm	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a8a] = b'f'
        mem[0x00400a8b] = b'\x0f'
        mem[0x00400a8c] = b':'
        mem[0x00400a8d] = b'`'
        mem[0x00400a8e] = b'\xca'
        mem[0x00400a8f] = b'u'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a8a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a8a],  b'f')
        self.assertEqual(mem[0x400a8b],  b'\x0f')
        self.assertEqual(mem[0x400a8c],  b':')
        self.assertEqual(mem[0x400a8d],  b'`')
        self.assertEqual(mem[0x400a8e],  b'\xca')
        self.assertEqual(mem[0x400a8f],  b'u')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197008)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_25(self):
        ''' Instruction PCMPESTRM_25
            Groups: sse42
            0x400a12:	pcmpestrm	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a12] = b'f'
        mem[0x00400a13] = b'\x0f'
        mem[0x00400a14] = b':'
        mem[0x00400a15] = b'`'
        mem[0x00400a16] = b'\xca'
        mem[0x00400a17] = b'M'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a12
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a12],  b'f')
        self.assertEqual(mem[0x400a13],  b'\x0f')
        self.assertEqual(mem[0x400a14],  b':')
        self.assertEqual(mem[0x400a15],  b'`')
        self.assertEqual(mem[0x400a16],  b'\xca')
        self.assertEqual(mem[0x400a17],  b'M')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196888)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_26(self):
        ''' Instruction PCMPESTRM_26
            Groups: sse42
            0x40093a:	pcmpestrm	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040093a] = b'f'
        mem[0x0040093b] = b'\x0f'
        mem[0x0040093c] = b':'
        mem[0x0040093d] = b'`'
        mem[0x0040093e] = b'\xca'
        mem[0x0040093f] = b'\x05'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40093a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40093a],  b'f')
        self.assertEqual(mem[0x40093b],  b'\x0f')
        self.assertEqual(mem[0x40093c],  b':')
        self.assertEqual(mem[0x40093d],  b'`')
        self.assertEqual(mem[0x40093e],  b'\xca')
        self.assertEqual(mem[0x40093f],  b'\x05')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196672)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_27(self):
        ''' Instruction PCMPESTRM_27
            Groups: sse42
            0x400a30:	pcmpestrm	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a30] = b'f'
        mem[0x00400a31] = b'\x0f'
        mem[0x00400a32] = b':'
        mem[0x00400a33] = b'`'
        mem[0x00400a34] = b'\xca'
        mem[0x00400a35] = b'X'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a30
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a30],  b'f')
        self.assertEqual(mem[0x400a31],  b'\x0f')
        self.assertEqual(mem[0x400a32],  b':')
        self.assertEqual(mem[0x400a33],  b'`')
        self.assertEqual(mem[0x400a34],  b'\xca')
        self.assertEqual(mem[0x400a35],  b'X')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196918)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_28(self):
        ''' Instruction PCMPESTRM_28
            Groups: sse42
            0x4009ca:	pcmpestrm	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009ca] = b'f'
        mem[0x004009cb] = b'\x0f'
        mem[0x004009cc] = b':'
        mem[0x004009cd] = b'`'
        mem[0x004009ce] = b'\xca'
        mem[0x004009cf] = b'5'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009ca
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009ca],  b'f')
        self.assertEqual(mem[0x4009cb],  b'\x0f')
        self.assertEqual(mem[0x4009cc],  b':')
        self.assertEqual(mem[0x4009cd],  b'`')
        self.assertEqual(mem[0x4009ce],  b'\xca')
        self.assertEqual(mem[0x4009cf],  b'5')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196816)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_29(self):
        ''' Instruction PCMPESTRM_29
            Groups: sse42
            0x400a3c:	pcmpestrm	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a40] = b'\xca'
        mem[0x00400a41] = b'\\'
        mem[0x00400a3c] = b'f'
        mem[0x00400a3d] = b'\x0f'
        mem[0x00400a3e] = b':'
        mem[0x00400a3f] = b'`'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a3c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a40],  b'\xca')
        self.assertEqual(mem[0x400a41],  b'\\')
        self.assertEqual(mem[0x400a3c],  b'f')
        self.assertEqual(mem[0x400a3d],  b'\x0f')
        self.assertEqual(mem[0x400a3e],  b':')
        self.assertEqual(mem[0x400a3f],  b'`')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196930)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_3(self):
        ''' Instruction PCMPESTRM_3
            Groups: sse42
            0x400a18:	pcmpestrm	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a18] = b'f'
        mem[0x00400a19] = b'\x0f'
        mem[0x00400a1a] = b':'
        mem[0x00400a1b] = b'`'
        mem[0x00400a1c] = b'\xca'
        mem[0x00400a1d] = b'P'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a18
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a18],  b'f')
        self.assertEqual(mem[0x400a19],  b'\x0f')
        self.assertEqual(mem[0x400a1a],  b':')
        self.assertEqual(mem[0x400a1b],  b'`')
        self.assertEqual(mem[0x400a1c],  b'\xca')
        self.assertEqual(mem[0x400a1d],  b'P')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196894)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_30(self):
        ''' Instruction PCMPESTRM_30
            Groups: sse42
            0x40098e:	pcmpestrm	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040098e] = b'f'
        mem[0x0040098f] = b'\x0f'
        mem[0x00400990] = b':'
        mem[0x00400991] = b'`'
        mem[0x00400992] = b'\xca'
        mem[0x00400993] = b'!'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40098e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40098e],  b'f')
        self.assertEqual(mem[0x40098f],  b'\x0f')
        self.assertEqual(mem[0x400990],  b':')
        self.assertEqual(mem[0x400991],  b'`')
        self.assertEqual(mem[0x400992],  b'\xca')
        self.assertEqual(mem[0x400993],  b'!')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196756)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_31(self):
        ''' Instruction PCMPESTRM_31
            Groups: sse42
            0x400a96:	pcmpestrm	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a96] = b'f'
        mem[0x00400a97] = b'\x0f'
        mem[0x00400a98] = b':'
        mem[0x00400a99] = b'`'
        mem[0x00400a9a] = b'\xca'
        mem[0x00400a9b] = b'y'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a96
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a96],  b'f')
        self.assertEqual(mem[0x400a97],  b'\x0f')
        self.assertEqual(mem[0x400a98],  b':')
        self.assertEqual(mem[0x400a99],  b'`')
        self.assertEqual(mem[0x400a9a],  b'\xca')
        self.assertEqual(mem[0x400a9b],  b'y')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197020)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_32(self):
        ''' Instruction PCMPESTRM_32
            Groups: sse42
            0x400a90:	pcmpestrm	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a90] = b'f'
        mem[0x00400a91] = b'\x0f'
        mem[0x00400a92] = b':'
        mem[0x00400a93] = b'`'
        mem[0x00400a94] = b'\xca'
        mem[0x00400a95] = b'x'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a90
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a90],  b'f')
        self.assertEqual(mem[0x400a91],  b'\x0f')
        self.assertEqual(mem[0x400a92],  b':')
        self.assertEqual(mem[0x400a93],  b'`')
        self.assertEqual(mem[0x400a94],  b'\xca')
        self.assertEqual(mem[0x400a95],  b'x')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197014)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_33(self):
        ''' Instruction PCMPESTRM_33
            Groups: sse42
            0x400a06:	pcmpestrm	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a06] = b'f'
        mem[0x00400a07] = b'\x0f'
        mem[0x00400a08] = b':'
        mem[0x00400a09] = b'`'
        mem[0x00400a0a] = b'\xca'
        mem[0x00400a0b] = b'I'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a06
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a06],  b'f')
        self.assertEqual(mem[0x400a07],  b'\x0f')
        self.assertEqual(mem[0x400a08],  b':')
        self.assertEqual(mem[0x400a09],  b'`')
        self.assertEqual(mem[0x400a0a],  b'\xca')
        self.assertEqual(mem[0x400a0b],  b'I')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196876)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_34(self):
        ''' Instruction PCMPESTRM_34
            Groups: sse42
            0x400928:	pcmpestrm	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400928] = b'f'
        mem[0x00400929] = b'\x0f'
        mem[0x0040092a] = b':'
        mem[0x0040092b] = b'`'
        mem[0x0040092c] = b'\xca'
        mem[0x0040092d] = b'\x00'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400928
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400928],  b'f')
        self.assertEqual(mem[0x400929],  b'\x0f')
        self.assertEqual(mem[0x40092a],  b':')
        self.assertEqual(mem[0x40092b],  b'`')
        self.assertEqual(mem[0x40092c],  b'\xca')
        self.assertEqual(mem[0x40092d],  b'\x00')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196654)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_35(self):
        ''' Instruction PCMPESTRM_35
            Groups: sse42
            0x400a84:	pcmpestrm	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a84] = b'f'
        mem[0x00400a85] = b'\x0f'
        mem[0x00400a86] = b':'
        mem[0x00400a87] = b'`'
        mem[0x00400a88] = b'\xca'
        mem[0x00400a89] = b't'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a84
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a84],  b'f')
        self.assertEqual(mem[0x400a85],  b'\x0f')
        self.assertEqual(mem[0x400a86],  b':')
        self.assertEqual(mem[0x400a87],  b'`')
        self.assertEqual(mem[0x400a88],  b'\xca')
        self.assertEqual(mem[0x400a89],  b't')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197002)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_36(self):
        ''' Instruction PCMPESTRM_36
            Groups: sse42
            0x400a72:	pcmpestrm	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a72] = b'f'
        mem[0x00400a73] = b'\x0f'
        mem[0x00400a74] = b':'
        mem[0x00400a75] = b'`'
        mem[0x00400a76] = b'\xca'
        mem[0x00400a77] = b'm'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a72
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a72],  b'f')
        self.assertEqual(mem[0x400a73],  b'\x0f')
        self.assertEqual(mem[0x400a74],  b':')
        self.assertEqual(mem[0x400a75],  b'`')
        self.assertEqual(mem[0x400a76],  b'\xca')
        self.assertEqual(mem[0x400a77],  b'm')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196984)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_37(self):
        ''' Instruction PCMPESTRM_37
            Groups: sse42
            0x400946:	pcmpestrm	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400946] = b'f'
        mem[0x00400947] = b'\x0f'
        mem[0x00400948] = b':'
        mem[0x00400949] = b'`'
        mem[0x0040094a] = b'\xca'
        mem[0x0040094b] = b'\t'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400946
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400946],  b'f')
        self.assertEqual(mem[0x400947],  b'\x0f')
        self.assertEqual(mem[0x400948],  b':')
        self.assertEqual(mem[0x400949],  b'`')
        self.assertEqual(mem[0x40094a],  b'\xca')
        self.assertEqual(mem[0x40094b],  b'\t')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196684)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_38(self):
        ''' Instruction PCMPESTRM_38
            Groups: sse42
            0x400940:	pcmpestrm	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400940] = b'f'
        mem[0x00400941] = b'\x0f'
        mem[0x00400942] = b':'
        mem[0x00400943] = b'`'
        mem[0x00400944] = b'\xca'
        mem[0x00400945] = b'\x08'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400940
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400940],  b'f')
        self.assertEqual(mem[0x400941],  b'\x0f')
        self.assertEqual(mem[0x400942],  b':')
        self.assertEqual(mem[0x400943],  b'`')
        self.assertEqual(mem[0x400944],  b'\xca')
        self.assertEqual(mem[0x400945],  b'\x08')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196678)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_39(self):
        ''' Instruction PCMPESTRM_39
            Groups: sse42
            0x400aa2:	pcmpestrm	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400aa2] = b'f'
        mem[0x00400aa3] = b'\x0f'
        mem[0x00400aa4] = b':'
        mem[0x00400aa5] = b'`'
        mem[0x00400aa6] = b'\xca'
        mem[0x00400aa7] = b'}'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400aa2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400aa2],  b'f')
        self.assertEqual(mem[0x400aa3],  b'\x0f')
        self.assertEqual(mem[0x400aa4],  b':')
        self.assertEqual(mem[0x400aa5],  b'`')
        self.assertEqual(mem[0x400aa6],  b'\xca')
        self.assertEqual(mem[0x400aa7],  b'}')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197032)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_4(self):
        ''' Instruction PCMPESTRM_4
            Groups: sse42
            0x40097c:	pcmpestrm	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400980] = b'\xca'
        mem[0x00400981] = b'\x1c'
        mem[0x0040097c] = b'f'
        mem[0x0040097d] = b'\x0f'
        mem[0x0040097e] = b':'
        mem[0x0040097f] = b'`'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40097c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400980],  b'\xca')
        self.assertEqual(mem[0x400981],  b'\x1c')
        self.assertEqual(mem[0x40097c],  b'f')
        self.assertEqual(mem[0x40097d],  b'\x0f')
        self.assertEqual(mem[0x40097e],  b':')
        self.assertEqual(mem[0x40097f],  b'`')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196738)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_40(self):
        ''' Instruction PCMPESTRM_40
            Groups: sse42
            0x400a48:	pcmpestrm	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a48] = b'f'
        mem[0x00400a49] = b'\x0f'
        mem[0x00400a4a] = b':'
        mem[0x00400a4b] = b'`'
        mem[0x00400a4c] = b'\xca'
        mem[0x00400a4d] = b'`'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a48
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a48],  b'f')
        self.assertEqual(mem[0x400a49],  b'\x0f')
        self.assertEqual(mem[0x400a4a],  b':')
        self.assertEqual(mem[0x400a4b],  b'`')
        self.assertEqual(mem[0x400a4c],  b'\xca')
        self.assertEqual(mem[0x400a4d],  b'`')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196942)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_41(self):
        ''' Instruction PCMPESTRM_41
            Groups: sse42
            0x400952:	pcmpestrm	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400952] = b'f'
        mem[0x00400953] = b'\x0f'
        mem[0x00400954] = b':'
        mem[0x00400955] = b'`'
        mem[0x00400956] = b'\xca'
        mem[0x00400957] = b'\r'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400952
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400952],  b'f')
        self.assertEqual(mem[0x400953],  b'\x0f')
        self.assertEqual(mem[0x400954],  b':')
        self.assertEqual(mem[0x400955],  b'`')
        self.assertEqual(mem[0x400956],  b'\xca')
        self.assertEqual(mem[0x400957],  b'\r')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196696)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_42(self):
        ''' Instruction PCMPESTRM_42
            Groups: sse42
            0x40094c:	pcmpestrm	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040094c] = b'f'
        mem[0x0040094d] = b'\x0f'
        mem[0x0040094e] = b':'
        mem[0x0040094f] = b'`'
        mem[0x00400950] = b'\xca'
        mem[0x00400951] = b'\x0c'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x40094c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40094c],  b'f')
        self.assertEqual(mem[0x40094d],  b'\x0f')
        self.assertEqual(mem[0x40094e],  b':')
        self.assertEqual(mem[0x40094f],  b'`')
        self.assertEqual(mem[0x400950],  b'\xca')
        self.assertEqual(mem[0x400951],  b'\x0c')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196690)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_43(self):
        ''' Instruction PCMPESTRM_43
            Groups: sse42
            0x400a0c:	pcmpestrm	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a0c] = b'f'
        mem[0x00400a0d] = b'\x0f'
        mem[0x00400a0e] = b':'
        mem[0x00400a0f] = b'`'
        mem[0x00400a10] = b'\xca'
        mem[0x00400a11] = b'L'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a0c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a0c],  b'f')
        self.assertEqual(mem[0x400a0d],  b'\x0f')
        self.assertEqual(mem[0x400a0e],  b':')
        self.assertEqual(mem[0x400a0f],  b'`')
        self.assertEqual(mem[0x400a10],  b'\xca')
        self.assertEqual(mem[0x400a11],  b'L')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196882)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_44(self):
        ''' Instruction PCMPESTRM_44
            Groups: sse42
            0x400964:	pcmpestrm	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400964] = b'f'
        mem[0x00400965] = b'\x0f'
        mem[0x00400966] = b':'
        mem[0x00400967] = b'`'
        mem[0x00400968] = b'\xca'
        mem[0x00400969] = b'\x14'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400964
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400964],  b'f')
        self.assertEqual(mem[0x400965],  b'\x0f')
        self.assertEqual(mem[0x400966],  b':')
        self.assertEqual(mem[0x400967],  b'`')
        self.assertEqual(mem[0x400968],  b'\xca')
        self.assertEqual(mem[0x400969],  b'\x14')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196714)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_45(self):
        ''' Instruction PCMPESTRM_45
            Groups: sse42
            0x400a36:	pcmpestrm	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a36] = b'f'
        mem[0x00400a37] = b'\x0f'
        mem[0x00400a38] = b':'
        mem[0x00400a39] = b'`'
        mem[0x00400a3a] = b'\xca'
        mem[0x00400a3b] = b'Y'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a36
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a36],  b'f')
        self.assertEqual(mem[0x400a37],  b'\x0f')
        self.assertEqual(mem[0x400a38],  b':')
        self.assertEqual(mem[0x400a39],  b'`')
        self.assertEqual(mem[0x400a3a],  b'\xca')
        self.assertEqual(mem[0x400a3b],  b'Y')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196924)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_46(self):
        ''' Instruction PCMPESTRM_46
            Groups: sse42
            0x40099a:	pcmpestrm	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040099a] = b'f'
        mem[0x0040099b] = b'\x0f'
        mem[0x0040099c] = b':'
        mem[0x0040099d] = b'`'
        mem[0x0040099e] = b'\xca'
        mem[0x0040099f] = b'%'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40099a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40099a],  b'f')
        self.assertEqual(mem[0x40099b],  b'\x0f')
        self.assertEqual(mem[0x40099c],  b':')
        self.assertEqual(mem[0x40099d],  b'`')
        self.assertEqual(mem[0x40099e],  b'\xca')
        self.assertEqual(mem[0x40099f],  b'%')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196768)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_47(self):
        ''' Instruction PCMPESTRM_47
            Groups: sse42
            0x400988:	pcmpestrm	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400988] = b'f'
        mem[0x00400989] = b'\x0f'
        mem[0x0040098a] = b':'
        mem[0x0040098b] = b'`'
        mem[0x0040098c] = b'\xca'
        mem[0x0040098d] = b' '
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400988
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400988],  b'f')
        self.assertEqual(mem[0x400989],  b'\x0f')
        self.assertEqual(mem[0x40098a],  b':')
        self.assertEqual(mem[0x40098b],  b'`')
        self.assertEqual(mem[0x40098c],  b'\xca')
        self.assertEqual(mem[0x40098d],  b' ')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196750)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_48(self):
        ''' Instruction PCMPESTRM_48
            Groups: sse42
            0x400a5a:	pcmpestrm	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a5a] = b'f'
        mem[0x00400a5b] = b'\x0f'
        mem[0x00400a5c] = b':'
        mem[0x00400a5d] = b'`'
        mem[0x00400a5e] = b'\xca'
        mem[0x00400a5f] = b'e'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a5a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a5a],  b'f')
        self.assertEqual(mem[0x400a5b],  b'\x0f')
        self.assertEqual(mem[0x400a5c],  b':')
        self.assertEqual(mem[0x400a5d],  b'`')
        self.assertEqual(mem[0x400a5e],  b'\xca')
        self.assertEqual(mem[0x400a5f],  b'e')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196960)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_49(self):
        ''' Instruction PCMPESTRM_49
            Groups: sse42
            0x40096a:	pcmpestrm	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040096a] = b'f'
        mem[0x0040096b] = b'\x0f'
        mem[0x0040096c] = b':'
        mem[0x0040096d] = b'`'
        mem[0x0040096e] = b'\xca'
        mem[0x0040096f] = b'\x15'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40096a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40096a],  b'f')
        self.assertEqual(mem[0x40096b],  b'\x0f')
        self.assertEqual(mem[0x40096c],  b':')
        self.assertEqual(mem[0x40096d],  b'`')
        self.assertEqual(mem[0x40096e],  b'\xca')
        self.assertEqual(mem[0x40096f],  b'\x15')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196720)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_5(self):
        ''' Instruction PCMPESTRM_5
            Groups: sse42
            0x4009b2:	pcmpestrm	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009b2] = b'f'
        mem[0x004009b3] = b'\x0f'
        mem[0x004009b4] = b':'
        mem[0x004009b5] = b'`'
        mem[0x004009b6] = b'\xca'
        mem[0x004009b7] = b'-'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009b2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009b2],  b'f')
        self.assertEqual(mem[0x4009b3],  b'\x0f')
        self.assertEqual(mem[0x4009b4],  b':')
        self.assertEqual(mem[0x4009b5],  b'`')
        self.assertEqual(mem[0x4009b6],  b'\xca')
        self.assertEqual(mem[0x4009b7],  b'-')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196792)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_50(self):
        ''' Instruction PCMPESTRM_50
            Groups: sse42
            0x400a60:	pcmpestrm	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a60] = b'f'
        mem[0x00400a61] = b'\x0f'
        mem[0x00400a62] = b':'
        mem[0x00400a63] = b'`'
        mem[0x00400a64] = b'\xca'
        mem[0x00400a65] = b'h'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a60
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a60],  b'f')
        self.assertEqual(mem[0x400a61],  b'\x0f')
        self.assertEqual(mem[0x400a62],  b':')
        self.assertEqual(mem[0x400a63],  b'`')
        self.assertEqual(mem[0x400a64],  b'\xca')
        self.assertEqual(mem[0x400a65],  b'h')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196966)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_51(self):
        ''' Instruction PCMPESTRM_51
            Groups: sse42
            0x4009be:	pcmpestrm	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009c0] = b':'
        mem[0x004009c1] = b'`'
        mem[0x004009c2] = b'\xca'
        mem[0x004009c3] = b'1'
        mem[0x004009be] = b'f'
        mem[0x004009bf] = b'\x0f'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009be
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009c0],  b':')
        self.assertEqual(mem[0x4009c1],  b'`')
        self.assertEqual(mem[0x4009c2],  b'\xca')
        self.assertEqual(mem[0x4009c3],  b'1')
        self.assertEqual(mem[0x4009be],  b'f')
        self.assertEqual(mem[0x4009bf],  b'\x0f')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196804)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_52(self):
        ''' Instruction PCMPESTRM_52
            Groups: sse42
            0x4009e2:	pcmpestrm	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009e2] = b'f'
        mem[0x004009e3] = b'\x0f'
        mem[0x004009e4] = b':'
        mem[0x004009e5] = b'`'
        mem[0x004009e6] = b'\xca'
        mem[0x004009e7] = b'='
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009e2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009e2],  b'f')
        self.assertEqual(mem[0x4009e3],  b'\x0f')
        self.assertEqual(mem[0x4009e4],  b':')
        self.assertEqual(mem[0x4009e5],  b'`')
        self.assertEqual(mem[0x4009e6],  b'\xca')
        self.assertEqual(mem[0x4009e7],  b'=')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196840)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_53(self):
        ''' Instruction PCMPESTRM_53
            Groups: sse42
            0x4009d6:	pcmpestrm	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009d6] = b'f'
        mem[0x004009d7] = b'\x0f'
        mem[0x004009d8] = b':'
        mem[0x004009d9] = b'`'
        mem[0x004009da] = b'\xca'
        mem[0x004009db] = b'9'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009d6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009d6],  b'f')
        self.assertEqual(mem[0x4009d7],  b'\x0f')
        self.assertEqual(mem[0x4009d8],  b':')
        self.assertEqual(mem[0x4009d9],  b'`')
        self.assertEqual(mem[0x4009da],  b'\xca')
        self.assertEqual(mem[0x4009db],  b'9')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196828)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_54(self):
        ''' Instruction PCMPESTRM_54
            Groups: sse42
            0x400a6c:	pcmpestrm	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a6c] = b'f'
        mem[0x00400a6d] = b'\x0f'
        mem[0x00400a6e] = b':'
        mem[0x00400a6f] = b'`'
        mem[0x00400a70] = b'\xca'
        mem[0x00400a71] = b'l'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a6c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a6c],  b'f')
        self.assertEqual(mem[0x400a6d],  b'\x0f')
        self.assertEqual(mem[0x400a6e],  b':')
        self.assertEqual(mem[0x400a6f],  b'`')
        self.assertEqual(mem[0x400a70],  b'\xca')
        self.assertEqual(mem[0x400a71],  b'l')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196978)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_55(self):
        ''' Instruction PCMPESTRM_55
            Groups: sse42
            0x4009c4:	pcmpestrm	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009c4] = b'f'
        mem[0x004009c5] = b'\x0f'
        mem[0x004009c6] = b':'
        mem[0x004009c7] = b'`'
        mem[0x004009c8] = b'\xca'
        mem[0x004009c9] = b'4'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009c4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009c4],  b'f')
        self.assertEqual(mem[0x4009c5],  b'\x0f')
        self.assertEqual(mem[0x4009c6],  b':')
        self.assertEqual(mem[0x4009c7],  b'`')
        self.assertEqual(mem[0x4009c8],  b'\xca')
        self.assertEqual(mem[0x4009c9],  b'4')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196810)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_56(self):
        ''' Instruction PCMPESTRM_56
            Groups: sse42
            0x400a00:	pcmpestrm	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a00] = b'f'
        mem[0x00400a01] = b'\x0f'
        mem[0x00400a02] = b':'
        mem[0x00400a03] = b'`'
        mem[0x00400a04] = b'\xca'
        mem[0x00400a05] = b'H'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a00
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a00],  b'f')
        self.assertEqual(mem[0x400a01],  b'\x0f')
        self.assertEqual(mem[0x400a02],  b':')
        self.assertEqual(mem[0x400a03],  b'`')
        self.assertEqual(mem[0x400a04],  b'\xca')
        self.assertEqual(mem[0x400a05],  b'H')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196870)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_57(self):
        ''' Instruction PCMPESTRM_57
            Groups: sse42
            0x4009e8:	pcmpestrm	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009e8] = b'f'
        mem[0x004009e9] = b'\x0f'
        mem[0x004009ea] = b':'
        mem[0x004009eb] = b'`'
        mem[0x004009ec] = b'\xca'
        mem[0x004009ed] = b'@'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009e8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009e8],  b'f')
        self.assertEqual(mem[0x4009e9],  b'\x0f')
        self.assertEqual(mem[0x4009ea],  b':')
        self.assertEqual(mem[0x4009eb],  b'`')
        self.assertEqual(mem[0x4009ec],  b'\xca')
        self.assertEqual(mem[0x4009ed],  b'@')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196846)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_58(self):
        ''' Instruction PCMPESTRM_58
            Groups: sse42
            0x4009b8:	pcmpestrm	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009b8] = b'f'
        mem[0x004009b9] = b'\x0f'
        mem[0x004009ba] = b':'
        mem[0x004009bb] = b'`'
        mem[0x004009bc] = b'\xca'
        mem[0x004009bd] = b'0'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009b8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009b8],  b'f')
        self.assertEqual(mem[0x4009b9],  b'\x0f')
        self.assertEqual(mem[0x4009ba],  b':')
        self.assertEqual(mem[0x4009bb],  b'`')
        self.assertEqual(mem[0x4009bc],  b'\xca')
        self.assertEqual(mem[0x4009bd],  b'0')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196798)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_59(self):
        ''' Instruction PCMPESTRM_59
            Groups: sse42
            0x4009ee:	pcmpestrm	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009ee] = b'f'
        mem[0x004009ef] = b'\x0f'
        mem[0x004009f0] = b':'
        mem[0x004009f1] = b'`'
        mem[0x004009f2] = b'\xca'
        mem[0x004009f3] = b'A'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009ee
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009ee],  b'f')
        self.assertEqual(mem[0x4009ef],  b'\x0f')
        self.assertEqual(mem[0x4009f0],  b':')
        self.assertEqual(mem[0x4009f1],  b'`')
        self.assertEqual(mem[0x4009f2],  b'\xca')
        self.assertEqual(mem[0x4009f3],  b'A')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196852)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_6(self):
        ''' Instruction PCMPESTRM_6
            Groups: sse42
            0x4009a0:	pcmpestrm	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009a0] = b'f'
        mem[0x004009a1] = b'\x0f'
        mem[0x004009a2] = b':'
        mem[0x004009a3] = b'`'
        mem[0x004009a4] = b'\xca'
        mem[0x004009a5] = b'('
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009a0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009a0],  b'f')
        self.assertEqual(mem[0x4009a1],  b'\x0f')
        self.assertEqual(mem[0x4009a2],  b':')
        self.assertEqual(mem[0x4009a3],  b'`')
        self.assertEqual(mem[0x4009a4],  b'\xca')
        self.assertEqual(mem[0x4009a5],  b'(')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196774)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_60(self):
        ''' Instruction PCMPESTRM_60
            Groups: sse42
            0x400970:	pcmpestrm	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400970] = b'f'
        mem[0x00400971] = b'\x0f'
        mem[0x00400972] = b':'
        mem[0x00400973] = b'`'
        mem[0x00400974] = b'\xca'
        mem[0x00400975] = b'\x18'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400970
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400970],  b'f')
        self.assertEqual(mem[0x400971],  b'\x0f')
        self.assertEqual(mem[0x400972],  b':')
        self.assertEqual(mem[0x400973],  b'`')
        self.assertEqual(mem[0x400974],  b'\xca')
        self.assertEqual(mem[0x400975],  b'\x18')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196726)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_61(self):
        ''' Instruction PCMPESTRM_61
            Groups: sse42
            0x400a78:	pcmpestrm	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a78] = b'f'
        mem[0x00400a79] = b'\x0f'
        mem[0x00400a7a] = b':'
        mem[0x00400a7b] = b'`'
        mem[0x00400a7c] = b'\xca'
        mem[0x00400a7d] = b'p'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a78
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a78],  b'f')
        self.assertEqual(mem[0x400a79],  b'\x0f')
        self.assertEqual(mem[0x400a7a],  b':')
        self.assertEqual(mem[0x400a7b],  b'`')
        self.assertEqual(mem[0x400a7c],  b'\xca')
        self.assertEqual(mem[0x400a7d],  b'p')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196990)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_62(self):
        ''' Instruction PCMPESTRM_62
            Groups: sse42
            0x400a2a:	pcmpestrm	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a2a] = b'f'
        mem[0x00400a2b] = b'\x0f'
        mem[0x00400a2c] = b':'
        mem[0x00400a2d] = b'`'
        mem[0x00400a2e] = b'\xca'
        mem[0x00400a2f] = b'U'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a2a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a2a],  b'f')
        self.assertEqual(mem[0x400a2b],  b'\x0f')
        self.assertEqual(mem[0x400a2c],  b':')
        self.assertEqual(mem[0x400a2d],  b'`')
        self.assertEqual(mem[0x400a2e],  b'\xca')
        self.assertEqual(mem[0x400a2f],  b'U')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196912)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_63(self):
        ''' Instruction PCMPESTRM_63
            Groups: sse42
            0x400a42:	pcmpestrm	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a42] = b'f'
        mem[0x00400a43] = b'\x0f'
        mem[0x00400a44] = b':'
        mem[0x00400a45] = b'`'
        mem[0x00400a46] = b'\xca'
        mem[0x00400a47] = b']'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a42
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a42],  b'f')
        self.assertEqual(mem[0x400a43],  b'\x0f')
        self.assertEqual(mem[0x400a44],  b':')
        self.assertEqual(mem[0x400a45],  b'`')
        self.assertEqual(mem[0x400a46],  b'\xca')
        self.assertEqual(mem[0x400a47],  b']')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196936)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_64(self):
        ''' Instruction PCMPESTRM_64
            Groups: sse42
            0x400a4e:	pcmpestrm	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400a4e] = b'f'
        mem[0x00400a4f] = b'\x0f'
        mem[0x00400a50] = b':'
        mem[0x00400a51] = b'`'
        mem[0x00400a52] = b'\xca'
        mem[0x00400a53] = b'a'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a4e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a4e],  b'f')
        self.assertEqual(mem[0x400a4f],  b'\x0f')
        self.assertEqual(mem[0x400a50],  b':')
        self.assertEqual(mem[0x400a51],  b'`')
        self.assertEqual(mem[0x400a52],  b'\xca')
        self.assertEqual(mem[0x400a53],  b'a')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196948)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_7(self):
        ''' Instruction PCMPESTRM_7
            Groups: sse42
            0x4009dc:	pcmpestrm	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009e0] = b'\xca'
        mem[0x004009e1] = b'<'
        mem[0x004009dc] = b'f'
        mem[0x004009dd] = b'\x0f'
        mem[0x004009de] = b':'
        mem[0x004009df] = b'`'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009dc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009e0],  b'\xca')
        self.assertEqual(mem[0x4009e1],  b'<')
        self.assertEqual(mem[0x4009dc],  b'f')
        self.assertEqual(mem[0x4009dd],  b'\x0f')
        self.assertEqual(mem[0x4009de],  b':')
        self.assertEqual(mem[0x4009df],  b'`')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196834)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_8(self):
        ''' Instruction PCMPESTRM_8
            Groups: sse42
            0x4009fa:	pcmpestrm	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004009fa] = b'f'
        mem[0x004009fb] = b'\x0f'
        mem[0x004009fc] = b':'
        mem[0x004009fd] = b'`'
        mem[0x004009fe] = b'\xca'
        mem[0x004009ff] = b'E'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009fa
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009fa],  b'f')
        self.assertEqual(mem[0x4009fb],  b'\x0f')
        self.assertEqual(mem[0x4009fc],  b':')
        self.assertEqual(mem[0x4009fd],  b'`')
        self.assertEqual(mem[0x4009fe],  b'\xca')
        self.assertEqual(mem[0x4009ff],  b'E')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196864)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_9(self):
        ''' Instruction PCMPESTRM_9
            Groups: sse42
            0x400982:	pcmpestrm	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400982] = b'f'
        mem[0x00400983] = b'\x0f'
        mem[0x00400984] = b':'
        mem[0x00400985] = b'`'
        mem[0x00400986] = b'\xca'
        mem[0x00400987] = b'\x1d'
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400982
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400982],  b'f')
        self.assertEqual(mem[0x400983],  b'\x0f')
        self.assertEqual(mem[0x400984],  b':')
        self.assertEqual(mem[0x400985],  b'`')
        self.assertEqual(mem[0x400986],  b'\xca')
        self.assertEqual(mem[0x400987],  b'\x1d')
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196744)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPISTRI_1(self):
        ''' Instruction PCMPISTRI_1
            Groups: sse42
            0x400746:	pcmpistri	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400746] = b'f'
        mem[0x00400747] = b'\x0f'
        mem[0x00400748] = b':'
        mem[0x00400749] = b'c'
        mem[0x0040074a] = b'\xca'
        mem[0x0040074b] = b'm'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = True
        cpu.RIP = 0x400746
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400746],  b'f')
        self.assertEqual(mem[0x400747],  b'\x0f')
        self.assertEqual(mem[0x400748],  b':')
        self.assertEqual(mem[0x400749],  b'c')
        self.assertEqual(mem[0x40074a],  b'\xca')
        self.assertEqual(mem[0x40074b],  b'm')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196172)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_10(self):
        ''' Instruction PCMPISTRI_10
            Groups: sse42
            0x400650:	pcmpistri	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400650] = b'f'
        mem[0x00400651] = b'\x0f'
        mem[0x00400652] = b':'
        mem[0x00400653] = b'c'
        mem[0x00400654] = b'\xca'
        mem[0x00400655] = b'\x1c'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400650
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400650],  b'f')
        self.assertEqual(mem[0x400651],  b'\x0f')
        self.assertEqual(mem[0x400652],  b':')
        self.assertEqual(mem[0x400653],  b'c')
        self.assertEqual(mem[0x400654],  b'\xca')
        self.assertEqual(mem[0x400655],  b'\x1c')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195926)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_11(self):
        ''' Instruction PCMPISTRI_11
            Groups: sse42
            0x400668:	pcmpistri	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400668] = b'f'
        mem[0x00400669] = b'\x0f'
        mem[0x0040066a] = b':'
        mem[0x0040066b] = b'c'
        mem[0x0040066c] = b'\xca'
        mem[0x0040066d] = b'$'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400668
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400668],  b'f')
        self.assertEqual(mem[0x400669],  b'\x0f')
        self.assertEqual(mem[0x40066a],  b':')
        self.assertEqual(mem[0x40066b],  b'c')
        self.assertEqual(mem[0x40066c],  b'\xca')
        self.assertEqual(mem[0x40066d],  b'$')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195950)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_12(self):
        ''' Instruction PCMPISTRI_12
            Groups: sse42
            0x400698:	pcmpistri	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400698] = b'f'
        mem[0x00400699] = b'\x0f'
        mem[0x0040069a] = b':'
        mem[0x0040069b] = b'c'
        mem[0x0040069c] = b'\xca'
        mem[0x0040069d] = b'4'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400698
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400698],  b'f')
        self.assertEqual(mem[0x400699],  b'\x0f')
        self.assertEqual(mem[0x40069a],  b':')
        self.assertEqual(mem[0x40069b],  b'c')
        self.assertEqual(mem[0x40069c],  b'\xca')
        self.assertEqual(mem[0x40069d],  b'4')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195998)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_13(self):
        ''' Instruction PCMPISTRI_13
            Groups: sse42
            0x4006c8:	pcmpistri	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006c8] = b'f'
        mem[0x004006c9] = b'\x0f'
        mem[0x004006ca] = b':'
        mem[0x004006cb] = b'c'
        mem[0x004006cc] = b'\xca'
        mem[0x004006cd] = b'D'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006c8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006c8],  b'f')
        self.assertEqual(mem[0x4006c9],  b'\x0f')
        self.assertEqual(mem[0x4006ca],  b':')
        self.assertEqual(mem[0x4006cb],  b'c')
        self.assertEqual(mem[0x4006cc],  b'\xca')
        self.assertEqual(mem[0x4006cd],  b'D')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196046)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_14(self):
        ''' Instruction PCMPISTRI_14
            Groups: sse42
            0x4006bc:	pcmpistri	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006c0] = b'\xca'
        mem[0x004006c1] = b'@'
        mem[0x004006bc] = b'f'
        mem[0x004006bd] = b'\x0f'
        mem[0x004006be] = b':'
        mem[0x004006bf] = b'c'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x4006bc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006c0],  b'\xca')
        self.assertEqual(mem[0x4006c1],  b'@')
        self.assertEqual(mem[0x4006bc],  b'f')
        self.assertEqual(mem[0x4006bd],  b'\x0f')
        self.assertEqual(mem[0x4006be],  b':')
        self.assertEqual(mem[0x4006bf],  b'c')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196034)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_15(self):
        ''' Instruction PCMPISTRI_15
            Groups: sse42
            0x40068c:	pcmpistri	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040068c] = b'f'
        mem[0x0040068d] = b'\x0f'
        mem[0x0040068e] = b':'
        mem[0x0040068f] = b'c'
        mem[0x00400690] = b'\xca'
        mem[0x00400691] = b'0'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40068c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40068c],  b'f')
        self.assertEqual(mem[0x40068d],  b'\x0f')
        self.assertEqual(mem[0x40068e],  b':')
        self.assertEqual(mem[0x40068f],  b'c')
        self.assertEqual(mem[0x400690],  b'\xca')
        self.assertEqual(mem[0x400691],  b'0')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195986)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_16(self):
        ''' Instruction PCMPISTRI_16
            Groups: sse42
            0x40062c:	pcmpistri	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040062c] = b'f'
        mem[0x0040062d] = b'\x0f'
        mem[0x0040062e] = b':'
        mem[0x0040062f] = b'c'
        mem[0x00400630] = b'\xca'
        mem[0x00400631] = b'\x10'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40062c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40062c],  b'f')
        self.assertEqual(mem[0x40062d],  b'\x0f')
        self.assertEqual(mem[0x40062e],  b':')
        self.assertEqual(mem[0x40062f],  b'c')
        self.assertEqual(mem[0x400630],  b'\xca')
        self.assertEqual(mem[0x400631],  b'\x10')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195890)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_17(self):
        ''' Instruction PCMPISTRI_17
            Groups: sse42
            0x400764:	pcmpistri	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400764] = b'f'
        mem[0x00400765] = b'\x0f'
        mem[0x00400766] = b':'
        mem[0x00400767] = b'c'
        mem[0x00400768] = b'\xca'
        mem[0x00400769] = b'x'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400764
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400764],  b'f')
        self.assertEqual(mem[0x400765],  b'\x0f')
        self.assertEqual(mem[0x400766],  b':')
        self.assertEqual(mem[0x400767],  b'c')
        self.assertEqual(mem[0x400768],  b'\xca')
        self.assertEqual(mem[0x400769],  b'x')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196202)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_18(self):
        ''' Instruction PCMPISTRI_18
            Groups: sse42
            0x4005fc:	pcmpistri	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400600] = b'\xca'
        mem[0x00400601] = b'\x00'
        mem[0x004005fc] = b'f'
        mem[0x004005fd] = b'\x0f'
        mem[0x004005fe] = b':'
        mem[0x004005ff] = b'c'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x82
        cpu.CF = True
        cpu.RIP = 0x4005fc
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400600],  b'\xca')
        self.assertEqual(mem[0x400601],  b'\x00')
        self.assertEqual(mem[0x4005fc],  b'f')
        self.assertEqual(mem[0x4005fd],  b'\x0f')
        self.assertEqual(mem[0x4005fe],  b':')
        self.assertEqual(mem[0x4005ff],  b'c')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195842)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_19(self):
        ''' Instruction PCMPISTRI_19
            Groups: sse42
            0x4006ce:	pcmpistri	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006ce] = b'f'
        mem[0x004006cf] = b'\x0f'
        mem[0x004006d0] = b':'
        mem[0x004006d1] = b'c'
        mem[0x004006d2] = b'\xca'
        mem[0x004006d3] = b'E'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x4006ce
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006ce],  b'f')
        self.assertEqual(mem[0x4006cf],  b'\x0f')
        self.assertEqual(mem[0x4006d0],  b':')
        self.assertEqual(mem[0x4006d1],  b'c')
        self.assertEqual(mem[0x4006d2],  b'\xca')
        self.assertEqual(mem[0x4006d3],  b'E')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196052)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_2(self):
        ''' Instruction PCMPISTRI_2
            Groups: sse42
            0x400704:	pcmpistri	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400704] = b'f'
        mem[0x00400705] = b'\x0f'
        mem[0x00400706] = b':'
        mem[0x00400707] = b'c'
        mem[0x00400708] = b'\xca'
        mem[0x00400709] = b'X'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400704
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400704],  b'f')
        self.assertEqual(mem[0x400705],  b'\x0f')
        self.assertEqual(mem[0x400706],  b':')
        self.assertEqual(mem[0x400707],  b'c')
        self.assertEqual(mem[0x400708],  b'\xca')
        self.assertEqual(mem[0x400709],  b'X')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196106)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_20(self):
        ''' Instruction PCMPISTRI_20
            Groups: sse42
            0x4006f8:	pcmpistri	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006f8] = b'f'
        mem[0x004006f9] = b'\x0f'
        mem[0x004006fa] = b':'
        mem[0x004006fb] = b'c'
        mem[0x004006fc] = b'\xca'
        mem[0x004006fd] = b'T'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006f8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006f8],  b'f')
        self.assertEqual(mem[0x4006f9],  b'\x0f')
        self.assertEqual(mem[0x4006fa],  b':')
        self.assertEqual(mem[0x4006fb],  b'c')
        self.assertEqual(mem[0x4006fc],  b'\xca')
        self.assertEqual(mem[0x4006fd],  b'T')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196094)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_21(self):
        ''' Instruction PCMPISTRI_21
            Groups: sse42
            0x4006c2:	pcmpistri	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006c2] = b'f'
        mem[0x004006c3] = b'\x0f'
        mem[0x004006c4] = b':'
        mem[0x004006c5] = b'c'
        mem[0x004006c6] = b'\xca'
        mem[0x004006c7] = b'A'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x4006c2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006c2],  b'f')
        self.assertEqual(mem[0x4006c3],  b'\x0f')
        self.assertEqual(mem[0x4006c4],  b':')
        self.assertEqual(mem[0x4006c5],  b'c')
        self.assertEqual(mem[0x4006c6],  b'\xca')
        self.assertEqual(mem[0x4006c7],  b'A')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196040)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_22(self):
        ''' Instruction PCMPISTRI_22
            Groups: sse42
            0x40069e:	pcmpistri	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006a0] = b':'
        mem[0x004006a1] = b'c'
        mem[0x004006a2] = b'\xca'
        mem[0x004006a3] = b'5'
        mem[0x0040069e] = b'f'
        mem[0x0040069f] = b'\x0f'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40069e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006a0],  b':')
        self.assertEqual(mem[0x4006a1],  b'c')
        self.assertEqual(mem[0x4006a2],  b'\xca')
        self.assertEqual(mem[0x4006a3],  b'5')
        self.assertEqual(mem[0x40069e],  b'f')
        self.assertEqual(mem[0x40069f],  b'\x0f')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196004)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_23(self):
        ''' Instruction PCMPISTRI_23
            Groups: sse42
            0x4006b6:	pcmpistri	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006b6] = b'f'
        mem[0x004006b7] = b'\x0f'
        mem[0x004006b8] = b':'
        mem[0x004006b9] = b'c'
        mem[0x004006ba] = b'\xca'
        mem[0x004006bb] = b'='
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x4006b6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006b6],  b'f')
        self.assertEqual(mem[0x4006b7],  b'\x0f')
        self.assertEqual(mem[0x4006b8],  b':')
        self.assertEqual(mem[0x4006b9],  b'c')
        self.assertEqual(mem[0x4006ba],  b'\xca')
        self.assertEqual(mem[0x4006bb],  b'=')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196028)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_24(self):
        ''' Instruction PCMPISTRI_24
            Groups: sse42
            0x400620:	pcmpistri	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400620] = b'f'
        mem[0x00400621] = b'\x0f'
        mem[0x00400622] = b':'
        mem[0x00400623] = b'c'
        mem[0x00400624] = b'\xca'
        mem[0x00400625] = b'\x0c'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400620
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400620],  b'f')
        self.assertEqual(mem[0x400621],  b'\x0f')
        self.assertEqual(mem[0x400622],  b':')
        self.assertEqual(mem[0x400623],  b'c')
        self.assertEqual(mem[0x400624],  b'\xca')
        self.assertEqual(mem[0x400625],  b'\x0c')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195878)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_25(self):
        ''' Instruction PCMPISTRI_25
            Groups: sse42
            0x400710:	pcmpistri	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400710] = b'f'
        mem[0x00400711] = b'\x0f'
        mem[0x00400712] = b':'
        mem[0x00400713] = b'c'
        mem[0x00400714] = b'\xca'
        mem[0x00400715] = b'\\'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400710
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400710],  b'f')
        self.assertEqual(mem[0x400711],  b'\x0f')
        self.assertEqual(mem[0x400712],  b':')
        self.assertEqual(mem[0x400713],  b'c')
        self.assertEqual(mem[0x400714],  b'\xca')
        self.assertEqual(mem[0x400715],  b'\\')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196118)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_26(self):
        ''' Instruction PCMPISTRI_26
            Groups: sse42
            0x4006b0:	pcmpistri	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006b0] = b'f'
        mem[0x004006b1] = b'\x0f'
        mem[0x004006b2] = b':'
        mem[0x004006b3] = b'c'
        mem[0x004006b4] = b'\xca'
        mem[0x004006b5] = b'<'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006b0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006b0],  b'f')
        self.assertEqual(mem[0x4006b1],  b'\x0f')
        self.assertEqual(mem[0x4006b2],  b':')
        self.assertEqual(mem[0x4006b3],  b'c')
        self.assertEqual(mem[0x4006b4],  b'\xca')
        self.assertEqual(mem[0x4006b5],  b'<')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196022)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_27(self):
        ''' Instruction PCMPISTRI_27
            Groups: sse42
            0x400740:	pcmpistri	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400740] = b'f'
        mem[0x00400741] = b'\x0f'
        mem[0x00400742] = b':'
        mem[0x00400743] = b'c'
        mem[0x00400744] = b'\xca'
        mem[0x00400745] = b'l'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400740
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400740],  b'f')
        self.assertEqual(mem[0x400741],  b'\x0f')
        self.assertEqual(mem[0x400742],  b':')
        self.assertEqual(mem[0x400743],  b'c')
        self.assertEqual(mem[0x400744],  b'\xca')
        self.assertEqual(mem[0x400745],  b'l')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196166)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_28(self):
        ''' Instruction PCMPISTRI_28
            Groups: sse42
            0x400692:	pcmpistri	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400692] = b'f'
        mem[0x00400693] = b'\x0f'
        mem[0x00400694] = b':'
        mem[0x00400695] = b'c'
        mem[0x00400696] = b'\xca'
        mem[0x00400697] = b'1'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400692
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400692],  b'f')
        self.assertEqual(mem[0x400693],  b'\x0f')
        self.assertEqual(mem[0x400694],  b':')
        self.assertEqual(mem[0x400695],  b'c')
        self.assertEqual(mem[0x400696],  b'\xca')
        self.assertEqual(mem[0x400697],  b'1')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195992)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_29(self):
        ''' Instruction PCMPISTRI_29
            Groups: sse42
            0x40064a:	pcmpistri	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040064a] = b'f'
        mem[0x0040064b] = b'\x0f'
        mem[0x0040064c] = b':'
        mem[0x0040064d] = b'c'
        mem[0x0040064e] = b'\xca'
        mem[0x0040064f] = b'\x19'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40064a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40064a],  b'f')
        self.assertEqual(mem[0x40064b],  b'\x0f')
        self.assertEqual(mem[0x40064c],  b':')
        self.assertEqual(mem[0x40064d],  b'c')
        self.assertEqual(mem[0x40064e],  b'\xca')
        self.assertEqual(mem[0x40064f],  b'\x19')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195920)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_3(self):
        ''' Instruction PCMPISTRI_3
            Groups: sse42
            0x400728:	pcmpistri	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400728] = b'f'
        mem[0x00400729] = b'\x0f'
        mem[0x0040072a] = b':'
        mem[0x0040072b] = b'c'
        mem[0x0040072c] = b'\xca'
        mem[0x0040072d] = b'd'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400728
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400728],  b'f')
        self.assertEqual(mem[0x400729],  b'\x0f')
        self.assertEqual(mem[0x40072a],  b':')
        self.assertEqual(mem[0x40072b],  b'c')
        self.assertEqual(mem[0x40072c],  b'\xca')
        self.assertEqual(mem[0x40072d],  b'd')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196142)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_30(self):
        ''' Instruction PCMPISTRI_30
            Groups: sse42
            0x40077c:	pcmpistri	xmm1, xmmword ptr [rbp - 0xa0], 0x1b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem[0x00400780] = b'\x8d'
        mem[0x00400781] = b'`'
        mem[0x00400782] = b'\xff'
        mem[0x00400783] = b'\xff'
        mem[0x00400784] = b'\xff'
        mem[0x00400785] = b'\x1b'
        mem[0x7fffffffe190] = b'A'
        mem[0x7fffffffe191] = b'B'
        mem[0x7fffffffe192] = b'C'
        mem[0x7fffffffe193] = b'D'
        mem[0x7fffffffe194] = b'E'
        mem[0x7fffffffe195] = b'F'
        mem[0x7fffffffe196] = b'G'
        mem[0x7fffffffe197] = b'H'
        mem[0x7fffffffe198] = b'A'
        mem[0x7fffffffe199] = b'B'
        mem[0x7fffffffe19a] = b'C'
        mem[0x7fffffffe19b] = b'D'
        mem[0x7fffffffe19c] = b'E'
        mem[0x7fffffffe19d] = b'F'
        mem[0x7fffffffe19e] = b'G'
        mem[0x7fffffffe19f] = b'H'
        mem[0x0040077c] = b'f'
        mem[0x0040077d] = b'\x0f'
        mem[0x0040077e] = b':'
        mem[0x0040077f] = b'c'
        cpu.SF = False
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x40077c
        cpu.RBP = 0x7fffffffe230
        cpu.execute()
    
        self.assertEqual(mem[0x400780],  b'\x8d')
        self.assertEqual(mem[0x400781],  b'`')
        self.assertEqual(mem[0x400782],  b'\xff')
        self.assertEqual(mem[0x400783],  b'\xff')
        self.assertEqual(mem[0x400784],  b'\xff')
        self.assertEqual(mem[0x400785],  b'\x1b')
        self.assertEqual(mem[0x7fffffffe190],  b'A')
        self.assertEqual(mem[0x7fffffffe191],  b'B')
        self.assertEqual(mem[0x7fffffffe192],  b'C')
        self.assertEqual(mem[0x7fffffffe193],  b'D')
        self.assertEqual(mem[0x7fffffffe194],  b'E')
        self.assertEqual(mem[0x7fffffffe195],  b'F')
        self.assertEqual(mem[0x7fffffffe196],  b'G')
        self.assertEqual(mem[0x7fffffffe197],  b'H')
        self.assertEqual(mem[0x7fffffffe198],  b'A')
        self.assertEqual(mem[0x7fffffffe199],  b'B')
        self.assertEqual(mem[0x7fffffffe19a],  b'C')
        self.assertEqual(mem[0x7fffffffe19b],  b'D')
        self.assertEqual(mem[0x7fffffffe19c],  b'E')
        self.assertEqual(mem[0x7fffffffe19d],  b'F')
        self.assertEqual(mem[0x7fffffffe19e],  b'G')
        self.assertEqual(mem[0x7fffffffe19f],  b'H')
        self.assertEqual(mem[0x40077c],  b'f')
        self.assertEqual(mem[0x40077d],  b'\x0f')
        self.assertEqual(mem[0x40077e],  b':')
        self.assertEqual(mem[0x40077f],  b'c')
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196230)
        self.assertEqual(cpu.RBP, 140737488347696)

    def test_PCMPISTRI_31(self):
        ''' Instruction PCMPISTRI_31
            Groups: sse42
            0x400626:	pcmpistri	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400626] = b'f'
        mem[0x00400627] = b'\x0f'
        mem[0x00400628] = b':'
        mem[0x00400629] = b'c'
        mem[0x0040062a] = b'\xca'
        mem[0x0040062b] = b'\r'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400626
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400626],  b'f')
        self.assertEqual(mem[0x400627],  b'\x0f')
        self.assertEqual(mem[0x400628],  b':')
        self.assertEqual(mem[0x400629],  b'c')
        self.assertEqual(mem[0x40062a],  b'\xca')
        self.assertEqual(mem[0x40062b],  b'\r')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195884)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_32(self):
        ''' Instruction PCMPISTRI_32
            Groups: sse42
            0x4006d4:	pcmpistri	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006d4] = b'f'
        mem[0x004006d5] = b'\x0f'
        mem[0x004006d6] = b':'
        mem[0x004006d7] = b'c'
        mem[0x004006d8] = b'\xca'
        mem[0x004006d9] = b'H'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006d4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006d4],  b'f')
        self.assertEqual(mem[0x4006d5],  b'\x0f')
        self.assertEqual(mem[0x4006d6],  b':')
        self.assertEqual(mem[0x4006d7],  b'c')
        self.assertEqual(mem[0x4006d8],  b'\xca')
        self.assertEqual(mem[0x4006d9],  b'H')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196058)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_33(self):
        ''' Instruction PCMPISTRI_33
            Groups: sse42
            0x400686:	pcmpistri	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400686] = b'f'
        mem[0x00400687] = b'\x0f'
        mem[0x00400688] = b':'
        mem[0x00400689] = b'c'
        mem[0x0040068a] = b'\xca'
        mem[0x0040068b] = b'-'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400686
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400686],  b'f')
        self.assertEqual(mem[0x400687],  b'\x0f')
        self.assertEqual(mem[0x400688],  b':')
        self.assertEqual(mem[0x400689],  b'c')
        self.assertEqual(mem[0x40068a],  b'\xca')
        self.assertEqual(mem[0x40068b],  b'-')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195980)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_34(self):
        ''' Instruction PCMPISTRI_34
            Groups: sse42
            0x400770:	pcmpistri	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400770] = b'f'
        mem[0x00400771] = b'\x0f'
        mem[0x00400772] = b':'
        mem[0x00400773] = b'c'
        mem[0x00400774] = b'\xca'
        mem[0x00400775] = b'|'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400770
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400770],  b'f')
        self.assertEqual(mem[0x400771],  b'\x0f')
        self.assertEqual(mem[0x400772],  b':')
        self.assertEqual(mem[0x400773],  b'c')
        self.assertEqual(mem[0x400774],  b'\xca')
        self.assertEqual(mem[0x400775],  b'|')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196214)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_35(self):
        ''' Instruction PCMPISTRI_35
            Groups: sse42
            0x40071c:	pcmpistri	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400720] = b'\xca'
        mem[0x00400721] = b'`'
        mem[0x0040071c] = b'f'
        mem[0x0040071d] = b'\x0f'
        mem[0x0040071e] = b':'
        mem[0x0040071f] = b'c'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x40071c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400720],  b'\xca')
        self.assertEqual(mem[0x400721],  b'`')
        self.assertEqual(mem[0x40071c],  b'f')
        self.assertEqual(mem[0x40071d],  b'\x0f')
        self.assertEqual(mem[0x40071e],  b':')
        self.assertEqual(mem[0x40071f],  b'c')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196130)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_36(self):
        ''' Instruction PCMPISTRI_36
            Groups: sse42
            0x400776:	pcmpistri	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400776] = b'f'
        mem[0x00400777] = b'\x0f'
        mem[0x00400778] = b':'
        mem[0x00400779] = b'c'
        mem[0x0040077a] = b'\xca'
        mem[0x0040077b] = b'}'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x400776
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400776],  b'f')
        self.assertEqual(mem[0x400777],  b'\x0f')
        self.assertEqual(mem[0x400778],  b':')
        self.assertEqual(mem[0x400779],  b'c')
        self.assertEqual(mem[0x40077a],  b'\xca')
        self.assertEqual(mem[0x40077b],  b'}')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196220)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_37(self):
        ''' Instruction PCMPISTRI_37
            Groups: sse42
            0x400758:	pcmpistri	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400758] = b'f'
        mem[0x00400759] = b'\x0f'
        mem[0x0040075a] = b':'
        mem[0x0040075b] = b'c'
        mem[0x0040075c] = b'\xca'
        mem[0x0040075d] = b't'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400758
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400758],  b'f')
        self.assertEqual(mem[0x400759],  b'\x0f')
        self.assertEqual(mem[0x40075a],  b':')
        self.assertEqual(mem[0x40075b],  b'c')
        self.assertEqual(mem[0x40075c],  b'\xca')
        self.assertEqual(mem[0x40075d],  b't')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196190)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_38(self):
        ''' Instruction PCMPISTRI_38
            Groups: sse42
            0x400602:	pcmpistri	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400602] = b'f'
        mem[0x00400603] = b'\x0f'
        mem[0x00400604] = b':'
        mem[0x00400605] = b'c'
        mem[0x00400606] = b'\xca'
        mem[0x00400607] = b'\x01'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400602
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400602],  b'f')
        self.assertEqual(mem[0x400603],  b'\x0f')
        self.assertEqual(mem[0x400604],  b':')
        self.assertEqual(mem[0x400605],  b'c')
        self.assertEqual(mem[0x400606],  b'\xca')
        self.assertEqual(mem[0x400607],  b'\x01')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195848)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_39(self):
        ''' Instruction PCMPISTRI_39
            Groups: sse42
            0x400608:	pcmpistri	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400608] = b'f'
        mem[0x00400609] = b'\x0f'
        mem[0x0040060a] = b':'
        mem[0x0040060b] = b'c'
        mem[0x0040060c] = b'\xca'
        mem[0x0040060d] = b'\x04'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400608
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400608],  b'f')
        self.assertEqual(mem[0x400609],  b'\x0f')
        self.assertEqual(mem[0x40060a],  b':')
        self.assertEqual(mem[0x40060b],  b'c')
        self.assertEqual(mem[0x40060c],  b'\xca')
        self.assertEqual(mem[0x40060d],  b'\x04')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195854)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_4(self):
        ''' Instruction PCMPISTRI_4
            Groups: sse42
            0x400752:	pcmpistri	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400752] = b'f'
        mem[0x00400753] = b'\x0f'
        mem[0x00400754] = b':'
        mem[0x00400755] = b'c'
        mem[0x00400756] = b'\xca'
        mem[0x00400757] = b'q'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400752
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400752],  b'f')
        self.assertEqual(mem[0x400753],  b'\x0f')
        self.assertEqual(mem[0x400754],  b':')
        self.assertEqual(mem[0x400755],  b'c')
        self.assertEqual(mem[0x400756],  b'\xca')
        self.assertEqual(mem[0x400757],  b'q')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196184)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_40(self):
        ''' Instruction PCMPISTRI_40
            Groups: sse42
            0x400638:	pcmpistri	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400638] = b'f'
        mem[0x00400639] = b'\x0f'
        mem[0x0040063a] = b':'
        mem[0x0040063b] = b'c'
        mem[0x0040063c] = b'\xca'
        mem[0x0040063d] = b'\x14'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400638
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400638],  b'f')
        self.assertEqual(mem[0x400639],  b'\x0f')
        self.assertEqual(mem[0x40063a],  b':')
        self.assertEqual(mem[0x40063b],  b'c')
        self.assertEqual(mem[0x40063c],  b'\xca')
        self.assertEqual(mem[0x40063d],  b'\x14')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195902)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_41(self):
        ''' Instruction PCMPISTRI_41
            Groups: sse42
            0x40074c:	pcmpistri	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040074c] = b'f'
        mem[0x0040074d] = b'\x0f'
        mem[0x0040074e] = b':'
        mem[0x0040074f] = b'c'
        mem[0x00400750] = b'\xca'
        mem[0x00400751] = b'p'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = True
        cpu.RIP = 0x40074c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40074c],  b'f')
        self.assertEqual(mem[0x40074d],  b'\x0f')
        self.assertEqual(mem[0x40074e],  b':')
        self.assertEqual(mem[0x40074f],  b'c')
        self.assertEqual(mem[0x400750],  b'\xca')
        self.assertEqual(mem[0x400751],  b'p')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196178)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_42(self):
        ''' Instruction PCMPISTRI_42
            Groups: sse42
            0x400734:	pcmpistri	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400734] = b'f'
        mem[0x00400735] = b'\x0f'
        mem[0x00400736] = b':'
        mem[0x00400737] = b'c'
        mem[0x00400738] = b'\xca'
        mem[0x00400739] = b'h'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400734
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400734],  b'f')
        self.assertEqual(mem[0x400735],  b'\x0f')
        self.assertEqual(mem[0x400736],  b':')
        self.assertEqual(mem[0x400737],  b'c')
        self.assertEqual(mem[0x400738],  b'\xca')
        self.assertEqual(mem[0x400739],  b'h')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196154)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_43(self):
        ''' Instruction PCMPISTRI_43
            Groups: sse42
            0x400644:	pcmpistri	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400644] = b'f'
        mem[0x00400645] = b'\x0f'
        mem[0x00400646] = b':'
        mem[0x00400647] = b'c'
        mem[0x00400648] = b'\xca'
        mem[0x00400649] = b'\x18'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400644
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400644],  b'f')
        self.assertEqual(mem[0x400645],  b'\x0f')
        self.assertEqual(mem[0x400646],  b':')
        self.assertEqual(mem[0x400647],  b'c')
        self.assertEqual(mem[0x400648],  b'\xca')
        self.assertEqual(mem[0x400649],  b'\x18')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195914)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_44(self):
        ''' Instruction PCMPISTRI_44
            Groups: sse42
            0x40065c:	pcmpistri	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400660] = b'\xca'
        mem[0x00400661] = b' '
        mem[0x0040065c] = b'f'
        mem[0x0040065d] = b'\x0f'
        mem[0x0040065e] = b':'
        mem[0x0040065f] = b'c'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x40065c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400660],  b'\xca')
        self.assertEqual(mem[0x400661],  b' ')
        self.assertEqual(mem[0x40065c],  b'f')
        self.assertEqual(mem[0x40065d],  b'\x0f')
        self.assertEqual(mem[0x40065e],  b':')
        self.assertEqual(mem[0x40065f],  b'c')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195938)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_45(self):
        ''' Instruction PCMPISTRI_45
            Groups: sse42
            0x40061a:	pcmpistri	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040061a] = b'f'
        mem[0x0040061b] = b'\x0f'
        mem[0x0040061c] = b':'
        mem[0x0040061d] = b'c'
        mem[0x0040061e] = b'\xca'
        mem[0x0040061f] = b'\t'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40061a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40061a],  b'f')
        self.assertEqual(mem[0x40061b],  b'\x0f')
        self.assertEqual(mem[0x40061c],  b':')
        self.assertEqual(mem[0x40061d],  b'c')
        self.assertEqual(mem[0x40061e],  b'\xca')
        self.assertEqual(mem[0x40061f],  b'\t')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195872)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_46(self):
        ''' Instruction PCMPISTRI_46
            Groups: sse42
            0x40073a:	pcmpistri	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040073a] = b'f'
        mem[0x0040073b] = b'\x0f'
        mem[0x0040073c] = b':'
        mem[0x0040073d] = b'c'
        mem[0x0040073e] = b'\xca'
        mem[0x0040073f] = b'i'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x40073a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40073a],  b'f')
        self.assertEqual(mem[0x40073b],  b'\x0f')
        self.assertEqual(mem[0x40073c],  b':')
        self.assertEqual(mem[0x40073d],  b'c')
        self.assertEqual(mem[0x40073e],  b'\xca')
        self.assertEqual(mem[0x40073f],  b'i')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196160)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_47(self):
        ''' Instruction PCMPISTRI_47
            Groups: sse42
            0x40070a:	pcmpistri	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040070a] = b'f'
        mem[0x0040070b] = b'\x0f'
        mem[0x0040070c] = b':'
        mem[0x0040070d] = b'c'
        mem[0x0040070e] = b'\xca'
        mem[0x0040070f] = b'Y'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40070a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40070a],  b'f')
        self.assertEqual(mem[0x40070b],  b'\x0f')
        self.assertEqual(mem[0x40070c],  b':')
        self.assertEqual(mem[0x40070d],  b'c')
        self.assertEqual(mem[0x40070e],  b'\xca')
        self.assertEqual(mem[0x40070f],  b'Y')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196112)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_48(self):
        ''' Instruction PCMPISTRI_48
            Groups: sse42
            0x4006aa:	pcmpistri	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006aa] = b'f'
        mem[0x004006ab] = b'\x0f'
        mem[0x004006ac] = b':'
        mem[0x004006ad] = b'c'
        mem[0x004006ae] = b'\xca'
        mem[0x004006af] = b'9'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006aa
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006aa],  b'f')
        self.assertEqual(mem[0x4006ab],  b'\x0f')
        self.assertEqual(mem[0x4006ac],  b':')
        self.assertEqual(mem[0x4006ad],  b'c')
        self.assertEqual(mem[0x4006ae],  b'\xca')
        self.assertEqual(mem[0x4006af],  b'9')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196016)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_49(self):
        ''' Instruction PCMPISTRI_49
            Groups: sse42
            0x400716:	pcmpistri	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400716] = b'f'
        mem[0x00400717] = b'\x0f'
        mem[0x00400718] = b':'
        mem[0x00400719] = b'c'
        mem[0x0040071a] = b'\xca'
        mem[0x0040071b] = b']'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x400716
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400716],  b'f')
        self.assertEqual(mem[0x400717],  b'\x0f')
        self.assertEqual(mem[0x400718],  b':')
        self.assertEqual(mem[0x400719],  b'c')
        self.assertEqual(mem[0x40071a],  b'\xca')
        self.assertEqual(mem[0x40071b],  b']')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196124)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_5(self):
        ''' Instruction PCMPISTRI_5
            Groups: sse42
            0x40063e:	pcmpistri	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400640] = b':'
        mem[0x00400641] = b'c'
        mem[0x00400642] = b'\xca'
        mem[0x00400643] = b'\x15'
        mem[0x0040063e] = b'f'
        mem[0x0040063f] = b'\x0f'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40063e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400640],  b':')
        self.assertEqual(mem[0x400641],  b'c')
        self.assertEqual(mem[0x400642],  b'\xca')
        self.assertEqual(mem[0x400643],  b'\x15')
        self.assertEqual(mem[0x40063e],  b'f')
        self.assertEqual(mem[0x40063f],  b'\x0f')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195908)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_50(self):
        ''' Instruction PCMPISTRI_50
            Groups: sse42
            0x400656:	pcmpistri	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400656] = b'f'
        mem[0x00400657] = b'\x0f'
        mem[0x00400658] = b':'
        mem[0x00400659] = b'c'
        mem[0x0040065a] = b'\xca'
        mem[0x0040065b] = b'\x1d'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x400656
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400656],  b'f')
        self.assertEqual(mem[0x400657],  b'\x0f')
        self.assertEqual(mem[0x400658],  b':')
        self.assertEqual(mem[0x400659],  b'c')
        self.assertEqual(mem[0x40065a],  b'\xca')
        self.assertEqual(mem[0x40065b],  b'\x1d')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195932)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_51(self):
        ''' Instruction PCMPISTRI_51
            Groups: sse42
            0x40072e:	pcmpistri	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040072e] = b'f'
        mem[0x0040072f] = b'\x0f'
        mem[0x00400730] = b':'
        mem[0x00400731] = b'c'
        mem[0x00400732] = b'\xca'
        mem[0x00400733] = b'e'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x40072e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40072e],  b'f')
        self.assertEqual(mem[0x40072f],  b'\x0f')
        self.assertEqual(mem[0x400730],  b':')
        self.assertEqual(mem[0x400731],  b'c')
        self.assertEqual(mem[0x400732],  b'\xca')
        self.assertEqual(mem[0x400733],  b'e')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196148)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_52(self):
        ''' Instruction PCMPISTRI_52
            Groups: sse42
            0x400680:	pcmpistri	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400680] = b'f'
        mem[0x00400681] = b'\x0f'
        mem[0x00400682] = b':'
        mem[0x00400683] = b'c'
        mem[0x00400684] = b'\xca'
        mem[0x00400685] = b','
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400680
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400680],  b'f')
        self.assertEqual(mem[0x400681],  b'\x0f')
        self.assertEqual(mem[0x400682],  b':')
        self.assertEqual(mem[0x400683],  b'c')
        self.assertEqual(mem[0x400684],  b'\xca')
        self.assertEqual(mem[0x400685],  b',')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195974)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_53(self):
        ''' Instruction PCMPISTRI_53
            Groups: sse42
            0x400674:	pcmpistri	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400674] = b'f'
        mem[0x00400675] = b'\x0f'
        mem[0x00400676] = b':'
        mem[0x00400677] = b'c'
        mem[0x00400678] = b'\xca'
        mem[0x00400679] = b'('
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400674
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400674],  b'f')
        self.assertEqual(mem[0x400675],  b'\x0f')
        self.assertEqual(mem[0x400676],  b':')
        self.assertEqual(mem[0x400677],  b'c')
        self.assertEqual(mem[0x400678],  b'\xca')
        self.assertEqual(mem[0x400679],  b'(')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195962)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_54(self):
        ''' Instruction PCMPISTRI_54
            Groups: sse42
            0x40067a:	pcmpistri	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040067a] = b'f'
        mem[0x0040067b] = b'\x0f'
        mem[0x0040067c] = b':'
        mem[0x0040067d] = b'c'
        mem[0x0040067e] = b'\xca'
        mem[0x0040067f] = b')'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40067a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40067a],  b'f')
        self.assertEqual(mem[0x40067b],  b'\x0f')
        self.assertEqual(mem[0x40067c],  b':')
        self.assertEqual(mem[0x40067d],  b'c')
        self.assertEqual(mem[0x40067e],  b'\xca')
        self.assertEqual(mem[0x40067f],  b')')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195968)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_55(self):
        ''' Instruction PCMPISTRI_55
            Groups: sse42
            0x400722:	pcmpistri	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400722] = b'f'
        mem[0x00400723] = b'\x0f'
        mem[0x00400724] = b':'
        mem[0x00400725] = b'c'
        mem[0x00400726] = b'\xca'
        mem[0x00400727] = b'a'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x400722
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400722],  b'f')
        self.assertEqual(mem[0x400723],  b'\x0f')
        self.assertEqual(mem[0x400724],  b':')
        self.assertEqual(mem[0x400725],  b'c')
        self.assertEqual(mem[0x400726],  b'\xca')
        self.assertEqual(mem[0x400727],  b'a')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196136)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_56(self):
        ''' Instruction PCMPISTRI_56
            Groups: sse42
            0x4006e6:	pcmpistri	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006e6] = b'f'
        mem[0x004006e7] = b'\x0f'
        mem[0x004006e8] = b':'
        mem[0x004006e9] = b'c'
        mem[0x004006ea] = b'\xca'
        mem[0x004006eb] = b'M'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = True
        cpu.RIP = 0x4006e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006e6],  b'f')
        self.assertEqual(mem[0x4006e7],  b'\x0f')
        self.assertEqual(mem[0x4006e8],  b':')
        self.assertEqual(mem[0x4006e9],  b'c')
        self.assertEqual(mem[0x4006ea],  b'\xca')
        self.assertEqual(mem[0x4006eb],  b'M')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196076)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_57(self):
        ''' Instruction PCMPISTRI_57
            Groups: sse42
            0x40076a:	pcmpistri	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040076a] = b'f'
        mem[0x0040076b] = b'\x0f'
        mem[0x0040076c] = b':'
        mem[0x0040076d] = b'c'
        mem[0x0040076e] = b'\xca'
        mem[0x0040076f] = b'y'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40076a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40076a],  b'f')
        self.assertEqual(mem[0x40076b],  b'\x0f')
        self.assertEqual(mem[0x40076c],  b':')
        self.assertEqual(mem[0x40076d],  b'c')
        self.assertEqual(mem[0x40076e],  b'\xca')
        self.assertEqual(mem[0x40076f],  b'y')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196208)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_58(self):
        ''' Instruction PCMPISTRI_58
            Groups: sse42
            0x4006ec:	pcmpistri	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006ec] = b'f'
        mem[0x004006ed] = b'\x0f'
        mem[0x004006ee] = b':'
        mem[0x004006ef] = b'c'
        mem[0x004006f0] = b'\xca'
        mem[0x004006f1] = b'P'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = True
        cpu.RIP = 0x4006ec
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006ec],  b'f')
        self.assertEqual(mem[0x4006ed],  b'\x0f')
        self.assertEqual(mem[0x4006ee],  b':')
        self.assertEqual(mem[0x4006ef],  b'c')
        self.assertEqual(mem[0x4006f0],  b'\xca')
        self.assertEqual(mem[0x4006f1],  b'P')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196082)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_59(self):
        ''' Instruction PCMPISTRI_59
            Groups: sse42
            0x400632:	pcmpistri	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400632] = b'f'
        mem[0x00400633] = b'\x0f'
        mem[0x00400634] = b':'
        mem[0x00400635] = b'c'
        mem[0x00400636] = b'\xca'
        mem[0x00400637] = b'\x11'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400632
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400632],  b'f')
        self.assertEqual(mem[0x400633],  b'\x0f')
        self.assertEqual(mem[0x400634],  b':')
        self.assertEqual(mem[0x400635],  b'c')
        self.assertEqual(mem[0x400636],  b'\xca')
        self.assertEqual(mem[0x400637],  b'\x11')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195896)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_6(self):
        ''' Instruction PCMPISTRI_6
            Groups: sse42
            0x40066e:	pcmpistri	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040066e] = b'f'
        mem[0x0040066f] = b'\x0f'
        mem[0x00400670] = b':'
        mem[0x00400671] = b'c'
        mem[0x00400672] = b'\xca'
        mem[0x00400673] = b'%'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40066e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40066e],  b'f')
        self.assertEqual(mem[0x40066f],  b'\x0f')
        self.assertEqual(mem[0x400670],  b':')
        self.assertEqual(mem[0x400671],  b'c')
        self.assertEqual(mem[0x400672],  b'\xca')
        self.assertEqual(mem[0x400673],  b'%')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195956)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_60(self):
        ''' Instruction PCMPISTRI_60
            Groups: sse42
            0x4006f2:	pcmpistri	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006f2] = b'f'
        mem[0x004006f3] = b'\x0f'
        mem[0x004006f4] = b':'
        mem[0x004006f5] = b'c'
        mem[0x004006f6] = b'\xca'
        mem[0x004006f7] = b'Q'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006f2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006f2],  b'f')
        self.assertEqual(mem[0x4006f3],  b'\x0f')
        self.assertEqual(mem[0x4006f4],  b':')
        self.assertEqual(mem[0x4006f5],  b'c')
        self.assertEqual(mem[0x4006f6],  b'\xca')
        self.assertEqual(mem[0x4006f7],  b'Q')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196088)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_61(self):
        ''' Instruction PCMPISTRI_61
            Groups: sse42
            0x400614:	pcmpistri	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400614] = b'f'
        mem[0x00400615] = b'\x0f'
        mem[0x00400616] = b':'
        mem[0x00400617] = b'c'
        mem[0x00400618] = b'\xca'
        mem[0x00400619] = b'\x08'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400614
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400614],  b'f')
        self.assertEqual(mem[0x400615],  b'\x0f')
        self.assertEqual(mem[0x400616],  b':')
        self.assertEqual(mem[0x400617],  b'c')
        self.assertEqual(mem[0x400618],  b'\xca')
        self.assertEqual(mem[0x400619],  b'\x08')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195866)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_62(self):
        ''' Instruction PCMPISTRI_62
            Groups: sse42
            0x4006da:	pcmpistri	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006da] = b'f'
        mem[0x004006db] = b'\x0f'
        mem[0x004006dc] = b':'
        mem[0x004006dd] = b'c'
        mem[0x004006de] = b'\xca'
        mem[0x004006df] = b'I'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x4006da
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006da],  b'f')
        self.assertEqual(mem[0x4006db],  b'\x0f')
        self.assertEqual(mem[0x4006dc],  b':')
        self.assertEqual(mem[0x4006dd],  b'c')
        self.assertEqual(mem[0x4006de],  b'\xca')
        self.assertEqual(mem[0x4006df],  b'I')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196064)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_63(self):
        ''' Instruction PCMPISTRI_63
            Groups: sse42
            0x4006a4:	pcmpistri	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006a4] = b'f'
        mem[0x004006a5] = b'\x0f'
        mem[0x004006a6] = b':'
        mem[0x004006a7] = b'c'
        mem[0x004006a8] = b'\xca'
        mem[0x004006a9] = b'8'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006a4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006a4],  b'f')
        self.assertEqual(mem[0x4006a5],  b'\x0f')
        self.assertEqual(mem[0x4006a6],  b':')
        self.assertEqual(mem[0x4006a7],  b'c')
        self.assertEqual(mem[0x4006a8],  b'\xca')
        self.assertEqual(mem[0x4006a9],  b'8')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196010)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_64(self):
        ''' Instruction PCMPISTRI_64
            Groups: sse42
            0x4006fe:	pcmpistri	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400700] = b':'
        mem[0x00400701] = b'c'
        mem[0x00400702] = b'\xca'
        mem[0x00400703] = b'U'
        mem[0x004006fe] = b'f'
        mem[0x004006ff] = b'\x0f'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006fe
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400700],  b':')
        self.assertEqual(mem[0x400701],  b'c')
        self.assertEqual(mem[0x400702],  b'\xca')
        self.assertEqual(mem[0x400703],  b'U')
        self.assertEqual(mem[0x4006fe],  b'f')
        self.assertEqual(mem[0x4006ff],  b'\x0f')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196100)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_65(self):
        ''' Instruction PCMPISTRI_65
            Groups: sse42
            0x400662:	pcmpistri	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400662] = b'f'
        mem[0x00400663] = b'\x0f'
        mem[0x00400664] = b':'
        mem[0x00400665] = b'c'
        mem[0x00400666] = b'\xca'
        mem[0x00400667] = b'!'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400662
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400662],  b'f')
        self.assertEqual(mem[0x400663],  b'\x0f')
        self.assertEqual(mem[0x400664],  b':')
        self.assertEqual(mem[0x400665],  b'c')
        self.assertEqual(mem[0x400666],  b'\xca')
        self.assertEqual(mem[0x400667],  b'!')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195944)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_7(self):
        ''' Instruction PCMPISTRI_7
            Groups: sse42
            0x4006e0:	pcmpistri	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004006e0] = b'f'
        mem[0x004006e1] = b'\x0f'
        mem[0x004006e2] = b':'
        mem[0x004006e3] = b'c'
        mem[0x004006e4] = b'\xca'
        mem[0x004006e5] = b'L'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006e0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006e0],  b'f')
        self.assertEqual(mem[0x4006e1],  b'\x0f')
        self.assertEqual(mem[0x4006e2],  b':')
        self.assertEqual(mem[0x4006e3],  b'c')
        self.assertEqual(mem[0x4006e4],  b'\xca')
        self.assertEqual(mem[0x4006e5],  b'L')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196070)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_8(self):
        ''' Instruction PCMPISTRI_8
            Groups: sse42
            0x40060e:	pcmpistri	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040060e] = b'f'
        mem[0x0040060f] = b'\x0f'
        mem[0x00400610] = b':'
        mem[0x00400611] = b'c'
        mem[0x00400612] = b'\xca'
        mem[0x00400613] = b'\x05'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40060e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40060e],  b'f')
        self.assertEqual(mem[0x40060f],  b'\x0f')
        self.assertEqual(mem[0x400610],  b':')
        self.assertEqual(mem[0x400611],  b'c')
        self.assertEqual(mem[0x400612],  b'\xca')
        self.assertEqual(mem[0x400613],  b'\x05')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195860)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_9(self):
        ''' Instruction PCMPISTRI_9
            Groups: sse42
            0x40075e:	pcmpistri	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400760] = b':'
        mem[0x00400761] = b'c'
        mem[0x00400762] = b'\xca'
        mem[0x00400763] = b'u'
        mem[0x0040075e] = b'f'
        mem[0x0040075f] = b'\x0f'
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40075e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400760],  b':')
        self.assertEqual(mem[0x400761],  b'c')
        self.assertEqual(mem[0x400762],  b'\xca')
        self.assertEqual(mem[0x400763],  b'u')
        self.assertEqual(mem[0x40075e],  b'f')
        self.assertEqual(mem[0x40075f],  b'\x0f')
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196196)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_1(self):
        ''' Instruction PCMPISTRM_1
            Groups: sse42
            0x400856:	pcmpistrm	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400856] = b'f'
        mem[0x00400857] = b'\x0f'
        mem[0x00400858] = b':'
        mem[0x00400859] = b'b'
        mem[0x0040085a] = b'\xca'
        mem[0x0040085b] = b'A'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400856
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400856],  b'f')
        self.assertEqual(mem[0x400857],  b'\x0f')
        self.assertEqual(mem[0x400858],  b':')
        self.assertEqual(mem[0x400859],  b'b')
        self.assertEqual(mem[0x40085a],  b'\xca')
        self.assertEqual(mem[0x40085b],  b'A')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196444)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_10(self):
        ''' Instruction PCMPISTRM_10
            Groups: sse42
            0x4007cc:	pcmpistrm	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007cc] = b'f'
        mem[0x004007cd] = b'\x0f'
        mem[0x004007ce] = b':'
        mem[0x004007cf] = b'b'
        mem[0x004007d0] = b'\xca'
        mem[0x004007d1] = b'\x14'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007cc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007cc],  b'f')
        self.assertEqual(mem[0x4007cd],  b'\x0f')
        self.assertEqual(mem[0x4007ce],  b':')
        self.assertEqual(mem[0x4007cf],  b'b')
        self.assertEqual(mem[0x4007d0],  b'\xca')
        self.assertEqual(mem[0x4007d1],  b'\x14')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196306)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_11(self):
        ''' Instruction PCMPISTRM_11
            Groups: sse42
            0x40087a:	pcmpistrm	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040087a] = b'f'
        mem[0x0040087b] = b'\x0f'
        mem[0x0040087c] = b':'
        mem[0x0040087d] = b'b'
        mem[0x0040087e] = b'\xca'
        mem[0x0040087f] = b'M'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40087a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40087a],  b'f')
        self.assertEqual(mem[0x40087b],  b'\x0f')
        self.assertEqual(mem[0x40087c],  b':')
        self.assertEqual(mem[0x40087d],  b'b')
        self.assertEqual(mem[0x40087e],  b'\xca')
        self.assertEqual(mem[0x40087f],  b'M')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196480)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_12(self):
        ''' Instruction PCMPISTRM_12
            Groups: sse42
            0x400802:	pcmpistrm	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400802] = b'f'
        mem[0x00400803] = b'\x0f'
        mem[0x00400804] = b':'
        mem[0x00400805] = b'b'
        mem[0x00400806] = b'\xca'
        mem[0x00400807] = b'%'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400802
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400802],  b'f')
        self.assertEqual(mem[0x400803],  b'\x0f')
        self.assertEqual(mem[0x400804],  b':')
        self.assertEqual(mem[0x400805],  b'b')
        self.assertEqual(mem[0x400806],  b'\xca')
        self.assertEqual(mem[0x400807],  b'%')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196360)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_13(self):
        ''' Instruction PCMPISTRM_13
            Groups: sse42
            0x4007fc:	pcmpistrm	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400800] = b'\xca'
        mem[0x00400801] = b'$'
        mem[0x004007fc] = b'f'
        mem[0x004007fd] = b'\x0f'
        mem[0x004007fe] = b':'
        mem[0x004007ff] = b'b'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007fc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400800],  b'\xca')
        self.assertEqual(mem[0x400801],  b'$')
        self.assertEqual(mem[0x4007fc],  b'f')
        self.assertEqual(mem[0x4007fd],  b'\x0f')
        self.assertEqual(mem[0x4007fe],  b':')
        self.assertEqual(mem[0x4007ff],  b'b')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196354)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_14(self):
        ''' Instruction PCMPISTRM_14
            Groups: sse42
            0x4008c8:	pcmpistrm	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008c8] = b'f'
        mem[0x004008c9] = b'\x0f'
        mem[0x004008ca] = b':'
        mem[0x004008cb] = b'b'
        mem[0x004008cc] = b'\xca'
        mem[0x004008cd] = b'h'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008c8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008c8],  b'f')
        self.assertEqual(mem[0x4008c9],  b'\x0f')
        self.assertEqual(mem[0x4008ca],  b':')
        self.assertEqual(mem[0x4008cb],  b'b')
        self.assertEqual(mem[0x4008cc],  b'\xca')
        self.assertEqual(mem[0x4008cd],  b'h')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196558)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_15(self):
        ''' Instruction PCMPISTRM_15
            Groups: sse42
            0x4008f8:	pcmpistrm	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008f8] = b'f'
        mem[0x004008f9] = b'\x0f'
        mem[0x004008fa] = b':'
        mem[0x004008fb] = b'b'
        mem[0x004008fc] = b'\xca'
        mem[0x004008fd] = b'x'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008f8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008f8],  b'f')
        self.assertEqual(mem[0x4008f9],  b'\x0f')
        self.assertEqual(mem[0x4008fa],  b':')
        self.assertEqual(mem[0x4008fb],  b'b')
        self.assertEqual(mem[0x4008fc],  b'\xca')
        self.assertEqual(mem[0x4008fd],  b'x')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196606)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_16(self):
        ''' Instruction PCMPISTRM_16
            Groups: sse42
            0x40080e:	pcmpistrm	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040080e] = b'f'
        mem[0x0040080f] = b'\x0f'
        mem[0x00400810] = b':'
        mem[0x00400811] = b'b'
        mem[0x00400812] = b'\xca'
        mem[0x00400813] = b')'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40080e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40080e],  b'f')
        self.assertEqual(mem[0x40080f],  b'\x0f')
        self.assertEqual(mem[0x400810],  b':')
        self.assertEqual(mem[0x400811],  b'b')
        self.assertEqual(mem[0x400812],  b'\xca')
        self.assertEqual(mem[0x400813],  b')')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196372)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_17(self):
        ''' Instruction PCMPISTRM_17
            Groups: sse42
            0x40089e:	pcmpistrm	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008a0] = b':'
        mem[0x004008a1] = b'b'
        mem[0x004008a2] = b'\xca'
        mem[0x004008a3] = b'Y'
        mem[0x0040089e] = b'f'
        mem[0x0040089f] = b'\x0f'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40089e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008a0],  b':')
        self.assertEqual(mem[0x4008a1],  b'b')
        self.assertEqual(mem[0x4008a2],  b'\xca')
        self.assertEqual(mem[0x4008a3],  b'Y')
        self.assertEqual(mem[0x40089e],  b'f')
        self.assertEqual(mem[0x40089f],  b'\x0f')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196516)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_18(self):
        ''' Instruction PCMPISTRM_18
            Groups: sse42
            0x4008f2:	pcmpistrm	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008f2] = b'f'
        mem[0x004008f3] = b'\x0f'
        mem[0x004008f4] = b':'
        mem[0x004008f5] = b'b'
        mem[0x004008f6] = b'\xca'
        mem[0x004008f7] = b'u'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008f2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008f2],  b'f')
        self.assertEqual(mem[0x4008f3],  b'\x0f')
        self.assertEqual(mem[0x4008f4],  b':')
        self.assertEqual(mem[0x4008f5],  b'b')
        self.assertEqual(mem[0x4008f6],  b'\xca')
        self.assertEqual(mem[0x4008f7],  b'u')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196600)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_19(self):
        ''' Instruction PCMPISTRM_19
            Groups: sse42
            0x4007b4:	pcmpistrm	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007b4] = b'f'
        mem[0x004007b5] = b'\x0f'
        mem[0x004007b6] = b':'
        mem[0x004007b7] = b'b'
        mem[0x004007b8] = b'\xca'
        mem[0x004007b9] = b'\x0c'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007b4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007b4],  b'f')
        self.assertEqual(mem[0x4007b5],  b'\x0f')
        self.assertEqual(mem[0x4007b6],  b':')
        self.assertEqual(mem[0x4007b7],  b'b')
        self.assertEqual(mem[0x4007b8],  b'\xca')
        self.assertEqual(mem[0x4007b9],  b'\x0c')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196282)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_2(self):
        ''' Instruction PCMPISTRM_2
            Groups: sse42
            0x4008ec:	pcmpistrm	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008ec] = b'f'
        mem[0x004008ed] = b'\x0f'
        mem[0x004008ee] = b':'
        mem[0x004008ef] = b'b'
        mem[0x004008f0] = b'\xca'
        mem[0x004008f1] = b't'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008ec
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008ec],  b'f')
        self.assertEqual(mem[0x4008ed],  b'\x0f')
        self.assertEqual(mem[0x4008ee],  b':')
        self.assertEqual(mem[0x4008ef],  b'b')
        self.assertEqual(mem[0x4008f0],  b'\xca')
        self.assertEqual(mem[0x4008f1],  b't')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196594)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_20(self):
        ''' Instruction PCMPISTRM_20
            Groups: sse42
            0x4007d8:	pcmpistrm	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007d8] = b'f'
        mem[0x004007d9] = b'\x0f'
        mem[0x004007da] = b':'
        mem[0x004007db] = b'b'
        mem[0x004007dc] = b'\xca'
        mem[0x004007dd] = b'\x18'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007d8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007d8],  b'f')
        self.assertEqual(mem[0x4007d9],  b'\x0f')
        self.assertEqual(mem[0x4007da],  b':')
        self.assertEqual(mem[0x4007db],  b'b')
        self.assertEqual(mem[0x4007dc],  b'\xca')
        self.assertEqual(mem[0x4007dd],  b'\x18')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196318)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_21(self):
        ''' Instruction PCMPISTRM_21
            Groups: sse42
            0x400892:	pcmpistrm	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400892] = b'f'
        mem[0x00400893] = b'\x0f'
        mem[0x00400894] = b':'
        mem[0x00400895] = b'b'
        mem[0x00400896] = b'\xca'
        mem[0x00400897] = b'U'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400892
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400892],  b'f')
        self.assertEqual(mem[0x400893],  b'\x0f')
        self.assertEqual(mem[0x400894],  b':')
        self.assertEqual(mem[0x400895],  b'b')
        self.assertEqual(mem[0x400896],  b'\xca')
        self.assertEqual(mem[0x400897],  b'U')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196504)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_22(self):
        ''' Instruction PCMPISTRM_22
            Groups: sse42
            0x40084a:	pcmpistrm	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040084a] = b'f'
        mem[0x0040084b] = b'\x0f'
        mem[0x0040084c] = b':'
        mem[0x0040084d] = b'b'
        mem[0x0040084e] = b'\xca'
        mem[0x0040084f] = b'='
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40084a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40084a],  b'f')
        self.assertEqual(mem[0x40084b],  b'\x0f')
        self.assertEqual(mem[0x40084c],  b':')
        self.assertEqual(mem[0x40084d],  b'b')
        self.assertEqual(mem[0x40084e],  b'\xca')
        self.assertEqual(mem[0x40084f],  b'=')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196432)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_23(self):
        ''' Instruction PCMPISTRM_23
            Groups: sse42
            0x40088c:	pcmpistrm	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040088c] = b'f'
        mem[0x0040088d] = b'\x0f'
        mem[0x0040088e] = b':'
        mem[0x0040088f] = b'b'
        mem[0x00400890] = b'\xca'
        mem[0x00400891] = b'T'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40088c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40088c],  b'f')
        self.assertEqual(mem[0x40088d],  b'\x0f')
        self.assertEqual(mem[0x40088e],  b':')
        self.assertEqual(mem[0x40088f],  b'b')
        self.assertEqual(mem[0x400890],  b'\xca')
        self.assertEqual(mem[0x400891],  b'T')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196498)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_24(self):
        ''' Instruction PCMPISTRM_24
            Groups: sse42
            0x4008fe:	pcmpistrm	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400900] = b':'
        mem[0x00400901] = b'b'
        mem[0x00400902] = b'\xca'
        mem[0x00400903] = b'y'
        mem[0x004008fe] = b'f'
        mem[0x004008ff] = b'\x0f'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008fe
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400900],  b':')
        self.assertEqual(mem[0x400901],  b'b')
        self.assertEqual(mem[0x400902],  b'\xca')
        self.assertEqual(mem[0x400903],  b'y')
        self.assertEqual(mem[0x4008fe],  b'f')
        self.assertEqual(mem[0x4008ff],  b'\x0f')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196612)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_25(self):
        ''' Instruction PCMPISTRM_25
            Groups: sse42
            0x400838:	pcmpistrm	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400838] = b'f'
        mem[0x00400839] = b'\x0f'
        mem[0x0040083a] = b':'
        mem[0x0040083b] = b'b'
        mem[0x0040083c] = b'\xca'
        mem[0x0040083d] = b'8'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400838
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400838],  b'f')
        self.assertEqual(mem[0x400839],  b'\x0f')
        self.assertEqual(mem[0x40083a],  b':')
        self.assertEqual(mem[0x40083b],  b'b')
        self.assertEqual(mem[0x40083c],  b'\xca')
        self.assertEqual(mem[0x40083d],  b'8')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196414)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_26(self):
        ''' Instruction PCMPISTRM_26
            Groups: sse42
            0x400832:	pcmpistrm	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400832] = b'f'
        mem[0x00400833] = b'\x0f'
        mem[0x00400834] = b':'
        mem[0x00400835] = b'b'
        mem[0x00400836] = b'\xca'
        mem[0x00400837] = b'5'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400832
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400832],  b'f')
        self.assertEqual(mem[0x400833],  b'\x0f')
        self.assertEqual(mem[0x400834],  b':')
        self.assertEqual(mem[0x400835],  b'b')
        self.assertEqual(mem[0x400836],  b'\xca')
        self.assertEqual(mem[0x400837],  b'5')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196408)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_27(self):
        ''' Instruction PCMPISTRM_27
            Groups: sse42
            0x400820:	pcmpistrm	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400820] = b'f'
        mem[0x00400821] = b'\x0f'
        mem[0x00400822] = b':'
        mem[0x00400823] = b'b'
        mem[0x00400824] = b'\xca'
        mem[0x00400825] = b'0'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400820
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400820],  b'f')
        self.assertEqual(mem[0x400821],  b'\x0f')
        self.assertEqual(mem[0x400822],  b':')
        self.assertEqual(mem[0x400823],  b'b')
        self.assertEqual(mem[0x400824],  b'\xca')
        self.assertEqual(mem[0x400825],  b'0')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196390)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_28(self):
        ''' Instruction PCMPISTRM_28
            Groups: sse42
            0x400850:	pcmpistrm	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400850] = b'f'
        mem[0x00400851] = b'\x0f'
        mem[0x00400852] = b':'
        mem[0x00400853] = b'b'
        mem[0x00400854] = b'\xca'
        mem[0x00400855] = b'@'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400850
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400850],  b'f')
        self.assertEqual(mem[0x400851],  b'\x0f')
        self.assertEqual(mem[0x400852],  b':')
        self.assertEqual(mem[0x400853],  b'b')
        self.assertEqual(mem[0x400854],  b'\xca')
        self.assertEqual(mem[0x400855],  b'@')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196438)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_29(self):
        ''' Instruction PCMPISTRM_29
            Groups: sse42
            0x4007d2:	pcmpistrm	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007d2] = b'f'
        mem[0x004007d3] = b'\x0f'
        mem[0x004007d4] = b':'
        mem[0x004007d5] = b'b'
        mem[0x004007d6] = b'\xca'
        mem[0x004007d7] = b'\x15'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007d2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007d2],  b'f')
        self.assertEqual(mem[0x4007d3],  b'\x0f')
        self.assertEqual(mem[0x4007d4],  b':')
        self.assertEqual(mem[0x4007d5],  b'b')
        self.assertEqual(mem[0x4007d6],  b'\xca')
        self.assertEqual(mem[0x4007d7],  b'\x15')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196312)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_3(self):
        ''' Instruction PCMPISTRM_3
            Groups: sse42
            0x400826:	pcmpistrm	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400826] = b'f'
        mem[0x00400827] = b'\x0f'
        mem[0x00400828] = b':'
        mem[0x00400829] = b'b'
        mem[0x0040082a] = b'\xca'
        mem[0x0040082b] = b'1'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400826
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400826],  b'f')
        self.assertEqual(mem[0x400827],  b'\x0f')
        self.assertEqual(mem[0x400828],  b':')
        self.assertEqual(mem[0x400829],  b'b')
        self.assertEqual(mem[0x40082a],  b'\xca')
        self.assertEqual(mem[0x40082b],  b'1')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196396)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_30(self):
        ''' Instruction PCMPISTRM_30
            Groups: sse42
            0x400898:	pcmpistrm	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400898] = b'f'
        mem[0x00400899] = b'\x0f'
        mem[0x0040089a] = b':'
        mem[0x0040089b] = b'b'
        mem[0x0040089c] = b'\xca'
        mem[0x0040089d] = b'X'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400898
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400898],  b'f')
        self.assertEqual(mem[0x400899],  b'\x0f')
        self.assertEqual(mem[0x40089a],  b':')
        self.assertEqual(mem[0x40089b],  b'b')
        self.assertEqual(mem[0x40089c],  b'\xca')
        self.assertEqual(mem[0x40089d],  b'X')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196510)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_31(self):
        ''' Instruction PCMPISTRM_31
            Groups: sse42
            0x4008aa:	pcmpistrm	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008aa] = b'f'
        mem[0x004008ab] = b'\x0f'
        mem[0x004008ac] = b':'
        mem[0x004008ad] = b'b'
        mem[0x004008ae] = b'\xca'
        mem[0x004008af] = b']'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008aa
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008aa],  b'f')
        self.assertEqual(mem[0x4008ab],  b'\x0f')
        self.assertEqual(mem[0x4008ac],  b':')
        self.assertEqual(mem[0x4008ad],  b'b')
        self.assertEqual(mem[0x4008ae],  b'\xca')
        self.assertEqual(mem[0x4008af],  b']')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196528)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_32(self):
        ''' Instruction PCMPISTRM_32
            Groups: sse42
            0x4007ea:	pcmpistrm	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007ea] = b'f'
        mem[0x004007eb] = b'\x0f'
        mem[0x004007ec] = b':'
        mem[0x004007ed] = b'b'
        mem[0x004007ee] = b'\xca'
        mem[0x004007ef] = b'\x1d'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007ea
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007ea],  b'f')
        self.assertEqual(mem[0x4007eb],  b'\x0f')
        self.assertEqual(mem[0x4007ec],  b':')
        self.assertEqual(mem[0x4007ed],  b'b')
        self.assertEqual(mem[0x4007ee],  b'\xca')
        self.assertEqual(mem[0x4007ef],  b'\x1d')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196336)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_33(self):
        ''' Instruction PCMPISTRM_33
            Groups: sse42
            0x4007f6:	pcmpistrm	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007f6] = b'f'
        mem[0x004007f7] = b'\x0f'
        mem[0x004007f8] = b':'
        mem[0x004007f9] = b'b'
        mem[0x004007fa] = b'\xca'
        mem[0x004007fb] = b'!'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007f6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007f6],  b'f')
        self.assertEqual(mem[0x4007f7],  b'\x0f')
        self.assertEqual(mem[0x4007f8],  b':')
        self.assertEqual(mem[0x4007f9],  b'b')
        self.assertEqual(mem[0x4007fa],  b'\xca')
        self.assertEqual(mem[0x4007fb],  b'!')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196348)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_34(self):
        ''' Instruction PCMPISTRM_34
            Groups: sse42
            0x4008b0:	pcmpistrm	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008b0] = b'f'
        mem[0x004008b1] = b'\x0f'
        mem[0x004008b2] = b':'
        mem[0x004008b3] = b'b'
        mem[0x004008b4] = b'\xca'
        mem[0x004008b5] = b'`'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008b0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008b0],  b'f')
        self.assertEqual(mem[0x4008b1],  b'\x0f')
        self.assertEqual(mem[0x4008b2],  b':')
        self.assertEqual(mem[0x4008b3],  b'b')
        self.assertEqual(mem[0x4008b4],  b'\xca')
        self.assertEqual(mem[0x4008b5],  b'`')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196534)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_35(self):
        ''' Instruction PCMPISTRM_35
            Groups: sse42
            0x4008a4:	pcmpistrm	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008a4] = b'f'
        mem[0x004008a5] = b'\x0f'
        mem[0x004008a6] = b':'
        mem[0x004008a7] = b'b'
        mem[0x004008a8] = b'\xca'
        mem[0x004008a9] = b'\\'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008a4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008a4],  b'f')
        self.assertEqual(mem[0x4008a5],  b'\x0f')
        self.assertEqual(mem[0x4008a6],  b':')
        self.assertEqual(mem[0x4008a7],  b'b')
        self.assertEqual(mem[0x4008a8],  b'\xca')
        self.assertEqual(mem[0x4008a9],  b'\\')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196522)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_36(self):
        ''' Instruction PCMPISTRM_36
            Groups: sse42
            0x4008e0:	pcmpistrm	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008e0] = b'f'
        mem[0x004008e1] = b'\x0f'
        mem[0x004008e2] = b':'
        mem[0x004008e3] = b'b'
        mem[0x004008e4] = b'\xca'
        mem[0x004008e5] = b'p'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008e0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008e0],  b'f')
        self.assertEqual(mem[0x4008e1],  b'\x0f')
        self.assertEqual(mem[0x4008e2],  b':')
        self.assertEqual(mem[0x4008e3],  b'b')
        self.assertEqual(mem[0x4008e4],  b'\xca')
        self.assertEqual(mem[0x4008e5],  b'p')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196582)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_37(self):
        ''' Instruction PCMPISTRM_37
            Groups: sse42
            0x400904:	pcmpistrm	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400904] = b'f'
        mem[0x00400905] = b'\x0f'
        mem[0x00400906] = b':'
        mem[0x00400907] = b'b'
        mem[0x00400908] = b'\xca'
        mem[0x00400909] = b'|'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400904
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400904],  b'f')
        self.assertEqual(mem[0x400905],  b'\x0f')
        self.assertEqual(mem[0x400906],  b':')
        self.assertEqual(mem[0x400907],  b'b')
        self.assertEqual(mem[0x400908],  b'\xca')
        self.assertEqual(mem[0x400909],  b'|')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196618)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_38(self):
        ''' Instruction PCMPISTRM_38
            Groups: sse42
            0x4008c2:	pcmpistrm	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008c2] = b'f'
        mem[0x004008c3] = b'\x0f'
        mem[0x004008c4] = b':'
        mem[0x004008c5] = b'b'
        mem[0x004008c6] = b'\xca'
        mem[0x004008c7] = b'e'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008c2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008c2],  b'f')
        self.assertEqual(mem[0x4008c3],  b'\x0f')
        self.assertEqual(mem[0x4008c4],  b':')
        self.assertEqual(mem[0x4008c5],  b'b')
        self.assertEqual(mem[0x4008c6],  b'\xca')
        self.assertEqual(mem[0x4008c7],  b'e')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196552)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_39(self):
        ''' Instruction PCMPISTRM_39
            Groups: sse42
            0x40081a:	pcmpistrm	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040081a] = b'f'
        mem[0x0040081b] = b'\x0f'
        mem[0x0040081c] = b':'
        mem[0x0040081d] = b'b'
        mem[0x0040081e] = b'\xca'
        mem[0x0040081f] = b'-'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40081a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40081a],  b'f')
        self.assertEqual(mem[0x40081b],  b'\x0f')
        self.assertEqual(mem[0x40081c],  b':')
        self.assertEqual(mem[0x40081d],  b'b')
        self.assertEqual(mem[0x40081e],  b'\xca')
        self.assertEqual(mem[0x40081f],  b'-')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196384)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_4(self):
        ''' Instruction PCMPISTRM_4
            Groups: sse42
            0x4008bc:	pcmpistrm	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008c0] = b'\xca'
        mem[0x004008c1] = b'd'
        mem[0x004008bc] = b'f'
        mem[0x004008bd] = b'\x0f'
        mem[0x004008be] = b':'
        mem[0x004008bf] = b'b'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008bc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008c0],  b'\xca')
        self.assertEqual(mem[0x4008c1],  b'd')
        self.assertEqual(mem[0x4008bc],  b'f')
        self.assertEqual(mem[0x4008bd],  b'\x0f')
        self.assertEqual(mem[0x4008be],  b':')
        self.assertEqual(mem[0x4008bf],  b'b')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196546)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_40(self):
        ''' Instruction PCMPISTRM_40
            Groups: sse42
            0x4007de:	pcmpistrm	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007e0] = b':'
        mem[0x004007e1] = b'b'
        mem[0x004007e2] = b'\xca'
        mem[0x004007e3] = b'\x19'
        mem[0x004007de] = b'f'
        mem[0x004007df] = b'\x0f'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007de
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007e0],  b':')
        self.assertEqual(mem[0x4007e1],  b'b')
        self.assertEqual(mem[0x4007e2],  b'\xca')
        self.assertEqual(mem[0x4007e3],  b'\x19')
        self.assertEqual(mem[0x4007de],  b'f')
        self.assertEqual(mem[0x4007df],  b'\x0f')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196324)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_41(self):
        ''' Instruction PCMPISTRM_41
            Groups: sse42
            0x400814:	pcmpistrm	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400814] = b'f'
        mem[0x00400815] = b'\x0f'
        mem[0x00400816] = b':'
        mem[0x00400817] = b'b'
        mem[0x00400818] = b'\xca'
        mem[0x00400819] = b','
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400814
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400814],  b'f')
        self.assertEqual(mem[0x400815],  b'\x0f')
        self.assertEqual(mem[0x400816],  b':')
        self.assertEqual(mem[0x400817],  b'b')
        self.assertEqual(mem[0x400818],  b'\xca')
        self.assertEqual(mem[0x400819],  b',')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196378)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_42(self):
        ''' Instruction PCMPISTRM_42
            Groups: sse42
            0x4007c6:	pcmpistrm	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007c6] = b'f'
        mem[0x004007c7] = b'\x0f'
        mem[0x004007c8] = b':'
        mem[0x004007c9] = b'b'
        mem[0x004007ca] = b'\xca'
        mem[0x004007cb] = b'\x11'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007c6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007c6],  b'f')
        self.assertEqual(mem[0x4007c7],  b'\x0f')
        self.assertEqual(mem[0x4007c8],  b':')
        self.assertEqual(mem[0x4007c9],  b'b')
        self.assertEqual(mem[0x4007ca],  b'\xca')
        self.assertEqual(mem[0x4007cb],  b'\x11')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196300)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_43(self):
        ''' Instruction PCMPISTRM_43
            Groups: sse42
            0x400868:	pcmpistrm	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400868] = b'f'
        mem[0x00400869] = b'\x0f'
        mem[0x0040086a] = b':'
        mem[0x0040086b] = b'b'
        mem[0x0040086c] = b'\xca'
        mem[0x0040086d] = b'H'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400868
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400868],  b'f')
        self.assertEqual(mem[0x400869],  b'\x0f')
        self.assertEqual(mem[0x40086a],  b':')
        self.assertEqual(mem[0x40086b],  b'b')
        self.assertEqual(mem[0x40086c],  b'\xca')
        self.assertEqual(mem[0x40086d],  b'H')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196462)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_44(self):
        ''' Instruction PCMPISTRM_44
            Groups: sse42
            0x4008ce:	pcmpistrm	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008ce] = b'f'
        mem[0x004008cf] = b'\x0f'
        mem[0x004008d0] = b':'
        mem[0x004008d1] = b'b'
        mem[0x004008d2] = b'\xca'
        mem[0x004008d3] = b'i'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008ce
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008ce],  b'f')
        self.assertEqual(mem[0x4008cf],  b'\x0f')
        self.assertEqual(mem[0x4008d0],  b':')
        self.assertEqual(mem[0x4008d1],  b'b')
        self.assertEqual(mem[0x4008d2],  b'\xca')
        self.assertEqual(mem[0x4008d3],  b'i')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196564)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_45(self):
        ''' Instruction PCMPISTRM_45
            Groups: sse42
            0x400874:	pcmpistrm	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400874] = b'f'
        mem[0x00400875] = b'\x0f'
        mem[0x00400876] = b':'
        mem[0x00400877] = b'b'
        mem[0x00400878] = b'\xca'
        mem[0x00400879] = b'L'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400874
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400874],  b'f')
        self.assertEqual(mem[0x400875],  b'\x0f')
        self.assertEqual(mem[0x400876],  b':')
        self.assertEqual(mem[0x400877],  b'b')
        self.assertEqual(mem[0x400878],  b'\xca')
        self.assertEqual(mem[0x400879],  b'L')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196474)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_46(self):
        ''' Instruction PCMPISTRM_46
            Groups: sse42
            0x40085c:	pcmpistrm	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400860] = b'\xca'
        mem[0x00400861] = b'D'
        mem[0x0040085c] = b'f'
        mem[0x0040085d] = b'\x0f'
        mem[0x0040085e] = b':'
        mem[0x0040085f] = b'b'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40085c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400860],  b'\xca')
        self.assertEqual(mem[0x400861],  b'D')
        self.assertEqual(mem[0x40085c],  b'f')
        self.assertEqual(mem[0x40085d],  b'\x0f')
        self.assertEqual(mem[0x40085e],  b':')
        self.assertEqual(mem[0x40085f],  b'b')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196450)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_47(self):
        ''' Instruction PCMPISTRM_47
            Groups: sse42
            0x4007a8:	pcmpistrm	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007a8] = b'f'
        mem[0x004007a9] = b'\x0f'
        mem[0x004007aa] = b':'
        mem[0x004007ab] = b'b'
        mem[0x004007ac] = b'\xca'
        mem[0x004007ad] = b'\x08'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007a8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007a8],  b'f')
        self.assertEqual(mem[0x4007a9],  b'\x0f')
        self.assertEqual(mem[0x4007aa],  b':')
        self.assertEqual(mem[0x4007ab],  b'b')
        self.assertEqual(mem[0x4007ac],  b'\xca')
        self.assertEqual(mem[0x4007ad],  b'\x08')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196270)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_48(self):
        ''' Instruction PCMPISTRM_48
            Groups: sse42
            0x40082c:	pcmpistrm	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040082c] = b'f'
        mem[0x0040082d] = b'\x0f'
        mem[0x0040082e] = b':'
        mem[0x0040082f] = b'b'
        mem[0x00400830] = b'\xca'
        mem[0x00400831] = b'4'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40082c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40082c],  b'f')
        self.assertEqual(mem[0x40082d],  b'\x0f')
        self.assertEqual(mem[0x40082e],  b':')
        self.assertEqual(mem[0x40082f],  b'b')
        self.assertEqual(mem[0x400830],  b'\xca')
        self.assertEqual(mem[0x400831],  b'4')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196402)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_49(self):
        ''' Instruction PCMPISTRM_49
            Groups: sse42
            0x4008da:	pcmpistrm	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008da] = b'f'
        mem[0x004008db] = b'\x0f'
        mem[0x004008dc] = b':'
        mem[0x004008dd] = b'b'
        mem[0x004008de] = b'\xca'
        mem[0x004008df] = b'm'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008da
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008da],  b'f')
        self.assertEqual(mem[0x4008db],  b'\x0f')
        self.assertEqual(mem[0x4008dc],  b':')
        self.assertEqual(mem[0x4008dd],  b'b')
        self.assertEqual(mem[0x4008de],  b'\xca')
        self.assertEqual(mem[0x4008df],  b'm')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196576)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_5(self):
        ''' Instruction PCMPISTRM_5
            Groups: sse42
            0x4007a2:	pcmpistrm	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007a2] = b'f'
        mem[0x004007a3] = b'\x0f'
        mem[0x004007a4] = b':'
        mem[0x004007a5] = b'b'
        mem[0x004007a6] = b'\xca'
        mem[0x004007a7] = b'\x05'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007a2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007a2],  b'f')
        self.assertEqual(mem[0x4007a3],  b'\x0f')
        self.assertEqual(mem[0x4007a4],  b':')
        self.assertEqual(mem[0x4007a5],  b'b')
        self.assertEqual(mem[0x4007a6],  b'\xca')
        self.assertEqual(mem[0x4007a7],  b'\x05')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196264)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_50(self):
        ''' Instruction PCMPISTRM_50
            Groups: sse42
            0x4007e4:	pcmpistrm	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007e4] = b'f'
        mem[0x004007e5] = b'\x0f'
        mem[0x004007e6] = b':'
        mem[0x004007e7] = b'b'
        mem[0x004007e8] = b'\xca'
        mem[0x004007e9] = b'\x1c'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007e4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007e4],  b'f')
        self.assertEqual(mem[0x4007e5],  b'\x0f')
        self.assertEqual(mem[0x4007e6],  b':')
        self.assertEqual(mem[0x4007e7],  b'b')
        self.assertEqual(mem[0x4007e8],  b'\xca')
        self.assertEqual(mem[0x4007e9],  b'\x1c')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196330)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_51(self):
        ''' Instruction PCMPISTRM_51
            Groups: sse42
            0x400880:	pcmpistrm	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400880] = b'f'
        mem[0x00400881] = b'\x0f'
        mem[0x00400882] = b':'
        mem[0x00400883] = b'b'
        mem[0x00400884] = b'\xca'
        mem[0x00400885] = b'P'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400880
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400880],  b'f')
        self.assertEqual(mem[0x400881],  b'\x0f')
        self.assertEqual(mem[0x400882],  b':')
        self.assertEqual(mem[0x400883],  b'b')
        self.assertEqual(mem[0x400884],  b'\xca')
        self.assertEqual(mem[0x400885],  b'P')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196486)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_52(self):
        ''' Instruction PCMPISTRM_52
            Groups: sse42
            0x400886:	pcmpistrm	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400886] = b'f'
        mem[0x00400887] = b'\x0f'
        mem[0x00400888] = b':'
        mem[0x00400889] = b'b'
        mem[0x0040088a] = b'\xca'
        mem[0x0040088b] = b'Q'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400886
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400886],  b'f')
        self.assertEqual(mem[0x400887],  b'\x0f')
        self.assertEqual(mem[0x400888],  b':')
        self.assertEqual(mem[0x400889],  b'b')
        self.assertEqual(mem[0x40088a],  b'\xca')
        self.assertEqual(mem[0x40088b],  b'Q')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196492)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_53(self):
        ''' Instruction PCMPISTRM_53
            Groups: sse42
            0x4008b6:	pcmpistrm	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008b6] = b'f'
        mem[0x004008b7] = b'\x0f'
        mem[0x004008b8] = b':'
        mem[0x004008b9] = b'b'
        mem[0x004008ba] = b'\xca'
        mem[0x004008bb] = b'a'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008b6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008b6],  b'f')
        self.assertEqual(mem[0x4008b7],  b'\x0f')
        self.assertEqual(mem[0x4008b8],  b':')
        self.assertEqual(mem[0x4008b9],  b'b')
        self.assertEqual(mem[0x4008ba],  b'\xca')
        self.assertEqual(mem[0x4008bb],  b'a')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196540)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_54(self):
        ''' Instruction PCMPISTRM_54
            Groups: sse42
            0x4007ba:	pcmpistrm	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007ba] = b'f'
        mem[0x004007bb] = b'\x0f'
        mem[0x004007bc] = b':'
        mem[0x004007bd] = b'b'
        mem[0x004007be] = b'\xca'
        mem[0x004007bf] = b'\r'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007ba
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007ba],  b'f')
        self.assertEqual(mem[0x4007bb],  b'\x0f')
        self.assertEqual(mem[0x4007bc],  b':')
        self.assertEqual(mem[0x4007bd],  b'b')
        self.assertEqual(mem[0x4007be],  b'\xca')
        self.assertEqual(mem[0x4007bf],  b'\r')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196288)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_55(self):
        ''' Instruction PCMPISTRM_55
            Groups: sse42
            0x40090a:	pcmpistrm	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040090a] = b'f'
        mem[0x0040090b] = b'\x0f'
        mem[0x0040090c] = b':'
        mem[0x0040090d] = b'b'
        mem[0x0040090e] = b'\xca'
        mem[0x0040090f] = b'}'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40090a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40090a],  b'f')
        self.assertEqual(mem[0x40090b],  b'\x0f')
        self.assertEqual(mem[0x40090c],  b':')
        self.assertEqual(mem[0x40090d],  b'b')
        self.assertEqual(mem[0x40090e],  b'\xca')
        self.assertEqual(mem[0x40090f],  b'}')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196624)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_56(self):
        ''' Instruction PCMPISTRM_56
            Groups: sse42
            0x40079c:	pcmpistrm	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007a0] = b'\xca'
        mem[0x004007a1] = b'\x04'
        mem[0x0040079c] = b'f'
        mem[0x0040079d] = b'\x0f'
        mem[0x0040079e] = b':'
        mem[0x0040079f] = b'b'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40079c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007a0],  b'\xca')
        self.assertEqual(mem[0x4007a1],  b'\x04')
        self.assertEqual(mem[0x40079c],  b'f')
        self.assertEqual(mem[0x40079d],  b'\x0f')
        self.assertEqual(mem[0x40079e],  b':')
        self.assertEqual(mem[0x40079f],  b'b')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196258)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_57(self):
        ''' Instruction PCMPISTRM_57
            Groups: sse42
            0x4007ae:	pcmpistrm	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007ae] = b'f'
        mem[0x004007af] = b'\x0f'
        mem[0x004007b0] = b':'
        mem[0x004007b1] = b'b'
        mem[0x004007b2] = b'\xca'
        mem[0x004007b3] = b'\t'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007ae
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007ae],  b'f')
        self.assertEqual(mem[0x4007af],  b'\x0f')
        self.assertEqual(mem[0x4007b0],  b':')
        self.assertEqual(mem[0x4007b1],  b'b')
        self.assertEqual(mem[0x4007b2],  b'\xca')
        self.assertEqual(mem[0x4007b3],  b'\t')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196276)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_58(self):
        ''' Instruction PCMPISTRM_58
            Groups: sse42
            0x400844:	pcmpistrm	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400844] = b'f'
        mem[0x00400845] = b'\x0f'
        mem[0x00400846] = b':'
        mem[0x00400847] = b'b'
        mem[0x00400848] = b'\xca'
        mem[0x00400849] = b'<'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400844
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400844],  b'f')
        self.assertEqual(mem[0x400845],  b'\x0f')
        self.assertEqual(mem[0x400846],  b':')
        self.assertEqual(mem[0x400847],  b'b')
        self.assertEqual(mem[0x400848],  b'\xca')
        self.assertEqual(mem[0x400849],  b'<')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196426)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_59(self):
        ''' Instruction PCMPISTRM_59
            Groups: sse42
            0x4008e6:	pcmpistrm	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008e6] = b'f'
        mem[0x004008e7] = b'\x0f'
        mem[0x004008e8] = b':'
        mem[0x004008e9] = b'b'
        mem[0x004008ea] = b'\xca'
        mem[0x004008eb] = b'q'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008e6],  b'f')
        self.assertEqual(mem[0x4008e7],  b'\x0f')
        self.assertEqual(mem[0x4008e8],  b':')
        self.assertEqual(mem[0x4008e9],  b'b')
        self.assertEqual(mem[0x4008ea],  b'\xca')
        self.assertEqual(mem[0x4008eb],  b'q')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196588)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_6(self):
        ''' Instruction PCMPISTRM_6
            Groups: sse42
            0x400808:	pcmpistrm	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400808] = b'f'
        mem[0x00400809] = b'\x0f'
        mem[0x0040080a] = b':'
        mem[0x0040080b] = b'b'
        mem[0x0040080c] = b'\xca'
        mem[0x0040080d] = b'('
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400808
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400808],  b'f')
        self.assertEqual(mem[0x400809],  b'\x0f')
        self.assertEqual(mem[0x40080a],  b':')
        self.assertEqual(mem[0x40080b],  b'b')
        self.assertEqual(mem[0x40080c],  b'\xca')
        self.assertEqual(mem[0x40080d],  b'(')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196366)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_60(self):
        ''' Instruction PCMPISTRM_60
            Groups: sse42
            0x4008d4:	pcmpistrm	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004008d4] = b'f'
        mem[0x004008d5] = b'\x0f'
        mem[0x004008d6] = b':'
        mem[0x004008d7] = b'b'
        mem[0x004008d8] = b'\xca'
        mem[0x004008d9] = b'l'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008d4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008d4],  b'f')
        self.assertEqual(mem[0x4008d5],  b'\x0f')
        self.assertEqual(mem[0x4008d6],  b':')
        self.assertEqual(mem[0x4008d7],  b'b')
        self.assertEqual(mem[0x4008d8],  b'\xca')
        self.assertEqual(mem[0x4008d9],  b'l')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196570)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_61(self):
        ''' Instruction PCMPISTRM_61
            Groups: sse42
            0x400796:	pcmpistrm	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400796] = b'f'
        mem[0x00400797] = b'\x0f'
        mem[0x00400798] = b':'
        mem[0x00400799] = b'b'
        mem[0x0040079a] = b'\xca'
        mem[0x0040079b] = b'\x01'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400796
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400796],  b'f')
        self.assertEqual(mem[0x400797],  b'\x0f')
        self.assertEqual(mem[0x400798],  b':')
        self.assertEqual(mem[0x400799],  b'b')
        self.assertEqual(mem[0x40079a],  b'\xca')
        self.assertEqual(mem[0x40079b],  b'\x01')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196252)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_62(self):
        ''' Instruction PCMPISTRM_62
            Groups: sse42
            0x40083e:	pcmpistrm	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400840] = b':'
        mem[0x00400841] = b'b'
        mem[0x00400842] = b'\xca'
        mem[0x00400843] = b'9'
        mem[0x0040083e] = b'f'
        mem[0x0040083f] = b'\x0f'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40083e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400840],  b':')
        self.assertEqual(mem[0x400841],  b'b')
        self.assertEqual(mem[0x400842],  b'\xca')
        self.assertEqual(mem[0x400843],  b'9')
        self.assertEqual(mem[0x40083e],  b'f')
        self.assertEqual(mem[0x40083f],  b'\x0f')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196420)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_63(self):
        ''' Instruction PCMPISTRM_63
            Groups: sse42
            0x400790:	pcmpistrm	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400790] = b'f'
        mem[0x00400791] = b'\x0f'
        mem[0x00400792] = b':'
        mem[0x00400793] = b'b'
        mem[0x00400794] = b'\xca'
        mem[0x00400795] = b'\x00'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400790
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400790],  b'f')
        self.assertEqual(mem[0x400791],  b'\x0f')
        self.assertEqual(mem[0x400792],  b':')
        self.assertEqual(mem[0x400793],  b'b')
        self.assertEqual(mem[0x400794],  b'\xca')
        self.assertEqual(mem[0x400795],  b'\x00')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196246)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_64(self):
        ''' Instruction PCMPISTRM_64
            Groups: sse42
            0x4007c0:	pcmpistrm	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007c0] = b'f'
        mem[0x004007c1] = b'\x0f'
        mem[0x004007c2] = b':'
        mem[0x004007c3] = b'b'
        mem[0x004007c4] = b'\xca'
        mem[0x004007c5] = b'\x10'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007c0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007c0],  b'f')
        self.assertEqual(mem[0x4007c1],  b'\x0f')
        self.assertEqual(mem[0x4007c2],  b':')
        self.assertEqual(mem[0x4007c3],  b'b')
        self.assertEqual(mem[0x4007c4],  b'\xca')
        self.assertEqual(mem[0x4007c5],  b'\x10')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196294)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_7(self):
        ''' Instruction PCMPISTRM_7
            Groups: sse42
            0x4007f0:	pcmpistrm	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x004007f0] = b'f'
        mem[0x004007f1] = b'\x0f'
        mem[0x004007f2] = b':'
        mem[0x004007f3] = b'b'
        mem[0x004007f4] = b'\xca'
        mem[0x004007f5] = b' '
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007f0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007f0],  b'f')
        self.assertEqual(mem[0x4007f1],  b'\x0f')
        self.assertEqual(mem[0x4007f2],  b':')
        self.assertEqual(mem[0x4007f3],  b'b')
        self.assertEqual(mem[0x4007f4],  b'\xca')
        self.assertEqual(mem[0x4007f5],  b' ')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196342)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_8(self):
        ''' Instruction PCMPISTRM_8
            Groups: sse42
            0x40086e:	pcmpistrm	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x0040086e] = b'f'
        mem[0x0040086f] = b'\x0f'
        mem[0x00400870] = b':'
        mem[0x00400871] = b'b'
        mem[0x00400872] = b'\xca'
        mem[0x00400873] = b'I'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40086e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40086e],  b'f')
        self.assertEqual(mem[0x40086f],  b'\x0f')
        self.assertEqual(mem[0x400870],  b':')
        self.assertEqual(mem[0x400871],  b'b')
        self.assertEqual(mem[0x400872],  b'\xca')
        self.assertEqual(mem[0x400873],  b'I')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196468)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_9(self):
        ''' Instruction PCMPISTRM_9
            Groups: sse42
            0x400862:	pcmpistrm	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x00400862] = b'f'
        mem[0x00400863] = b'\x0f'
        mem[0x00400864] = b':'
        mem[0x00400865] = b'b'
        mem[0x00400866] = b'\xca'
        mem[0x00400867] = b'E'
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400862
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400862],  b'f')
        self.assertEqual(mem[0x400863],  b'\x0f')
        self.assertEqual(mem[0x400864],  b':')
        self.assertEqual(mem[0x400865],  b'b')
        self.assertEqual(mem[0x400866],  b'\xca')
        self.assertEqual(mem[0x400867],  b'E')
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196456)
        self.assertEqual(cpu.SF, False)

    def test_PCMPESTRI_1_symbolic(self):
        ''' Instruction PCMPESTRI_1
            Groups: sse42
            0x400bec:	pcmpestri	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bec] = b'f'
        mem[0x400bed] = b'\x0f'
        mem[0x400bee] = b':'
        mem[0x400bef] = b'a'
        mem[0x400bf0] = b'\xca'
        mem[0x400bf1] = b'd'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bec
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bec)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bec)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bec, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bee, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bef, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf1, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_10_symbolic(self):
        ''' Instruction PCMPESTRI_10
            Groups: sse42
            0x400b20:	pcmpestri	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b20] = b'f'
        mem[0x400b21] = b'\x0f'
        mem[0x400b22] = b':'
        mem[0x400b23] = b'a'
        mem[0x400b24] = b'\xca'
        mem[0x400b25] = b' '
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b20
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b20)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b20)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b20, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b21, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b22, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b23, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b24, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b25, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b26)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_11_symbolic(self):
        ''' Instruction PCMPESTRI_11
            Groups: sse42
            0x400b38:	pcmpestri	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b38] = b'f'
        mem[0x400b39] = b'\x0f'
        mem[0x400b3a] = b':'
        mem[0x400b3b] = b'a'
        mem[0x400b3c] = b'\xca'
        mem[0x400b3d] = b'('
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b38
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b38)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b38)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b38, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b39, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3d, 8)== ord('('))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b3e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_12_symbolic(self):
        ''' Instruction PCMPESTRI_12
            Groups: sse42
            0x400bfe:	pcmpestri	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c00] = b':'
        mem[0x400c01] = b'a'
        mem[0x400c02] = b'\xca'
        mem[0x400c03] = b'i'
        mem[0x400bfe] = b'f'
        mem[0x400bff] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bfe
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bfe)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bfe)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c00, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c01, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c02, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c03, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfe, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bff, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400c04)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_13_symbolic(self):
        ''' Instruction PCMPESTRI_13
            Groups: sse42
            0x400b86:	pcmpestri	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b86] = b'f'
        mem[0x400b87] = b'\x0f'
        mem[0x400b88] = b':'
        mem[0x400b89] = b'a'
        mem[0x400b8a] = b'\xca'
        mem[0x400b8b] = b'A'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b86
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b86)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b86)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b86, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b87, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b88, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b89, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8b, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b8c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_14_symbolic(self):
        ''' Instruction PCMPESTRI_14
            Groups: sse42
            0x400ae4:	pcmpestri	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ae4] = b'f'
        mem[0x400ae5] = b'\x0f'
        mem[0x400ae6] = b':'
        mem[0x400ae7] = b'a'
        mem[0x400ae8] = b'\xca'
        mem[0x400ae9] = b'\x0c'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ae4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ae4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ae4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ae4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae7, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae9, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400aea)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_15_symbolic(self):
        ''' Instruction PCMPESTRI_15
            Groups: sse42
            0x400c04:	pcmpestri	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c04] = b'f'
        mem[0x400c05] = b'\x0f'
        mem[0x400c06] = b':'
        mem[0x400c07] = b'a'
        mem[0x400c08] = b'\xca'
        mem[0x400c09] = b'l'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400c04
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c04)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c04)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c04, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c05, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c06, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c07, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c08, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c09, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400c0a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_16_symbolic(self):
        ''' Instruction PCMPESTRI_16
            Groups: sse42
            0x400b6e:	pcmpestri	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b6e] = b'f'
        mem[0x400b6f] = b'\x0f'
        mem[0x400b70] = b':'
        mem[0x400b71] = b'a'
        mem[0x400b72] = b'\xca'
        mem[0x400b73] = b'9'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b6e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b6e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b6e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b6e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b70, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b71, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b72, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b73, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b74)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_17_symbolic(self):
        ''' Instruction PCMPESTRI_17
            Groups: sse42
            0x400b2c:	pcmpestri	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b2c] = b'f'
        mem[0x400b2d] = b'\x0f'
        mem[0x400b2e] = b':'
        mem[0x400b2f] = b'a'
        mem[0x400b30] = b'\xca'
        mem[0x400b31] = b'$'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b2c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b2c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b2c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b2c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b30, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b31, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b32)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_18_symbolic(self):
        ''' Instruction PCMPESTRI_18
            Groups: sse42
            0x400af0:	pcmpestri	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400af0] = b'f'
        mem[0x400af1] = b'\x0f'
        mem[0x400af2] = b':'
        mem[0x400af3] = b'a'
        mem[0x400af4] = b'\xca'
        mem[0x400af5] = b'\x10'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400af0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400af0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400af0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400af3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400af4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400af5, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400af6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_19_symbolic(self):
        ''' Instruction PCMPESTRI_19
            Groups: sse42
            0x400be0:	pcmpestri	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400be0] = b'f'
        mem[0x400be1] = b'\x0f'
        mem[0x400be2] = b':'
        mem[0x400be3] = b'a'
        mem[0x400be4] = b'\xca'
        mem[0x400be5] = b'`'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400be0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400be0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400be0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400be0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400be3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400be4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400be5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400be6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_2_symbolic(self):
        ''' Instruction PCMPESTRI_2
            Groups: sse42
            0x400b4a:	pcmpestri	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b4a] = b'f'
        mem[0x400b4b] = b'\x0f'
        mem[0x400b4c] = b':'
        mem[0x400b4d] = b'a'
        mem[0x400b4e] = b'\xca'
        mem[0x400b4f] = b'-'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b4a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b4a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b4a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b4a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4f, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b50)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_20_symbolic(self):
        ''' Instruction PCMPESTRI_20
            Groups: sse42
            0x400c0a:	pcmpestri	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c0a] = b'f'
        mem[0x400c0b] = b'\x0f'
        mem[0x400c0c] = b':'
        mem[0x400c0d] = b'a'
        mem[0x400c0e] = b'\xca'
        mem[0x400c0f] = b'm'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400c0a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c0a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c0a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c0a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0f, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400c10)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_21_symbolic(self):
        ''' Instruction PCMPESTRI_21
            Groups: sse42
            0x400b14:	pcmpestri	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b14] = b'f'
        mem[0x400b15] = b'\x0f'
        mem[0x400b16] = b':'
        mem[0x400b17] = b'a'
        mem[0x400b18] = b'\xca'
        mem[0x400b19] = b'\x1c'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b14
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b14)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b14)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b14, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b15, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b16, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b17, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b18, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b19, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b1a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_22_symbolic(self):
        ''' Instruction PCMPESTRI_22
            Groups: sse42
            0x400bb6:	pcmpestri	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bb6] = b'f'
        mem[0x400bb7] = b'\x0f'
        mem[0x400bb8] = b':'
        mem[0x400bb9] = b'a'
        mem[0x400bba] = b'\xca'
        mem[0x400bbb] = b'Q'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bb6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bb6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bb6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bb6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bba, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbb, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bbc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_23_symbolic(self):
        ''' Instruction PCMPESTRI_23
            Groups: sse42
            0x400b08:	pcmpestri	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b08] = b'f'
        mem[0x400b09] = b'\x0f'
        mem[0x400b0a] = b':'
        mem[0x400b0b] = b'a'
        mem[0x400b0c] = b'\xca'
        mem[0x400b0d] = b'\x18'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b08
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b08)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b08)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b08, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b09, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0d, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b0e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_24_symbolic(self):
        ''' Instruction PCMPESTRI_24
            Groups: sse42
            0x400c1c:	pcmpestri	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c20] = b'\xca'
        mem[0x400c21] = b't'
        mem[0x400c1c] = b'f'
        mem[0x400c1d] = b'\x0f'
        mem[0x400c1e] = b':'
        mem[0x400c1f] = b'a'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c1c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c1c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c1c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c20, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c21, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c22)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_25_symbolic(self):
        ''' Instruction PCMPESTRI_25
            Groups: sse42
            0x400bda:	pcmpestri	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bda] = b'f'
        mem[0x400bdb] = b'\x0f'
        mem[0x400bdc] = b':'
        mem[0x400bdd] = b'a'
        mem[0x400bde] = b'\xca'
        mem[0x400bdf] = b']'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bda
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bda)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bda)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bda, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdd, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bde, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdf, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400be0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_26_symbolic(self):
        ''' Instruction PCMPESTRI_26
            Groups: sse42
            0x400c10:	pcmpestri	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c10] = b'f'
        mem[0x400c11] = b'\x0f'
        mem[0x400c12] = b':'
        mem[0x400c13] = b'a'
        mem[0x400c14] = b'\xca'
        mem[0x400c15] = b'p'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400c10
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c10)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c10)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c10, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c11, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c12, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c13, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c14, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c15, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c16)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_27_symbolic(self):
        ''' Instruction PCMPESTRI_27
            Groups: sse42
            0x400c34:	pcmpestri	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c34] = b'f'
        mem[0x400c35] = b'\x0f'
        mem[0x400c36] = b':'
        mem[0x400c37] = b'a'
        mem[0x400c38] = b'\xca'
        mem[0x400c39] = b'|'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c34
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c34)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c34)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c34, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c35, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c36, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c37, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c38, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c39, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c3a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_28_symbolic(self):
        ''' Instruction PCMPESTRI_28
            Groups: sse42
            0x400c2e:	pcmpestri	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c2e] = b'f'
        mem[0x400c2f] = b'\x0f'
        mem[0x400c30] = b':'
        mem[0x400c31] = b'a'
        mem[0x400c32] = b'\xca'
        mem[0x400c33] = b'y'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c2e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c2e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c2e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c2e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c30, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c31, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c32, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c33, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c34)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_29_symbolic(self):
        ''' Instruction PCMPESTRI_29
            Groups: sse42
            0x400b80:	pcmpestri	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b80] = b'f'
        mem[0x400b81] = b'\x0f'
        mem[0x400b82] = b':'
        mem[0x400b83] = b'a'
        mem[0x400b84] = b'\xca'
        mem[0x400b85] = b'@'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b80
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b80)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b80)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b80, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b81, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b82, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b83, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b84, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b85, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b86)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_3_symbolic(self):
        ''' Instruction PCMPESTRI_3
            Groups: sse42
            0x400ac6:	pcmpestri	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ac6] = b'f'
        mem[0x400ac7] = b'\x0f'
        mem[0x400ac8] = b':'
        mem[0x400ac9] = b'a'
        mem[0x400aca] = b'\xca'
        mem[0x400acb] = b'\x01'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ac6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ac6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ac6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ac6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400aca, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400acb, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400acc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_30_symbolic(self):
        ''' Instruction PCMPESTRI_30
            Groups: sse42
            0x400ba4:	pcmpestri	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ba4] = b'f'
        mem[0x400ba5] = b'\x0f'
        mem[0x400ba6] = b':'
        mem[0x400ba7] = b'a'
        mem[0x400ba8] = b'\xca'
        mem[0x400ba9] = b'L'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ba4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ba4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ba4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ba4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba7, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba9, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400baa)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_31_symbolic(self):
        ''' Instruction PCMPESTRI_31
            Groups: sse42
            0x400ad8:	pcmpestri	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ad8] = b'f'
        mem[0x400ad9] = b'\x0f'
        mem[0x400ada] = b':'
        mem[0x400adb] = b'a'
        mem[0x400adc] = b'\xca'
        mem[0x400add] = b'\x08'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ad8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ad8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ad8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ad8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ada, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400adb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400adc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400add, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ade)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_32_symbolic(self):
        ''' Instruction PCMPESTRI_32
            Groups: sse42
            0x400b50:	pcmpestri	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b50] = b'f'
        mem[0x400b51] = b'\x0f'
        mem[0x400b52] = b':'
        mem[0x400b53] = b'a'
        mem[0x400b54] = b'\xca'
        mem[0x400b55] = b'0'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b50
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b50)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b50)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b50, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b51, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b52, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b53, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b54, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b55, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b56)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_33_symbolic(self):
        ''' Instruction PCMPESTRI_33
            Groups: sse42
            0x400b44:	pcmpestri	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b44] = b'f'
        mem[0x400b45] = b'\x0f'
        mem[0x400b46] = b':'
        mem[0x400b47] = b'a'
        mem[0x400b48] = b'\xca'
        mem[0x400b49] = b','
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b44
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b44)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b44)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b44, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b45, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b46, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b47, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b48, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b49, 8)== ord(','))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b4a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_34_symbolic(self):
        ''' Instruction PCMPESTRI_34
            Groups: sse42
            0x400bbc:	pcmpestri	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bc0] = b'\xca'
        mem[0x400bc1] = b'T'
        mem[0x400bbc] = b'f'
        mem[0x400bbd] = b'\x0f'
        mem[0x400bbe] = b':'
        mem[0x400bbf] = b'a'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bbc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bbc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bbc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bc0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc1, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbf, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bc2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_35_symbolic(self):
        ''' Instruction PCMPESTRI_35
            Groups: sse42
            0x400ad2:	pcmpestri	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ad2] = b'f'
        mem[0x400ad3] = b'\x0f'
        mem[0x400ad4] = b':'
        mem[0x400ad5] = b'a'
        mem[0x400ad6] = b'\xca'
        mem[0x400ad7] = b'\x05'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ad2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ad2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ad2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ad2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad5, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad7, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ad8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_36_symbolic(self):
        ''' Instruction PCMPESTRI_36
            Groups: sse42
            0x400b26:	pcmpestri	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b26] = b'f'
        mem[0x400b27] = b'\x0f'
        mem[0x400b28] = b':'
        mem[0x400b29] = b'a'
        mem[0x400b2a] = b'\xca'
        mem[0x400b2b] = b'!'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b26
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b26)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b26)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b26, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b27, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b28, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b29, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2b, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b2c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_37_symbolic(self):
        ''' Instruction PCMPESTRI_37
            Groups: sse42
            0x400bc8:	pcmpestri	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bc8] = b'f'
        mem[0x400bc9] = b'\x0f'
        mem[0x400bca] = b':'
        mem[0x400bcb] = b'a'
        mem[0x400bcc] = b'\xca'
        mem[0x400bcd] = b'X'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bc8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bc8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bc8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bc8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bca, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcd, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bce)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_38_symbolic(self):
        ''' Instruction PCMPESTRI_38
            Groups: sse42
            0x400b98:	pcmpestri	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b98] = b'f'
        mem[0x400b99] = b'\x0f'
        mem[0x400b9a] = b':'
        mem[0x400b9b] = b'a'
        mem[0x400b9c] = b'\xca'
        mem[0x400b9d] = b'H'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b98
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b98)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b98)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b98, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b99, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b9e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_39_symbolic(self):
        ''' Instruction PCMPESTRI_39
            Groups: sse42
            0x400b02:	pcmpestri	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b02] = b'f'
        mem[0x400b03] = b'\x0f'
        mem[0x400b04] = b':'
        mem[0x400b05] = b'a'
        mem[0x400b06] = b'\xca'
        mem[0x400b07] = b'\x15'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b02
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b02)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b02)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b02, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b03, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b04, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b05, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b06, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b07, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b08)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_4_symbolic(self):
        ''' Instruction PCMPESTRI_4
            Groups: sse42
            0x400c22:	pcmpestri	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c22] = b'f'
        mem[0x400c23] = b'\x0f'
        mem[0x400c24] = b':'
        mem[0x400c25] = b'a'
        mem[0x400c26] = b'\xca'
        mem[0x400c27] = b'u'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c22
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c22)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c22)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c22, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c23, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c24, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c25, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c26, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c27, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c28)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_40_symbolic(self):
        ''' Instruction PCMPESTRI_40
            Groups: sse42
            0x400c3a:	pcmpestri	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c3a] = b'f'
        mem[0x400c3b] = b'\x0f'
        mem[0x400c3c] = b':'
        mem[0x400c3d] = b'a'
        mem[0x400c3e] = b'\xca'
        mem[0x400c3f] = b'}'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c3a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c3a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c3a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c3a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3f, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c40)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_41_symbolic(self):
        ''' Instruction PCMPESTRI_41
            Groups: sse42
            0x400af6:	pcmpestri	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400af6] = b'f'
        mem[0x400af7] = b'\x0f'
        mem[0x400af8] = b':'
        mem[0x400af9] = b'a'
        mem[0x400afa] = b'\xca'
        mem[0x400afb] = b'\x11'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400af6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400af6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400af6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400af9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400afa, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400afb, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400afc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_42_symbolic(self):
        ''' Instruction PCMPESTRI_42
            Groups: sse42
            0x400c28:	pcmpestri	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c28] = b'f'
        mem[0x400c29] = b'\x0f'
        mem[0x400c2a] = b':'
        mem[0x400c2b] = b'a'
        mem[0x400c2c] = b'\xca'
        mem[0x400c2d] = b'x'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c28
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c28)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c28)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c28, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c29, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2d, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c2e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_43_symbolic(self):
        ''' Instruction PCMPESTRI_43
            Groups: sse42
            0x400b62:	pcmpestri	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b62] = b'f'
        mem[0x400b63] = b'\x0f'
        mem[0x400b64] = b':'
        mem[0x400b65] = b'a'
        mem[0x400b66] = b'\xca'
        mem[0x400b67] = b'5'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b62
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b62)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b62)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b62, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b63, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b64, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b65, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b66, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b67, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b68)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_44_symbolic(self):
        ''' Instruction PCMPESTRI_44
            Groups: sse42
            0x400baa:	pcmpestri	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400baa] = b'f'
        mem[0x400bab] = b'\x0f'
        mem[0x400bac] = b':'
        mem[0x400bad] = b'a'
        mem[0x400bae] = b'\xca'
        mem[0x400baf] = b'M'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400baa
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400baa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400baa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400baa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bab, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bac, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bad, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bae, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400baf, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bb0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_45_symbolic(self):
        ''' Instruction PCMPESTRI_45
            Groups: sse42
            0x400b68:	pcmpestri	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b68] = b'f'
        mem[0x400b69] = b'\x0f'
        mem[0x400b6a] = b':'
        mem[0x400b6b] = b'a'
        mem[0x400b6c] = b'\xca'
        mem[0x400b6d] = b'8'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b68
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b68)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b68)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b68, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b69, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6d, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b6e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_46_symbolic(self):
        ''' Instruction PCMPESTRI_46
            Groups: sse42
            0x400c16:	pcmpestri	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400c16] = b'f'
        mem[0x400c17] = b'\x0f'
        mem[0x400c18] = b':'
        mem[0x400c19] = b'a'
        mem[0x400c1a] = b'\xca'
        mem[0x400c1b] = b'q'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c16
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c16)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c16)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c16, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c17, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c18, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c19, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1b, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c1c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_47_symbolic(self):
        ''' Instruction PCMPESTRI_47
            Groups: sse42
            0x400acc:	pcmpestri	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400acc] = b'f'
        mem[0x400acd] = b'\x0f'
        mem[0x400ace] = b':'
        mem[0x400acf] = b'a'
        mem[0x400ad0] = b'\xca'
        mem[0x400ad1] = b'\x04'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400acc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400acc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400acc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400acc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400acd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ace, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400acf, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad1, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ad2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_48_symbolic(self):
        ''' Instruction PCMPESTRI_48
            Groups: sse42
            0x400b92:	pcmpestri	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b92] = b'f'
        mem[0x400b93] = b'\x0f'
        mem[0x400b94] = b':'
        mem[0x400b95] = b'a'
        mem[0x400b96] = b'\xca'
        mem[0x400b97] = b'E'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b92
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b92)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b92)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b92, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b93, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b94, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b95, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b96, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b97, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b98)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_49_symbolic(self):
        ''' Instruction PCMPESTRI_49
            Groups: sse42
            0x400afc:	pcmpestri	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b00] = b'\xca'
        mem[0x400b01] = b'\x14'
        mem[0x400afc] = b'f'
        mem[0x400afd] = b'\x0f'
        mem[0x400afe] = b':'
        mem[0x400aff] = b'a'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400afc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400afc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400afc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b00, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b01, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.read_int(0x400afc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400afd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400afe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400aff, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b02)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_5_symbolic(self):
        ''' Instruction PCMPESTRI_5
            Groups: sse42
            0x400be6:	pcmpestri	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400be6] = b'f'
        mem[0x400be7] = b'\x0f'
        mem[0x400be8] = b':'
        mem[0x400be9] = b'a'
        mem[0x400bea] = b'\xca'
        mem[0x400beb] = b'a'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400be6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400be6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400be6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400be6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400be9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bea, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400beb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bec)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_50_symbolic(self):
        ''' Instruction PCMPESTRI_50
            Groups: sse42
            0x400b9e:	pcmpestri	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ba0] = b':'
        mem[0x400ba1] = b'a'
        mem[0x400ba2] = b'\xca'
        mem[0x400ba3] = b'I'
        mem[0x400b9e] = b'f'
        mem[0x400b9f] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b9e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b9e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b9e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ba0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba1, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba3, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ba4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_51_symbolic(self):
        ''' Instruction PCMPESTRI_51
            Groups: sse42
            0x400ac0:	pcmpestri	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ac0] = b'f'
        mem[0x400ac1] = b'\x0f'
        mem[0x400ac2] = b':'
        mem[0x400ac3] = b'a'
        mem[0x400ac4] = b'\xca'
        mem[0x400ac5] = b'\x00'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400ac0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ac0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ac0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ac0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ac6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_52_symbolic(self):
        ''' Instruction PCMPESTRI_52
            Groups: sse42
            0x400b74:	pcmpestri	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b74] = b'f'
        mem[0x400b75] = b'\x0f'
        mem[0x400b76] = b':'
        mem[0x400b77] = b'a'
        mem[0x400b78] = b'\xca'
        mem[0x400b79] = b'<'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b74
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b74)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b74)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b74, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b75, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b76, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b77, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b78, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b79, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b7a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_53_symbolic(self):
        ''' Instruction PCMPESTRI_53
            Groups: sse42
            0x400bce:	pcmpestri	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bce] = b'f'
        mem[0x400bcf] = b'\x0f'
        mem[0x400bd0] = b':'
        mem[0x400bd1] = b'a'
        mem[0x400bd2] = b'\xca'
        mem[0x400bd3] = b'Y'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bce
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bce)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bce)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bce, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd1, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd3, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bd4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_54_symbolic(self):
        ''' Instruction PCMPESTRI_54
            Groups: sse42
            0x400b56:	pcmpestri	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b56] = b'f'
        mem[0x400b57] = b'\x0f'
        mem[0x400b58] = b':'
        mem[0x400b59] = b'a'
        mem[0x400b5a] = b'\xca'
        mem[0x400b5b] = b'1'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b56
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b56)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b56)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b56, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b57, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b58, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b59, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5b, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b5c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_55_symbolic(self):
        ''' Instruction PCMPESTRI_55
            Groups: sse42
            0x400b7a:	pcmpestri	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b7a] = b'f'
        mem[0x400b7b] = b'\x0f'
        mem[0x400b7c] = b':'
        mem[0x400b7d] = b'a'
        mem[0x400b7e] = b'\xca'
        mem[0x400b7f] = b'='
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b7a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b7a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b7a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b7a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7f, 8)== ord('='))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b80)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_56_symbolic(self):
        ''' Instruction PCMPESTRI_56
            Groups: sse42
            0x400b5c:	pcmpestri	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b60] = b'\xca'
        mem[0x400b61] = b'4'
        mem[0x400b5c] = b'f'
        mem[0x400b5d] = b'\x0f'
        mem[0x400b5e] = b':'
        mem[0x400b5f] = b'a'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b5c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b5c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b5c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b60, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b61, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b62)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_57_symbolic(self):
        ''' Instruction PCMPESTRI_57
            Groups: sse42
            0x400ade:	pcmpestri	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400ae0] = b':'
        mem[0x400ae1] = b'a'
        mem[0x400ae2] = b'\xca'
        mem[0x400ae3] = b'\t'
        mem[0x400ade] = b'f'
        mem[0x400adf] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ade
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ade)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ade)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ae0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae1, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae3, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x400ade, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400adf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ae4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_58_symbolic(self):
        ''' Instruction PCMPESTRI_58
            Groups: sse42
            0x400b3e:	pcmpestri	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b40] = b':'
        mem[0x400b41] = b'a'
        mem[0x400b42] = b'\xca'
        mem[0x400b43] = b')'
        mem[0x400b3e] = b'f'
        mem[0x400b3f] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b3e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b3e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b3e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b40, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b41, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b42, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b43, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b44)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_59_symbolic(self):
        ''' Instruction PCMPESTRI_59
            Groups: sse42
            0x400bb0:	pcmpestri	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bb0] = b'f'
        mem[0x400bb1] = b'\x0f'
        mem[0x400bb2] = b':'
        mem[0x400bb3] = b'a'
        mem[0x400bb4] = b'\xca'
        mem[0x400bb5] = b'P'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bb0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bb0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bb0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bb0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb5, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bb6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_6_symbolic(self):
        ''' Instruction PCMPESTRI_6
            Groups: sse42
            0x400b0e:	pcmpestri	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b0e] = b'f'
        mem[0x400b0f] = b'\x0f'
        mem[0x400b10] = b':'
        mem[0x400b11] = b'a'
        mem[0x400b12] = b'\xca'
        mem[0x400b13] = b'\x19'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b0e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b0e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b0e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b0e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b10, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b11, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b12, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b13, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b14)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_60_symbolic(self):
        ''' Instruction PCMPESTRI_60
            Groups: sse42
            0x400b1a:	pcmpestri	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b1a] = b'f'
        mem[0x400b1b] = b'\x0f'
        mem[0x400b1c] = b':'
        mem[0x400b1d] = b'a'
        mem[0x400b1e] = b'\xca'
        mem[0x400b1f] = b'\x1d'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b1a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b1a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b1a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b1a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1f, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b20)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_61_symbolic(self):
        ''' Instruction PCMPESTRI_61
            Groups: sse42
            0x400bf2:	pcmpestri	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bf2] = b'f'
        mem[0x400bf3] = b'\x0f'
        mem[0x400bf4] = b':'
        mem[0x400bf5] = b'a'
        mem[0x400bf6] = b'\xca'
        mem[0x400bf7] = b'e'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bf2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bf2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bf2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf5, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf7, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_62_symbolic(self):
        ''' Instruction PCMPESTRI_62
            Groups: sse42
            0x400bd4:	pcmpestri	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bd4] = b'f'
        mem[0x400bd5] = b'\x0f'
        mem[0x400bd6] = b':'
        mem[0x400bd7] = b'a'
        mem[0x400bd8] = b'\xca'
        mem[0x400bd9] = b'\\'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bd4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bd4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bd4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bd4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd7, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd9, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bda)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_63_symbolic(self):
        ''' Instruction PCMPESTRI_63
            Groups: sse42
            0x400bf8:	pcmpestri	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bf8] = b'f'
        mem[0x400bf9] = b'\x0f'
        mem[0x400bfa] = b':'
        mem[0x400bfb] = b'a'
        mem[0x400bfc] = b'\xca'
        mem[0x400bfd] = b'h'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bf8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bf8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bf8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfd, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bfe)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_64_symbolic(self):
        ''' Instruction PCMPESTRI_64
            Groups: sse42
            0x400bc2:	pcmpestri	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400bc2] = b'f'
        mem[0x400bc3] = b'\x0f'
        mem[0x400bc4] = b':'
        mem[0x400bc5] = b'a'
        mem[0x400bc6] = b'\xca'
        mem[0x400bc7] = b'U'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bc2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bc2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bc2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bc2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc5, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc7, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bc8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_7_symbolic(self):
        ''' Instruction PCMPESTRI_7
            Groups: sse42
            0x400b8c:	pcmpestri	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b8c] = b'f'
        mem[0x400b8d] = b'\x0f'
        mem[0x400b8e] = b':'
        mem[0x400b8f] = b'a'
        mem[0x400b90] = b'\xca'
        mem[0x400b91] = b'D'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b8c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b8c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b8c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b8c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b90, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b91, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b92)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_8_symbolic(self):
        ''' Instruction PCMPESTRI_8
            Groups: sse42
            0x400aea:	pcmpestri	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aea] = b'f'
        mem[0x400aeb] = b'\x0f'
        mem[0x400aec] = b':'
        mem[0x400aed] = b'a'
        mem[0x400aee] = b'\xca'
        mem[0x400aef] = b'\r'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400aea
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400aea)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400aea)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aea, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aeb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aec, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400aed, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400aee, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400aef, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400af0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_9_symbolic(self):
        ''' Instruction PCMPESTRI_9
            Groups: sse42
            0x400b32:	pcmpestri	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400b32] = b'f'
        mem[0x400b33] = b'\x0f'
        mem[0x400b34] = b':'
        mem[0x400b35] = b'a'
        mem[0x400b36] = b'\xca'
        mem[0x400b37] = b'%'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b32
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b32)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b32)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b32, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b33, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b34, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b35, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b36, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b37, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b38)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_1_symbolic(self):
        ''' Instruction PCMPESTRM_1
            Groups: sse42
            0x4009d0:	pcmpestrm	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009d0] = b'f'
        mem[0x4009d1] = b'\x0f'
        mem[0x4009d2] = b':'
        mem[0x4009d3] = b'`'
        mem[0x4009d4] = b'\xca'
        mem[0x4009d5] = b'8'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009d0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009d0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009d0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009d0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d3, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d5, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009d6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_10_symbolic(self):
        ''' Instruction PCMPESTRM_10
            Groups: sse42
            0x4009ac:	pcmpestrm	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009ac] = b'f'
        mem[0x4009ad] = b'\x0f'
        mem[0x4009ae] = b':'
        mem[0x4009af] = b'`'
        mem[0x4009b0] = b'\xca'
        mem[0x4009b1] = b','
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009ac
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009ac)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009ac)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009ac, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ad, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ae, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009af, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b1, 8)== ord(','))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009b2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_11_symbolic(self):
        ''' Instruction PCMPESTRM_11
            Groups: sse42
            0x400a24:	pcmpestrm	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a24] = b'f'
        mem[0x400a25] = b'\x0f'
        mem[0x400a26] = b':'
        mem[0x400a27] = b'`'
        mem[0x400a28] = b'\xca'
        mem[0x400a29] = b'T'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a24
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a24)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a24)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a24, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a25, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a26, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a27, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a28, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a29, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a2a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_12_symbolic(self):
        ''' Instruction PCMPESTRM_12
            Groups: sse42
            0x4009f4:	pcmpestrm	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009f4] = b'f'
        mem[0x4009f5] = b'\x0f'
        mem[0x4009f6] = b':'
        mem[0x4009f7] = b'`'
        mem[0x4009f8] = b'\xca'
        mem[0x4009f9] = b'D'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009f4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009f4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009f4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009f4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f7, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f9, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009fa)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_13_symbolic(self):
        ''' Instruction PCMPESTRM_13
            Groups: sse42
            0x400a1e:	pcmpestrm	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a20] = b':'
        mem[0x400a21] = b'`'
        mem[0x400a22] = b'\xca'
        mem[0x400a23] = b'Q'
        mem[0x400a1e] = b'f'
        mem[0x400a1f] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a1e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a1e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a1e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a20, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a21, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a22, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a23, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a24)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_14_symbolic(self):
        ''' Instruction PCMPESTRM_14
            Groups: sse42
            0x400a7e:	pcmpestrm	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a80] = b':'
        mem[0x400a81] = b'`'
        mem[0x400a82] = b'\xca'
        mem[0x400a83] = b'q'
        mem[0x400a7e] = b'f'
        mem[0x400a7f] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a7e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a7e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a7e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a80, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a81, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a82, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a83, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a84)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_15_symbolic(self):
        ''' Instruction PCMPESTRM_15
            Groups: sse42
            0x400994:	pcmpestrm	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400994] = b'f'
        mem[0x400995] = b'\x0f'
        mem[0x400996] = b':'
        mem[0x400997] = b'`'
        mem[0x400998] = b'\xca'
        mem[0x400999] = b'$'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400994
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400994)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400994)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400994, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400995, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400996, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400997, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400998, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400999, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40099a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_16_symbolic(self):
        ''' Instruction PCMPESTRM_16
            Groups: sse42
            0x400934:	pcmpestrm	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400934] = b'f'
        mem[0x400935] = b'\x0f'
        mem[0x400936] = b':'
        mem[0x400937] = b'`'
        mem[0x400938] = b'\xca'
        mem[0x400939] = b'\x04'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400934
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400934)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400934)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400934, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400935, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400936, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400937, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400938, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400939, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40093a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_17_symbolic(self):
        ''' Instruction PCMPESTRM_17
            Groups: sse42
            0x400a9c:	pcmpestrm	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aa0] = b'\xca'
        mem[0x400aa1] = b'|'
        mem[0x400a9c] = b'f'
        mem[0x400a9d] = b'\x0f'
        mem[0x400a9e] = b':'
        mem[0x400a9f] = b'`'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a9c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a9c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a9c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aa0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa1, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400aa2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_18_symbolic(self):
        ''' Instruction PCMPESTRM_18
            Groups: sse42
            0x40092e:	pcmpestrm	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40092e] = b'f'
        mem[0x40092f] = b'\x0f'
        mem[0x400930] = b':'
        mem[0x400931] = b'`'
        mem[0x400932] = b'\xca'
        mem[0x400933] = b'\x01'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40092e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40092e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40092e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40092e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40092f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400930, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400931, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400932, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400933, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400934)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_19_symbolic(self):
        ''' Instruction PCMPESTRM_19
            Groups: sse42
            0x4009a6:	pcmpestrm	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009a6] = b'f'
        mem[0x4009a7] = b'\x0f'
        mem[0x4009a8] = b':'
        mem[0x4009a9] = b'`'
        mem[0x4009aa] = b'\xca'
        mem[0x4009ab] = b')'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009a6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009a6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009a6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009a6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a9, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009aa, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ab, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009ac)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_2_symbolic(self):
        ''' Instruction PCMPESTRM_2
            Groups: sse42
            0x400a54:	pcmpestrm	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a54] = b'f'
        mem[0x400a55] = b'\x0f'
        mem[0x400a56] = b':'
        mem[0x400a57] = b'`'
        mem[0x400a58] = b'\xca'
        mem[0x400a59] = b'd'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a54
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a54)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a54)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a54, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a55, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a56, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a57, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a58, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a59, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a5a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_20_symbolic(self):
        ''' Instruction PCMPESTRM_20
            Groups: sse42
            0x400a66:	pcmpestrm	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a66] = b'f'
        mem[0x400a67] = b'\x0f'
        mem[0x400a68] = b':'
        mem[0x400a69] = b'`'
        mem[0x400a6a] = b'\xca'
        mem[0x400a6b] = b'i'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a66
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a66)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a66)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a66, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a67, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a68, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a69, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6b, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a6c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_21_symbolic(self):
        ''' Instruction PCMPESTRM_21
            Groups: sse42
            0x400958:	pcmpestrm	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400958] = b'f'
        mem[0x400959] = b'\x0f'
        mem[0x40095a] = b':'
        mem[0x40095b] = b'`'
        mem[0x40095c] = b'\xca'
        mem[0x40095d] = b'\x10'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400958
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400958)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400958)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400958, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400959, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40095a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40095b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40095c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40095d, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40095e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_22_symbolic(self):
        ''' Instruction PCMPESTRM_22
            Groups: sse42
            0x40095e:	pcmpestrm	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400960] = b':'
        mem[0x400961] = b'`'
        mem[0x400962] = b'\xca'
        mem[0x400963] = b'\x11'
        mem[0x40095e] = b'f'
        mem[0x40095f] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40095e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40095e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40095e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400960, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400961, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400962, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400963, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(0x40095e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40095f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400964)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_23_symbolic(self):
        ''' Instruction PCMPESTRM_23
            Groups: sse42
            0x400976:	pcmpestrm	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400976] = b'f'
        mem[0x400977] = b'\x0f'
        mem[0x400978] = b':'
        mem[0x400979] = b'`'
        mem[0x40097a] = b'\xca'
        mem[0x40097b] = b'\x19'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400976
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400976)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400976)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400976, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400977, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400978, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400979, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40097a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40097b, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40097c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_24_symbolic(self):
        ''' Instruction PCMPESTRM_24
            Groups: sse42
            0x400a8a:	pcmpestrm	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a8a] = b'f'
        mem[0x400a8b] = b'\x0f'
        mem[0x400a8c] = b':'
        mem[0x400a8d] = b'`'
        mem[0x400a8e] = b'\xca'
        mem[0x400a8f] = b'u'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a8a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a8a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a8a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a8a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8f, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a90)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_25_symbolic(self):
        ''' Instruction PCMPESTRM_25
            Groups: sse42
            0x400a12:	pcmpestrm	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a12] = b'f'
        mem[0x400a13] = b'\x0f'
        mem[0x400a14] = b':'
        mem[0x400a15] = b'`'
        mem[0x400a16] = b'\xca'
        mem[0x400a17] = b'M'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a12
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a12)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a12)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a12, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a13, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a14, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a15, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a16, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a17, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a18)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_26_symbolic(self):
        ''' Instruction PCMPESTRM_26
            Groups: sse42
            0x40093a:	pcmpestrm	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40093a] = b'f'
        mem[0x40093b] = b'\x0f'
        mem[0x40093c] = b':'
        mem[0x40093d] = b'`'
        mem[0x40093e] = b'\xca'
        mem[0x40093f] = b'\x05'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40093a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40093a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40093a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40093a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40093b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40093c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40093d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40093e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40093f, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400940)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_27_symbolic(self):
        ''' Instruction PCMPESTRM_27
            Groups: sse42
            0x400a30:	pcmpestrm	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a30] = b'f'
        mem[0x400a31] = b'\x0f'
        mem[0x400a32] = b':'
        mem[0x400a33] = b'`'
        mem[0x400a34] = b'\xca'
        mem[0x400a35] = b'X'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a30
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a30)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a30)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a30, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a31, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a32, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a33, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a34, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a35, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a36)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_28_symbolic(self):
        ''' Instruction PCMPESTRM_28
            Groups: sse42
            0x4009ca:	pcmpestrm	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009ca] = b'f'
        mem[0x4009cb] = b'\x0f'
        mem[0x4009cc] = b':'
        mem[0x4009cd] = b'`'
        mem[0x4009ce] = b'\xca'
        mem[0x4009cf] = b'5'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009ca
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009ca)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009ca)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009ca, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cd, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ce, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cf, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009d0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_29_symbolic(self):
        ''' Instruction PCMPESTRM_29
            Groups: sse42
            0x400a3c:	pcmpestrm	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a40] = b'\xca'
        mem[0x400a41] = b'\\'
        mem[0x400a3c] = b'f'
        mem[0x400a3d] = b'\x0f'
        mem[0x400a3e] = b':'
        mem[0x400a3f] = b'`'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a3c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a3c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a3c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a40, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a41, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a42)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_3_symbolic(self):
        ''' Instruction PCMPESTRM_3
            Groups: sse42
            0x400a18:	pcmpestrm	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a18] = b'f'
        mem[0x400a19] = b'\x0f'
        mem[0x400a1a] = b':'
        mem[0x400a1b] = b'`'
        mem[0x400a1c] = b'\xca'
        mem[0x400a1d] = b'P'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a18
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a18)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a18)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a18, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a19, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1d, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a1e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_30_symbolic(self):
        ''' Instruction PCMPESTRM_30
            Groups: sse42
            0x40098e:	pcmpestrm	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40098e] = b'f'
        mem[0x40098f] = b'\x0f'
        mem[0x400990] = b':'
        mem[0x400991] = b'`'
        mem[0x400992] = b'\xca'
        mem[0x400993] = b'!'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40098e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40098e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40098e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40098e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40098f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400990, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400991, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400992, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400993, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400994)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_31_symbolic(self):
        ''' Instruction PCMPESTRM_31
            Groups: sse42
            0x400a96:	pcmpestrm	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a96] = b'f'
        mem[0x400a97] = b'\x0f'
        mem[0x400a98] = b':'
        mem[0x400a99] = b'`'
        mem[0x400a9a] = b'\xca'
        mem[0x400a9b] = b'y'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a96
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a96)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a96)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a96, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a97, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a98, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a99, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9b, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a9c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_32_symbolic(self):
        ''' Instruction PCMPESTRM_32
            Groups: sse42
            0x400a90:	pcmpestrm	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a90] = b'f'
        mem[0x400a91] = b'\x0f'
        mem[0x400a92] = b':'
        mem[0x400a93] = b'`'
        mem[0x400a94] = b'\xca'
        mem[0x400a95] = b'x'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a90
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a90)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a90)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a90, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a91, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a92, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a93, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a94, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a95, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a96)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_33_symbolic(self):
        ''' Instruction PCMPESTRM_33
            Groups: sse42
            0x400a06:	pcmpestrm	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a06] = b'f'
        mem[0x400a07] = b'\x0f'
        mem[0x400a08] = b':'
        mem[0x400a09] = b'`'
        mem[0x400a0a] = b'\xca'
        mem[0x400a0b] = b'I'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a06
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a06)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a06)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a06, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a07, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a08, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a09, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0b, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a0c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_34_symbolic(self):
        ''' Instruction PCMPESTRM_34
            Groups: sse42
            0x400928:	pcmpestrm	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400928] = b'f'
        mem[0x400929] = b'\x0f'
        mem[0x40092a] = b':'
        mem[0x40092b] = b'`'
        mem[0x40092c] = b'\xca'
        mem[0x40092d] = b'\x00'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400928
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400928)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400928)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400928, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400929, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40092a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40092b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40092c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40092d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40092e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_35_symbolic(self):
        ''' Instruction PCMPESTRM_35
            Groups: sse42
            0x400a84:	pcmpestrm	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a84] = b'f'
        mem[0x400a85] = b'\x0f'
        mem[0x400a86] = b':'
        mem[0x400a87] = b'`'
        mem[0x400a88] = b'\xca'
        mem[0x400a89] = b't'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a84
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a84)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a84)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a84, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a85, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a86, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a87, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a88, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a89, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a8a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_36_symbolic(self):
        ''' Instruction PCMPESTRM_36
            Groups: sse42
            0x400a72:	pcmpestrm	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a72] = b'f'
        mem[0x400a73] = b'\x0f'
        mem[0x400a74] = b':'
        mem[0x400a75] = b'`'
        mem[0x400a76] = b'\xca'
        mem[0x400a77] = b'm'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a72
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a72)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a72)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a72, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a73, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a74, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a75, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a76, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a77, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a78)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_37_symbolic(self):
        ''' Instruction PCMPESTRM_37
            Groups: sse42
            0x400946:	pcmpestrm	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400946] = b'f'
        mem[0x400947] = b'\x0f'
        mem[0x400948] = b':'
        mem[0x400949] = b'`'
        mem[0x40094a] = b'\xca'
        mem[0x40094b] = b'\t'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400946
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400946)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400946)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400946, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400947, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400948, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400949, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40094a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40094b, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40094c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_38_symbolic(self):
        ''' Instruction PCMPESTRM_38
            Groups: sse42
            0x400940:	pcmpestrm	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400940] = b'f'
        mem[0x400941] = b'\x0f'
        mem[0x400942] = b':'
        mem[0x400943] = b'`'
        mem[0x400944] = b'\xca'
        mem[0x400945] = b'\x08'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400940
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400940)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400940)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400940, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400941, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400942, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400943, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400944, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400945, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400946)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_39_symbolic(self):
        ''' Instruction PCMPESTRM_39
            Groups: sse42
            0x400aa2:	pcmpestrm	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400aa2] = b'f'
        mem[0x400aa3] = b'\x0f'
        mem[0x400aa4] = b':'
        mem[0x400aa5] = b'`'
        mem[0x400aa6] = b'\xca'
        mem[0x400aa7] = b'}'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400aa2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400aa2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400aa2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aa2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa7, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400aa8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_4_symbolic(self):
        ''' Instruction PCMPESTRM_4
            Groups: sse42
            0x40097c:	pcmpestrm	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400980] = b'\xca'
        mem[0x400981] = b'\x1c'
        mem[0x40097c] = b'f'
        mem[0x40097d] = b'\x0f'
        mem[0x40097e] = b':'
        mem[0x40097f] = b'`'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40097c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40097c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40097c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400980, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400981, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x40097c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40097d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40097e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40097f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400982)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_40_symbolic(self):
        ''' Instruction PCMPESTRM_40
            Groups: sse42
            0x400a48:	pcmpestrm	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a48] = b'f'
        mem[0x400a49] = b'\x0f'
        mem[0x400a4a] = b':'
        mem[0x400a4b] = b'`'
        mem[0x400a4c] = b'\xca'
        mem[0x400a4d] = b'`'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a48
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a48)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a48)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a48, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a49, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a4e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_41_symbolic(self):
        ''' Instruction PCMPESTRM_41
            Groups: sse42
            0x400952:	pcmpestrm	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400952] = b'f'
        mem[0x400953] = b'\x0f'
        mem[0x400954] = b':'
        mem[0x400955] = b'`'
        mem[0x400956] = b'\xca'
        mem[0x400957] = b'\r'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400952
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400952)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400952)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400952, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400953, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400954, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400955, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400956, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400957, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400958)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_42_symbolic(self):
        ''' Instruction PCMPESTRM_42
            Groups: sse42
            0x40094c:	pcmpestrm	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40094c] = b'f'
        mem[0x40094d] = b'\x0f'
        mem[0x40094e] = b':'
        mem[0x40094f] = b'`'
        mem[0x400950] = b'\xca'
        mem[0x400951] = b'\x0c'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40094c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40094c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40094c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40094c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40094d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40094e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40094f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400950, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400951, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400952)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_43_symbolic(self):
        ''' Instruction PCMPESTRM_43
            Groups: sse42
            0x400a0c:	pcmpestrm	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a0c] = b'f'
        mem[0x400a0d] = b'\x0f'
        mem[0x400a0e] = b':'
        mem[0x400a0f] = b'`'
        mem[0x400a10] = b'\xca'
        mem[0x400a11] = b'L'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a0c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a0c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a0c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a0c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a10, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a11, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a12)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_44_symbolic(self):
        ''' Instruction PCMPESTRM_44
            Groups: sse42
            0x400964:	pcmpestrm	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400964] = b'f'
        mem[0x400965] = b'\x0f'
        mem[0x400966] = b':'
        mem[0x400967] = b'`'
        mem[0x400968] = b'\xca'
        mem[0x400969] = b'\x14'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400964
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400964)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400964)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400964, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400965, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400966, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400967, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400968, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400969, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40096a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_45_symbolic(self):
        ''' Instruction PCMPESTRM_45
            Groups: sse42
            0x400a36:	pcmpestrm	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a36] = b'f'
        mem[0x400a37] = b'\x0f'
        mem[0x400a38] = b':'
        mem[0x400a39] = b'`'
        mem[0x400a3a] = b'\xca'
        mem[0x400a3b] = b'Y'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a36
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a36)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a36)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a36, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a37, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a38, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a39, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3b, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a3c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_46_symbolic(self):
        ''' Instruction PCMPESTRM_46
            Groups: sse42
            0x40099a:	pcmpestrm	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40099a] = b'f'
        mem[0x40099b] = b'\x0f'
        mem[0x40099c] = b':'
        mem[0x40099d] = b'`'
        mem[0x40099e] = b'\xca'
        mem[0x40099f] = b'%'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40099a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40099a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40099a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40099a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40099b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40099c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40099d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40099e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40099f, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009a0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_47_symbolic(self):
        ''' Instruction PCMPESTRM_47
            Groups: sse42
            0x400988:	pcmpestrm	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400988] = b'f'
        mem[0x400989] = b'\x0f'
        mem[0x40098a] = b':'
        mem[0x40098b] = b'`'
        mem[0x40098c] = b'\xca'
        mem[0x40098d] = b' '
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400988
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400988)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400988)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400988, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400989, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40098a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40098b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40098c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40098d, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40098e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_48_symbolic(self):
        ''' Instruction PCMPESTRM_48
            Groups: sse42
            0x400a5a:	pcmpestrm	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a5a] = b'f'
        mem[0x400a5b] = b'\x0f'
        mem[0x400a5c] = b':'
        mem[0x400a5d] = b'`'
        mem[0x400a5e] = b'\xca'
        mem[0x400a5f] = b'e'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a5a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a5a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a5a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a5a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5f, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a60)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_49_symbolic(self):
        ''' Instruction PCMPESTRM_49
            Groups: sse42
            0x40096a:	pcmpestrm	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40096a] = b'f'
        mem[0x40096b] = b'\x0f'
        mem[0x40096c] = b':'
        mem[0x40096d] = b'`'
        mem[0x40096e] = b'\xca'
        mem[0x40096f] = b'\x15'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40096a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40096a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40096a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40096a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40096b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40096c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40096d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40096e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40096f, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400970)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_5_symbolic(self):
        ''' Instruction PCMPESTRM_5
            Groups: sse42
            0x4009b2:	pcmpestrm	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009b2] = b'f'
        mem[0x4009b3] = b'\x0f'
        mem[0x4009b4] = b':'
        mem[0x4009b5] = b'`'
        mem[0x4009b6] = b'\xca'
        mem[0x4009b7] = b'-'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009b2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009b2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009b2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009b2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b7, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009b8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_50_symbolic(self):
        ''' Instruction PCMPESTRM_50
            Groups: sse42
            0x400a60:	pcmpestrm	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a60] = b'f'
        mem[0x400a61] = b'\x0f'
        mem[0x400a62] = b':'
        mem[0x400a63] = b'`'
        mem[0x400a64] = b'\xca'
        mem[0x400a65] = b'h'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a60
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a60)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a60)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a60, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a61, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a62, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a63, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a64, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a65, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a66)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_51_symbolic(self):
        ''' Instruction PCMPESTRM_51
            Groups: sse42
            0x4009be:	pcmpestrm	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009c0] = b':'
        mem[0x4009c1] = b'`'
        mem[0x4009c2] = b'\xca'
        mem[0x4009c3] = b'1'
        mem[0x4009be] = b'f'
        mem[0x4009bf] = b'\x0f'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009be
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009be)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009be)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009c0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c1, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c3, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x4009be, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009c4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_52_symbolic(self):
        ''' Instruction PCMPESTRM_52
            Groups: sse42
            0x4009e2:	pcmpestrm	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009e2] = b'f'
        mem[0x4009e3] = b'\x0f'
        mem[0x4009e4] = b':'
        mem[0x4009e5] = b'`'
        mem[0x4009e6] = b'\xca'
        mem[0x4009e7] = b'='
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009e2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009e2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009e2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009e2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e7, 8)== ord('='))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009e8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_53_symbolic(self):
        ''' Instruction PCMPESTRM_53
            Groups: sse42
            0x4009d6:	pcmpestrm	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009d6] = b'f'
        mem[0x4009d7] = b'\x0f'
        mem[0x4009d8] = b':'
        mem[0x4009d9] = b'`'
        mem[0x4009da] = b'\xca'
        mem[0x4009db] = b'9'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009d6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009d6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009d6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009d6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d9, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009da, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009db, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009dc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_54_symbolic(self):
        ''' Instruction PCMPESTRM_54
            Groups: sse42
            0x400a6c:	pcmpestrm	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a6c] = b'f'
        mem[0x400a6d] = b'\x0f'
        mem[0x400a6e] = b':'
        mem[0x400a6f] = b'`'
        mem[0x400a70] = b'\xca'
        mem[0x400a71] = b'l'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a6c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a6c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a6c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a6c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a70, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a71, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a72)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_55_symbolic(self):
        ''' Instruction PCMPESTRM_55
            Groups: sse42
            0x4009c4:	pcmpestrm	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009c4] = b'f'
        mem[0x4009c5] = b'\x0f'
        mem[0x4009c6] = b':'
        mem[0x4009c7] = b'`'
        mem[0x4009c8] = b'\xca'
        mem[0x4009c9] = b'4'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009c4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009c4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009c4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009c4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c7, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c9, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009ca)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_56_symbolic(self):
        ''' Instruction PCMPESTRM_56
            Groups: sse42
            0x400a00:	pcmpestrm	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a00] = b'f'
        mem[0x400a01] = b'\x0f'
        mem[0x400a02] = b':'
        mem[0x400a03] = b'`'
        mem[0x400a04] = b'\xca'
        mem[0x400a05] = b'H'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a00
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a00)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a00)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a00, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a01, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a02, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a03, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a04, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a05, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a06)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_57_symbolic(self):
        ''' Instruction PCMPESTRM_57
            Groups: sse42
            0x4009e8:	pcmpestrm	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009e8] = b'f'
        mem[0x4009e9] = b'\x0f'
        mem[0x4009ea] = b':'
        mem[0x4009eb] = b'`'
        mem[0x4009ec] = b'\xca'
        mem[0x4009ed] = b'@'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009e8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009e8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009e8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009e8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ea, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009eb, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ec, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ed, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009ee)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_58_symbolic(self):
        ''' Instruction PCMPESTRM_58
            Groups: sse42
            0x4009b8:	pcmpestrm	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009b8] = b'f'
        mem[0x4009b9] = b'\x0f'
        mem[0x4009ba] = b':'
        mem[0x4009bb] = b'`'
        mem[0x4009bc] = b'\xca'
        mem[0x4009bd] = b'0'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009b8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009b8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009b8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009b8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ba, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bb, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bd, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009be)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_59_symbolic(self):
        ''' Instruction PCMPESTRM_59
            Groups: sse42
            0x4009ee:	pcmpestrm	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009ee] = b'f'
        mem[0x4009ef] = b'\x0f'
        mem[0x4009f0] = b':'
        mem[0x4009f1] = b'`'
        mem[0x4009f2] = b'\xca'
        mem[0x4009f3] = b'A'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009ee
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009ee)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009ee)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009ee, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ef, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f1, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f3, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009f4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_6_symbolic(self):
        ''' Instruction PCMPESTRM_6
            Groups: sse42
            0x4009a0:	pcmpestrm	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009a0] = b'f'
        mem[0x4009a1] = b'\x0f'
        mem[0x4009a2] = b':'
        mem[0x4009a3] = b'`'
        mem[0x4009a4] = b'\xca'
        mem[0x4009a5] = b'('
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009a0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009a0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009a0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009a0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a3, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a5, 8)== ord('('))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009a6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_60_symbolic(self):
        ''' Instruction PCMPESTRM_60
            Groups: sse42
            0x400970:	pcmpestrm	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400970] = b'f'
        mem[0x400971] = b'\x0f'
        mem[0x400972] = b':'
        mem[0x400973] = b'`'
        mem[0x400974] = b'\xca'
        mem[0x400975] = b'\x18'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400970
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400970)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400970)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400970, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400971, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400972, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400973, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400974, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400975, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400976)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_61_symbolic(self):
        ''' Instruction PCMPESTRM_61
            Groups: sse42
            0x400a78:	pcmpestrm	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a78] = b'f'
        mem[0x400a79] = b'\x0f'
        mem[0x400a7a] = b':'
        mem[0x400a7b] = b'`'
        mem[0x400a7c] = b'\xca'
        mem[0x400a7d] = b'p'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a78
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a78)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a78)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a78, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a79, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7d, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a7e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_62_symbolic(self):
        ''' Instruction PCMPESTRM_62
            Groups: sse42
            0x400a2a:	pcmpestrm	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a2a] = b'f'
        mem[0x400a2b] = b'\x0f'
        mem[0x400a2c] = b':'
        mem[0x400a2d] = b'`'
        mem[0x400a2e] = b'\xca'
        mem[0x400a2f] = b'U'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a2a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a2a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a2a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a2a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2f, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a30)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_63_symbolic(self):
        ''' Instruction PCMPESTRM_63
            Groups: sse42
            0x400a42:	pcmpestrm	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a42] = b'f'
        mem[0x400a43] = b'\x0f'
        mem[0x400a44] = b':'
        mem[0x400a45] = b'`'
        mem[0x400a46] = b'\xca'
        mem[0x400a47] = b']'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a42
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a42)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a42)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a42, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a43, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a44, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a45, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a46, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a47, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a48)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_64_symbolic(self):
        ''' Instruction PCMPESTRM_64
            Groups: sse42
            0x400a4e:	pcmpestrm	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400a4e] = b'f'
        mem[0x400a4f] = b'\x0f'
        mem[0x400a50] = b':'
        mem[0x400a51] = b'`'
        mem[0x400a52] = b'\xca'
        mem[0x400a53] = b'a'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a4e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a4e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a4e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a4e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a50, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a51, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a52, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a53, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a54)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_7_symbolic(self):
        ''' Instruction PCMPESTRM_7
            Groups: sse42
            0x4009dc:	pcmpestrm	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009e0] = b'\xca'
        mem[0x4009e1] = b'<'
        mem[0x4009dc] = b'f'
        mem[0x4009dd] = b'\x0f'
        mem[0x4009de] = b':'
        mem[0x4009df] = b'`'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009dc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009dc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009dc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009e0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e1, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.read_int(0x4009dc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009de, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009df, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009e2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_8_symbolic(self):
        ''' Instruction PCMPESTRM_8
            Groups: sse42
            0x4009fa:	pcmpestrm	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4009fa] = b'f'
        mem[0x4009fb] = b'\x0f'
        mem[0x4009fc] = b':'
        mem[0x4009fd] = b'`'
        mem[0x4009fe] = b'\xca'
        mem[0x4009ff] = b'E'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009fa
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009fa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009fa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009fa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fd, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fe, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ff, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a00)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_9_symbolic(self):
        ''' Instruction PCMPESTRM_9
            Groups: sse42
            0x400982:	pcmpestrm	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400982] = b'f'
        mem[0x400983] = b'\x0f'
        mem[0x400984] = b':'
        mem[0x400985] = b'`'
        mem[0x400986] = b'\xca'
        mem[0x400987] = b'\x1d'
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400982
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400982)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400982)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400982, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400983, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400984, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400985, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400986, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400987, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400988)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_1_symbolic(self):
        ''' Instruction PCMPISTRI_1
            Groups: sse42
            0x400746:	pcmpistri	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400746] = b'f'
        mem[0x400747] = b'\x0f'
        mem[0x400748] = b':'
        mem[0x400749] = b'c'
        mem[0x40074a] = b'\xca'
        mem[0x40074b] = b'm'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400746
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400746)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400746)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400746, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400747, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400748, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400749, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40074a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40074b, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40074c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_10_symbolic(self):
        ''' Instruction PCMPISTRI_10
            Groups: sse42
            0x400650:	pcmpistri	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400650] = b'f'
        mem[0x400651] = b'\x0f'
        mem[0x400652] = b':'
        mem[0x400653] = b'c'
        mem[0x400654] = b'\xca'
        mem[0x400655] = b'\x1c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400650
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400650)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400650)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400650, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400651, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400652, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400653, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400654, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400655, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400656)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_11_symbolic(self):
        ''' Instruction PCMPISTRI_11
            Groups: sse42
            0x400668:	pcmpistri	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400668] = b'f'
        mem[0x400669] = b'\x0f'
        mem[0x40066a] = b':'
        mem[0x40066b] = b'c'
        mem[0x40066c] = b'\xca'
        mem[0x40066d] = b'$'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400668
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400668)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400668)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400668, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400669, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40066a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40066b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40066c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40066d, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40066e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_12_symbolic(self):
        ''' Instruction PCMPISTRI_12
            Groups: sse42
            0x400698:	pcmpistri	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400698] = b'f'
        mem[0x400699] = b'\x0f'
        mem[0x40069a] = b':'
        mem[0x40069b] = b'c'
        mem[0x40069c] = b'\xca'
        mem[0x40069d] = b'4'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400698
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400698)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400698)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400698, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400699, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40069a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40069b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40069c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40069d, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40069e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_13_symbolic(self):
        ''' Instruction PCMPISTRI_13
            Groups: sse42
            0x4006c8:	pcmpistri	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006c8] = b'f'
        mem[0x4006c9] = b'\x0f'
        mem[0x4006ca] = b':'
        mem[0x4006cb] = b'c'
        mem[0x4006cc] = b'\xca'
        mem[0x4006cd] = b'D'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006c8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006c8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006c8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006c8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ca, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cb, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cd, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006ce)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_14_symbolic(self):
        ''' Instruction PCMPISTRI_14
            Groups: sse42
            0x4006bc:	pcmpistri	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006c0] = b'\xca'
        mem[0x4006c1] = b'@'
        mem[0x4006bc] = b'f'
        mem[0x4006bd] = b'\x0f'
        mem[0x4006be] = b':'
        mem[0x4006bf] = b'c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006bc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006bc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006bc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006c0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c1, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006be, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bf, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006c2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_15_symbolic(self):
        ''' Instruction PCMPISTRI_15
            Groups: sse42
            0x40068c:	pcmpistri	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40068c] = b'f'
        mem[0x40068d] = b'\x0f'
        mem[0x40068e] = b':'
        mem[0x40068f] = b'c'
        mem[0x400690] = b'\xca'
        mem[0x400691] = b'0'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40068c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40068c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40068c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40068c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40068d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40068e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40068f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400690, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400691, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400692)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_16_symbolic(self):
        ''' Instruction PCMPISTRI_16
            Groups: sse42
            0x40062c:	pcmpistri	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40062c] = b'f'
        mem[0x40062d] = b'\x0f'
        mem[0x40062e] = b':'
        mem[0x40062f] = b'c'
        mem[0x400630] = b'\xca'
        mem[0x400631] = b'\x10'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40062c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40062c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40062c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40062c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40062d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40062e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40062f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400630, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400631, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400632)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_17_symbolic(self):
        ''' Instruction PCMPISTRI_17
            Groups: sse42
            0x400764:	pcmpistri	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400764] = b'f'
        mem[0x400765] = b'\x0f'
        mem[0x400766] = b':'
        mem[0x400767] = b'c'
        mem[0x400768] = b'\xca'
        mem[0x400769] = b'x'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400764
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400764)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400764)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400764, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400765, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400766, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400767, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400768, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400769, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40076a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_18_symbolic(self):
        ''' Instruction PCMPISTRI_18
            Groups: sse42
            0x4005fc:	pcmpistri	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400600] = b'\xca'
        mem[0x400601] = b'\x00'
        mem[0x4005fc] = b'f'
        mem[0x4005fd] = b'\x0f'
        mem[0x4005fe] = b':'
        mem[0x4005ff] = b'c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x82)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4005fc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4005fc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4005fc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400600, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400601, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4005fc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4005fd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4005fe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4005ff, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400602)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_19_symbolic(self):
        ''' Instruction PCMPISTRI_19
            Groups: sse42
            0x4006ce:	pcmpistri	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006ce] = b'f'
        mem[0x4006cf] = b'\x0f'
        mem[0x4006d0] = b':'
        mem[0x4006d1] = b'c'
        mem[0x4006d2] = b'\xca'
        mem[0x4006d3] = b'E'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006ce
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006ce)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006ce)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006ce, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d3, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006d4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_2_symbolic(self):
        ''' Instruction PCMPISTRI_2
            Groups: sse42
            0x400704:	pcmpistri	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400704] = b'f'
        mem[0x400705] = b'\x0f'
        mem[0x400706] = b':'
        mem[0x400707] = b'c'
        mem[0x400708] = b'\xca'
        mem[0x400709] = b'X'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400704
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400704)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400704)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400704, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400705, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400706, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400707, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400708, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400709, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40070a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_20_symbolic(self):
        ''' Instruction PCMPISTRI_20
            Groups: sse42
            0x4006f8:	pcmpistri	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006f8] = b'f'
        mem[0x4006f9] = b'\x0f'
        mem[0x4006fa] = b':'
        mem[0x4006fb] = b'c'
        mem[0x4006fc] = b'\xca'
        mem[0x4006fd] = b'T'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006f8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006f8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006f8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006f8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fb, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fd, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006fe)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_21_symbolic(self):
        ''' Instruction PCMPISTRI_21
            Groups: sse42
            0x4006c2:	pcmpistri	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006c2] = b'f'
        mem[0x4006c3] = b'\x0f'
        mem[0x4006c4] = b':'
        mem[0x4006c5] = b'c'
        mem[0x4006c6] = b'\xca'
        mem[0x4006c7] = b'A'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006c2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006c2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006c2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006c2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c5, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c7, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006c8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_22_symbolic(self):
        ''' Instruction PCMPISTRI_22
            Groups: sse42
            0x40069e:	pcmpistri	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006a0] = b':'
        mem[0x4006a1] = b'c'
        mem[0x4006a2] = b'\xca'
        mem[0x4006a3] = b'5'
        mem[0x40069e] = b'f'
        mem[0x40069f] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40069e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40069e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40069e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006a0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a3, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.read_int(0x40069e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40069f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006a4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_23_symbolic(self):
        ''' Instruction PCMPISTRI_23
            Groups: sse42
            0x4006b6:	pcmpistri	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006b6] = b'f'
        mem[0x4006b7] = b'\x0f'
        mem[0x4006b8] = b':'
        mem[0x4006b9] = b'c'
        mem[0x4006ba] = b'\xca'
        mem[0x4006bb] = b'='
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006b6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006b6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006b6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006b6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b9, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ba, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bb, 8)== ord('='))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006bc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_24_symbolic(self):
        ''' Instruction PCMPISTRI_24
            Groups: sse42
            0x400620:	pcmpistri	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400620] = b'f'
        mem[0x400621] = b'\x0f'
        mem[0x400622] = b':'
        mem[0x400623] = b'c'
        mem[0x400624] = b'\xca'
        mem[0x400625] = b'\x0c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400620
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400620)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400620)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400620, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400621, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400622, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400623, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400624, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400625, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400626)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_25_symbolic(self):
        ''' Instruction PCMPISTRI_25
            Groups: sse42
            0x400710:	pcmpistri	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400710] = b'f'
        mem[0x400711] = b'\x0f'
        mem[0x400712] = b':'
        mem[0x400713] = b'c'
        mem[0x400714] = b'\xca'
        mem[0x400715] = b'\\'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400710
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400710)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400710)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400710, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400711, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400712, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400713, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400714, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400715, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400716)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_26_symbolic(self):
        ''' Instruction PCMPISTRI_26
            Groups: sse42
            0x4006b0:	pcmpistri	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006b0] = b'f'
        mem[0x4006b1] = b'\x0f'
        mem[0x4006b2] = b':'
        mem[0x4006b3] = b'c'
        mem[0x4006b4] = b'\xca'
        mem[0x4006b5] = b'<'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006b0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006b0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006b0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006b0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b3, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b5, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006b6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_27_symbolic(self):
        ''' Instruction PCMPISTRI_27
            Groups: sse42
            0x400740:	pcmpistri	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400740] = b'f'
        mem[0x400741] = b'\x0f'
        mem[0x400742] = b':'
        mem[0x400743] = b'c'
        mem[0x400744] = b'\xca'
        mem[0x400745] = b'l'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400740
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400740)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400740)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400740, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400741, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400742, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400743, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400744, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400745, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400746)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_28_symbolic(self):
        ''' Instruction PCMPISTRI_28
            Groups: sse42
            0x400692:	pcmpistri	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400692] = b'f'
        mem[0x400693] = b'\x0f'
        mem[0x400694] = b':'
        mem[0x400695] = b'c'
        mem[0x400696] = b'\xca'
        mem[0x400697] = b'1'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400692
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400692)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400692)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400692, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400693, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400694, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400695, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400696, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400697, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400698)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_29_symbolic(self):
        ''' Instruction PCMPISTRI_29
            Groups: sse42
            0x40064a:	pcmpistri	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40064a] = b'f'
        mem[0x40064b] = b'\x0f'
        mem[0x40064c] = b':'
        mem[0x40064d] = b'c'
        mem[0x40064e] = b'\xca'
        mem[0x40064f] = b'\x19'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40064a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40064a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40064a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40064a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40064b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40064c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40064d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40064e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40064f, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400650)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_3_symbolic(self):
        ''' Instruction PCMPISTRI_3
            Groups: sse42
            0x400728:	pcmpistri	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400728] = b'f'
        mem[0x400729] = b'\x0f'
        mem[0x40072a] = b':'
        mem[0x40072b] = b'c'
        mem[0x40072c] = b'\xca'
        mem[0x40072d] = b'd'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400728
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400728)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400728)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400728, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400729, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40072a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40072b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40072c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40072d, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40072e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_30_symbolic(self):
        ''' Instruction PCMPISTRI_30
            Groups: sse42
            0x40077c:	pcmpistri	xmm1, xmmword ptr [rbp - 0xa0], 0x1b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem[0x400780] = b'\x8d'
        mem[0x400781] = b'`'
        mem[0x400782] = b'\xff'
        mem[0x400783] = b'\xff'
        mem[0x400784] = b'\xff'
        mem[0x400785] = b'\x1b'
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe190)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe191)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe192)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe193)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe194)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe195)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe196)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe197)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe198)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe199)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        mem[0x40077c] = b'f'
        mem[0x40077d] = b'\x0f'
        mem[0x40077e] = b':'
        mem[0x40077f] = b'c'
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40077c
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffe230)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40077c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'RBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'RBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40077c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400780, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x400781, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400782, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400783, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400784, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400785, 8)== ord('\x1b'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe190, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe191, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe192, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe193, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe194, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe195, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe196, 8)== ord('G'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe197, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe198, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe199, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19b, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19c, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19d, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19e, 8)== ord('G'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19f, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40077c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40077d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40077e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40077f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400786)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffe230)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_31_symbolic(self):
        ''' Instruction PCMPISTRI_31
            Groups: sse42
            0x400626:	pcmpistri	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400626] = b'f'
        mem[0x400627] = b'\x0f'
        mem[0x400628] = b':'
        mem[0x400629] = b'c'
        mem[0x40062a] = b'\xca'
        mem[0x40062b] = b'\r'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400626
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400626)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400626)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400626, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400627, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400628, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400629, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40062a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40062b, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40062c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_32_symbolic(self):
        ''' Instruction PCMPISTRI_32
            Groups: sse42
            0x4006d4:	pcmpistri	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006d4] = b'f'
        mem[0x4006d5] = b'\x0f'
        mem[0x4006d6] = b':'
        mem[0x4006d7] = b'c'
        mem[0x4006d8] = b'\xca'
        mem[0x4006d9] = b'H'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006d4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006d4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006d4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d7, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d9, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006da)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_33_symbolic(self):
        ''' Instruction PCMPISTRI_33
            Groups: sse42
            0x400686:	pcmpistri	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400686] = b'f'
        mem[0x400687] = b'\x0f'
        mem[0x400688] = b':'
        mem[0x400689] = b'c'
        mem[0x40068a] = b'\xca'
        mem[0x40068b] = b'-'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400686
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400686)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400686)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400686, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400687, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400688, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400689, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40068a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40068b, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40068c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_34_symbolic(self):
        ''' Instruction PCMPISTRI_34
            Groups: sse42
            0x400770:	pcmpistri	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400770] = b'f'
        mem[0x400771] = b'\x0f'
        mem[0x400772] = b':'
        mem[0x400773] = b'c'
        mem[0x400774] = b'\xca'
        mem[0x400775] = b'|'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400770
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400770)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400770)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400770, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400771, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400772, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400773, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400774, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400775, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400776)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_35_symbolic(self):
        ''' Instruction PCMPISTRI_35
            Groups: sse42
            0x40071c:	pcmpistri	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400720] = b'\xca'
        mem[0x400721] = b'`'
        mem[0x40071c] = b'f'
        mem[0x40071d] = b'\x0f'
        mem[0x40071e] = b':'
        mem[0x40071f] = b'c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40071c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40071c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40071c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400720, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400721, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40071c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40071d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40071e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40071f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400722)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_36_symbolic(self):
        ''' Instruction PCMPISTRI_36
            Groups: sse42
            0x400776:	pcmpistri	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400776] = b'f'
        mem[0x400777] = b'\x0f'
        mem[0x400778] = b':'
        mem[0x400779] = b'c'
        mem[0x40077a] = b'\xca'
        mem[0x40077b] = b'}'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400776
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400776)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400776)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400776, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400777, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400778, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400779, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40077a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40077b, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40077c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_37_symbolic(self):
        ''' Instruction PCMPISTRI_37
            Groups: sse42
            0x400758:	pcmpistri	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400758] = b'f'
        mem[0x400759] = b'\x0f'
        mem[0x40075a] = b':'
        mem[0x40075b] = b'c'
        mem[0x40075c] = b'\xca'
        mem[0x40075d] = b't'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400758
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400758)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400758)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400758, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400759, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40075a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40075b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40075c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40075d, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40075e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_38_symbolic(self):
        ''' Instruction PCMPISTRI_38
            Groups: sse42
            0x400602:	pcmpistri	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400602] = b'f'
        mem[0x400603] = b'\x0f'
        mem[0x400604] = b':'
        mem[0x400605] = b'c'
        mem[0x400606] = b'\xca'
        mem[0x400607] = b'\x01'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400602
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400602)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400602)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400602, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400603, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400604, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400605, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400606, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400607, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400608)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_39_symbolic(self):
        ''' Instruction PCMPISTRI_39
            Groups: sse42
            0x400608:	pcmpistri	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400608] = b'f'
        mem[0x400609] = b'\x0f'
        mem[0x40060a] = b':'
        mem[0x40060b] = b'c'
        mem[0x40060c] = b'\xca'
        mem[0x40060d] = b'\x04'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400608
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400608)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400608)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400608, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400609, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40060a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40060b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40060c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40060d, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40060e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_4_symbolic(self):
        ''' Instruction PCMPISTRI_4
            Groups: sse42
            0x400752:	pcmpistri	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400752] = b'f'
        mem[0x400753] = b'\x0f'
        mem[0x400754] = b':'
        mem[0x400755] = b'c'
        mem[0x400756] = b'\xca'
        mem[0x400757] = b'q'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400752
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400752)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400752)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400752, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400753, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400754, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400755, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400756, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400757, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400758)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_40_symbolic(self):
        ''' Instruction PCMPISTRI_40
            Groups: sse42
            0x400638:	pcmpistri	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400638] = b'f'
        mem[0x400639] = b'\x0f'
        mem[0x40063a] = b':'
        mem[0x40063b] = b'c'
        mem[0x40063c] = b'\xca'
        mem[0x40063d] = b'\x14'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400638
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400638)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400638)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400638, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400639, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40063a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40063b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40063c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40063d, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40063e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_41_symbolic(self):
        ''' Instruction PCMPISTRI_41
            Groups: sse42
            0x40074c:	pcmpistri	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40074c] = b'f'
        mem[0x40074d] = b'\x0f'
        mem[0x40074e] = b':'
        mem[0x40074f] = b'c'
        mem[0x400750] = b'\xca'
        mem[0x400751] = b'p'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40074c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40074c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40074c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40074c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40074d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40074e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40074f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400750, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400751, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400752)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_42_symbolic(self):
        ''' Instruction PCMPISTRI_42
            Groups: sse42
            0x400734:	pcmpistri	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400734] = b'f'
        mem[0x400735] = b'\x0f'
        mem[0x400736] = b':'
        mem[0x400737] = b'c'
        mem[0x400738] = b'\xca'
        mem[0x400739] = b'h'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400734
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400734)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400734)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400734, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400735, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400736, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400737, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400738, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400739, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40073a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_43_symbolic(self):
        ''' Instruction PCMPISTRI_43
            Groups: sse42
            0x400644:	pcmpistri	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400644] = b'f'
        mem[0x400645] = b'\x0f'
        mem[0x400646] = b':'
        mem[0x400647] = b'c'
        mem[0x400648] = b'\xca'
        mem[0x400649] = b'\x18'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400644
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400644)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400644)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400644, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400645, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400646, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400647, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400648, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400649, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40064a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_44_symbolic(self):
        ''' Instruction PCMPISTRI_44
            Groups: sse42
            0x40065c:	pcmpistri	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400660] = b'\xca'
        mem[0x400661] = b' '
        mem[0x40065c] = b'f'
        mem[0x40065d] = b'\x0f'
        mem[0x40065e] = b':'
        mem[0x40065f] = b'c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40065c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40065c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40065c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400660, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400661, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x40065c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40065d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40065e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40065f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400662)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_45_symbolic(self):
        ''' Instruction PCMPISTRI_45
            Groups: sse42
            0x40061a:	pcmpistri	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40061a] = b'f'
        mem[0x40061b] = b'\x0f'
        mem[0x40061c] = b':'
        mem[0x40061d] = b'c'
        mem[0x40061e] = b'\xca'
        mem[0x40061f] = b'\t'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40061a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40061a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40061a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40061a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40061b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40061c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40061d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40061e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40061f, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400620)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_46_symbolic(self):
        ''' Instruction PCMPISTRI_46
            Groups: sse42
            0x40073a:	pcmpistri	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40073a] = b'f'
        mem[0x40073b] = b'\x0f'
        mem[0x40073c] = b':'
        mem[0x40073d] = b'c'
        mem[0x40073e] = b'\xca'
        mem[0x40073f] = b'i'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40073a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40073a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40073a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40073a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40073b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40073c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40073d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40073e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40073f, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400740)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_47_symbolic(self):
        ''' Instruction PCMPISTRI_47
            Groups: sse42
            0x40070a:	pcmpistri	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40070a] = b'f'
        mem[0x40070b] = b'\x0f'
        mem[0x40070c] = b':'
        mem[0x40070d] = b'c'
        mem[0x40070e] = b'\xca'
        mem[0x40070f] = b'Y'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40070a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40070a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40070a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40070a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40070b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40070c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40070d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40070e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40070f, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400710)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_48_symbolic(self):
        ''' Instruction PCMPISTRI_48
            Groups: sse42
            0x4006aa:	pcmpistri	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006aa] = b'f'
        mem[0x4006ab] = b'\x0f'
        mem[0x4006ac] = b':'
        mem[0x4006ad] = b'c'
        mem[0x4006ae] = b'\xca'
        mem[0x4006af] = b'9'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006aa
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006aa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006aa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ab, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ac, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ad, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ae, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006af, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006b0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_49_symbolic(self):
        ''' Instruction PCMPISTRI_49
            Groups: sse42
            0x400716:	pcmpistri	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400716] = b'f'
        mem[0x400717] = b'\x0f'
        mem[0x400718] = b':'
        mem[0x400719] = b'c'
        mem[0x40071a] = b'\xca'
        mem[0x40071b] = b']'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400716
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400716)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400716)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400716, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400717, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400718, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400719, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40071a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40071b, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40071c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_5_symbolic(self):
        ''' Instruction PCMPISTRI_5
            Groups: sse42
            0x40063e:	pcmpistri	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400640] = b':'
        mem[0x400641] = b'c'
        mem[0x400642] = b'\xca'
        mem[0x400643] = b'\x15'
        mem[0x40063e] = b'f'
        mem[0x40063f] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40063e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40063e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40063e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400640, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400641, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400642, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400643, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(0x40063e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40063f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400644)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_50_symbolic(self):
        ''' Instruction PCMPISTRI_50
            Groups: sse42
            0x400656:	pcmpistri	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400656] = b'f'
        mem[0x400657] = b'\x0f'
        mem[0x400658] = b':'
        mem[0x400659] = b'c'
        mem[0x40065a] = b'\xca'
        mem[0x40065b] = b'\x1d'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400656
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400656)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400656)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400656, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400657, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400658, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400659, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40065a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40065b, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40065c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_51_symbolic(self):
        ''' Instruction PCMPISTRI_51
            Groups: sse42
            0x40072e:	pcmpistri	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40072e] = b'f'
        mem[0x40072f] = b'\x0f'
        mem[0x400730] = b':'
        mem[0x400731] = b'c'
        mem[0x400732] = b'\xca'
        mem[0x400733] = b'e'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40072e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40072e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40072e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40072e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40072f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400730, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400731, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400732, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400733, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400734)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_52_symbolic(self):
        ''' Instruction PCMPISTRI_52
            Groups: sse42
            0x400680:	pcmpistri	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400680] = b'f'
        mem[0x400681] = b'\x0f'
        mem[0x400682] = b':'
        mem[0x400683] = b'c'
        mem[0x400684] = b'\xca'
        mem[0x400685] = b','
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400680
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400680)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400680)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400680, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400681, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400682, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400683, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400684, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400685, 8)== ord(','))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400686)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_53_symbolic(self):
        ''' Instruction PCMPISTRI_53
            Groups: sse42
            0x400674:	pcmpistri	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400674] = b'f'
        mem[0x400675] = b'\x0f'
        mem[0x400676] = b':'
        mem[0x400677] = b'c'
        mem[0x400678] = b'\xca'
        mem[0x400679] = b'('
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400674
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400674)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400674)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400674, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400675, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400676, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400677, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400678, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400679, 8)== ord('('))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40067a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_54_symbolic(self):
        ''' Instruction PCMPISTRI_54
            Groups: sse42
            0x40067a:	pcmpistri	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40067a] = b'f'
        mem[0x40067b] = b'\x0f'
        mem[0x40067c] = b':'
        mem[0x40067d] = b'c'
        mem[0x40067e] = b'\xca'
        mem[0x40067f] = b')'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40067a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40067a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40067a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40067a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40067b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40067c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40067d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40067e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40067f, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400680)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_55_symbolic(self):
        ''' Instruction PCMPISTRI_55
            Groups: sse42
            0x400722:	pcmpistri	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400722] = b'f'
        mem[0x400723] = b'\x0f'
        mem[0x400724] = b':'
        mem[0x400725] = b'c'
        mem[0x400726] = b'\xca'
        mem[0x400727] = b'a'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400722
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400722)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400722)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400722, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400723, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400724, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400725, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400726, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400727, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400728)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_56_symbolic(self):
        ''' Instruction PCMPISTRI_56
            Groups: sse42
            0x4006e6:	pcmpistri	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006e6] = b'f'
        mem[0x4006e7] = b'\x0f'
        mem[0x4006e8] = b':'
        mem[0x4006e9] = b'c'
        mem[0x4006ea] = b'\xca'
        mem[0x4006eb] = b'M'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006e6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006e6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006e6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e9, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ea, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006eb, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006ec)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_57_symbolic(self):
        ''' Instruction PCMPISTRI_57
            Groups: sse42
            0x40076a:	pcmpistri	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40076a] = b'f'
        mem[0x40076b] = b'\x0f'
        mem[0x40076c] = b':'
        mem[0x40076d] = b'c'
        mem[0x40076e] = b'\xca'
        mem[0x40076f] = b'y'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40076a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40076a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40076a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40076a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40076b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40076c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40076d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40076e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40076f, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400770)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_58_symbolic(self):
        ''' Instruction PCMPISTRI_58
            Groups: sse42
            0x4006ec:	pcmpistri	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006ec] = b'f'
        mem[0x4006ed] = b'\x0f'
        mem[0x4006ee] = b':'
        mem[0x4006ef] = b'c'
        mem[0x4006f0] = b'\xca'
        mem[0x4006f1] = b'P'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006ec
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006ec)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006ec)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006ec, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ee, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ef, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f1, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006f2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_59_symbolic(self):
        ''' Instruction PCMPISTRI_59
            Groups: sse42
            0x400632:	pcmpistri	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400632] = b'f'
        mem[0x400633] = b'\x0f'
        mem[0x400634] = b':'
        mem[0x400635] = b'c'
        mem[0x400636] = b'\xca'
        mem[0x400637] = b'\x11'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400632
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400632)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400632)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400632, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400633, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400634, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400635, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400636, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400637, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400638)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_6_symbolic(self):
        ''' Instruction PCMPISTRI_6
            Groups: sse42
            0x40066e:	pcmpistri	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40066e] = b'f'
        mem[0x40066f] = b'\x0f'
        mem[0x400670] = b':'
        mem[0x400671] = b'c'
        mem[0x400672] = b'\xca'
        mem[0x400673] = b'%'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40066e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40066e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40066e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40066e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40066f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400670, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400671, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400672, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400673, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400674)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_60_symbolic(self):
        ''' Instruction PCMPISTRI_60
            Groups: sse42
            0x4006f2:	pcmpistri	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006f2] = b'f'
        mem[0x4006f3] = b'\x0f'
        mem[0x4006f4] = b':'
        mem[0x4006f5] = b'c'
        mem[0x4006f6] = b'\xca'
        mem[0x4006f7] = b'Q'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006f2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006f2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006f2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006f2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f5, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f7, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006f8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_61_symbolic(self):
        ''' Instruction PCMPISTRI_61
            Groups: sse42
            0x400614:	pcmpistri	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400614] = b'f'
        mem[0x400615] = b'\x0f'
        mem[0x400616] = b':'
        mem[0x400617] = b'c'
        mem[0x400618] = b'\xca'
        mem[0x400619] = b'\x08'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400614
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400614)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400614)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400614, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400615, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400616, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400617, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400618, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400619, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40061a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_62_symbolic(self):
        ''' Instruction PCMPISTRI_62
            Groups: sse42
            0x4006da:	pcmpistri	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006da] = b'f'
        mem[0x4006db] = b'\x0f'
        mem[0x4006dc] = b':'
        mem[0x4006dd] = b'c'
        mem[0x4006de] = b'\xca'
        mem[0x4006df] = b'I'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006da
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006da)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006da)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006da, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006db, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006dc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006dd, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006de, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006df, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006e0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_63_symbolic(self):
        ''' Instruction PCMPISTRI_63
            Groups: sse42
            0x4006a4:	pcmpistri	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006a4] = b'f'
        mem[0x4006a5] = b'\x0f'
        mem[0x4006a6] = b':'
        mem[0x4006a7] = b'c'
        mem[0x4006a8] = b'\xca'
        mem[0x4006a9] = b'8'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006a4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006a4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006a4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006a4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a7, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a9, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006aa)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_64_symbolic(self):
        ''' Instruction PCMPISTRI_64
            Groups: sse42
            0x4006fe:	pcmpistri	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400700] = b':'
        mem[0x400701] = b'c'
        mem[0x400702] = b'\xca'
        mem[0x400703] = b'U'
        mem[0x4006fe] = b'f'
        mem[0x4006ff] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006fe
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006fe)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006fe)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400700, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400701, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400702, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400703, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fe, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ff, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400704)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_65_symbolic(self):
        ''' Instruction PCMPISTRI_65
            Groups: sse42
            0x400662:	pcmpistri	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400662] = b'f'
        mem[0x400663] = b'\x0f'
        mem[0x400664] = b':'
        mem[0x400665] = b'c'
        mem[0x400666] = b'\xca'
        mem[0x400667] = b'!'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400662
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400662)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400662)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400662, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400663, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400664, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400665, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400666, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400667, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400668)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_7_symbolic(self):
        ''' Instruction PCMPISTRI_7
            Groups: sse42
            0x4006e0:	pcmpistri	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4006e0] = b'f'
        mem[0x4006e1] = b'\x0f'
        mem[0x4006e2] = b':'
        mem[0x4006e3] = b'c'
        mem[0x4006e4] = b'\xca'
        mem[0x4006e5] = b'L'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006e0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006e0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006e0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006e0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e3, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e5, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006e6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_8_symbolic(self):
        ''' Instruction PCMPISTRI_8
            Groups: sse42
            0x40060e:	pcmpistri	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40060e] = b'f'
        mem[0x40060f] = b'\x0f'
        mem[0x400610] = b':'
        mem[0x400611] = b'c'
        mem[0x400612] = b'\xca'
        mem[0x400613] = b'\x05'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40060e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40060e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40060e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40060e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40060f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400610, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400611, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400612, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400613, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400614)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_9_symbolic(self):
        ''' Instruction PCMPISTRI_9
            Groups: sse42
            0x40075e:	pcmpistri	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400760] = b':'
        mem[0x400761] = b'c'
        mem[0x400762] = b'\xca'
        mem[0x400763] = b'u'
        mem[0x40075e] = b'f'
        mem[0x40075f] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40075e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40075e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40075e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400760, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400761, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400762, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400763, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x40075e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40075f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400764)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_1_symbolic(self):
        ''' Instruction PCMPISTRM_1
            Groups: sse42
            0x400856:	pcmpistrm	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400856] = b'f'
        mem[0x400857] = b'\x0f'
        mem[0x400858] = b':'
        mem[0x400859] = b'b'
        mem[0x40085a] = b'\xca'
        mem[0x40085b] = b'A'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400856
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400856)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400856)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400856, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400857, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400858, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400859, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40085a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40085b, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40085c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_10_symbolic(self):
        ''' Instruction PCMPISTRM_10
            Groups: sse42
            0x4007cc:	pcmpistrm	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007cc] = b'f'
        mem[0x4007cd] = b'\x0f'
        mem[0x4007ce] = b':'
        mem[0x4007cf] = b'b'
        mem[0x4007d0] = b'\xca'
        mem[0x4007d1] = b'\x14'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007cc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007cc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007cc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007cc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007cd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ce, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007cf, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d1, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007d2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_11_symbolic(self):
        ''' Instruction PCMPISTRM_11
            Groups: sse42
            0x40087a:	pcmpistrm	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40087a] = b'f'
        mem[0x40087b] = b'\x0f'
        mem[0x40087c] = b':'
        mem[0x40087d] = b'b'
        mem[0x40087e] = b'\xca'
        mem[0x40087f] = b'M'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40087a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40087a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40087a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40087a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40087b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40087c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40087d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40087e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40087f, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400880)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_12_symbolic(self):
        ''' Instruction PCMPISTRM_12
            Groups: sse42
            0x400802:	pcmpistrm	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400802] = b'f'
        mem[0x400803] = b'\x0f'
        mem[0x400804] = b':'
        mem[0x400805] = b'b'
        mem[0x400806] = b'\xca'
        mem[0x400807] = b'%'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400802
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400802)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400802)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400802, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400803, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400804, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400805, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400806, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400807, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400808)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_13_symbolic(self):
        ''' Instruction PCMPISTRM_13
            Groups: sse42
            0x4007fc:	pcmpistrm	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400800] = b'\xca'
        mem[0x400801] = b'$'
        mem[0x4007fc] = b'f'
        mem[0x4007fd] = b'\x0f'
        mem[0x4007fe] = b':'
        mem[0x4007ff] = b'b'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007fc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007fc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007fc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400800, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400801, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ff, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400802)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_14_symbolic(self):
        ''' Instruction PCMPISTRM_14
            Groups: sse42
            0x4008c8:	pcmpistrm	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008c8] = b'f'
        mem[0x4008c9] = b'\x0f'
        mem[0x4008ca] = b':'
        mem[0x4008cb] = b'b'
        mem[0x4008cc] = b'\xca'
        mem[0x4008cd] = b'h'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008c8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008c8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008c8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008c8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ca, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cb, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cd, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008ce)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_15_symbolic(self):
        ''' Instruction PCMPISTRM_15
            Groups: sse42
            0x4008f8:	pcmpistrm	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008f8] = b'f'
        mem[0x4008f9] = b'\x0f'
        mem[0x4008fa] = b':'
        mem[0x4008fb] = b'b'
        mem[0x4008fc] = b'\xca'
        mem[0x4008fd] = b'x'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008f8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008f8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008f8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008f8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fb, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fd, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008fe)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_16_symbolic(self):
        ''' Instruction PCMPISTRM_16
            Groups: sse42
            0x40080e:	pcmpistrm	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40080e] = b'f'
        mem[0x40080f] = b'\x0f'
        mem[0x400810] = b':'
        mem[0x400811] = b'b'
        mem[0x400812] = b'\xca'
        mem[0x400813] = b')'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40080e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40080e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40080e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40080e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40080f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400810, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400811, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400812, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400813, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400814)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_17_symbolic(self):
        ''' Instruction PCMPISTRM_17
            Groups: sse42
            0x40089e:	pcmpistrm	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008a0] = b':'
        mem[0x4008a1] = b'b'
        mem[0x4008a2] = b'\xca'
        mem[0x4008a3] = b'Y'
        mem[0x40089e] = b'f'
        mem[0x40089f] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40089e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40089e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40089e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008a0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a3, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.read_int(0x40089e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40089f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008a4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_18_symbolic(self):
        ''' Instruction PCMPISTRM_18
            Groups: sse42
            0x4008f2:	pcmpistrm	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008f2] = b'f'
        mem[0x4008f3] = b'\x0f'
        mem[0x4008f4] = b':'
        mem[0x4008f5] = b'b'
        mem[0x4008f6] = b'\xca'
        mem[0x4008f7] = b'u'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008f2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008f2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008f2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008f2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f7, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008f8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_19_symbolic(self):
        ''' Instruction PCMPISTRM_19
            Groups: sse42
            0x4007b4:	pcmpistrm	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007b4] = b'f'
        mem[0x4007b5] = b'\x0f'
        mem[0x4007b6] = b':'
        mem[0x4007b7] = b'b'
        mem[0x4007b8] = b'\xca'
        mem[0x4007b9] = b'\x0c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007b4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007b4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007b4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007b4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b9, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007ba)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_2_symbolic(self):
        ''' Instruction PCMPISTRM_2
            Groups: sse42
            0x4008ec:	pcmpistrm	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008ec] = b'f'
        mem[0x4008ed] = b'\x0f'
        mem[0x4008ee] = b':'
        mem[0x4008ef] = b'b'
        mem[0x4008f0] = b'\xca'
        mem[0x4008f1] = b't'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008ec
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008ec)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008ec)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008ec, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ee, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ef, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f1, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008f2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_20_symbolic(self):
        ''' Instruction PCMPISTRM_20
            Groups: sse42
            0x4007d8:	pcmpistrm	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007d8] = b'f'
        mem[0x4007d9] = b'\x0f'
        mem[0x4007da] = b':'
        mem[0x4007db] = b'b'
        mem[0x4007dc] = b'\xca'
        mem[0x4007dd] = b'\x18'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007d8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007d8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007d8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007d8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007da, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007db, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007dc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007dd, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007de)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_21_symbolic(self):
        ''' Instruction PCMPISTRM_21
            Groups: sse42
            0x400892:	pcmpistrm	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400892] = b'f'
        mem[0x400893] = b'\x0f'
        mem[0x400894] = b':'
        mem[0x400895] = b'b'
        mem[0x400896] = b'\xca'
        mem[0x400897] = b'U'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400892
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400892)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400892)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400892, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400893, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400894, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400895, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400896, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400897, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400898)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_22_symbolic(self):
        ''' Instruction PCMPISTRM_22
            Groups: sse42
            0x40084a:	pcmpistrm	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40084a] = b'f'
        mem[0x40084b] = b'\x0f'
        mem[0x40084c] = b':'
        mem[0x40084d] = b'b'
        mem[0x40084e] = b'\xca'
        mem[0x40084f] = b'='
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40084a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40084a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40084a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40084a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40084b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40084c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40084d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40084e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40084f, 8)== ord('='))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400850)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_23_symbolic(self):
        ''' Instruction PCMPISTRM_23
            Groups: sse42
            0x40088c:	pcmpistrm	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40088c] = b'f'
        mem[0x40088d] = b'\x0f'
        mem[0x40088e] = b':'
        mem[0x40088f] = b'b'
        mem[0x400890] = b'\xca'
        mem[0x400891] = b'T'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40088c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40088c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40088c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40088c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40088d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40088e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40088f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400890, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400891, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400892)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_24_symbolic(self):
        ''' Instruction PCMPISTRM_24
            Groups: sse42
            0x4008fe:	pcmpistrm	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400900] = b':'
        mem[0x400901] = b'b'
        mem[0x400902] = b'\xca'
        mem[0x400903] = b'y'
        mem[0x4008fe] = b'f'
        mem[0x4008ff] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008fe
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008fe)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008fe)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400900, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400901, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400902, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400903, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fe, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ff, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400904)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_25_symbolic(self):
        ''' Instruction PCMPISTRM_25
            Groups: sse42
            0x400838:	pcmpistrm	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400838] = b'f'
        mem[0x400839] = b'\x0f'
        mem[0x40083a] = b':'
        mem[0x40083b] = b'b'
        mem[0x40083c] = b'\xca'
        mem[0x40083d] = b'8'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400838
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400838)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400838)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400838, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400839, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40083a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40083b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40083c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40083d, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40083e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_26_symbolic(self):
        ''' Instruction PCMPISTRM_26
            Groups: sse42
            0x400832:	pcmpistrm	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400832] = b'f'
        mem[0x400833] = b'\x0f'
        mem[0x400834] = b':'
        mem[0x400835] = b'b'
        mem[0x400836] = b'\xca'
        mem[0x400837] = b'5'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400832
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400832)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400832)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400832, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400833, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400834, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400835, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400836, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400837, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400838)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_27_symbolic(self):
        ''' Instruction PCMPISTRM_27
            Groups: sse42
            0x400820:	pcmpistrm	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400820] = b'f'
        mem[0x400821] = b'\x0f'
        mem[0x400822] = b':'
        mem[0x400823] = b'b'
        mem[0x400824] = b'\xca'
        mem[0x400825] = b'0'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400820
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400820)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400820)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400820, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400821, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400822, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400823, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400824, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400825, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400826)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_28_symbolic(self):
        ''' Instruction PCMPISTRM_28
            Groups: sse42
            0x400850:	pcmpistrm	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400850] = b'f'
        mem[0x400851] = b'\x0f'
        mem[0x400852] = b':'
        mem[0x400853] = b'b'
        mem[0x400854] = b'\xca'
        mem[0x400855] = b'@'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400850
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400850)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400850)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400850, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400851, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400852, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400853, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400854, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400855, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400856)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_29_symbolic(self):
        ''' Instruction PCMPISTRM_29
            Groups: sse42
            0x4007d2:	pcmpistrm	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007d2] = b'f'
        mem[0x4007d3] = b'\x0f'
        mem[0x4007d4] = b':'
        mem[0x4007d5] = b'b'
        mem[0x4007d6] = b'\xca'
        mem[0x4007d7] = b'\x15'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007d2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007d2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007d2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007d2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d7, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007d8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_3_symbolic(self):
        ''' Instruction PCMPISTRM_3
            Groups: sse42
            0x400826:	pcmpistrm	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400826] = b'f'
        mem[0x400827] = b'\x0f'
        mem[0x400828] = b':'
        mem[0x400829] = b'b'
        mem[0x40082a] = b'\xca'
        mem[0x40082b] = b'1'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400826
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400826)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400826)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400826, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400827, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400828, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400829, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40082a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40082b, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40082c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_30_symbolic(self):
        ''' Instruction PCMPISTRM_30
            Groups: sse42
            0x400898:	pcmpistrm	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400898] = b'f'
        mem[0x400899] = b'\x0f'
        mem[0x40089a] = b':'
        mem[0x40089b] = b'b'
        mem[0x40089c] = b'\xca'
        mem[0x40089d] = b'X'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400898
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400898)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400898)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400898, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400899, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40089a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40089b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40089c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40089d, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40089e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_31_symbolic(self):
        ''' Instruction PCMPISTRM_31
            Groups: sse42
            0x4008aa:	pcmpistrm	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008aa] = b'f'
        mem[0x4008ab] = b'\x0f'
        mem[0x4008ac] = b':'
        mem[0x4008ad] = b'b'
        mem[0x4008ae] = b'\xca'
        mem[0x4008af] = b']'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008aa
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008aa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008aa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ab, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ac, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ad, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ae, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008af, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008b0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_32_symbolic(self):
        ''' Instruction PCMPISTRM_32
            Groups: sse42
            0x4007ea:	pcmpistrm	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007ea] = b'f'
        mem[0x4007eb] = b'\x0f'
        mem[0x4007ec] = b':'
        mem[0x4007ed] = b'b'
        mem[0x4007ee] = b'\xca'
        mem[0x4007ef] = b'\x1d'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007ea
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007ea)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007ea)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007ea, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007eb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ec, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ed, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ee, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ef, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007f0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_33_symbolic(self):
        ''' Instruction PCMPISTRM_33
            Groups: sse42
            0x4007f6:	pcmpistrm	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007f6] = b'f'
        mem[0x4007f7] = b'\x0f'
        mem[0x4007f8] = b':'
        mem[0x4007f9] = b'b'
        mem[0x4007fa] = b'\xca'
        mem[0x4007fb] = b'!'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007f6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007f6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007f6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007f6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fa, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fb, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007fc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_34_symbolic(self):
        ''' Instruction PCMPISTRM_34
            Groups: sse42
            0x4008b0:	pcmpistrm	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008b0] = b'f'
        mem[0x4008b1] = b'\x0f'
        mem[0x4008b2] = b':'
        mem[0x4008b3] = b'b'
        mem[0x4008b4] = b'\xca'
        mem[0x4008b5] = b'`'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008b0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008b0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008b0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008b0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008b6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_35_symbolic(self):
        ''' Instruction PCMPISTRM_35
            Groups: sse42
            0x4008a4:	pcmpistrm	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008a4] = b'f'
        mem[0x4008a5] = b'\x0f'
        mem[0x4008a6] = b':'
        mem[0x4008a7] = b'b'
        mem[0x4008a8] = b'\xca'
        mem[0x4008a9] = b'\\'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008a4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008a4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008a4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008a4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a9, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008aa)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_36_symbolic(self):
        ''' Instruction PCMPISTRM_36
            Groups: sse42
            0x4008e0:	pcmpistrm	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008e0] = b'f'
        mem[0x4008e1] = b'\x0f'
        mem[0x4008e2] = b':'
        mem[0x4008e3] = b'b'
        mem[0x4008e4] = b'\xca'
        mem[0x4008e5] = b'p'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008e0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008e0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008e0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008e0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e5, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008e6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_37_symbolic(self):
        ''' Instruction PCMPISTRM_37
            Groups: sse42
            0x400904:	pcmpistrm	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400904] = b'f'
        mem[0x400905] = b'\x0f'
        mem[0x400906] = b':'
        mem[0x400907] = b'b'
        mem[0x400908] = b'\xca'
        mem[0x400909] = b'|'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400904
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400904)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400904)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400904, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400905, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400906, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400907, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400908, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400909, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40090a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_38_symbolic(self):
        ''' Instruction PCMPISTRM_38
            Groups: sse42
            0x4008c2:	pcmpistrm	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008c2] = b'f'
        mem[0x4008c3] = b'\x0f'
        mem[0x4008c4] = b':'
        mem[0x4008c5] = b'b'
        mem[0x4008c6] = b'\xca'
        mem[0x4008c7] = b'e'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008c2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008c2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008c2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008c2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c7, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008c8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_39_symbolic(self):
        ''' Instruction PCMPISTRM_39
            Groups: sse42
            0x40081a:	pcmpistrm	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40081a] = b'f'
        mem[0x40081b] = b'\x0f'
        mem[0x40081c] = b':'
        mem[0x40081d] = b'b'
        mem[0x40081e] = b'\xca'
        mem[0x40081f] = b'-'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40081a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40081a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40081a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40081a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40081b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40081c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40081d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40081e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40081f, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400820)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_4_symbolic(self):
        ''' Instruction PCMPISTRM_4
            Groups: sse42
            0x4008bc:	pcmpistrm	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008c0] = b'\xca'
        mem[0x4008c1] = b'd'
        mem[0x4008bc] = b'f'
        mem[0x4008bd] = b'\x0f'
        mem[0x4008be] = b':'
        mem[0x4008bf] = b'b'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008bc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008bc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008bc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008c0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c1, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008be, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bf, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008c2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_40_symbolic(self):
        ''' Instruction PCMPISTRM_40
            Groups: sse42
            0x4007de:	pcmpistrm	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007e0] = b':'
        mem[0x4007e1] = b'b'
        mem[0x4007e2] = b'\xca'
        mem[0x4007e3] = b'\x19'
        mem[0x4007de] = b'f'
        mem[0x4007df] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007de
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007de)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007de)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007e0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e3, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.read_int(0x4007de, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007df, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007e4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_41_symbolic(self):
        ''' Instruction PCMPISTRM_41
            Groups: sse42
            0x400814:	pcmpistrm	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400814] = b'f'
        mem[0x400815] = b'\x0f'
        mem[0x400816] = b':'
        mem[0x400817] = b'b'
        mem[0x400818] = b'\xca'
        mem[0x400819] = b','
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400814
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400814)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400814)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400814, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400815, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400816, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400817, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400818, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400819, 8)== ord(','))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40081a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_42_symbolic(self):
        ''' Instruction PCMPISTRM_42
            Groups: sse42
            0x4007c6:	pcmpistrm	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007c6] = b'f'
        mem[0x4007c7] = b'\x0f'
        mem[0x4007c8] = b':'
        mem[0x4007c9] = b'b'
        mem[0x4007ca] = b'\xca'
        mem[0x4007cb] = b'\x11'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007c6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007c6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007c6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007c6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ca, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007cb, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007cc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_43_symbolic(self):
        ''' Instruction PCMPISTRM_43
            Groups: sse42
            0x400868:	pcmpistrm	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400868] = b'f'
        mem[0x400869] = b'\x0f'
        mem[0x40086a] = b':'
        mem[0x40086b] = b'b'
        mem[0x40086c] = b'\xca'
        mem[0x40086d] = b'H'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400868
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400868)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400868)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400868, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400869, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40086a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40086b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40086c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40086d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40086e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_44_symbolic(self):
        ''' Instruction PCMPISTRM_44
            Groups: sse42
            0x4008ce:	pcmpistrm	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008ce] = b'f'
        mem[0x4008cf] = b'\x0f'
        mem[0x4008d0] = b':'
        mem[0x4008d1] = b'b'
        mem[0x4008d2] = b'\xca'
        mem[0x4008d3] = b'i'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008ce
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008ce)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008ce)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008ce, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d3, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008d4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_45_symbolic(self):
        ''' Instruction PCMPISTRM_45
            Groups: sse42
            0x400874:	pcmpistrm	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400874] = b'f'
        mem[0x400875] = b'\x0f'
        mem[0x400876] = b':'
        mem[0x400877] = b'b'
        mem[0x400878] = b'\xca'
        mem[0x400879] = b'L'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400874
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400874)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400874)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400874, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400875, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400876, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400877, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400878, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400879, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40087a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_46_symbolic(self):
        ''' Instruction PCMPISTRM_46
            Groups: sse42
            0x40085c:	pcmpistrm	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400860] = b'\xca'
        mem[0x400861] = b'D'
        mem[0x40085c] = b'f'
        mem[0x40085d] = b'\x0f'
        mem[0x40085e] = b':'
        mem[0x40085f] = b'b'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40085c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40085c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40085c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400860, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400861, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x40085c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40085d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40085e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40085f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400862)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_47_symbolic(self):
        ''' Instruction PCMPISTRM_47
            Groups: sse42
            0x4007a8:	pcmpistrm	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007a8] = b'f'
        mem[0x4007a9] = b'\x0f'
        mem[0x4007aa] = b':'
        mem[0x4007ab] = b'b'
        mem[0x4007ac] = b'\xca'
        mem[0x4007ad] = b'\x08'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007a8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007a8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007a8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007a8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007aa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ab, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ac, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ad, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007ae)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_48_symbolic(self):
        ''' Instruction PCMPISTRM_48
            Groups: sse42
            0x40082c:	pcmpistrm	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40082c] = b'f'
        mem[0x40082d] = b'\x0f'
        mem[0x40082e] = b':'
        mem[0x40082f] = b'b'
        mem[0x400830] = b'\xca'
        mem[0x400831] = b'4'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40082c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40082c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40082c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40082c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40082d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40082e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40082f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400830, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400831, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400832)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_49_symbolic(self):
        ''' Instruction PCMPISTRM_49
            Groups: sse42
            0x4008da:	pcmpistrm	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008da] = b'f'
        mem[0x4008db] = b'\x0f'
        mem[0x4008dc] = b':'
        mem[0x4008dd] = b'b'
        mem[0x4008de] = b'\xca'
        mem[0x4008df] = b'm'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008da
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008da)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008da)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008da, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008db, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008dc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008dd, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008de, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008df, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008e0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_5_symbolic(self):
        ''' Instruction PCMPISTRM_5
            Groups: sse42
            0x4007a2:	pcmpistrm	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007a2] = b'f'
        mem[0x4007a3] = b'\x0f'
        mem[0x4007a4] = b':'
        mem[0x4007a5] = b'b'
        mem[0x4007a6] = b'\xca'
        mem[0x4007a7] = b'\x05'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007a2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007a2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007a2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007a2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a7, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007a8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_50_symbolic(self):
        ''' Instruction PCMPISTRM_50
            Groups: sse42
            0x4007e4:	pcmpistrm	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007e4] = b'f'
        mem[0x4007e5] = b'\x0f'
        mem[0x4007e6] = b':'
        mem[0x4007e7] = b'b'
        mem[0x4007e8] = b'\xca'
        mem[0x4007e9] = b'\x1c'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007e4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007e4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007e4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007e4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e9, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007ea)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_51_symbolic(self):
        ''' Instruction PCMPISTRM_51
            Groups: sse42
            0x400880:	pcmpistrm	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400880] = b'f'
        mem[0x400881] = b'\x0f'
        mem[0x400882] = b':'
        mem[0x400883] = b'b'
        mem[0x400884] = b'\xca'
        mem[0x400885] = b'P'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400880
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400880)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400880)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400880, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400881, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400882, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400883, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400884, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400885, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400886)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_52_symbolic(self):
        ''' Instruction PCMPISTRM_52
            Groups: sse42
            0x400886:	pcmpistrm	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400886] = b'f'
        mem[0x400887] = b'\x0f'
        mem[0x400888] = b':'
        mem[0x400889] = b'b'
        mem[0x40088a] = b'\xca'
        mem[0x40088b] = b'Q'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400886
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400886)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400886)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400886, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400887, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400888, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400889, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40088a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40088b, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40088c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_53_symbolic(self):
        ''' Instruction PCMPISTRM_53
            Groups: sse42
            0x4008b6:	pcmpistrm	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008b6] = b'f'
        mem[0x4008b7] = b'\x0f'
        mem[0x4008b8] = b':'
        mem[0x4008b9] = b'b'
        mem[0x4008ba] = b'\xca'
        mem[0x4008bb] = b'a'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008b6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008b6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008b6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008b6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ba, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008bc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_54_symbolic(self):
        ''' Instruction PCMPISTRM_54
            Groups: sse42
            0x4007ba:	pcmpistrm	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007ba] = b'f'
        mem[0x4007bb] = b'\x0f'
        mem[0x4007bc] = b':'
        mem[0x4007bd] = b'b'
        mem[0x4007be] = b'\xca'
        mem[0x4007bf] = b'\r'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007ba
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007ba)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007ba)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007ba, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bd, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007be, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bf, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007c0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_55_symbolic(self):
        ''' Instruction PCMPISTRM_55
            Groups: sse42
            0x40090a:	pcmpistrm	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40090a] = b'f'
        mem[0x40090b] = b'\x0f'
        mem[0x40090c] = b':'
        mem[0x40090d] = b'b'
        mem[0x40090e] = b'\xca'
        mem[0x40090f] = b'}'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40090a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40090a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40090a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40090a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40090b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40090c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40090d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40090e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40090f, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400910)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_56_symbolic(self):
        ''' Instruction PCMPISTRM_56
            Groups: sse42
            0x40079c:	pcmpistrm	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007a0] = b'\xca'
        mem[0x4007a1] = b'\x04'
        mem[0x40079c] = b'f'
        mem[0x40079d] = b'\x0f'
        mem[0x40079e] = b':'
        mem[0x40079f] = b'b'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40079c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40079c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40079c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007a0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a1, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x40079c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40079d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40079e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40079f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007a2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_57_symbolic(self):
        ''' Instruction PCMPISTRM_57
            Groups: sse42
            0x4007ae:	pcmpistrm	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007ae] = b'f'
        mem[0x4007af] = b'\x0f'
        mem[0x4007b0] = b':'
        mem[0x4007b1] = b'b'
        mem[0x4007b2] = b'\xca'
        mem[0x4007b3] = b'\t'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007ae
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007ae)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007ae)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007ae, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007af, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b3, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007b4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_58_symbolic(self):
        ''' Instruction PCMPISTRM_58
            Groups: sse42
            0x400844:	pcmpistrm	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400844] = b'f'
        mem[0x400845] = b'\x0f'
        mem[0x400846] = b':'
        mem[0x400847] = b'b'
        mem[0x400848] = b'\xca'
        mem[0x400849] = b'<'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400844
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400844)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400844)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400844, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400845, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400846, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400847, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400848, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400849, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40084a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_59_symbolic(self):
        ''' Instruction PCMPISTRM_59
            Groups: sse42
            0x4008e6:	pcmpistrm	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008e6] = b'f'
        mem[0x4008e7] = b'\x0f'
        mem[0x4008e8] = b':'
        mem[0x4008e9] = b'b'
        mem[0x4008ea] = b'\xca'
        mem[0x4008eb] = b'q'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008e6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008e6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008e6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ea, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008eb, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008ec)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_6_symbolic(self):
        ''' Instruction PCMPISTRM_6
            Groups: sse42
            0x400808:	pcmpistrm	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400808] = b'f'
        mem[0x400809] = b'\x0f'
        mem[0x40080a] = b':'
        mem[0x40080b] = b'b'
        mem[0x40080c] = b'\xca'
        mem[0x40080d] = b'('
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400808
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400808)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400808)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400808, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400809, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40080a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40080b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40080c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40080d, 8)== ord('('))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40080e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_60_symbolic(self):
        ''' Instruction PCMPISTRM_60
            Groups: sse42
            0x4008d4:	pcmpistrm	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4008d4] = b'f'
        mem[0x4008d5] = b'\x0f'
        mem[0x4008d6] = b':'
        mem[0x4008d7] = b'b'
        mem[0x4008d8] = b'\xca'
        mem[0x4008d9] = b'l'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008d4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008d4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008d4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d9, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008da)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_61_symbolic(self):
        ''' Instruction PCMPISTRM_61
            Groups: sse42
            0x400796:	pcmpistrm	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400796] = b'f'
        mem[0x400797] = b'\x0f'
        mem[0x400798] = b':'
        mem[0x400799] = b'b'
        mem[0x40079a] = b'\xca'
        mem[0x40079b] = b'\x01'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400796
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400796)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400796)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400796, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400797, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400798, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400799, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40079a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40079b, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40079c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_62_symbolic(self):
        ''' Instruction PCMPISTRM_62
            Groups: sse42
            0x40083e:	pcmpistrm	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400840] = b':'
        mem[0x400841] = b'b'
        mem[0x400842] = b'\xca'
        mem[0x400843] = b'9'
        mem[0x40083e] = b'f'
        mem[0x40083f] = b'\x0f'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40083e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40083e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40083e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400840, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400841, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400842, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400843, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x40083e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40083f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400844)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_63_symbolic(self):
        ''' Instruction PCMPISTRM_63
            Groups: sse42
            0x400790:	pcmpistrm	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400790] = b'f'
        mem[0x400791] = b'\x0f'
        mem[0x400792] = b':'
        mem[0x400793] = b'b'
        mem[0x400794] = b'\xca'
        mem[0x400795] = b'\x00'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400790
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400790)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400790)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400790, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400791, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400792, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400793, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400794, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400795, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400796)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_64_symbolic(self):
        ''' Instruction PCMPISTRM_64
            Groups: sse42
            0x4007c0:	pcmpistrm	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007c0] = b'f'
        mem[0x4007c1] = b'\x0f'
        mem[0x4007c2] = b':'
        mem[0x4007c3] = b'b'
        mem[0x4007c4] = b'\xca'
        mem[0x4007c5] = b'\x10'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007c0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007c0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007c0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007c0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c5, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007c6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_7_symbolic(self):
        ''' Instruction PCMPISTRM_7
            Groups: sse42
            0x4007f0:	pcmpistrm	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x4007f0] = b'f'
        mem[0x4007f1] = b'\x0f'
        mem[0x4007f2] = b':'
        mem[0x4007f3] = b'b'
        mem[0x4007f4] = b'\xca'
        mem[0x4007f5] = b' '
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007f0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007f0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007f0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007f0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f5, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007f6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_8_symbolic(self):
        ''' Instruction PCMPISTRM_8
            Groups: sse42
            0x40086e:	pcmpistrm	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x40086e] = b'f'
        mem[0x40086f] = b'\x0f'
        mem[0x400870] = b':'
        mem[0x400871] = b'b'
        mem[0x400872] = b'\xca'
        mem[0x400873] = b'I'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40086e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40086e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40086e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40086e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40086f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400870, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400871, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400872, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400873, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400874)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_9_symbolic(self):
        ''' Instruction PCMPISTRM_9
            Groups: sse42
            0x400862:	pcmpistrm	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem[0x400862] = b'f'
        mem[0x400863] = b'\x0f'
        mem[0x400864] = b':'
        mem[0x400865] = b'b'
        mem[0x400866] = b'\xca'
        mem[0x400867] = b'E'
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400862
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400862)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400862)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400862, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400863, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400864, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400865, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400866, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400867, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400868)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

if __name__ == '__main__':
    unittest.main()

