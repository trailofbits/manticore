
import unittest
import functools
from manticore.core.smtlib import Expression
from manticore.native.cpu.abstractcpu import ConcretizeRegister
from manticore.native.memory import *
from manticore.native.cpu.x86 import AMD64Cpu


def skipIfNotImplemented(f):
    # XXX(yan) the inner function name must start with test_
    @functools.wraps(f)
    def test_inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except NotImplementedError as e:
            raise unittest.SkipTest(str(e))

    return test_inner

def forAllTests(decorator):
    def decorate(cls):
        for attr in cls.__dict__:
            if not attr.startswith('test_'):
                continue
            method = getattr(cls, attr)
            if callable(method):
                setattr(cls, attr, decorator(method))
        return cls

    return decorate

@forAllTests(skipIfNotImplemented)
class CPUTest(unittest.TestCase):
    _multiprocess_can_split_ = True

    class ROOperand(object):
        ''' Mocking class for operand ronly '''
        def __init__(self, size, value):
            self.size = size
            self.value = value
        def read(self):
            return self.value & ((1<<self.size)-1)

    class RWOperand(ROOperand):
        ''' Mocking class for operand rw '''
        def write(self, value):
            self.value = value & ((1<<self.size)-1)
            return self.value


    def test_PCMPESTRI_1(self):
        ''' Instruction PCMPESTRI_1
            Groups: sse42
            0x400bec:	pcmpestri	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bec, 'f\x0f:a\xcad')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bec
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400bec:0x400bf2], [b'f',b'\x0f',b':',b'a',b'\xca',b'd'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197362)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_10(self):
        ''' Instruction PCMPESTRI_10
            Groups: sse42
            0x400b20:	pcmpestri	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b20, 'f\x0f:a\xca ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b20
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b20:0x400b26], [b'f',b'\x0f',b':',b'a',b'\xca',b' '])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197158)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_11(self):
        ''' Instruction PCMPESTRI_11
            Groups: sse42
            0x400b38:	pcmpestri	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b38, 'f\x0f:a\xca(')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b38
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b38:0x400b3e], [b'f',b'\x0f',b':',b'a',b'\xca',b'('])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197182)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_12(self):
        ''' Instruction PCMPESTRI_12
            Groups: sse42
            0x400bfe:	pcmpestri	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bfe, 'f\x0f:a\xcai')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400bfe
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400bfe:0x400c04], [b'f',b'\x0f',b':',b'a',b'\xca',b'i'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197380)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_13(self):
        ''' Instruction PCMPESTRI_13
            Groups: sse42
            0x400b86:	pcmpestri	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b86, 'f\x0f:a\xcaA')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b86
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b86:0x400b8c], [b'f',b'\x0f',b':',b'a',b'\xca',b'A'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197260)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_14(self):
        ''' Instruction PCMPESTRI_14
            Groups: sse42
            0x400ae4:	pcmpestri	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ae4, 'f\x0f:a\xca\x0c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400ae4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400ae4:0x400aea], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x0c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197098)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_15(self):
        ''' Instruction PCMPESTRI_15
            Groups: sse42
            0x400c04:	pcmpestri	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c04, 'f\x0f:a\xcal')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400c04
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400c04:0x400c0a], [b'f',b'\x0f',b':',b'a',b'\xca',b'l'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197386)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_16(self):
        ''' Instruction PCMPESTRI_16
            Groups: sse42
            0x400b6e:	pcmpestri	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b6e, 'f\x0f:a\xca9')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b6e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b6e:0x400b74], [b'f',b'\x0f',b':',b'a',b'\xca',b'9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197236)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_17(self):
        ''' Instruction PCMPESTRI_17
            Groups: sse42
            0x400b2c:	pcmpestri	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b2c, 'f\x0f:a\xca$')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b2c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b2c:0x400b32], [b'f',b'\x0f',b':',b'a',b'\xca',b'$'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197170)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_18(self):
        ''' Instruction PCMPESTRI_18
            Groups: sse42
            0x400af0:	pcmpestri	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400af0, 'f\x0f:a\xca\x10')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400af0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400af0:0x400af6], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x10'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197110)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_19(self):
        ''' Instruction PCMPESTRI_19
            Groups: sse42
            0x400be0:	pcmpestri	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400be0, 'f\x0f:a\xca`')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400be0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400be0:0x400be6], [b'f',b'\x0f',b':',b'a',b'\xca',b'`'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197350)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_2(self):
        ''' Instruction PCMPESTRI_2
            Groups: sse42
            0x400b4a:	pcmpestri	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b4a, 'f\x0f:a\xca-')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b4a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b4a:0x400b50], [b'f',b'\x0f',b':',b'a',b'\xca',b'-'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197200)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_20(self):
        ''' Instruction PCMPESTRI_20
            Groups: sse42
            0x400c0a:	pcmpestri	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c0a, 'f\x0f:a\xcam')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400c0a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400c0a:0x400c10], [b'f',b'\x0f',b':',b'a',b'\xca',b'm'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197392)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_21(self):
        ''' Instruction PCMPESTRI_21
            Groups: sse42
            0x400b14:	pcmpestri	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b14, 'f\x0f:a\xca\x1c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b14
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b14:0x400b1a], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x1c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197146)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_22(self):
        ''' Instruction PCMPESTRI_22
            Groups: sse42
            0x400bb6:	pcmpestri	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bb6, 'f\x0f:a\xcaQ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bb6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400bb6:0x400bbc], [b'f',b'\x0f',b':',b'a',b'\xca',b'Q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197308)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_23(self):
        ''' Instruction PCMPESTRI_23
            Groups: sse42
            0x400b08:	pcmpestri	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b08, 'f\x0f:a\xca\x18')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b08
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b08:0x400b0e], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x18'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197134)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_24(self):
        ''' Instruction PCMPESTRI_24
            Groups: sse42
            0x400c1c:	pcmpestri	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c1c, 'f\x0f:a\xcat')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c1c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c1c:0x400c22], [b'f',b'\x0f',b':',b'a',b'\xca',b't'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197410)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_25(self):
        ''' Instruction PCMPESTRI_25
            Groups: sse42
            0x400bda:	pcmpestri	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bda, 'f\x0f:a\xca]')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bda
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400bda:0x400be0], [b'f',b'\x0f',b':',b'a',b'\xca',b']'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197344)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_26(self):
        ''' Instruction PCMPESTRI_26
            Groups: sse42
            0x400c10:	pcmpestri	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c10, 'f\x0f:a\xcap')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400c10
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400c10:0x400c16], [b'f',b'\x0f',b':',b'a',b'\xca',b'p'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197398)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_27(self):
        ''' Instruction PCMPESTRI_27
            Groups: sse42
            0x400c34:	pcmpestri	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c34, 'f\x0f:a\xca|')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c34
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400c34:0x400c3a], [b'f',b'\x0f',b':',b'a',b'\xca',b'|'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197434)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_28(self):
        ''' Instruction PCMPESTRI_28
            Groups: sse42
            0x400c2e:	pcmpestri	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c2e, 'f\x0f:a\xcay')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c2e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400c2e:0x400c34], [b'f',b'\x0f',b':',b'a',b'\xca',b'y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197428)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_29(self):
        ''' Instruction PCMPESTRI_29
            Groups: sse42
            0x400b80:	pcmpestri	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b80, 'f\x0f:a\xca@')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b80
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b80:0x400b86], [b'f',b'\x0f',b':',b'a',b'\xca',b'@'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197254)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_3(self):
        ''' Instruction PCMPESTRI_3
            Groups: sse42
            0x400ac6:	pcmpestri	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ac6, 'f\x0f:a\xca\x01')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400ac6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400ac6:0x400acc], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x01'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197068)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_30(self):
        ''' Instruction PCMPESTRI_30
            Groups: sse42
            0x400ba4:	pcmpestri	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ba4, 'f\x0f:a\xcaL')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400ba4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400ba4:0x400baa], [b'f',b'\x0f',b':',b'a',b'\xca',b'L'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197290)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_31(self):
        ''' Instruction PCMPESTRI_31
            Groups: sse42
            0x400ad8:	pcmpestri	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ad8, 'f\x0f:a\xca\x08')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400ad8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400ad8:0x400ade], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x08'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197086)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_32(self):
        ''' Instruction PCMPESTRI_32
            Groups: sse42
            0x400b50:	pcmpestri	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b50, 'f\x0f:a\xca0')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b50
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b50:0x400b56], [b'f',b'\x0f',b':',b'a',b'\xca',b'0'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197206)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_33(self):
        ''' Instruction PCMPESTRI_33
            Groups: sse42
            0x400b44:	pcmpestri	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b44, 'f\x0f:a\xca,')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400b44
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400b44:0x400b4a], [b'f',b'\x0f',b':',b'a',b'\xca',b','])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197194)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_34(self):
        ''' Instruction PCMPESTRI_34
            Groups: sse42
            0x400bbc:	pcmpestri	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bbc, 'f\x0f:a\xcaT')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bbc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400bbc:0x400bc2], [b'f',b'\x0f',b':',b'a',b'\xca',b'T'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197314)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_35(self):
        ''' Instruction PCMPESTRI_35
            Groups: sse42
            0x400ad2:	pcmpestri	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ad2, 'f\x0f:a\xca\x05')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400ad2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400ad2:0x400ad8], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x05'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197080)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_36(self):
        ''' Instruction PCMPESTRI_36
            Groups: sse42
            0x400b26:	pcmpestri	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b26, 'f\x0f:a\xca!')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b26
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b26:0x400b2c], [b'f',b'\x0f',b':',b'a',b'\xca',b'!'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197164)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_37(self):
        ''' Instruction PCMPESTRI_37
            Groups: sse42
            0x400bc8:	pcmpestri	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bc8, 'f\x0f:a\xcaX')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bc8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400bc8:0x400bce], [b'f',b'\x0f',b':',b'a',b'\xca',b'X'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197326)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_38(self):
        ''' Instruction PCMPESTRI_38
            Groups: sse42
            0x400b98:	pcmpestri	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b98, 'f\x0f:a\xcaH')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b98
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b98:0x400b9e], [b'f',b'\x0f',b':',b'a',b'\xca',b'H'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197278)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_39(self):
        ''' Instruction PCMPESTRI_39
            Groups: sse42
            0x400b02:	pcmpestri	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b02, 'f\x0f:a\xca\x15')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b02
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b02:0x400b08], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x15'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197128)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_4(self):
        ''' Instruction PCMPESTRI_4
            Groups: sse42
            0x400c22:	pcmpestri	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c22, 'f\x0f:a\xcau')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c22
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c22:0x400c28], [b'f',b'\x0f',b':',b'a',b'\xca',b'u'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197416)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_40(self):
        ''' Instruction PCMPESTRI_40
            Groups: sse42
            0x400c3a:	pcmpestri	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c3a, 'f\x0f:a\xca}')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c3a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c3a:0x400c40], [b'f',b'\x0f',b':',b'a',b'\xca',b'}'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197440)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_41(self):
        ''' Instruction PCMPESTRI_41
            Groups: sse42
            0x400af6:	pcmpestri	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400af6, 'f\x0f:a\xca\x11')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400af6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400af6:0x400afc], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x11'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197116)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_42(self):
        ''' Instruction PCMPESTRI_42
            Groups: sse42
            0x400c28:	pcmpestri	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c28, 'f\x0f:a\xcax')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c28
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c28:0x400c2e], [b'f',b'\x0f',b':',b'a',b'\xca',b'x'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197422)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_43(self):
        ''' Instruction PCMPESTRI_43
            Groups: sse42
            0x400b62:	pcmpestri	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b62, 'f\x0f:a\xca5')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b62
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b62:0x400b68], [b'f',b'\x0f',b':',b'a',b'\xca',b'5'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197224)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_44(self):
        ''' Instruction PCMPESTRI_44
            Groups: sse42
            0x400baa:	pcmpestri	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400baa, 'f\x0f:a\xcaM')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400baa
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400baa:0x400bb0], [b'f',b'\x0f',b':',b'a',b'\xca',b'M'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197296)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_45(self):
        ''' Instruction PCMPESTRI_45
            Groups: sse42
            0x400b68:	pcmpestri	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b68, 'f\x0f:a\xca8')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b68
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b68:0x400b6e], [b'f',b'\x0f',b':',b'a',b'\xca',b'8'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197230)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_46(self):
        ''' Instruction PCMPESTRI_46
            Groups: sse42
            0x400c16:	pcmpestri	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c16, 'f\x0f:a\xcaq')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400c16
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400c16:0x400c1c], [b'f',b'\x0f',b':',b'a',b'\xca',b'q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197404)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_47(self):
        ''' Instruction PCMPESTRI_47
            Groups: sse42
            0x400acc:	pcmpestri	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400acc, 'f\x0f:a\xca\x04')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400acc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400acc:0x400ad2], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x04'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197074)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_48(self):
        ''' Instruction PCMPESTRI_48
            Groups: sse42
            0x400b92:	pcmpestri	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b92, 'f\x0f:a\xcaE')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b92
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b92:0x400b98], [b'f',b'\x0f',b':',b'a',b'\xca',b'E'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197272)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_49(self):
        ''' Instruction PCMPESTRI_49
            Groups: sse42
            0x400afc:	pcmpestri	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400afc, 'f\x0f:a\xca\x14')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400afc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400afc:0x400b02], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x14'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197122)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_5(self):
        ''' Instruction PCMPESTRI_5
            Groups: sse42
            0x400be6:	pcmpestri	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400be6, 'f\x0f:a\xcaa')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400be6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400be6:0x400bec], [b'f',b'\x0f',b':',b'a',b'\xca',b'a'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197356)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_50(self):
        ''' Instruction PCMPESTRI_50
            Groups: sse42
            0x400b9e:	pcmpestri	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b9e, 'f\x0f:a\xcaI')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400b9e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400b9e:0x400ba4], [b'f',b'\x0f',b':',b'a',b'\xca',b'I'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197284)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_51(self):
        ''' Instruction PCMPESTRI_51
            Groups: sse42
            0x400ac0:	pcmpestri	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ac0, 'f\x0f:a\xca\x00')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400ac0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400ac0:0x400ac6], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x00'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197062)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_52(self):
        ''' Instruction PCMPESTRI_52
            Groups: sse42
            0x400b74:	pcmpestri	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b74, 'f\x0f:a\xca<')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b74
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b74:0x400b7a], [b'f',b'\x0f',b':',b'a',b'\xca',b'<'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197242)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_53(self):
        ''' Instruction PCMPESTRI_53
            Groups: sse42
            0x400bce:	pcmpestri	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bce, 'f\x0f:a\xcaY')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bce
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400bce:0x400bd4], [b'f',b'\x0f',b':',b'a',b'\xca',b'Y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197332)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 6)

    def test_PCMPESTRI_54(self):
        ''' Instruction PCMPESTRI_54
            Groups: sse42
            0x400b56:	pcmpestri	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b56, 'f\x0f:a\xca1')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b56
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b56:0x400b5c], [b'f',b'\x0f',b':',b'a',b'\xca',b'1'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197212)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_55(self):
        ''' Instruction PCMPESTRI_55
            Groups: sse42
            0x400b7a:	pcmpestri	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b7a, 'f\x0f:a\xca=')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b7a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b7a:0x400b80], [b'f',b'\x0f',b':',b'a',b'\xca',b'='])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197248)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_56(self):
        ''' Instruction PCMPESTRI_56
            Groups: sse42
            0x400b5c:	pcmpestri	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b5c, 'f\x0f:a\xca4')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b5c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b5c:0x400b62], [b'f',b'\x0f',b':',b'a',b'\xca',b'4'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197218)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_57(self):
        ''' Instruction PCMPESTRI_57
            Groups: sse42
            0x400ade:	pcmpestri	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ade, 'f\x0f:a\xca\t')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400ade
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400ade:0x400ae4], [b'f',b'\x0f',b':',b'a',b'\xca',b'\t'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197092)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_58(self):
        ''' Instruction PCMPESTRI_58
            Groups: sse42
            0x400b3e:	pcmpestri	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b3e, 'f\x0f:a\xca)')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400b3e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x7
        cpu.execute()
    
        self.assertEqual(mem[0x400b3e:0x400b44], [b'f',b'\x0f',b':',b'a',b'\xca',b')'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197188)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_59(self):
        ''' Instruction PCMPESTRI_59
            Groups: sse42
            0x400bb0:	pcmpestri	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bb0, 'f\x0f:a\xcaP')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bb0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400bb0:0x400bb6], [b'f',b'\x0f',b':',b'a',b'\xca',b'P'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197302)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_6(self):
        ''' Instruction PCMPESTRI_6
            Groups: sse42
            0x400b0e:	pcmpestri	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b0e, 'f\x0f:a\xca\x19')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b0e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b0e:0x400b14], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x19'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197140)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_60(self):
        ''' Instruction PCMPESTRI_60
            Groups: sse42
            0x400b1a:	pcmpestri	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b1a, 'f\x0f:a\xca\x1d')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400b1a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x0
        cpu.execute()
    
        self.assertEqual(mem[0x400b1a:0x400b20], [b'f',b'\x0f',b':',b'a',b'\xca',b'\x1d'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197152)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 0)

    def test_PCMPESTRI_61(self):
        ''' Instruction PCMPESTRI_61
            Groups: sse42
            0x400bf2:	pcmpestri	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bf2, 'f\x0f:a\xcae')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bf2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400bf2:0x400bf8], [b'f',b'\x0f',b':',b'a',b'\xca',b'e'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197368)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_62(self):
        ''' Instruction PCMPESTRI_62
            Groups: sse42
            0x400bd4:	pcmpestri	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bd4, 'f\x0f:a\xca\\')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bd4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x6
        cpu.execute()
    
        self.assertEqual(mem[0x400bd4:0x400bda], [b'f',b'\x0f',b':',b'a',b'\xca',b'\\'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197338)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_63(self):
        ''' Instruction PCMPESTRI_63
            Groups: sse42
            0x400bf8:	pcmpestri	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bf8, 'f\x0f:a\xcah')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400bf8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400bf8:0x400bfe], [b'f',b'\x0f',b':',b'a',b'\xca',b'h'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197374)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 15)

    def test_PCMPESTRI_64(self):
        ''' Instruction PCMPESTRI_64
            Groups: sse42
            0x400bc2:	pcmpestri	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bc2, 'f\x0f:a\xcaU')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400bc2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0xf
        cpu.execute()
    
        self.assertEqual(mem[0x400bc2:0x400bc8], [b'f',b'\x0f',b':',b'a',b'\xca',b'U'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197320)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 7)

    def test_PCMPESTRI_7(self):
        ''' Instruction PCMPESTRI_7
            Groups: sse42
            0x400b8c:	pcmpestri	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b8c, 'f\x0f:a\xcaD')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b8c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x8
        cpu.execute()
    
        self.assertEqual(mem[0x400b8c:0x400b92], [b'f',b'\x0f',b':',b'a',b'\xca',b'D'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197266)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 16)

    def test_PCMPESTRI_8(self):
        ''' Instruction PCMPESTRI_8
            Groups: sse42
            0x400aea:	pcmpestri	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400aea, 'f\x0f:a\xca\r')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400aea
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400aea:0x400af0], [b'f',b'\x0f',b':',b'a',b'\xca',b'\r'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197104)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRI_9(self):
        ''' Instruction PCMPESTRI_9
            Groups: sse42
            0x400b32:	pcmpestri	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b32, 'f\x0f:a\xca%')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400b32
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.ECX = 0x10
        cpu.execute()
    
        self.assertEqual(mem[0x400b32:0x400b38], [b'f',b'\x0f',b':',b'a',b'\xca',b'%'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4197176)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)
        self.assertEqual(cpu.ECX, 8)

    def test_PCMPESTRM_1(self):
        ''' Instruction PCMPESTRM_1
            Groups: sse42
            0x4009d0:	pcmpestrm	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009d0, 'f\x0f:`\xca8')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009d0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009d0:0x4009d6], [b'f',b'\x0f',b':',b'`',b'\xca',b'8'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196822)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_10(self):
        ''' Instruction PCMPESTRM_10
            Groups: sse42
            0x4009ac:	pcmpestrm	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009ac, 'f\x0f:`\xca,')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x4009ac
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009ac:0x4009b2], [b'f',b'\x0f',b':',b'`',b'\xca',b','])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196786)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_11(self):
        ''' Instruction PCMPESTRM_11
            Groups: sse42
            0x400a24:	pcmpestrm	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a24, 'f\x0f:`\xcaT')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a24
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a24:0x400a2a], [b'f',b'\x0f',b':',b'`',b'\xca',b'T'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196906)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_12(self):
        ''' Instruction PCMPESTRM_12
            Groups: sse42
            0x4009f4:	pcmpestrm	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009f4, 'f\x0f:`\xcaD')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009f4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009f4:0x4009fa], [b'f',b'\x0f',b':',b'`',b'\xca',b'D'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196858)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_13(self):
        ''' Instruction PCMPESTRM_13
            Groups: sse42
            0x400a1e:	pcmpestrm	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a1e, 'f\x0f:`\xcaQ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a1e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a1e:0x400a24], [b'f',b'\x0f',b':',b'`',b'\xca',b'Q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196900)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_14(self):
        ''' Instruction PCMPESTRM_14
            Groups: sse42
            0x400a7e:	pcmpestrm	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a7e, 'f\x0f:`\xcaq')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a7e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a7e:0x400a84], [b'f',b'\x0f',b':',b'`',b'\xca',b'q'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196996)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_15(self):
        ''' Instruction PCMPESTRM_15
            Groups: sse42
            0x400994:	pcmpestrm	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400994, 'f\x0f:`\xca$')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400994
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400994:0x40099a], [b'f',b'\x0f',b':',b'`',b'\xca',b'$'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196762)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_16(self):
        ''' Instruction PCMPESTRM_16
            Groups: sse42
            0x400934:	pcmpestrm	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400934, 'f\x0f:`\xca\x04')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400934
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400934:0x40093a], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x04'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196666)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_17(self):
        ''' Instruction PCMPESTRM_17
            Groups: sse42
            0x400a9c:	pcmpestrm	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a9c, 'f\x0f:`\xca|')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a9c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a9c:0x400aa2], [b'f',b'\x0f',b':',b'`',b'\xca',b'|'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197026)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_18(self):
        ''' Instruction PCMPESTRM_18
            Groups: sse42
            0x40092e:	pcmpestrm	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40092e, 'f\x0f:`\xca\x01')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40092e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40092e:0x400934], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x01'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196660)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_19(self):
        ''' Instruction PCMPESTRM_19
            Groups: sse42
            0x4009a6:	pcmpestrm	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009a6, 'f\x0f:`\xca)')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x4009a6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009a6:0x4009ac], [b'f',b'\x0f',b':',b'`',b'\xca',b')'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196780)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_2(self):
        ''' Instruction PCMPESTRM_2
            Groups: sse42
            0x400a54:	pcmpestrm	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a54, 'f\x0f:`\xcad')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a54
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a54:0x400a5a], [b'f',b'\x0f',b':',b'`',b'\xca',b'd'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196954)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_20(self):
        ''' Instruction PCMPESTRM_20
            Groups: sse42
            0x400a66:	pcmpestrm	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a66, 'f\x0f:`\xcai')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a66
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a66:0x400a6c], [b'f',b'\x0f',b':',b'`',b'\xca',b'i'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196972)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_21(self):
        ''' Instruction PCMPESTRM_21
            Groups: sse42
            0x400958:	pcmpestrm	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400958, 'f\x0f:`\xca\x10')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400958
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400958:0x40095e], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x10'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196702)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_22(self):
        ''' Instruction PCMPESTRM_22
            Groups: sse42
            0x40095e:	pcmpestrm	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40095e, 'f\x0f:`\xca\x11')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40095e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40095e:0x400964], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x11'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196708)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_23(self):
        ''' Instruction PCMPESTRM_23
            Groups: sse42
            0x400976:	pcmpestrm	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400976, 'f\x0f:`\xca\x19')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400976
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400976:0x40097c], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x19'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196732)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_24(self):
        ''' Instruction PCMPESTRM_24
            Groups: sse42
            0x400a8a:	pcmpestrm	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a8a, 'f\x0f:`\xcau')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a8a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a8a:0x400a90], [b'f',b'\x0f',b':',b'`',b'\xca',b'u'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197008)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_25(self):
        ''' Instruction PCMPESTRM_25
            Groups: sse42
            0x400a12:	pcmpestrm	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a12, 'f\x0f:`\xcaM')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a12
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a12:0x400a18], [b'f',b'\x0f',b':',b'`',b'\xca',b'M'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196888)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_26(self):
        ''' Instruction PCMPESTRM_26
            Groups: sse42
            0x40093a:	pcmpestrm	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40093a, 'f\x0f:`\xca\x05')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40093a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40093a:0x400940], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x05'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196672)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_27(self):
        ''' Instruction PCMPESTRM_27
            Groups: sse42
            0x400a30:	pcmpestrm	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a30, 'f\x0f:`\xcaX')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a30
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a30:0x400a36], [b'f',b'\x0f',b':',b'`',b'\xca',b'X'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196918)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_28(self):
        ''' Instruction PCMPESTRM_28
            Groups: sse42
            0x4009ca:	pcmpestrm	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009ca, 'f\x0f:`\xca5')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009ca
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009ca:0x4009d0], [b'f',b'\x0f',b':',b'`',b'\xca',b'5'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196816)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_29(self):
        ''' Instruction PCMPESTRM_29
            Groups: sse42
            0x400a3c:	pcmpestrm	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a3c, 'f\x0f:`\xca\\')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a3c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a3c:0x400a42], [b'f',b'\x0f',b':',b'`',b'\xca',b'\\'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196930)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_3(self):
        ''' Instruction PCMPESTRM_3
            Groups: sse42
            0x400a18:	pcmpestrm	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a18, 'f\x0f:`\xcaP')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a18
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a18:0x400a1e], [b'f',b'\x0f',b':',b'`',b'\xca',b'P'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196894)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_30(self):
        ''' Instruction PCMPESTRM_30
            Groups: sse42
            0x40098e:	pcmpestrm	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40098e, 'f\x0f:`\xca!')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40098e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40098e:0x400994], [b'f',b'\x0f',b':',b'`',b'\xca',b'!'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196756)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_31(self):
        ''' Instruction PCMPESTRM_31
            Groups: sse42
            0x400a96:	pcmpestrm	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a96, 'f\x0f:`\xcay')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a96
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a96:0x400a9c], [b'f',b'\x0f',b':',b'`',b'\xca',b'y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197020)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_32(self):
        ''' Instruction PCMPESTRM_32
            Groups: sse42
            0x400a90:	pcmpestrm	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a90, 'f\x0f:`\xcax')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a90
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a90:0x400a96], [b'f',b'\x0f',b':',b'`',b'\xca',b'x'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197014)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_33(self):
        ''' Instruction PCMPESTRM_33
            Groups: sse42
            0x400a06:	pcmpestrm	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a06, 'f\x0f:`\xcaI')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a06
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a06:0x400a0c], [b'f',b'\x0f',b':',b'`',b'\xca',b'I'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196876)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_34(self):
        ''' Instruction PCMPESTRM_34
            Groups: sse42
            0x400928:	pcmpestrm	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400928, 'f\x0f:`\xca\x00')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400928
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400928:0x40092e], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x00'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196654)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_35(self):
        ''' Instruction PCMPESTRM_35
            Groups: sse42
            0x400a84:	pcmpestrm	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a84, 'f\x0f:`\xcat')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a84
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a84:0x400a8a], [b'f',b'\x0f',b':',b'`',b'\xca',b't'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197002)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_36(self):
        ''' Instruction PCMPESTRM_36
            Groups: sse42
            0x400a72:	pcmpestrm	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a72, 'f\x0f:`\xcam')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a72
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a72:0x400a78], [b'f',b'\x0f',b':',b'`',b'\xca',b'm'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196984)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_37(self):
        ''' Instruction PCMPESTRM_37
            Groups: sse42
            0x400946:	pcmpestrm	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400946, 'f\x0f:`\xca\t')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400946
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400946:0x40094c], [b'f',b'\x0f',b':',b'`',b'\xca',b'\t'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196684)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_38(self):
        ''' Instruction PCMPESTRM_38
            Groups: sse42
            0x400940:	pcmpestrm	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400940, 'f\x0f:`\xca\x08')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400940
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400940:0x400946], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x08'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196678)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_39(self):
        ''' Instruction PCMPESTRM_39
            Groups: sse42
            0x400aa2:	pcmpestrm	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400aa2, 'f\x0f:`\xca}')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400aa2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400aa2:0x400aa8], [b'f',b'\x0f',b':',b'`',b'\xca',b'}'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4197032)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_4(self):
        ''' Instruction PCMPESTRM_4
            Groups: sse42
            0x40097c:	pcmpestrm	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40097c, 'f\x0f:`\xca\x1c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40097c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40097c:0x400982], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x1c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196738)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_40(self):
        ''' Instruction PCMPESTRM_40
            Groups: sse42
            0x400a48:	pcmpestrm	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a48, 'f\x0f:`\xca`')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a48
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a48:0x400a4e], [b'f',b'\x0f',b':',b'`',b'\xca',b'`'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196942)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_41(self):
        ''' Instruction PCMPESTRM_41
            Groups: sse42
            0x400952:	pcmpestrm	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400952, 'f\x0f:`\xca\r')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400952
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400952:0x400958], [b'f',b'\x0f',b':',b'`',b'\xca',b'\r'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196696)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_42(self):
        ''' Instruction PCMPESTRM_42
            Groups: sse42
            0x40094c:	pcmpestrm	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40094c, 'f\x0f:`\xca\x0c')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x40094c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40094c:0x400952], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x0c'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196690)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_43(self):
        ''' Instruction PCMPESTRM_43
            Groups: sse42
            0x400a0c:	pcmpestrm	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a0c, 'f\x0f:`\xcaL')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a0c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a0c:0x400a12], [b'f',b'\x0f',b':',b'`',b'\xca',b'L'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196882)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_44(self):
        ''' Instruction PCMPESTRM_44
            Groups: sse42
            0x400964:	pcmpestrm	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400964, 'f\x0f:`\xca\x14')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400964
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400964:0x40096a], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x14'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196714)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_45(self):
        ''' Instruction PCMPESTRM_45
            Groups: sse42
            0x400a36:	pcmpestrm	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a36, 'f\x0f:`\xcaY')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a36
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a36:0x400a3c], [b'f',b'\x0f',b':',b'`',b'\xca',b'Y'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196924)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_46(self):
        ''' Instruction PCMPESTRM_46
            Groups: sse42
            0x40099a:	pcmpestrm	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40099a, 'f\x0f:`\xca%')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x40099a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40099a:0x4009a0], [b'f',b'\x0f',b':',b'`',b'\xca',b'%'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196768)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_47(self):
        ''' Instruction PCMPESTRM_47
            Groups: sse42
            0x400988:	pcmpestrm	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400988, 'f\x0f:`\xca ')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400988
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400988:0x40098e], [b'f',b'\x0f',b':',b'`',b'\xca',b' '])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196750)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_48(self):
        ''' Instruction PCMPESTRM_48
            Groups: sse42
            0x400a5a:	pcmpestrm	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a5a, 'f\x0f:`\xcae')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a5a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a5a:0x400a60], [b'f',b'\x0f',b':',b'`',b'\xca',b'e'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196960)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_49(self):
        ''' Instruction PCMPESTRM_49
            Groups: sse42
            0x40096a:	pcmpestrm	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40096a, 'f\x0f:`\xca\x15')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x40096a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x40096a:0x400970], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x15'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196720)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_5(self):
        ''' Instruction PCMPESTRM_5
            Groups: sse42
            0x4009b2:	pcmpestrm	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009b2, 'f\x0f:`\xca-')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009b2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009b2:0x4009b8], [b'f',b'\x0f',b':',b'`',b'\xca',b'-'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196792)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_50(self):
        ''' Instruction PCMPESTRM_50
            Groups: sse42
            0x400a60:	pcmpestrm	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a60, 'f\x0f:`\xcah')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a60
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a60:0x400a66], [b'f',b'\x0f',b':',b'`',b'\xca',b'h'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196966)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_51(self):
        ''' Instruction PCMPESTRM_51
            Groups: sse42
            0x4009be:	pcmpestrm	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009be, 'f\x0f:`\xca1')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009be
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009be:0x4009c4], [b'f',b'\x0f',b':',b'`',b'\xca',b'1'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196804)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_52(self):
        ''' Instruction PCMPESTRM_52
            Groups: sse42
            0x4009e2:	pcmpestrm	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009e2, 'f\x0f:`\xca=')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009e2
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009e2:0x4009e8], [b'f',b'\x0f',b':',b'`',b'\xca',b'='])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196840)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_53(self):
        ''' Instruction PCMPESTRM_53
            Groups: sse42
            0x4009d6:	pcmpestrm	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009d6, 'f\x0f:`\xca9')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009d6
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009d6:0x4009dc], [b'f',b'\x0f',b':',b'`',b'\xca',b'9'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196828)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_54(self):
        ''' Instruction PCMPESTRM_54
            Groups: sse42
            0x400a6c:	pcmpestrm	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a6c, 'f\x0f:`\xcal')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = False
        cpu.RIP = 0x400a6c
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a6c:0x400a72], [b'f',b'\x0f',b':',b'`',b'\xca',b'l'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196978)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_55(self):
        ''' Instruction PCMPESTRM_55
            Groups: sse42
            0x4009c4:	pcmpestrm	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009c4, 'f\x0f:`\xca4')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009c4
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009c4:0x4009ca], [b'f',b'\x0f',b':',b'`',b'\xca',b'4'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196810)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_56(self):
        ''' Instruction PCMPESTRM_56
            Groups: sse42
            0x400a00:	pcmpestrm	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a00, 'f\x0f:`\xcaH')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a00
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a00:0x400a06], [b'f',b'\x0f',b':',b'`',b'\xca',b'H'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196870)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_57(self):
        ''' Instruction PCMPESTRM_57
            Groups: sse42
            0x4009e8:	pcmpestrm	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009e8, 'f\x0f:`\xca@')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009e8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009e8:0x4009ee], [b'f',b'\x0f',b':',b'`',b'\xca',b'@'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196846)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_58(self):
        ''' Instruction PCMPESTRM_58
            Groups: sse42
            0x4009b8:	pcmpestrm	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009b8, 'f\x0f:`\xca0')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009b8
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009b8:0x4009be], [b'f',b'\x0f',b':',b'`',b'\xca',b'0'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196798)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_59(self):
        ''' Instruction PCMPESTRM_59
            Groups: sse42
            0x4009ee:	pcmpestrm	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009ee, 'f\x0f:`\xcaA')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009ee
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009ee:0x4009f4], [b'f',b'\x0f',b':',b'`',b'\xca',b'A'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196852)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_6(self):
        ''' Instruction PCMPESTRM_6
            Groups: sse42
            0x4009a0:	pcmpestrm	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009a0, 'f\x0f:`\xca(')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009a0
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009a0:0x4009a6], [b'f',b'\x0f',b':',b'`',b'\xca',b'('])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196774)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_60(self):
        ''' Instruction PCMPESTRM_60
            Groups: sse42
            0x400970:	pcmpestrm	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400970, 'f\x0f:`\xca\x18')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400970
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400970:0x400976], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x18'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196726)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_61(self):
        ''' Instruction PCMPESTRM_61
            Groups: sse42
            0x400a78:	pcmpestrm	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a78, 'f\x0f:`\xcap')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a78
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a78:0x400a7e], [b'f',b'\x0f',b':',b'`',b'\xca',b'p'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196990)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_62(self):
        ''' Instruction PCMPESTRM_62
            Groups: sse42
            0x400a2a:	pcmpestrm	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a2a, 'f\x0f:`\xcaU')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a2a
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a2a:0x400a30], [b'f',b'\x0f',b':',b'`',b'\xca',b'U'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196912)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_63(self):
        ''' Instruction PCMPESTRM_63
            Groups: sse42
            0x400a42:	pcmpestrm	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a42, 'f\x0f:`\xca]')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400a42
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a42:0x400a48], [b'f',b'\x0f',b':',b'`',b'\xca',b']'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196936)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_64(self):
        ''' Instruction PCMPESTRM_64
            Groups: sse42
            0x400a4e:	pcmpestrm	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a4e, 'f\x0f:`\xcaa')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x400a4e
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400a4e:0x400a54], [b'f',b'\x0f',b':',b'`',b'\xca',b'a'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196948)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_7(self):
        ''' Instruction PCMPESTRM_7
            Groups: sse42
            0x4009dc:	pcmpestrm	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009dc, 'f\x0f:`\xca<')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x4009dc
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009dc:0x4009e2], [b'f',b'\x0f',b':',b'`',b'\xca',b'<'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196834)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_8(self):
        ''' Instruction PCMPESTRM_8
            Groups: sse42
            0x4009fa:	pcmpestrm	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009fa, 'f\x0f:`\xcaE')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.OF = False
        cpu.RIP = 0x4009fa
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4009fa:0x400a00], [b'f',b'\x0f',b':',b'`',b'\xca',b'E'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.RIP, 4196864)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPESTRM_9(self):
        ''' Instruction PCMPESTRM_9
            Groups: sse42
            0x400982:	pcmpestrm	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400982, 'f\x0f:`\xca\x1d')
        cpu.AF = False
        cpu.ZF = True
        cpu.CF = True
        cpu.OF = True
        cpu.RIP = 0x400982
        cpu.XMM2 = 0x363534333231
        cpu.EAX = 0x6
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.EDX = 0x7
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x400982:0x400988], [b'f',b'\x0f',b':',b'`',b'\xca',b'\x1d'])
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.RIP, 4196744)
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.EAX, 6)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.EDX, 7)
        self.assertEqual(cpu.SF, True)

    def test_PCMPISTRI_1(self):
        ''' Instruction PCMPISTRI_1
            Groups: sse42
            0x400746:	pcmpistri	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400746, 'f\x0f:c\xcam')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = True
        cpu.RIP = 0x400746
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400746:0x40074c], [b'f',b'\x0f',b':',b'c',b'\xca',b'm'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196172)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_10(self):
        ''' Instruction PCMPISTRI_10
            Groups: sse42
            0x400650:	pcmpistri	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400650, 'f\x0f:c\xca\x1c')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400650
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400650:0x400656], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x1c'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195926)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_11(self):
        ''' Instruction PCMPISTRI_11
            Groups: sse42
            0x400668:	pcmpistri	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400668, 'f\x0f:c\xca$')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400668
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400668:0x40066e], [b'f',b'\x0f',b':',b'c',b'\xca',b'$'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195950)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_12(self):
        ''' Instruction PCMPISTRI_12
            Groups: sse42
            0x400698:	pcmpistri	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400698, 'f\x0f:c\xca4')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400698
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400698:0x40069e], [b'f',b'\x0f',b':',b'c',b'\xca',b'4'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195998)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_13(self):
        ''' Instruction PCMPISTRI_13
            Groups: sse42
            0x4006c8:	pcmpistri	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006c8, 'f\x0f:c\xcaD')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006c8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006c8:0x4006ce], [b'f',b'\x0f',b':',b'c',b'\xca',b'D'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196046)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_14(self):
        ''' Instruction PCMPISTRI_14
            Groups: sse42
            0x4006bc:	pcmpistri	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006bc, 'f\x0f:c\xca@')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x4006bc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006bc:0x4006c2], [b'f',b'\x0f',b':',b'c',b'\xca',b'@'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196034)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_15(self):
        ''' Instruction PCMPISTRI_15
            Groups: sse42
            0x40068c:	pcmpistri	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40068c, 'f\x0f:c\xca0')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40068c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40068c:0x400692], [b'f',b'\x0f',b':',b'c',b'\xca',b'0'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195986)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_16(self):
        ''' Instruction PCMPISTRI_16
            Groups: sse42
            0x40062c:	pcmpistri	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40062c, 'f\x0f:c\xca\x10')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40062c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40062c:0x400632], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x10'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195890)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_17(self):
        ''' Instruction PCMPISTRI_17
            Groups: sse42
            0x400764:	pcmpistri	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400764, 'f\x0f:c\xcax')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400764
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400764:0x40076a], [b'f',b'\x0f',b':',b'c',b'\xca',b'x'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196202)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_18(self):
        ''' Instruction PCMPISTRI_18
            Groups: sse42
            0x4005fc:	pcmpistri	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4005fc, 'f\x0f:c\xca\x00')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x82
        cpu.CF = True
        cpu.RIP = 0x4005fc
        cpu.SF = True
        cpu.execute()
    
        self.assertEqual(mem[0x4005fc:0x400602], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x00'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195842)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_19(self):
        ''' Instruction PCMPISTRI_19
            Groups: sse42
            0x4006ce:	pcmpistri	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006ce, 'f\x0f:c\xcaE')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x4006ce
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006ce:0x4006d4], [b'f',b'\x0f',b':',b'c',b'\xca',b'E'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196052)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_2(self):
        ''' Instruction PCMPISTRI_2
            Groups: sse42
            0x400704:	pcmpistri	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400704, 'f\x0f:c\xcaX')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400704
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400704:0x40070a], [b'f',b'\x0f',b':',b'c',b'\xca',b'X'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196106)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_20(self):
        ''' Instruction PCMPISTRI_20
            Groups: sse42
            0x4006f8:	pcmpistri	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006f8, 'f\x0f:c\xcaT')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006f8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006f8:0x4006fe], [b'f',b'\x0f',b':',b'c',b'\xca',b'T'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196094)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_21(self):
        ''' Instruction PCMPISTRI_21
            Groups: sse42
            0x4006c2:	pcmpistri	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006c2, 'f\x0f:c\xcaA')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x4006c2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006c2:0x4006c8], [b'f',b'\x0f',b':',b'c',b'\xca',b'A'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196040)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_22(self):
        ''' Instruction PCMPISTRI_22
            Groups: sse42
            0x40069e:	pcmpistri	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40069e, 'f\x0f:c\xca5')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40069e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40069e:0x4006a4], [b'f',b'\x0f',b':',b'c',b'\xca',b'5'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196004)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_23(self):
        ''' Instruction PCMPISTRI_23
            Groups: sse42
            0x4006b6:	pcmpistri	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006b6, 'f\x0f:c\xca=')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x4006b6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006b6:0x4006bc], [b'f',b'\x0f',b':',b'c',b'\xca',b'='])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196028)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_24(self):
        ''' Instruction PCMPISTRI_24
            Groups: sse42
            0x400620:	pcmpistri	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400620, 'f\x0f:c\xca\x0c')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400620
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400620:0x400626], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x0c'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195878)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_25(self):
        ''' Instruction PCMPISTRI_25
            Groups: sse42
            0x400710:	pcmpistri	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400710, 'f\x0f:c\xca\\')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400710
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400710:0x400716], [b'f',b'\x0f',b':',b'c',b'\xca',b'\\'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196118)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_26(self):
        ''' Instruction PCMPISTRI_26
            Groups: sse42
            0x4006b0:	pcmpistri	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006b0, 'f\x0f:c\xca<')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006b0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006b0:0x4006b6], [b'f',b'\x0f',b':',b'c',b'\xca',b'<'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196022)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_27(self):
        ''' Instruction PCMPISTRI_27
            Groups: sse42
            0x400740:	pcmpistri	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400740, 'f\x0f:c\xcal')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400740
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400740:0x400746], [b'f',b'\x0f',b':',b'c',b'\xca',b'l'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196166)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_28(self):
        ''' Instruction PCMPISTRI_28
            Groups: sse42
            0x400692:	pcmpistri	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400692, 'f\x0f:c\xca1')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400692
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400692:0x400698], [b'f',b'\x0f',b':',b'c',b'\xca',b'1'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195992)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_29(self):
        ''' Instruction PCMPISTRI_29
            Groups: sse42
            0x40064a:	pcmpistri	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40064a, 'f\x0f:c\xca\x19')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40064a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40064a:0x400650], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x19'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195920)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_3(self):
        ''' Instruction PCMPISTRI_3
            Groups: sse42
            0x400728:	pcmpistri	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400728, 'f\x0f:c\xcad')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400728
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400728:0x40072e], [b'f',b'\x0f',b':',b'c',b'\xca',b'd'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196142)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_30(self):
        ''' Instruction PCMPISTRI_30
            Groups: sse42
            0x40077c:	pcmpistri	xmm1, xmmword ptr [rbp - 0xa0], 0x1b
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem.write(0x40077c, 'f\x0f:c\x8d`\xff\xff\xff\x1b')
        mem.write(0x7fffffffe190, 'ABCDEFGHABCDEFGH')
        cpu.SF = False
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x40077c
        cpu.RBP = 0x7fffffffe230
        cpu.execute()
    
        self.assertEqual(mem[0x40077c:0x400786], [b'f',b'\x0f',b':',b'c',b'\x8d',b'`',b'\xff',b'\xff',b'\xff',b'\x1b'])
        self.assertEqual(mem[0x7fffffffe190:0x7fffffffe1a0], [b'A',b'B',b'C',b'D',b'E',b'F',b'G',b'H',b'A',b'B',b'C',b'D',b'E',b'F',b'G',b'H'])
        self.assertEqual(cpu.SF, False)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196230)
        self.assertEqual(cpu.RBP, 140737488347696)

    def test_PCMPISTRI_31(self):
        ''' Instruction PCMPISTRI_31
            Groups: sse42
            0x400626:	pcmpistri	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400626, 'f\x0f:c\xca\r')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400626
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400626:0x40062c], [b'f',b'\x0f',b':',b'c',b'\xca',b'\r'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195884)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_32(self):
        ''' Instruction PCMPISTRI_32
            Groups: sse42
            0x4006d4:	pcmpistri	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006d4, 'f\x0f:c\xcaH')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006d4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006d4:0x4006da], [b'f',b'\x0f',b':',b'c',b'\xca',b'H'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196058)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_33(self):
        ''' Instruction PCMPISTRI_33
            Groups: sse42
            0x400686:	pcmpistri	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400686, 'f\x0f:c\xca-')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400686
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400686:0x40068c], [b'f',b'\x0f',b':',b'c',b'\xca',b'-'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195980)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_34(self):
        ''' Instruction PCMPISTRI_34
            Groups: sse42
            0x400770:	pcmpistri	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400770, 'f\x0f:c\xca|')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400770
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400770:0x400776], [b'f',b'\x0f',b':',b'c',b'\xca',b'|'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196214)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_35(self):
        ''' Instruction PCMPISTRI_35
            Groups: sse42
            0x40071c:	pcmpistri	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40071c, 'f\x0f:c\xca`')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x40071c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40071c:0x400722], [b'f',b'\x0f',b':',b'c',b'\xca',b'`'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196130)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_36(self):
        ''' Instruction PCMPISTRI_36
            Groups: sse42
            0x400776:	pcmpistri	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400776, 'f\x0f:c\xca}')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x400776
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400776:0x40077c], [b'f',b'\x0f',b':',b'c',b'\xca',b'}'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196220)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_37(self):
        ''' Instruction PCMPISTRI_37
            Groups: sse42
            0x400758:	pcmpistri	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400758, 'f\x0f:c\xcat')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400758
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400758:0x40075e], [b'f',b'\x0f',b':',b'c',b'\xca',b't'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196190)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_38(self):
        ''' Instruction PCMPISTRI_38
            Groups: sse42
            0x400602:	pcmpistri	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400602, 'f\x0f:c\xca\x01')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400602
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400602:0x400608], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x01'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195848)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_39(self):
        ''' Instruction PCMPISTRI_39
            Groups: sse42
            0x400608:	pcmpistri	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400608, 'f\x0f:c\xca\x04')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400608
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400608:0x40060e], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x04'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195854)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_4(self):
        ''' Instruction PCMPISTRI_4
            Groups: sse42
            0x400752:	pcmpistri	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400752, 'f\x0f:c\xcaq')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400752
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400752:0x400758], [b'f',b'\x0f',b':',b'c',b'\xca',b'q'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196184)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_40(self):
        ''' Instruction PCMPISTRI_40
            Groups: sse42
            0x400638:	pcmpistri	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400638, 'f\x0f:c\xca\x14')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400638
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400638:0x40063e], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x14'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195902)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_41(self):
        ''' Instruction PCMPISTRI_41
            Groups: sse42
            0x40074c:	pcmpistri	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40074c, 'f\x0f:c\xcap')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = True
        cpu.RIP = 0x40074c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40074c:0x400752], [b'f',b'\x0f',b':',b'c',b'\xca',b'p'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196178)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_42(self):
        ''' Instruction PCMPISTRI_42
            Groups: sse42
            0x400734:	pcmpistri	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400734, 'f\x0f:c\xcah')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x400734
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400734:0x40073a], [b'f',b'\x0f',b':',b'c',b'\xca',b'h'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 15)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196154)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_43(self):
        ''' Instruction PCMPISTRI_43
            Groups: sse42
            0x400644:	pcmpistri	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400644, 'f\x0f:c\xca\x18')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x400644
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400644:0x40064a], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x18'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195914)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_44(self):
        ''' Instruction PCMPISTRI_44
            Groups: sse42
            0x40065c:	pcmpistri	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40065c, 'f\x0f:c\xca ')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x40065c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40065c:0x400662], [b'f',b'\x0f',b':',b'c',b'\xca',b' '])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195938)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_45(self):
        ''' Instruction PCMPISTRI_45
            Groups: sse42
            0x40061a:	pcmpistri	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40061a, 'f\x0f:c\xca\t')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40061a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40061a:0x400620], [b'f',b'\x0f',b':',b'c',b'\xca',b'\t'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195872)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_46(self):
        ''' Instruction PCMPISTRI_46
            Groups: sse42
            0x40073a:	pcmpistri	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40073a, 'f\x0f:c\xcai')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x40073a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40073a:0x400740], [b'f',b'\x0f',b':',b'c',b'\xca',b'i'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196160)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_47(self):
        ''' Instruction PCMPISTRI_47
            Groups: sse42
            0x40070a:	pcmpistri	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40070a, 'f\x0f:c\xcaY')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40070a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40070a:0x400710], [b'f',b'\x0f',b':',b'c',b'\xca',b'Y'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196112)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_48(self):
        ''' Instruction PCMPISTRI_48
            Groups: sse42
            0x4006aa:	pcmpistri	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006aa, 'f\x0f:c\xca9')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006aa
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006aa:0x4006b0], [b'f',b'\x0f',b':',b'c',b'\xca',b'9'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196016)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_49(self):
        ''' Instruction PCMPISTRI_49
            Groups: sse42
            0x400716:	pcmpistri	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400716, 'f\x0f:c\xca]')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x400716
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400716:0x40071c], [b'f',b'\x0f',b':',b'c',b'\xca',b']'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196124)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_5(self):
        ''' Instruction PCMPISTRI_5
            Groups: sse42
            0x40063e:	pcmpistri	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40063e, 'f\x0f:c\xca\x15')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40063e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40063e:0x400644], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x15'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195908)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_50(self):
        ''' Instruction PCMPISTRI_50
            Groups: sse42
            0x400656:	pcmpistri	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400656, 'f\x0f:c\xca\x1d')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x1
        cpu.CF = True
        cpu.RIP = 0x400656
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400656:0x40065c], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x1d'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 1)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195932)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_51(self):
        ''' Instruction PCMPISTRI_51
            Groups: sse42
            0x40072e:	pcmpistri	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40072e, 'f\x0f:c\xcae')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x40072e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40072e:0x400734], [b'f',b'\x0f',b':',b'c',b'\xca',b'e'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196148)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_52(self):
        ''' Instruction PCMPISTRI_52
            Groups: sse42
            0x400680:	pcmpistri	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400680, 'f\x0f:c\xca,')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400680
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400680:0x400686], [b'f',b'\x0f',b':',b'c',b'\xca',b','])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195974)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_53(self):
        ''' Instruction PCMPISTRI_53
            Groups: sse42
            0x400674:	pcmpistri	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400674, 'f\x0f:c\xca(')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400674
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400674:0x40067a], [b'f',b'\x0f',b':',b'c',b'\xca',b'('])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195962)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_54(self):
        ''' Instruction PCMPISTRI_54
            Groups: sse42
            0x40067a:	pcmpistri	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40067a, 'f\x0f:c\xca)')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40067a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40067a:0x400680], [b'f',b'\x0f',b':',b'c',b'\xca',b')'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195968)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_55(self):
        ''' Instruction PCMPISTRI_55
            Groups: sse42
            0x400722:	pcmpistri	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400722, 'f\x0f:c\xcaa')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x400722
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400722:0x400728], [b'f',b'\x0f',b':',b'c',b'\xca',b'a'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196136)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_56(self):
        ''' Instruction PCMPISTRI_56
            Groups: sse42
            0x4006e6:	pcmpistri	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006e6, 'f\x0f:c\xcaM')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = True
        cpu.RIP = 0x4006e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006e6:0x4006ec], [b'f',b'\x0f',b':',b'c',b'\xca',b'M'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 4)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196076)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_57(self):
        ''' Instruction PCMPISTRI_57
            Groups: sse42
            0x40076a:	pcmpistri	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40076a, 'f\x0f:c\xcay')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40076a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40076a:0x400770], [b'f',b'\x0f',b':',b'c',b'\xca',b'y'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196208)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_58(self):
        ''' Instruction PCMPISTRI_58
            Groups: sse42
            0x4006ec:	pcmpistri	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006ec, 'f\x0f:c\xcaP')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x4
        cpu.CF = True
        cpu.RIP = 0x4006ec
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006ec:0x4006f2], [b'f',b'\x0f',b':',b'c',b'\xca',b'P'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196082)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_59(self):
        ''' Instruction PCMPISTRI_59
            Groups: sse42
            0x400632:	pcmpistri	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400632, 'f\x0f:c\xca\x11')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x400632
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400632:0x400638], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x11'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4195896)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_6(self):
        ''' Instruction PCMPISTRI_6
            Groups: sse42
            0x40066e:	pcmpistri	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40066e, 'f\x0f:c\xca%')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40066e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40066e:0x400674], [b'f',b'\x0f',b':',b'c',b'\xca',b'%'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195956)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_60(self):
        ''' Instruction PCMPISTRI_60
            Groups: sse42
            0x4006f2:	pcmpistri	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006f2, 'f\x0f:c\xcaQ')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006f2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006f2:0x4006f8], [b'f',b'\x0f',b':',b'c',b'\xca',b'Q'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196088)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_61(self):
        ''' Instruction PCMPISTRI_61
            Groups: sse42
            0x400614:	pcmpistri	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400614, 'f\x0f:c\xca\x08')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400614
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400614:0x40061a], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x08'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195866)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_62(self):
        ''' Instruction PCMPISTRI_62
            Groups: sse42
            0x4006da:	pcmpistri	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006da, 'f\x0f:c\xcaI')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0xf
        cpu.CF = True
        cpu.RIP = 0x4006da
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006da:0x4006e0], [b'f',b'\x0f',b':',b'c',b'\xca',b'I'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 7)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196064)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_63(self):
        ''' Instruction PCMPISTRI_63
            Groups: sse42
            0x4006a4:	pcmpistri	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006a4, 'f\x0f:c\xca8')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x8
        cpu.CF = False
        cpu.RIP = 0x4006a4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006a4:0x4006aa], [b'f',b'\x0f',b':',b'c',b'\xca',b'8'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 16)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196010)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_64(self):
        ''' Instruction PCMPISTRI_64
            Groups: sse42
            0x4006fe:	pcmpistri	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006fe, 'f\x0f:c\xcaU')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x4006fe
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006fe:0x400704], [b'f',b'\x0f',b':',b'c',b'\xca',b'U'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196100)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_65(self):
        ''' Instruction PCMPISTRI_65
            Groups: sse42
            0x400662:	pcmpistri	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400662, 'f\x0f:c\xca!')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x400662
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400662:0x400668], [b'f',b'\x0f',b':',b'c',b'\xca',b'!'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195944)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_7(self):
        ''' Instruction PCMPISTRI_7
            Groups: sse42
            0x4006e0:	pcmpistri	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006e0, 'f\x0f:c\xcaL')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x7
        cpu.CF = True
        cpu.RIP = 0x4006e0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4006e0:0x4006e6], [b'f',b'\x0f',b':',b'c',b'\xca',b'L'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196070)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_8(self):
        ''' Instruction PCMPISTRI_8
            Groups: sse42
            0x40060e:	pcmpistri	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40060e, 'f\x0f:c\xca\x05')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = False
        cpu.ECX = 0x0
        cpu.CF = True
        cpu.RIP = 0x40060e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40060e:0x400614], [b'f',b'\x0f',b':',b'c',b'\xca',b'\x05'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 0)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4195860)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRI_9(self):
        ''' Instruction PCMPISTRI_9
            Groups: sse42
            0x40075e:	pcmpistri	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40075e, 'f\x0f:c\xcau')
        cpu.XMM2 = 0x48474645444342414847464544434241
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.ECX = 0x10
        cpu.CF = False
        cpu.RIP = 0x40075e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40075e:0x400764], [b'f',b'\x0f',b':',b'c',b'\xca',b'u'])
        self.assertEqual(cpu.XMM2, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, False)
        self.assertEqual(cpu.ECX, 8)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196196)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_1(self):
        ''' Instruction PCMPISTRM_1
            Groups: sse42
            0x400856:	pcmpistrm	xmm1, xmm2, 0x41
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400856, 'f\x0f:b\xcaA')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400856
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400856:0x40085c], [b'f',b'\x0f',b':',b'b',b'\xca',b'A'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196444)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_10(self):
        ''' Instruction PCMPISTRM_10
            Groups: sse42
            0x4007cc:	pcmpistrm	xmm1, xmm2, 0x14
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007cc, 'f\x0f:b\xca\x14')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007cc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007cc:0x4007d2], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x14'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196306)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_11(self):
        ''' Instruction PCMPISTRM_11
            Groups: sse42
            0x40087a:	pcmpistrm	xmm1, xmm2, 0x4d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40087a, 'f\x0f:b\xcaM')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40087a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40087a:0x400880], [b'f',b'\x0f',b':',b'b',b'\xca',b'M'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196480)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_12(self):
        ''' Instruction PCMPISTRM_12
            Groups: sse42
            0x400802:	pcmpistrm	xmm1, xmm2, 0x25
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400802, 'f\x0f:b\xca%')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400802
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400802:0x400808], [b'f',b'\x0f',b':',b'b',b'\xca',b'%'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196360)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_13(self):
        ''' Instruction PCMPISTRM_13
            Groups: sse42
            0x4007fc:	pcmpistrm	xmm1, xmm2, 0x24
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007fc, 'f\x0f:b\xca$')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007fc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007fc:0x400802], [b'f',b'\x0f',b':',b'b',b'\xca',b'$'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196354)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_14(self):
        ''' Instruction PCMPISTRM_14
            Groups: sse42
            0x4008c8:	pcmpistrm	xmm1, xmm2, 0x68
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008c8, 'f\x0f:b\xcah')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008c8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008c8:0x4008ce], [b'f',b'\x0f',b':',b'b',b'\xca',b'h'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196558)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_15(self):
        ''' Instruction PCMPISTRM_15
            Groups: sse42
            0x4008f8:	pcmpistrm	xmm1, xmm2, 0x78
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008f8, 'f\x0f:b\xcax')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008f8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008f8:0x4008fe], [b'f',b'\x0f',b':',b'b',b'\xca',b'x'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196606)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_16(self):
        ''' Instruction PCMPISTRM_16
            Groups: sse42
            0x40080e:	pcmpistrm	xmm1, xmm2, 0x29
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40080e, 'f\x0f:b\xca)')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40080e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40080e:0x400814], [b'f',b'\x0f',b':',b'b',b'\xca',b')'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196372)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_17(self):
        ''' Instruction PCMPISTRM_17
            Groups: sse42
            0x40089e:	pcmpistrm	xmm1, xmm2, 0x59
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40089e, 'f\x0f:b\xcaY')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40089e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40089e:0x4008a4], [b'f',b'\x0f',b':',b'b',b'\xca',b'Y'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196516)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_18(self):
        ''' Instruction PCMPISTRM_18
            Groups: sse42
            0x4008f2:	pcmpistrm	xmm1, xmm2, 0x75
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008f2, 'f\x0f:b\xcau')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008f2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008f2:0x4008f8], [b'f',b'\x0f',b':',b'b',b'\xca',b'u'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196600)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_19(self):
        ''' Instruction PCMPISTRM_19
            Groups: sse42
            0x4007b4:	pcmpistrm	xmm1, xmm2, 0xc
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007b4, 'f\x0f:b\xca\x0c')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007b4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007b4:0x4007ba], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x0c'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196282)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_2(self):
        ''' Instruction PCMPISTRM_2
            Groups: sse42
            0x4008ec:	pcmpistrm	xmm1, xmm2, 0x74
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008ec, 'f\x0f:b\xcat')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008ec
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008ec:0x4008f2], [b'f',b'\x0f',b':',b'b',b'\xca',b't'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196594)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_20(self):
        ''' Instruction PCMPISTRM_20
            Groups: sse42
            0x4007d8:	pcmpistrm	xmm1, xmm2, 0x18
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007d8, 'f\x0f:b\xca\x18')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007d8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007d8:0x4007de], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x18'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196318)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_21(self):
        ''' Instruction PCMPISTRM_21
            Groups: sse42
            0x400892:	pcmpistrm	xmm1, xmm2, 0x55
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400892, 'f\x0f:b\xcaU')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400892
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400892:0x400898], [b'f',b'\x0f',b':',b'b',b'\xca',b'U'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196504)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_22(self):
        ''' Instruction PCMPISTRM_22
            Groups: sse42
            0x40084a:	pcmpistrm	xmm1, xmm2, 0x3d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40084a, 'f\x0f:b\xca=')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40084a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40084a:0x400850], [b'f',b'\x0f',b':',b'b',b'\xca',b'='])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196432)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_23(self):
        ''' Instruction PCMPISTRM_23
            Groups: sse42
            0x40088c:	pcmpistrm	xmm1, xmm2, 0x54
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40088c, 'f\x0f:b\xcaT')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40088c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40088c:0x400892], [b'f',b'\x0f',b':',b'b',b'\xca',b'T'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196498)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_24(self):
        ''' Instruction PCMPISTRM_24
            Groups: sse42
            0x4008fe:	pcmpistrm	xmm1, xmm2, 0x79
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008fe, 'f\x0f:b\xcay')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008fe
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008fe:0x400904], [b'f',b'\x0f',b':',b'b',b'\xca',b'y'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196612)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_25(self):
        ''' Instruction PCMPISTRM_25
            Groups: sse42
            0x400838:	pcmpistrm	xmm1, xmm2, 0x38
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400838, 'f\x0f:b\xca8')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400838
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400838:0x40083e], [b'f',b'\x0f',b':',b'b',b'\xca',b'8'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196414)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_26(self):
        ''' Instruction PCMPISTRM_26
            Groups: sse42
            0x400832:	pcmpistrm	xmm1, xmm2, 0x35
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400832, 'f\x0f:b\xca5')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400832
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400832:0x400838], [b'f',b'\x0f',b':',b'b',b'\xca',b'5'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196408)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_27(self):
        ''' Instruction PCMPISTRM_27
            Groups: sse42
            0x400820:	pcmpistrm	xmm1, xmm2, 0x30
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400820, 'f\x0f:b\xca0')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400820
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400820:0x400826], [b'f',b'\x0f',b':',b'b',b'\xca',b'0'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196390)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_28(self):
        ''' Instruction PCMPISTRM_28
            Groups: sse42
            0x400850:	pcmpistrm	xmm1, xmm2, 0x40
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400850, 'f\x0f:b\xca@')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400850
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400850:0x400856], [b'f',b'\x0f',b':',b'b',b'\xca',b'@'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196438)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_29(self):
        ''' Instruction PCMPISTRM_29
            Groups: sse42
            0x4007d2:	pcmpistrm	xmm1, xmm2, 0x15
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007d2, 'f\x0f:b\xca\x15')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007d2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007d2:0x4007d8], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x15'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196312)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_3(self):
        ''' Instruction PCMPISTRM_3
            Groups: sse42
            0x400826:	pcmpistrm	xmm1, xmm2, 0x31
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400826, 'f\x0f:b\xca1')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400826
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400826:0x40082c], [b'f',b'\x0f',b':',b'b',b'\xca',b'1'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196396)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_30(self):
        ''' Instruction PCMPISTRM_30
            Groups: sse42
            0x400898:	pcmpistrm	xmm1, xmm2, 0x58
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400898, 'f\x0f:b\xcaX')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400898
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400898:0x40089e], [b'f',b'\x0f',b':',b'b',b'\xca',b'X'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196510)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_31(self):
        ''' Instruction PCMPISTRM_31
            Groups: sse42
            0x4008aa:	pcmpistrm	xmm1, xmm2, 0x5d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008aa, 'f\x0f:b\xca]')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008aa
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008aa:0x4008b0], [b'f',b'\x0f',b':',b'b',b'\xca',b']'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196528)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_32(self):
        ''' Instruction PCMPISTRM_32
            Groups: sse42
            0x4007ea:	pcmpistrm	xmm1, xmm2, 0x1d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007ea, 'f\x0f:b\xca\x1d')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007ea
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007ea:0x4007f0], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x1d'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196336)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_33(self):
        ''' Instruction PCMPISTRM_33
            Groups: sse42
            0x4007f6:	pcmpistrm	xmm1, xmm2, 0x21
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007f6, 'f\x0f:b\xca!')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007f6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007f6:0x4007fc], [b'f',b'\x0f',b':',b'b',b'\xca',b'!'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196348)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_34(self):
        ''' Instruction PCMPISTRM_34
            Groups: sse42
            0x4008b0:	pcmpistrm	xmm1, xmm2, 0x60
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008b0, 'f\x0f:b\xca`')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008b0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008b0:0x4008b6], [b'f',b'\x0f',b':',b'b',b'\xca',b'`'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196534)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_35(self):
        ''' Instruction PCMPISTRM_35
            Groups: sse42
            0x4008a4:	pcmpistrm	xmm1, xmm2, 0x5c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008a4, 'f\x0f:b\xca\\')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008a4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008a4:0x4008aa], [b'f',b'\x0f',b':',b'b',b'\xca',b'\\'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196522)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_36(self):
        ''' Instruction PCMPISTRM_36
            Groups: sse42
            0x4008e0:	pcmpistrm	xmm1, xmm2, 0x70
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008e0, 'f\x0f:b\xcap')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008e0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008e0:0x4008e6], [b'f',b'\x0f',b':',b'b',b'\xca',b'p'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196582)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_37(self):
        ''' Instruction PCMPISTRM_37
            Groups: sse42
            0x400904:	pcmpistrm	xmm1, xmm2, 0x7c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400904, 'f\x0f:b\xca|')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400904
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400904:0x40090a], [b'f',b'\x0f',b':',b'b',b'\xca',b'|'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196618)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_38(self):
        ''' Instruction PCMPISTRM_38
            Groups: sse42
            0x4008c2:	pcmpistrm	xmm1, xmm2, 0x65
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008c2, 'f\x0f:b\xcae')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008c2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008c2:0x4008c8], [b'f',b'\x0f',b':',b'b',b'\xca',b'e'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196552)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_39(self):
        ''' Instruction PCMPISTRM_39
            Groups: sse42
            0x40081a:	pcmpistrm	xmm1, xmm2, 0x2d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40081a, 'f\x0f:b\xca-')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40081a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40081a:0x400820], [b'f',b'\x0f',b':',b'b',b'\xca',b'-'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196384)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_4(self):
        ''' Instruction PCMPISTRM_4
            Groups: sse42
            0x4008bc:	pcmpistrm	xmm1, xmm2, 0x64
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008bc, 'f\x0f:b\xcad')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008bc
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008bc:0x4008c2], [b'f',b'\x0f',b':',b'b',b'\xca',b'd'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196546)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_40(self):
        ''' Instruction PCMPISTRM_40
            Groups: sse42
            0x4007de:	pcmpistrm	xmm1, xmm2, 0x19
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007de, 'f\x0f:b\xca\x19')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007de
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007de:0x4007e4], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x19'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196324)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_41(self):
        ''' Instruction PCMPISTRM_41
            Groups: sse42
            0x400814:	pcmpistrm	xmm1, xmm2, 0x2c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400814, 'f\x0f:b\xca,')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400814
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400814:0x40081a], [b'f',b'\x0f',b':',b'b',b'\xca',b','])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196378)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_42(self):
        ''' Instruction PCMPISTRM_42
            Groups: sse42
            0x4007c6:	pcmpistrm	xmm1, xmm2, 0x11
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007c6, 'f\x0f:b\xca\x11')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007c6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007c6:0x4007cc], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x11'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196300)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_43(self):
        ''' Instruction PCMPISTRM_43
            Groups: sse42
            0x400868:	pcmpistrm	xmm1, xmm2, 0x48
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400868, 'f\x0f:b\xcaH')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400868
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400868:0x40086e], [b'f',b'\x0f',b':',b'b',b'\xca',b'H'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196462)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_44(self):
        ''' Instruction PCMPISTRM_44
            Groups: sse42
            0x4008ce:	pcmpistrm	xmm1, xmm2, 0x69
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008ce, 'f\x0f:b\xcai')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008ce
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008ce:0x4008d4], [b'f',b'\x0f',b':',b'b',b'\xca',b'i'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196564)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_45(self):
        ''' Instruction PCMPISTRM_45
            Groups: sse42
            0x400874:	pcmpistrm	xmm1, xmm2, 0x4c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400874, 'f\x0f:b\xcaL')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400874
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400874:0x40087a], [b'f',b'\x0f',b':',b'b',b'\xca',b'L'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196474)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_46(self):
        ''' Instruction PCMPISTRM_46
            Groups: sse42
            0x40085c:	pcmpistrm	xmm1, xmm2, 0x44
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40085c, 'f\x0f:b\xcaD')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40085c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40085c:0x400862], [b'f',b'\x0f',b':',b'b',b'\xca',b'D'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196450)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_47(self):
        ''' Instruction PCMPISTRM_47
            Groups: sse42
            0x4007a8:	pcmpistrm	xmm1, xmm2, 8
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007a8, 'f\x0f:b\xca\x08')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007a8
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007a8:0x4007ae], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x08'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196270)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_48(self):
        ''' Instruction PCMPISTRM_48
            Groups: sse42
            0x40082c:	pcmpistrm	xmm1, xmm2, 0x34
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40082c, 'f\x0f:b\xca4')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40082c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40082c:0x400832], [b'f',b'\x0f',b':',b'b',b'\xca',b'4'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196402)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_49(self):
        ''' Instruction PCMPISTRM_49
            Groups: sse42
            0x4008da:	pcmpistrm	xmm1, xmm2, 0x6d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008da, 'f\x0f:b\xcam')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008da
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008da:0x4008e0], [b'f',b'\x0f',b':',b'b',b'\xca',b'm'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196576)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_5(self):
        ''' Instruction PCMPISTRM_5
            Groups: sse42
            0x4007a2:	pcmpistrm	xmm1, xmm2, 5
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007a2, 'f\x0f:b\xca\x05')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007a2
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007a2:0x4007a8], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x05'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196264)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_50(self):
        ''' Instruction PCMPISTRM_50
            Groups: sse42
            0x4007e4:	pcmpistrm	xmm1, xmm2, 0x1c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007e4, 'f\x0f:b\xca\x1c')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007e4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007e4:0x4007ea], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x1c'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196330)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_51(self):
        ''' Instruction PCMPISTRM_51
            Groups: sse42
            0x400880:	pcmpistrm	xmm1, xmm2, 0x50
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400880, 'f\x0f:b\xcaP')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400880
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400880:0x400886], [b'f',b'\x0f',b':',b'b',b'\xca',b'P'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196486)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_52(self):
        ''' Instruction PCMPISTRM_52
            Groups: sse42
            0x400886:	pcmpistrm	xmm1, xmm2, 0x51
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400886, 'f\x0f:b\xcaQ')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400886
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400886:0x40088c], [b'f',b'\x0f',b':',b'b',b'\xca',b'Q'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196492)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_53(self):
        ''' Instruction PCMPISTRM_53
            Groups: sse42
            0x4008b6:	pcmpistrm	xmm1, xmm2, 0x61
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008b6, 'f\x0f:b\xcaa')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008b6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008b6:0x4008bc], [b'f',b'\x0f',b':',b'b',b'\xca',b'a'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196540)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_54(self):
        ''' Instruction PCMPISTRM_54
            Groups: sse42
            0x4007ba:	pcmpistrm	xmm1, xmm2, 0xd
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007ba, 'f\x0f:b\xca\r')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007ba
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007ba:0x4007c0], [b'f',b'\x0f',b':',b'b',b'\xca',b'\r'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196288)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_55(self):
        ''' Instruction PCMPISTRM_55
            Groups: sse42
            0x40090a:	pcmpistrm	xmm1, xmm2, 0x7d
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40090a, 'f\x0f:b\xca}')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40090a
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40090a:0x400910], [b'f',b'\x0f',b':',b'b',b'\xca',b'}'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196624)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_56(self):
        ''' Instruction PCMPISTRM_56
            Groups: sse42
            0x40079c:	pcmpistrm	xmm1, xmm2, 4
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40079c, 'f\x0f:b\xca\x04')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40079c
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40079c:0x4007a2], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x04'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196258)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_57(self):
        ''' Instruction PCMPISTRM_57
            Groups: sse42
            0x4007ae:	pcmpistrm	xmm1, xmm2, 9
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007ae, 'f\x0f:b\xca\t')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007ae
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007ae:0x4007b4], [b'f',b'\x0f',b':',b'b',b'\xca',b'\t'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196276)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_58(self):
        ''' Instruction PCMPISTRM_58
            Groups: sse42
            0x400844:	pcmpistrm	xmm1, xmm2, 0x3c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400844, 'f\x0f:b\xca<')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x400844
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400844:0x40084a], [b'f',b'\x0f',b':',b'b',b'\xca',b'<'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196426)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_59(self):
        ''' Instruction PCMPISTRM_59
            Groups: sse42
            0x4008e6:	pcmpistrm	xmm1, xmm2, 0x71
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008e6, 'f\x0f:b\xcaq')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4008e6
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008e6:0x4008ec], [b'f',b'\x0f',b':',b'b',b'\xca',b'q'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196588)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_6(self):
        ''' Instruction PCMPISTRM_6
            Groups: sse42
            0x400808:	pcmpistrm	xmm1, xmm2, 0x28
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400808, 'f\x0f:b\xca(')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400808
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400808:0x40080e], [b'f',b'\x0f',b':',b'b',b'\xca',b'('])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196366)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_60(self):
        ''' Instruction PCMPISTRM_60
            Groups: sse42
            0x4008d4:	pcmpistrm	xmm1, xmm2, 0x6c
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008d4, 'f\x0f:b\xcal')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4008d4
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4008d4:0x4008da], [b'f',b'\x0f',b':',b'b',b'\xca',b'l'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196570)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_61(self):
        ''' Instruction PCMPISTRM_61
            Groups: sse42
            0x400796:	pcmpistrm	xmm1, xmm2, 1
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400796, 'f\x0f:b\xca\x01')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400796
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400796:0x40079c], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x01'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196252)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_62(self):
        ''' Instruction PCMPISTRM_62
            Groups: sse42
            0x40083e:	pcmpistrm	xmm1, xmm2, 0x39
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40083e, 'f\x0f:b\xca9')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x40083e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40083e:0x400844], [b'f',b'\x0f',b':',b'b',b'\xca',b'9'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196420)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_63(self):
        ''' Instruction PCMPISTRM_63
            Groups: sse42
            0x400790:	pcmpistrm	xmm1, xmm2, 0
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400790, 'f\x0f:b\xca\x00')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = False
        cpu.CF = False
        cpu.RIP = 0x400790
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400790:0x400796], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x00'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196246)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_64(self):
        ''' Instruction PCMPISTRM_64
            Groups: sse42
            0x4007c0:	pcmpistrm	xmm1, xmm2, 0x10
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007c0, 'f\x0f:b\xca\x10')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x4007c0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007c0:0x4007c6], [b'f',b'\x0f',b':',b'b',b'\xca',b'\x10'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, True)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, True)
        self.assertEqual(cpu.RIP, 4196294)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_7(self):
        ''' Instruction PCMPISTRM_7
            Groups: sse42
            0x4007f0:	pcmpistrm	xmm1, xmm2, 0x20
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007f0, 'f\x0f:b\xca ')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = True
        cpu.ZF = True
        cpu.CF = True
        cpu.RIP = 0x4007f0
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x4007f0:0x4007f6], [b'f',b'\x0f',b':',b'b',b'\xca',b' '])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196342)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_8(self):
        ''' Instruction PCMPISTRM_8
            Groups: sse42
            0x40086e:	pcmpistrm	xmm1, xmm2, 0x49
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40086e, 'f\x0f:b\xcaI')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x40086e
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x40086e:0x400874], [b'f',b'\x0f',b':',b'b',b'\xca',b'I'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196468)
        self.assertEqual(cpu.SF, False)

    def test_PCMPISTRM_9(self):
        ''' Instruction PCMPISTRM_9
            Groups: sse42
            0x400862:	pcmpistrm	xmm1, xmm2, 0x45
        '''
        mem = Memory64()
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400862, 'f\x0f:b\xcaE')
        cpu.XMM2 = 0x363534333231
        cpu.XMM1 = 0x48474645444342414847464544434241
        cpu.PF = False
        cpu.AF = False
        cpu.OF = False
        cpu.ZF = True
        cpu.CF = False
        cpu.RIP = 0x400862
        cpu.SF = False
        cpu.execute()
    
        self.assertEqual(mem[0x400862:0x400868], [b'f',b'\x0f',b':',b'b',b'\xca',b'E'])
        self.assertEqual(cpu.XMM2, 59602136937009)
        self.assertEqual(cpu.XMM1, 96074494030011676290068831614766629441)
        self.assertEqual(cpu.PF, False)
        self.assertEqual(cpu.AF, False)
        self.assertEqual(cpu.OF, False)
        self.assertEqual(cpu.ZF, True)
        self.assertEqual(cpu.CF, False)
        self.assertEqual(cpu.RIP, 4196456)
        self.assertEqual(cpu.SF, False)

    def test_PCMPESTRI_1_symbolic(self):
        ''' Instruction PCMPESTRI_1
            Groups: sse42
            0x400bec:	pcmpestri	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bec, 'f\x0f:a\xcad')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bec
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bec)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bec)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bec, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bee, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bef, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf1, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_10_symbolic(self):
        ''' Instruction PCMPESTRI_10
            Groups: sse42
            0x400b20:	pcmpestri	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b20, 'f\x0f:a\xca ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b20
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b20)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b20)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b20, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b21, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b22, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b23, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b24, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b25, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b26)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_11_symbolic(self):
        ''' Instruction PCMPESTRI_11
            Groups: sse42
            0x400b38:	pcmpestri	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b38, 'f\x0f:a\xca(')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b38
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b38)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b38)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b38, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b39, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3d, 8)== ord('('))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b3e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_12_symbolic(self):
        ''' Instruction PCMPESTRI_12
            Groups: sse42
            0x400bfe:	pcmpestri	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bfe, 'f\x0f:a\xcai')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bfe
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bfe)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bfe)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c00, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c01, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c02, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c03, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfe, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bff, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400c04)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_13_symbolic(self):
        ''' Instruction PCMPESTRI_13
            Groups: sse42
            0x400b86:	pcmpestri	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b86, 'f\x0f:a\xcaA')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b86
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b86)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b86)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b86, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b87, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b88, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b89, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8b, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b8c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_14_symbolic(self):
        ''' Instruction PCMPESTRI_14
            Groups: sse42
            0x400ae4:	pcmpestri	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ae4, 'f\x0f:a\xca\x0c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ae4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ae4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ae4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ae4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae7, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae9, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400aea)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_15_symbolic(self):
        ''' Instruction PCMPESTRI_15
            Groups: sse42
            0x400c04:	pcmpestri	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c04, 'f\x0f:a\xcal')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400c04
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c04)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c04)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c04, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c05, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c06, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c07, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c08, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c09, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400c0a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_16_symbolic(self):
        ''' Instruction PCMPESTRI_16
            Groups: sse42
            0x400b6e:	pcmpestri	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b6e, 'f\x0f:a\xca9')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b6e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b6e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b6e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b6e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b70, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b71, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b72, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b73, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b74)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_17_symbolic(self):
        ''' Instruction PCMPESTRI_17
            Groups: sse42
            0x400b2c:	pcmpestri	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b2c, 'f\x0f:a\xca$')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b2c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b2c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b2c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b2c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b30, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b31, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b32)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_18_symbolic(self):
        ''' Instruction PCMPESTRI_18
            Groups: sse42
            0x400af0:	pcmpestri	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400af0, 'f\x0f:a\xca\x10')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400af0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400af0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400af0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400af3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400af4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400af5, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400af6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_19_symbolic(self):
        ''' Instruction PCMPESTRI_19
            Groups: sse42
            0x400be0:	pcmpestri	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400be0, 'f\x0f:a\xca`')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400be0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400be0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400be0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400be0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400be3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400be4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400be5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400be6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_2_symbolic(self):
        ''' Instruction PCMPESTRI_2
            Groups: sse42
            0x400b4a:	pcmpestri	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b4a, 'f\x0f:a\xca-')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b4a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b4a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b4a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b4a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b4f, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b50)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_20_symbolic(self):
        ''' Instruction PCMPESTRI_20
            Groups: sse42
            0x400c0a:	pcmpestri	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c0a, 'f\x0f:a\xcam')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400c0a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c0a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c0a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c0a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c0f, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400c10)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_21_symbolic(self):
        ''' Instruction PCMPESTRI_21
            Groups: sse42
            0x400b14:	pcmpestri	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b14, 'f\x0f:a\xca\x1c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b14
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b14)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b14)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b14, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b15, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b16, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b17, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b18, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b19, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b1a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_22_symbolic(self):
        ''' Instruction PCMPESTRI_22
            Groups: sse42
            0x400bb6:	pcmpestri	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bb6, 'f\x0f:a\xcaQ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bb6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bb6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bb6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bb6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bba, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbb, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bbc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_23_symbolic(self):
        ''' Instruction PCMPESTRI_23
            Groups: sse42
            0x400b08:	pcmpestri	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b08, 'f\x0f:a\xca\x18')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b08
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b08)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b08)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b08, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b09, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0d, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b0e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_24_symbolic(self):
        ''' Instruction PCMPESTRI_24
            Groups: sse42
            0x400c1c:	pcmpestri	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c1c, 'f\x0f:a\xcat')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c1c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c1c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c1c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c20, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c21, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c22)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_25_symbolic(self):
        ''' Instruction PCMPESTRI_25
            Groups: sse42
            0x400bda:	pcmpestri	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bda, 'f\x0f:a\xca]')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bda
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bda)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bda)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bda, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdd, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bde, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bdf, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400be0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_26_symbolic(self):
        ''' Instruction PCMPESTRI_26
            Groups: sse42
            0x400c10:	pcmpestri	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c10, 'f\x0f:a\xcap')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400c10
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c10)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c10)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c10, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c11, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c12, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c13, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c14, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c15, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c16)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_27_symbolic(self):
        ''' Instruction PCMPESTRI_27
            Groups: sse42
            0x400c34:	pcmpestri	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c34, 'f\x0f:a\xca|')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c34
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c34)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c34)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c34, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c35, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c36, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c37, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c38, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c39, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c3a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_28_symbolic(self):
        ''' Instruction PCMPESTRI_28
            Groups: sse42
            0x400c2e:	pcmpestri	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c2e, 'f\x0f:a\xcay')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c2e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c2e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c2e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c2e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c30, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c31, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c32, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c33, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c34)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_29_symbolic(self):
        ''' Instruction PCMPESTRI_29
            Groups: sse42
            0x400b80:	pcmpestri	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b80, 'f\x0f:a\xca@')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b80
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b80)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b80)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b80, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b81, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b82, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b83, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b84, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b85, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b86)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_3_symbolic(self):
        ''' Instruction PCMPESTRI_3
            Groups: sse42
            0x400ac6:	pcmpestri	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ac6, 'f\x0f:a\xca\x01')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ac6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ac6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ac6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ac6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400aca, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400acb, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400acc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_30_symbolic(self):
        ''' Instruction PCMPESTRI_30
            Groups: sse42
            0x400ba4:	pcmpestri	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ba4, 'f\x0f:a\xcaL')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ba4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ba4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ba4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ba4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba7, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba9, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400baa)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_31_symbolic(self):
        ''' Instruction PCMPESTRI_31
            Groups: sse42
            0x400ad8:	pcmpestri	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ad8, 'f\x0f:a\xca\x08')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ad8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ad8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ad8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ad8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ada, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400adb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400adc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400add, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ade)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_32_symbolic(self):
        ''' Instruction PCMPESTRI_32
            Groups: sse42
            0x400b50:	pcmpestri	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b50, 'f\x0f:a\xca0')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b50
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b50)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b50)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b50, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b51, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b52, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b53, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b54, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b55, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b56)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_33_symbolic(self):
        ''' Instruction PCMPESTRI_33
            Groups: sse42
            0x400b44:	pcmpestri	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b44, 'f\x0f:a\xca,')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b44
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b44)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b44)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b44, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b45, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b46, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b47, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b48, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b49, 8)== ord(','))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b4a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_34_symbolic(self):
        ''' Instruction PCMPESTRI_34
            Groups: sse42
            0x400bbc:	pcmpestri	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bbc, 'f\x0f:a\xcaT')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bbc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bbc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bbc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bc0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc1, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bbf, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bc2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_35_symbolic(self):
        ''' Instruction PCMPESTRI_35
            Groups: sse42
            0x400ad2:	pcmpestri	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ad2, 'f\x0f:a\xca\x05')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ad2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ad2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ad2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ad2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad5, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad7, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ad8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_36_symbolic(self):
        ''' Instruction PCMPESTRI_36
            Groups: sse42
            0x400b26:	pcmpestri	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b26, 'f\x0f:a\xca!')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b26
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b26)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b26)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b26, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b27, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b28, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b29, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b2b, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b2c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_37_symbolic(self):
        ''' Instruction PCMPESTRI_37
            Groups: sse42
            0x400bc8:	pcmpestri	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bc8, 'f\x0f:a\xcaX')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bc8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bc8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bc8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bc8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bca, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcd, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bce)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_38_symbolic(self):
        ''' Instruction PCMPESTRI_38
            Groups: sse42
            0x400b98:	pcmpestri	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b98, 'f\x0f:a\xcaH')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b98
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b98)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b98)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b98, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b99, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b9e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_39_symbolic(self):
        ''' Instruction PCMPESTRI_39
            Groups: sse42
            0x400b02:	pcmpestri	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b02, 'f\x0f:a\xca\x15')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b02
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b02)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b02)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b02, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b03, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b04, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b05, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b06, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b07, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b08)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_4_symbolic(self):
        ''' Instruction PCMPESTRI_4
            Groups: sse42
            0x400c22:	pcmpestri	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c22, 'f\x0f:a\xcau')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c22
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c22)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c22)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c22, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c23, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c24, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c25, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c26, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c27, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c28)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_40_symbolic(self):
        ''' Instruction PCMPESTRI_40
            Groups: sse42
            0x400c3a:	pcmpestri	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c3a, 'f\x0f:a\xca}')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c3a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c3a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c3a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c3a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c3f, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c40)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_41_symbolic(self):
        ''' Instruction PCMPESTRI_41
            Groups: sse42
            0x400af6:	pcmpestri	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400af6, 'f\x0f:a\xca\x11')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400af6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400af6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400af6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400af6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400af8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400af9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400afa, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400afb, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400afc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_42_symbolic(self):
        ''' Instruction PCMPESTRI_42
            Groups: sse42
            0x400c28:	pcmpestri	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c28, 'f\x0f:a\xcax')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c28
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c28)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c28)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c28, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c29, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c2d, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c2e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_43_symbolic(self):
        ''' Instruction PCMPESTRI_43
            Groups: sse42
            0x400b62:	pcmpestri	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b62, 'f\x0f:a\xca5')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b62
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b62)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b62)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b62, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b63, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b64, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b65, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b66, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b67, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b68)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_44_symbolic(self):
        ''' Instruction PCMPESTRI_44
            Groups: sse42
            0x400baa:	pcmpestri	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400baa, 'f\x0f:a\xcaM')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400baa
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400baa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400baa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400baa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bab, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bac, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bad, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bae, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400baf, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bb0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_45_symbolic(self):
        ''' Instruction PCMPESTRI_45
            Groups: sse42
            0x400b68:	pcmpestri	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b68, 'f\x0f:a\xca8')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b68
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b68)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b68)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b68, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b69, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6b, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b6d, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b6e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_46_symbolic(self):
        ''' Instruction PCMPESTRI_46
            Groups: sse42
            0x400c16:	pcmpestri	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400c16, 'f\x0f:a\xcaq')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400c16
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400c16)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400c16)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400c16, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c17, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400c18, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400c19, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400c1b, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400c1c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_47_symbolic(self):
        ''' Instruction PCMPESTRI_47
            Groups: sse42
            0x400acc:	pcmpestri	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400acc, 'f\x0f:a\xca\x04')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400acc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400acc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400acc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400acc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400acd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ace, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400acf, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ad1, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ad2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_48_symbolic(self):
        ''' Instruction PCMPESTRI_48
            Groups: sse42
            0x400b92:	pcmpestri	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b92, 'f\x0f:a\xcaE')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b92
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b92)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b92)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b92, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b93, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b94, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b95, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b96, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b97, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b98)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_49_symbolic(self):
        ''' Instruction PCMPESTRI_49
            Groups: sse42
            0x400afc:	pcmpestri	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400afc, 'f\x0f:a\xca\x14')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400afc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400afc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400afc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b00, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b01, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.read_int(0x400afc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400afd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400afe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400aff, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b02)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_5_symbolic(self):
        ''' Instruction PCMPESTRI_5
            Groups: sse42
            0x400be6:	pcmpestri	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400be6, 'f\x0f:a\xcaa')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400be6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400be6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400be6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400be6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400be8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400be9, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bea, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400beb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bec)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_50_symbolic(self):
        ''' Instruction PCMPESTRI_50
            Groups: sse42
            0x400b9e:	pcmpestri	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b9e, 'f\x0f:a\xcaI')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b9e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b9e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b9e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ba0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba1, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ba3, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b9f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ba4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_51_symbolic(self):
        ''' Instruction PCMPESTRI_51
            Groups: sse42
            0x400ac0:	pcmpestri	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ac0, 'f\x0f:a\xca\x00')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400ac0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ac0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ac0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ac0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ac5, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ac6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_52_symbolic(self):
        ''' Instruction PCMPESTRI_52
            Groups: sse42
            0x400b74:	pcmpestri	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b74, 'f\x0f:a\xca<')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b74
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b74)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b74)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b74, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b75, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b76, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b77, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b78, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b79, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b7a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_53_symbolic(self):
        ''' Instruction PCMPESTRI_53
            Groups: sse42
            0x400bce:	pcmpestri	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bce, 'f\x0f:a\xcaY')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bce
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bce)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bce)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bce, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bcf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd1, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd3, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bd4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x6)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_54_symbolic(self):
        ''' Instruction PCMPESTRI_54
            Groups: sse42
            0x400b56:	pcmpestri	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b56, 'f\x0f:a\xca1')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b56
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b56)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b56)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b56, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b57, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b58, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b59, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5b, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b5c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_55_symbolic(self):
        ''' Instruction PCMPESTRI_55
            Groups: sse42
            0x400b7a:	pcmpestri	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b7a, 'f\x0f:a\xca=')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b7a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b7a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b7a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b7a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b7f, 8)== ord('='))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b80)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_56_symbolic(self):
        ''' Instruction PCMPESTRI_56
            Groups: sse42
            0x400b5c:	pcmpestri	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b5c, 'f\x0f:a\xca4')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b5c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b5c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b5c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b60, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b61, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b5f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b62)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_57_symbolic(self):
        ''' Instruction PCMPESTRI_57
            Groups: sse42
            0x400ade:	pcmpestri	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400ade, 'f\x0f:a\xca\t')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400ade
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400ade)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400ade)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400ae0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae1, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400ae3, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.read_int(0x400ade, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400adf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400ae4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_58_symbolic(self):
        ''' Instruction PCMPESTRI_58
            Groups: sse42
            0x400b3e:	pcmpestri	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b3e, 'f\x0f:a\xca)')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b3e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b3e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b3e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b40, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b41, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b42, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b43, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b3f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b44)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_59_symbolic(self):
        ''' Instruction PCMPESTRI_59
            Groups: sse42
            0x400bb0:	pcmpestri	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bb0, 'f\x0f:a\xcaP')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bb0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bb0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bb0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bb0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb3, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bb5, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bb6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_6_symbolic(self):
        ''' Instruction PCMPESTRI_6
            Groups: sse42
            0x400b0e:	pcmpestri	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b0e, 'f\x0f:a\xca\x19')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b0e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b0e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b0e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b0e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b0f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b10, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b11, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b12, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b13, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b14)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_60_symbolic(self):
        ''' Instruction PCMPESTRI_60
            Groups: sse42
            0x400b1a:	pcmpestri	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b1a, 'f\x0f:a\xca\x1d')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400b1a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b1a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b1a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b1a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1d, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b1f, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400b20)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x0)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_61_symbolic(self):
        ''' Instruction PCMPESTRI_61
            Groups: sse42
            0x400bf2:	pcmpestri	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bf2, 'f\x0f:a\xcae')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bf2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bf2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bf2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf5, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf7, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bf8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_62_symbolic(self):
        ''' Instruction PCMPESTRI_62
            Groups: sse42
            0x400bd4:	pcmpestri	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bd4, 'f\x0f:a\xca\\')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bd4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x6)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bd4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bd4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bd4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd7, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bd9, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bda)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_63_symbolic(self):
        ''' Instruction PCMPESTRI_63
            Groups: sse42
            0x400bf8:	pcmpestri	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bf8, 'f\x0f:a\xcah')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400bf8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bf8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bf8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bf8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bf9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bfd, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400bfe)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0xf)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_64_symbolic(self):
        ''' Instruction PCMPESTRI_64
            Groups: sse42
            0x400bc2:	pcmpestri	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400bc2, 'f\x0f:a\xcaU')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400bc2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400bc2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400bc2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400bc2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc5, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400bc7, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400bc8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x7)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_7_symbolic(self):
        ''' Instruction PCMPESTRI_7
            Groups: sse42
            0x400b8c:	pcmpestri	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b8c, 'f\x0f:a\xcaD')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b8c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b8c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b8c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b8c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b8f, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b90, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b91, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b92)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x10)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_8_symbolic(self):
        ''' Instruction PCMPESTRI_8
            Groups: sse42
            0x400aea:	pcmpestri	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400aea, 'f\x0f:a\xca\r')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400aea
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400aea)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400aea)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aea, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aeb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aec, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400aed, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400aee, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400aef, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400af0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRI_9_symbolic(self):
        ''' Instruction PCMPESTRI_9
            Groups: sse42
            0x400b32:	pcmpestri	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400b32, 'f\x0f:a\xca%')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400b32
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400b32)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400b32)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400b32, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b33, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400b34, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400b35, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.read_int(0x400b36, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400b37, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400b38)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)
        condition = Operators.AND(condition, cpu.ECX == 0x8)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_1_symbolic(self):
        ''' Instruction PCMPESTRM_1
            Groups: sse42
            0x4009d0:	pcmpestrm	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009d0, 'f\x0f:`\xca8')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009d0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009d0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009d0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009d0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d3, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d5, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009d6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_10_symbolic(self):
        ''' Instruction PCMPESTRM_10
            Groups: sse42
            0x4009ac:	pcmpestrm	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009ac, 'f\x0f:`\xca,')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009ac
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009ac)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009ac)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009ac, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ad, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ae, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009af, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b1, 8)== ord(','))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009b2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_11_symbolic(self):
        ''' Instruction PCMPESTRM_11
            Groups: sse42
            0x400a24:	pcmpestrm	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a24, 'f\x0f:`\xcaT')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a24
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a24)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a24)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a24, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a25, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a26, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a27, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a28, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a29, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a2a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_12_symbolic(self):
        ''' Instruction PCMPESTRM_12
            Groups: sse42
            0x4009f4:	pcmpestrm	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009f4, 'f\x0f:`\xcaD')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009f4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009f4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009f4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009f4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f7, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f9, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009fa)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_13_symbolic(self):
        ''' Instruction PCMPESTRM_13
            Groups: sse42
            0x400a1e:	pcmpestrm	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a1e, 'f\x0f:`\xcaQ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a1e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a1e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a1e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a20, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a21, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a22, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a23, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a24)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_14_symbolic(self):
        ''' Instruction PCMPESTRM_14
            Groups: sse42
            0x400a7e:	pcmpestrm	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a7e, 'f\x0f:`\xcaq')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a7e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a7e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a7e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a80, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a81, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a82, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a83, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a84)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_15_symbolic(self):
        ''' Instruction PCMPESTRM_15
            Groups: sse42
            0x400994:	pcmpestrm	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400994, 'f\x0f:`\xca$')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400994
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400994)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400994)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400994, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400995, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400996, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400997, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400998, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400999, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40099a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_16_symbolic(self):
        ''' Instruction PCMPESTRM_16
            Groups: sse42
            0x400934:	pcmpestrm	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400934, 'f\x0f:`\xca\x04')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400934
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400934)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400934)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400934, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400935, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400936, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400937, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400938, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400939, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40093a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_17_symbolic(self):
        ''' Instruction PCMPESTRM_17
            Groups: sse42
            0x400a9c:	pcmpestrm	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a9c, 'f\x0f:`\xca|')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a9c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a9c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a9c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aa0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa1, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400aa2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_18_symbolic(self):
        ''' Instruction PCMPESTRM_18
            Groups: sse42
            0x40092e:	pcmpestrm	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40092e, 'f\x0f:`\xca\x01')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40092e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40092e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40092e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40092e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40092f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400930, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400931, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400932, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400933, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400934)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_19_symbolic(self):
        ''' Instruction PCMPESTRM_19
            Groups: sse42
            0x4009a6:	pcmpestrm	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009a6, 'f\x0f:`\xca)')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009a6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009a6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009a6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009a6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a9, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009aa, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ab, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009ac)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_2_symbolic(self):
        ''' Instruction PCMPESTRM_2
            Groups: sse42
            0x400a54:	pcmpestrm	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a54, 'f\x0f:`\xcad')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a54
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a54)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a54)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a54, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a55, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a56, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a57, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a58, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a59, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a5a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_20_symbolic(self):
        ''' Instruction PCMPESTRM_20
            Groups: sse42
            0x400a66:	pcmpestrm	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a66, 'f\x0f:`\xcai')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a66
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a66)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a66)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a66, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a67, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a68, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a69, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6b, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a6c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_21_symbolic(self):
        ''' Instruction PCMPESTRM_21
            Groups: sse42
            0x400958:	pcmpestrm	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400958, 'f\x0f:`\xca\x10')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400958
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400958)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400958)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400958, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400959, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40095a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40095b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40095c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40095d, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40095e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_22_symbolic(self):
        ''' Instruction PCMPESTRM_22
            Groups: sse42
            0x40095e:	pcmpestrm	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40095e, 'f\x0f:`\xca\x11')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40095e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40095e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40095e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400960, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400961, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400962, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400963, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.read_int(0x40095e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40095f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400964)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_23_symbolic(self):
        ''' Instruction PCMPESTRM_23
            Groups: sse42
            0x400976:	pcmpestrm	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400976, 'f\x0f:`\xca\x19')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400976
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400976)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400976)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400976, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400977, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400978, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400979, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40097a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40097b, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40097c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_24_symbolic(self):
        ''' Instruction PCMPESTRM_24
            Groups: sse42
            0x400a8a:	pcmpestrm	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a8a, 'f\x0f:`\xcau')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a8a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a8a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a8a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a8a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a8f, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a90)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_25_symbolic(self):
        ''' Instruction PCMPESTRM_25
            Groups: sse42
            0x400a12:	pcmpestrm	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a12, 'f\x0f:`\xcaM')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a12
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a12)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a12)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a12, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a13, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a14, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a15, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a16, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a17, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a18)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_26_symbolic(self):
        ''' Instruction PCMPESTRM_26
            Groups: sse42
            0x40093a:	pcmpestrm	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40093a, 'f\x0f:`\xca\x05')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40093a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40093a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40093a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40093a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40093b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40093c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40093d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40093e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40093f, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400940)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_27_symbolic(self):
        ''' Instruction PCMPESTRM_27
            Groups: sse42
            0x400a30:	pcmpestrm	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a30, 'f\x0f:`\xcaX')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a30
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a30)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a30)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a30, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a31, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a32, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a33, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a34, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a35, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a36)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_28_symbolic(self):
        ''' Instruction PCMPESTRM_28
            Groups: sse42
            0x4009ca:	pcmpestrm	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009ca, 'f\x0f:`\xca5')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009ca
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009ca)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009ca)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009ca, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cd, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ce, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009cf, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009d0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_29_symbolic(self):
        ''' Instruction PCMPESTRM_29
            Groups: sse42
            0x400a3c:	pcmpestrm	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a3c, 'f\x0f:`\xca\\')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a3c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a3c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a3c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a40, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a41, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a42)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_3_symbolic(self):
        ''' Instruction PCMPESTRM_3
            Groups: sse42
            0x400a18:	pcmpestrm	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a18, 'f\x0f:`\xcaP')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a18
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a18)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a18)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a18, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a19, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a1d, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a1e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_30_symbolic(self):
        ''' Instruction PCMPESTRM_30
            Groups: sse42
            0x40098e:	pcmpestrm	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40098e, 'f\x0f:`\xca!')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40098e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40098e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40098e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40098e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40098f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400990, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400991, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400992, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400993, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400994)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_31_symbolic(self):
        ''' Instruction PCMPESTRM_31
            Groups: sse42
            0x400a96:	pcmpestrm	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a96, 'f\x0f:`\xcay')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a96
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a96)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a96)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a96, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a97, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a98, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a99, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a9b, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a9c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_32_symbolic(self):
        ''' Instruction PCMPESTRM_32
            Groups: sse42
            0x400a90:	pcmpestrm	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a90, 'f\x0f:`\xcax')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a90
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a90)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a90)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a90, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a91, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a92, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a93, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a94, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a95, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a96)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_33_symbolic(self):
        ''' Instruction PCMPESTRM_33
            Groups: sse42
            0x400a06:	pcmpestrm	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a06, 'f\x0f:`\xcaI')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a06
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a06)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a06)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a06, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a07, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a08, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a09, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0b, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a0c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_34_symbolic(self):
        ''' Instruction PCMPESTRM_34
            Groups: sse42
            0x400928:	pcmpestrm	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400928, 'f\x0f:`\xca\x00')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400928
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400928)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400928)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400928, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400929, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40092a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40092b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40092c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40092d, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40092e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_35_symbolic(self):
        ''' Instruction PCMPESTRM_35
            Groups: sse42
            0x400a84:	pcmpestrm	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a84, 'f\x0f:`\xcat')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a84
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a84)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a84)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a84, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a85, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a86, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a87, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a88, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a89, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a8a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_36_symbolic(self):
        ''' Instruction PCMPESTRM_36
            Groups: sse42
            0x400a72:	pcmpestrm	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a72, 'f\x0f:`\xcam')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a72
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a72)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a72)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a72, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a73, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a74, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a75, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a76, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a77, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a78)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_37_symbolic(self):
        ''' Instruction PCMPESTRM_37
            Groups: sse42
            0x400946:	pcmpestrm	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400946, 'f\x0f:`\xca\t')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400946
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400946)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400946)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400946, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400947, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400948, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400949, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40094a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40094b, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40094c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_38_symbolic(self):
        ''' Instruction PCMPESTRM_38
            Groups: sse42
            0x400940:	pcmpestrm	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400940, 'f\x0f:`\xca\x08')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400940
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400940)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400940)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400940, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400941, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400942, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400943, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400944, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400945, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400946)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_39_symbolic(self):
        ''' Instruction PCMPESTRM_39
            Groups: sse42
            0x400aa2:	pcmpestrm	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400aa2, 'f\x0f:`\xca}')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400aa2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400aa2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400aa2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400aa2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400aa7, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400aa8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_4_symbolic(self):
        ''' Instruction PCMPESTRM_4
            Groups: sse42
            0x40097c:	pcmpestrm	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40097c, 'f\x0f:`\xca\x1c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40097c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40097c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40097c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400980, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400981, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.read_int(0x40097c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40097d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40097e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40097f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400982)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_40_symbolic(self):
        ''' Instruction PCMPESTRM_40
            Groups: sse42
            0x400a48:	pcmpestrm	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a48, 'f\x0f:`\xca`')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a48
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a48)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a48)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a48, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a49, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a4e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_41_symbolic(self):
        ''' Instruction PCMPESTRM_41
            Groups: sse42
            0x400952:	pcmpestrm	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400952, 'f\x0f:`\xca\r')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400952
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400952)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400952)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400952, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400953, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400954, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400955, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400956, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400957, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400958)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_42_symbolic(self):
        ''' Instruction PCMPESTRM_42
            Groups: sse42
            0x40094c:	pcmpestrm	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40094c, 'f\x0f:`\xca\x0c')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40094c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40094c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40094c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40094c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40094d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40094e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40094f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400950, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400951, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400952)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_43_symbolic(self):
        ''' Instruction PCMPESTRM_43
            Groups: sse42
            0x400a0c:	pcmpestrm	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a0c, 'f\x0f:`\xcaL')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a0c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a0c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a0c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a0c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a0f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a10, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a11, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a12)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_44_symbolic(self):
        ''' Instruction PCMPESTRM_44
            Groups: sse42
            0x400964:	pcmpestrm	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400964, 'f\x0f:`\xca\x14')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400964
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400964)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400964)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400964, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400965, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400966, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400967, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400968, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400969, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40096a)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_45_symbolic(self):
        ''' Instruction PCMPESTRM_45
            Groups: sse42
            0x400a36:	pcmpestrm	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a36, 'f\x0f:`\xcaY')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a36
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a36)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a36)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a36, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a37, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a38, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a39, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a3b, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a3c)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_46_symbolic(self):
        ''' Instruction PCMPESTRM_46
            Groups: sse42
            0x40099a:	pcmpestrm	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40099a, 'f\x0f:`\xca%')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x40099a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40099a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40099a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40099a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40099b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40099c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40099d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40099e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40099f, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009a0)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_47_symbolic(self):
        ''' Instruction PCMPESTRM_47
            Groups: sse42
            0x400988:	pcmpestrm	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400988, 'f\x0f:`\xca ')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400988
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400988)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400988)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400988, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400989, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40098a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40098b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40098c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40098d, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40098e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_48_symbolic(self):
        ''' Instruction PCMPESTRM_48
            Groups: sse42
            0x400a5a:	pcmpestrm	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a5a, 'f\x0f:`\xcae')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a5a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a5a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a5a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a5a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a5f, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a60)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_49_symbolic(self):
        ''' Instruction PCMPESTRM_49
            Groups: sse42
            0x40096a:	pcmpestrm	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40096a, 'f\x0f:`\xca\x15')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x40096a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40096a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40096a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40096a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40096b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40096c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40096d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40096e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40096f, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400970)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_5_symbolic(self):
        ''' Instruction PCMPESTRM_5
            Groups: sse42
            0x4009b2:	pcmpestrm	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009b2, 'f\x0f:`\xca-')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009b2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009b2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009b2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009b2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b7, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009b8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_50_symbolic(self):
        ''' Instruction PCMPESTRM_50
            Groups: sse42
            0x400a60:	pcmpestrm	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a60, 'f\x0f:`\xcah')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a60
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a60)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a60)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a60, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a61, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a62, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a63, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a64, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a65, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a66)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_51_symbolic(self):
        ''' Instruction PCMPESTRM_51
            Groups: sse42
            0x4009be:	pcmpestrm	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009be, 'f\x0f:`\xca1')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009be
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009be)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009be)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009c0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c1, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c3, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.read_int(0x4009be, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009c4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_52_symbolic(self):
        ''' Instruction PCMPESTRM_52
            Groups: sse42
            0x4009e2:	pcmpestrm	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009e2, 'f\x0f:`\xca=')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009e2
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009e2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009e2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009e2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e7, 8)== ord('='))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009e8)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_53_symbolic(self):
        ''' Instruction PCMPESTRM_53
            Groups: sse42
            0x4009d6:	pcmpestrm	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009d6, 'f\x0f:`\xca9')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009d6
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009d6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009d6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009d6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009d9, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009da, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009db, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009dc)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_54_symbolic(self):
        ''' Instruction PCMPESTRM_54
            Groups: sse42
            0x400a6c:	pcmpestrm	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a6c, 'f\x0f:`\xcal')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a6c
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a6c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a6c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a6c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a6f, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a70, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a71, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a72)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_55_symbolic(self):
        ''' Instruction PCMPESTRM_55
            Groups: sse42
            0x4009c4:	pcmpestrm	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009c4, 'f\x0f:`\xca4')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009c4
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009c4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009c4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009c4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c7, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009c9, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009ca)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_56_symbolic(self):
        ''' Instruction PCMPESTRM_56
            Groups: sse42
            0x400a00:	pcmpestrm	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a00, 'f\x0f:`\xcaH')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a00
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a00)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a00)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a00, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a01, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a02, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a03, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a04, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a05, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a06)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_57_symbolic(self):
        ''' Instruction PCMPESTRM_57
            Groups: sse42
            0x4009e8:	pcmpestrm	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009e8, 'f\x0f:`\xca@')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009e8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009e8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009e8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009e8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ea, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009eb, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ec, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ed, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009ee)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_58_symbolic(self):
        ''' Instruction PCMPESTRM_58
            Groups: sse42
            0x4009b8:	pcmpestrm	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009b8, 'f\x0f:`\xca0')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009b8
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009b8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009b8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009b8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009b9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ba, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bb, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009bd, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009be)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_59_symbolic(self):
        ''' Instruction PCMPESTRM_59
            Groups: sse42
            0x4009ee:	pcmpestrm	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009ee, 'f\x0f:`\xcaA')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009ee
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009ee)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009ee)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009ee, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ef, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f1, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009f3, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009f4)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_6_symbolic(self):
        ''' Instruction PCMPESTRM_6
            Groups: sse42
            0x4009a0:	pcmpestrm	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009a0, 'f\x0f:`\xca(')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009a0
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009a0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009a0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009a0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a3, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009a5, 8)== ord('('))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4009a6)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_60_symbolic(self):
        ''' Instruction PCMPESTRM_60
            Groups: sse42
            0x400970:	pcmpestrm	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400970, 'f\x0f:`\xca\x18')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400970
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400970)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400970)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400970, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400971, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400972, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400973, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400974, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400975, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400976)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_61_symbolic(self):
        ''' Instruction PCMPESTRM_61
            Groups: sse42
            0x400a78:	pcmpestrm	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a78, 'f\x0f:`\xcap')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a78
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a78)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a78)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a78, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a79, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7b, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a7d, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a7e)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_62_symbolic(self):
        ''' Instruction PCMPESTRM_62
            Groups: sse42
            0x400a2a:	pcmpestrm	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a2a, 'f\x0f:`\xcaU')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a2a
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a2a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a2a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a2a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2d, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a2f, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a30)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_63_symbolic(self):
        ''' Instruction PCMPESTRM_63
            Groups: sse42
            0x400a42:	pcmpestrm	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a42, 'f\x0f:`\xca]')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400a42
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a42)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a42)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a42, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a43, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a44, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a45, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a46, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a47, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400a48)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_64_symbolic(self):
        ''' Instruction PCMPESTRM_64
            Groups: sse42
            0x400a4e:	pcmpestrm	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400a4e, 'f\x0f:`\xcaa')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x400a4e
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400a4e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400a4e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400a4e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a4f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400a50, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400a51, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400a52, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400a53, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a54)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_7_symbolic(self):
        ''' Instruction PCMPESTRM_7
            Groups: sse42
            0x4009dc:	pcmpestrm	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009dc, 'f\x0f:`\xca<')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x4009dc
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009dc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009dc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009e0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009e1, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.read_int(0x4009dc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009dd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009de, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009df, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4009e2)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_8_symbolic(self):
        ''' Instruction PCMPESTRM_8
            Groups: sse42
            0x4009fa:	pcmpestrm	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4009fa, 'f\x0f:`\xcaE')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.RIP = 0x4009fa
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4009fa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4009fa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4009fa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fd, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x4009fe, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4009ff, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400a00)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPESTRM_9_symbolic(self):
        ''' Instruction PCMPESTRM_9
            Groups: sse42
            0x400982:	pcmpestrm	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400982, 'f\x0f:`\xca\x1d')
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.RIP = 0x400982
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.EAX = cs.new_bitvec(32)
        cs.add(cpu.EAX == 0x6)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.EDX = cs.new_bitvec(32)
        cs.add(cpu.EDX == 0x7)
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400982)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400982)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400982, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400983, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400984, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400985, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400986, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400987, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400988)
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.EAX == 0x6)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.EDX == 0x7)
        condition = Operators.AND(condition, cpu.SF == True)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_1_symbolic(self):
        ''' Instruction PCMPISTRI_1
            Groups: sse42
            0x400746:	pcmpistri	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400746, 'f\x0f:c\xcam')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400746
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400746)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400746)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400746, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400747, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400748, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400749, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40074a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40074b, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40074c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_10_symbolic(self):
        ''' Instruction PCMPISTRI_10
            Groups: sse42
            0x400650:	pcmpistri	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400650, 'f\x0f:c\xca\x1c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400650
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400650)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400650)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400650, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400651, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400652, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400653, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400654, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400655, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400656)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_11_symbolic(self):
        ''' Instruction PCMPISTRI_11
            Groups: sse42
            0x400668:	pcmpistri	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400668, 'f\x0f:c\xca$')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400668
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400668)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400668)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400668, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400669, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40066a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40066b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40066c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40066d, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40066e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_12_symbolic(self):
        ''' Instruction PCMPISTRI_12
            Groups: sse42
            0x400698:	pcmpistri	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400698, 'f\x0f:c\xca4')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400698
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400698)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400698)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400698, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400699, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40069a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40069b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40069c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40069d, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40069e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_13_symbolic(self):
        ''' Instruction PCMPISTRI_13
            Groups: sse42
            0x4006c8:	pcmpistri	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006c8, 'f\x0f:c\xcaD')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006c8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006c8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006c8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006c8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ca, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cb, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cd, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006ce)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_14_symbolic(self):
        ''' Instruction PCMPISTRI_14
            Groups: sse42
            0x4006bc:	pcmpistri	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006bc, 'f\x0f:c\xca@')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006bc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006bc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006bc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006c0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c1, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006be, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bf, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006c2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_15_symbolic(self):
        ''' Instruction PCMPISTRI_15
            Groups: sse42
            0x40068c:	pcmpistri	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40068c, 'f\x0f:c\xca0')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40068c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40068c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40068c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40068c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40068d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40068e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40068f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400690, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400691, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400692)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_16_symbolic(self):
        ''' Instruction PCMPISTRI_16
            Groups: sse42
            0x40062c:	pcmpistri	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40062c, 'f\x0f:c\xca\x10')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40062c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40062c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40062c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40062c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40062d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40062e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40062f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400630, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400631, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400632)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_17_symbolic(self):
        ''' Instruction PCMPISTRI_17
            Groups: sse42
            0x400764:	pcmpistri	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400764, 'f\x0f:c\xcax')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400764
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400764)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400764)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400764, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400765, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400766, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400767, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400768, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400769, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40076a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_18_symbolic(self):
        ''' Instruction PCMPISTRI_18
            Groups: sse42
            0x4005fc:	pcmpistri	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4005fc, 'f\x0f:c\xca\x00')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x82)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4005fc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == True)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4005fc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4005fc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400600, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400601, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.read_int(0x4005fc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4005fd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4005fe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4005ff, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400602)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_19_symbolic(self):
        ''' Instruction PCMPISTRI_19
            Groups: sse42
            0x4006ce:	pcmpistri	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006ce, 'f\x0f:c\xcaE')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006ce
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006ce)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006ce)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006ce, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006cf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d3, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006d4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_2_symbolic(self):
        ''' Instruction PCMPISTRI_2
            Groups: sse42
            0x400704:	pcmpistri	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400704, 'f\x0f:c\xcaX')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400704
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400704)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400704)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400704, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400705, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400706, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400707, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400708, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400709, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40070a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_20_symbolic(self):
        ''' Instruction PCMPISTRI_20
            Groups: sse42
            0x4006f8:	pcmpistri	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006f8, 'f\x0f:c\xcaT')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006f8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006f8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006f8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006f8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fb, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fd, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006fe)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_21_symbolic(self):
        ''' Instruction PCMPISTRI_21
            Groups: sse42
            0x4006c2:	pcmpistri	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006c2, 'f\x0f:c\xcaA')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006c2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006c2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006c2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006c2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c5, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006c7, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006c8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_22_symbolic(self):
        ''' Instruction PCMPISTRI_22
            Groups: sse42
            0x40069e:	pcmpistri	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40069e, 'f\x0f:c\xca5')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40069e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40069e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40069e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006a0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a1, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a3, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.read_int(0x40069e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40069f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006a4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_23_symbolic(self):
        ''' Instruction PCMPISTRI_23
            Groups: sse42
            0x4006b6:	pcmpistri	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006b6, 'f\x0f:c\xca=')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006b6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006b6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006b6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006b6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b9, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ba, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006bb, 8)== ord('='))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006bc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_24_symbolic(self):
        ''' Instruction PCMPISTRI_24
            Groups: sse42
            0x400620:	pcmpistri	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400620, 'f\x0f:c\xca\x0c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400620
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400620)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400620)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400620, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400621, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400622, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400623, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400624, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400625, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400626)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_25_symbolic(self):
        ''' Instruction PCMPISTRI_25
            Groups: sse42
            0x400710:	pcmpistri	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400710, 'f\x0f:c\xca\\')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400710
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400710)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400710)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400710, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400711, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400712, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400713, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400714, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400715, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400716)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_26_symbolic(self):
        ''' Instruction PCMPISTRI_26
            Groups: sse42
            0x4006b0:	pcmpistri	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006b0, 'f\x0f:c\xca<')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006b0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006b0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006b0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006b0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b3, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006b5, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006b6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_27_symbolic(self):
        ''' Instruction PCMPISTRI_27
            Groups: sse42
            0x400740:	pcmpistri	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400740, 'f\x0f:c\xcal')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400740
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400740)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400740)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400740, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400741, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400742, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400743, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400744, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400745, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400746)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_28_symbolic(self):
        ''' Instruction PCMPISTRI_28
            Groups: sse42
            0x400692:	pcmpistri	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400692, 'f\x0f:c\xca1')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400692
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400692)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400692)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400692, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400693, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400694, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400695, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400696, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400697, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400698)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_29_symbolic(self):
        ''' Instruction PCMPISTRI_29
            Groups: sse42
            0x40064a:	pcmpistri	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40064a, 'f\x0f:c\xca\x19')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40064a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40064a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40064a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40064a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40064b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40064c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40064d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40064e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40064f, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400650)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_3_symbolic(self):
        ''' Instruction PCMPISTRI_3
            Groups: sse42
            0x400728:	pcmpistri	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400728, 'f\x0f:c\xcad')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400728
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400728)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400728)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400728, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400729, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40072a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40072b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40072c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40072d, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40072e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_30_symbolic(self):
        ''' Instruction PCMPISTRI_30
            Groups: sse42
            0x40077c:	pcmpistri	xmm1, xmmword ptr [rbp - 0xa0], 0x1b
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.mmap(0x7fffffffe000, 0x1000, 'rwx')
        mem.write(0x400780, '\x8d`\xff\xff\xff\x1b')
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe190)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe191)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe192)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe193)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe194)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe195)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe196)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe197)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe198)
        value = cs.new_bitvec(8)
        cs.add(value == 0x41)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe199)
        value = cs.new_bitvec(8)
        cs.add(value == 0x42)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19a)
        value = cs.new_bitvec(8)
        cs.add(value == 0x43)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19b)
        value = cs.new_bitvec(8)
        cs.add(value == 0x44)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19c)
        value = cs.new_bitvec(8)
        cs.add(value == 0x45)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19d)
        value = cs.new_bitvec(8)
        cs.add(value == 0x46)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19e)
        value = cs.new_bitvec(8)
        cs.add(value == 0x47)
        mem[addr] = value
        addr = cs.new_bitvec(64)
        cs.add(addr == 0x7fffffffe19f)
        value = cs.new_bitvec(8)
        cs.add(value == 0x48)
        mem[addr] = value
        mem.write(0x40077c, 'f\x0f:c')
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40077c
        cpu.RBP = cs.new_bitvec(64)
        cs.add(cpu.RBP == 0x7fffffffe230)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40077c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'RBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'RBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40077c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400780, 8)== ord('\x8d'))
        condition = Operators.AND(condition, cpu.read_int(0x400781, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x400782, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400783, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400784, 8)== ord('\xff'))
        condition = Operators.AND(condition, cpu.read_int(0x400785, 8)== ord('\x1b'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe190, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe191, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe192, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe193, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe194, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe195, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe196, 8)== ord('G'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe197, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe198, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe199, 8)== ord('B'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19a, 8)== ord('C'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19b, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19c, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19d, 8)== ord('F'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19e, 8)== ord('G'))
        condition = Operators.AND(condition, cpu.read_int(0x7fffffffe19f, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.read_int(0x40077c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40077d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40077e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40077f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.SF == False)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400786)
        condition = Operators.AND(condition, cpu.RBP == 0x7fffffffe230)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_31_symbolic(self):
        ''' Instruction PCMPISTRI_31
            Groups: sse42
            0x400626:	pcmpistri	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400626, 'f\x0f:c\xca\r')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400626
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400626)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400626)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400626, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400627, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400628, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400629, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40062a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40062b, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40062c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_32_symbolic(self):
        ''' Instruction PCMPISTRI_32
            Groups: sse42
            0x4006d4:	pcmpistri	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006d4, 'f\x0f:c\xcaH')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006d4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006d4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006d4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d7, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006d9, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006da)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_33_symbolic(self):
        ''' Instruction PCMPISTRI_33
            Groups: sse42
            0x400686:	pcmpistri	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400686, 'f\x0f:c\xca-')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400686
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400686)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400686)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400686, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400687, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400688, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400689, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40068a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40068b, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40068c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_34_symbolic(self):
        ''' Instruction PCMPISTRI_34
            Groups: sse42
            0x400770:	pcmpistri	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400770, 'f\x0f:c\xca|')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400770
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400770)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400770)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400770, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400771, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400772, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400773, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400774, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400775, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400776)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_35_symbolic(self):
        ''' Instruction PCMPISTRI_35
            Groups: sse42
            0x40071c:	pcmpistri	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40071c, 'f\x0f:c\xca`')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40071c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40071c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40071c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400720, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400721, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.read_int(0x40071c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40071d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40071e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40071f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400722)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_36_symbolic(self):
        ''' Instruction PCMPISTRI_36
            Groups: sse42
            0x400776:	pcmpistri	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400776, 'f\x0f:c\xca}')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400776
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400776)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400776)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400776, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400777, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400778, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400779, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40077a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40077b, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40077c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_37_symbolic(self):
        ''' Instruction PCMPISTRI_37
            Groups: sse42
            0x400758:	pcmpistri	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400758, 'f\x0f:c\xcat')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400758
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400758)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400758)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400758, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400759, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40075a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40075b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40075c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40075d, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40075e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_38_symbolic(self):
        ''' Instruction PCMPISTRI_38
            Groups: sse42
            0x400602:	pcmpistri	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400602, 'f\x0f:c\xca\x01')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400602
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400602)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400602)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400602, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400603, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400604, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400605, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400606, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400607, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400608)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_39_symbolic(self):
        ''' Instruction PCMPISTRI_39
            Groups: sse42
            0x400608:	pcmpistri	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400608, 'f\x0f:c\xca\x04')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400608
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400608)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400608)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400608, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400609, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40060a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40060b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40060c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40060d, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40060e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_4_symbolic(self):
        ''' Instruction PCMPISTRI_4
            Groups: sse42
            0x400752:	pcmpistri	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400752, 'f\x0f:c\xcaq')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400752
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400752)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400752)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400752, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400753, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400754, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400755, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400756, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400757, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400758)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_40_symbolic(self):
        ''' Instruction PCMPISTRI_40
            Groups: sse42
            0x400638:	pcmpistri	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400638, 'f\x0f:c\xca\x14')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400638
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400638)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400638)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400638, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400639, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40063a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40063b, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40063c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40063d, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40063e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_41_symbolic(self):
        ''' Instruction PCMPISTRI_41
            Groups: sse42
            0x40074c:	pcmpistri	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40074c, 'f\x0f:c\xcap')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40074c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40074c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40074c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40074c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40074d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40074e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40074f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400750, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400751, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400752)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_42_symbolic(self):
        ''' Instruction PCMPISTRI_42
            Groups: sse42
            0x400734:	pcmpistri	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400734, 'f\x0f:c\xcah')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400734
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400734)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400734)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400734, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400735, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400736, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400737, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400738, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400739, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0xf)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40073a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_43_symbolic(self):
        ''' Instruction PCMPISTRI_43
            Groups: sse42
            0x400644:	pcmpistri	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400644, 'f\x0f:c\xca\x18')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400644
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400644)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400644)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400644, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400645, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400646, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400647, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400648, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400649, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40064a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_44_symbolic(self):
        ''' Instruction PCMPISTRI_44
            Groups: sse42
            0x40065c:	pcmpistri	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40065c, 'f\x0f:c\xca ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40065c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40065c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40065c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400660, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400661, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.read_int(0x40065c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40065d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40065e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40065f, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400662)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_45_symbolic(self):
        ''' Instruction PCMPISTRI_45
            Groups: sse42
            0x40061a:	pcmpistri	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40061a, 'f\x0f:c\xca\t')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40061a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40061a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40061a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40061a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40061b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40061c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40061d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40061e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40061f, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400620)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_46_symbolic(self):
        ''' Instruction PCMPISTRI_46
            Groups: sse42
            0x40073a:	pcmpistri	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40073a, 'f\x0f:c\xcai')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40073a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40073a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40073a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40073a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40073b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40073c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40073d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40073e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40073f, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400740)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_47_symbolic(self):
        ''' Instruction PCMPISTRI_47
            Groups: sse42
            0x40070a:	pcmpistri	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40070a, 'f\x0f:c\xcaY')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40070a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40070a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40070a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40070a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40070b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40070c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40070d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40070e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40070f, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400710)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_48_symbolic(self):
        ''' Instruction PCMPISTRI_48
            Groups: sse42
            0x4006aa:	pcmpistri	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006aa, 'f\x0f:c\xca9')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006aa
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006aa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006aa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ab, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ac, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ad, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ae, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006af, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006b0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_49_symbolic(self):
        ''' Instruction PCMPISTRI_49
            Groups: sse42
            0x400716:	pcmpistri	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400716, 'f\x0f:c\xca]')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400716
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400716)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400716)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400716, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400717, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400718, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400719, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40071a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40071b, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40071c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_5_symbolic(self):
        ''' Instruction PCMPISTRI_5
            Groups: sse42
            0x40063e:	pcmpistri	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40063e, 'f\x0f:c\xca\x15')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40063e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40063e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40063e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400640, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400641, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400642, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400643, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.read_int(0x40063e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40063f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400644)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_50_symbolic(self):
        ''' Instruction PCMPISTRI_50
            Groups: sse42
            0x400656:	pcmpistri	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400656, 'f\x0f:c\xca\x1d')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x1)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400656
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400656)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400656)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400656, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400657, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400658, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400659, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40065a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40065b, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x1)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40065c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_51_symbolic(self):
        ''' Instruction PCMPISTRI_51
            Groups: sse42
            0x40072e:	pcmpistri	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40072e, 'f\x0f:c\xcae')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40072e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40072e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40072e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40072e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40072f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400730, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400731, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400732, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400733, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400734)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_52_symbolic(self):
        ''' Instruction PCMPISTRI_52
            Groups: sse42
            0x400680:	pcmpistri	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400680, 'f\x0f:c\xca,')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400680
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400680)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400680)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400680, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400681, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400682, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400683, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400684, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400685, 8)== ord(','))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400686)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_53_symbolic(self):
        ''' Instruction PCMPISTRI_53
            Groups: sse42
            0x400674:	pcmpistri	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400674, 'f\x0f:c\xca(')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400674
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400674)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400674)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400674, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400675, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400676, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400677, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400678, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400679, 8)== ord('('))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40067a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_54_symbolic(self):
        ''' Instruction PCMPISTRI_54
            Groups: sse42
            0x40067a:	pcmpistri	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40067a, 'f\x0f:c\xca)')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40067a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40067a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40067a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40067a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40067b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40067c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40067d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40067e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40067f, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400680)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_55_symbolic(self):
        ''' Instruction PCMPISTRI_55
            Groups: sse42
            0x400722:	pcmpistri	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400722, 'f\x0f:c\xcaa')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400722
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400722)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400722)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400722, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400723, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400724, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400725, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400726, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400727, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400728)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_56_symbolic(self):
        ''' Instruction PCMPISTRI_56
            Groups: sse42
            0x4006e6:	pcmpistri	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006e6, 'f\x0f:c\xcaM')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006e6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006e6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006e6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e9, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ea, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006eb, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x4)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006ec)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_57_symbolic(self):
        ''' Instruction PCMPISTRI_57
            Groups: sse42
            0x40076a:	pcmpistri	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40076a, 'f\x0f:c\xcay')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40076a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40076a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40076a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40076a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40076b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40076c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40076d, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x40076e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40076f, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400770)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_58_symbolic(self):
        ''' Instruction PCMPISTRI_58
            Groups: sse42
            0x4006ec:	pcmpistri	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006ec, 'f\x0f:c\xcaP')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x4)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006ec
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006ec)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006ec)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006ec, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ee, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ef, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f1, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006f2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_59_symbolic(self):
        ''' Instruction PCMPISTRI_59
            Groups: sse42
            0x400632:	pcmpistri	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400632, 'f\x0f:c\xca\x11')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400632
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400632)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400632)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400632, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400633, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400634, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400635, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400636, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400637, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400638)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_6_symbolic(self):
        ''' Instruction PCMPISTRI_6
            Groups: sse42
            0x40066e:	pcmpistri	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40066e, 'f\x0f:c\xca%')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40066e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40066e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40066e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40066e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40066f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400670, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400671, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400672, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400673, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400674)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_60_symbolic(self):
        ''' Instruction PCMPISTRI_60
            Groups: sse42
            0x4006f2:	pcmpistri	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006f2, 'f\x0f:c\xcaQ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006f2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006f2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006f2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006f2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f5, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006f7, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006f8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_61_symbolic(self):
        ''' Instruction PCMPISTRI_61
            Groups: sse42
            0x400614:	pcmpistri	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400614, 'f\x0f:c\xca\x08')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400614
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400614)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400614)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400614, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400615, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400616, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400617, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400618, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400619, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40061a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_62_symbolic(self):
        ''' Instruction PCMPISTRI_62
            Groups: sse42
            0x4006da:	pcmpistri	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006da, 'f\x0f:c\xcaI')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0xf)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006da
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006da)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006da)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006da, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006db, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006dc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006dd, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006de, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006df, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x7)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006e0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_63_symbolic(self):
        ''' Instruction PCMPISTRI_63
            Groups: sse42
            0x4006a4:	pcmpistri	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006a4, 'f\x0f:c\xca8')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x8)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006a4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006a4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006a4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006a4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a7, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006a9, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x10)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4006aa)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_64_symbolic(self):
        ''' Instruction PCMPISTRI_64
            Groups: sse42
            0x4006fe:	pcmpistri	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006fe, 'f\x0f:c\xcaU')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4006fe
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006fe)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006fe)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400700, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400701, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400702, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400703, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.read_int(0x4006fe, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006ff, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400704)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_65_symbolic(self):
        ''' Instruction PCMPISTRI_65
            Groups: sse42
            0x400662:	pcmpistri	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400662, 'f\x0f:c\xca!')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400662
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400662)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400662)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400662, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400663, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400664, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400665, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400666, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400667, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400668)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_7_symbolic(self):
        ''' Instruction PCMPISTRI_7
            Groups: sse42
            0x4006e0:	pcmpistri	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4006e0, 'f\x0f:c\xcaL')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x7)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4006e0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4006e0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4006e0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4006e0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e3, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4006e5, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4006e6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_8_symbolic(self):
        ''' Instruction PCMPISTRI_8
            Groups: sse42
            0x40060e:	pcmpistri	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40060e, 'f\x0f:c\xca\x05')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x0)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40060e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40060e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40060e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40060e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40060f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400610, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400611, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400612, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400613, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x0)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400614)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRI_9_symbolic(self):
        ''' Instruction PCMPISTRI_9
            Groups: sse42
            0x40075e:	pcmpistri	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40075e, 'f\x0f:c\xcau')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x48474645444342414847464544434241)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.ECX = cs.new_bitvec(32)
        cs.add(cpu.ECX == 0x10)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40075e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40075e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40075e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400760, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400761, 8)== ord('c'))
        condition = Operators.AND(condition, cpu.read_int(0x400762, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400763, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.read_int(0x40075e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40075f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == False)
        condition = Operators.AND(condition, cpu.ECX == 0x8)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400764)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_1_symbolic(self):
        ''' Instruction PCMPISTRM_1
            Groups: sse42
            0x400856:	pcmpistrm	xmm1, xmm2, 0x41
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400856, 'f\x0f:b\xcaA')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400856
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400856)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400856)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400856, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400857, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400858, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400859, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40085a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40085b, 8)== ord('A'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40085c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_10_symbolic(self):
        ''' Instruction PCMPISTRM_10
            Groups: sse42
            0x4007cc:	pcmpistrm	xmm1, xmm2, 0x14
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007cc, 'f\x0f:b\xca\x14')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007cc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007cc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007cc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007cc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007cd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ce, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007cf, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d1, 8)== ord('\x14'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007d2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_11_symbolic(self):
        ''' Instruction PCMPISTRM_11
            Groups: sse42
            0x40087a:	pcmpistrm	xmm1, xmm2, 0x4d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40087a, 'f\x0f:b\xcaM')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40087a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40087a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40087a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40087a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40087b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40087c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40087d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40087e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40087f, 8)== ord('M'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400880)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_12_symbolic(self):
        ''' Instruction PCMPISTRM_12
            Groups: sse42
            0x400802:	pcmpistrm	xmm1, xmm2, 0x25
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400802, 'f\x0f:b\xca%')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400802
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400802)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400802)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400802, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400803, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400804, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400805, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400806, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400807, 8)== ord('%'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400808)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_13_symbolic(self):
        ''' Instruction PCMPISTRM_13
            Groups: sse42
            0x4007fc:	pcmpistrm	xmm1, xmm2, 0x24
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007fc, 'f\x0f:b\xca$')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007fc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007fc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007fc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400800, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400801, 8)== ord('$'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fe, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ff, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400802)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_14_symbolic(self):
        ''' Instruction PCMPISTRM_14
            Groups: sse42
            0x4008c8:	pcmpistrm	xmm1, xmm2, 0x68
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008c8, 'f\x0f:b\xcah')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008c8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008c8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008c8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008c8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ca, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cb, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cd, 8)== ord('h'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008ce)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_15_symbolic(self):
        ''' Instruction PCMPISTRM_15
            Groups: sse42
            0x4008f8:	pcmpistrm	xmm1, xmm2, 0x78
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008f8, 'f\x0f:b\xcax')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008f8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008f8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008f8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008f8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fb, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fd, 8)== ord('x'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008fe)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_16_symbolic(self):
        ''' Instruction PCMPISTRM_16
            Groups: sse42
            0x40080e:	pcmpistrm	xmm1, xmm2, 0x29
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40080e, 'f\x0f:b\xca)')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40080e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40080e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40080e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40080e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40080f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400810, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400811, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400812, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400813, 8)== ord(')'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400814)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_17_symbolic(self):
        ''' Instruction PCMPISTRM_17
            Groups: sse42
            0x40089e:	pcmpistrm	xmm1, xmm2, 0x59
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40089e, 'f\x0f:b\xcaY')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40089e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40089e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40089e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008a0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a3, 8)== ord('Y'))
        condition = Operators.AND(condition, cpu.read_int(0x40089e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40089f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008a4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_18_symbolic(self):
        ''' Instruction PCMPISTRM_18
            Groups: sse42
            0x4008f2:	pcmpistrm	xmm1, xmm2, 0x75
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008f2, 'f\x0f:b\xcau')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008f2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008f2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008f2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008f2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f7, 8)== ord('u'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008f8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_19_symbolic(self):
        ''' Instruction PCMPISTRM_19
            Groups: sse42
            0x4007b4:	pcmpistrm	xmm1, xmm2, 0xc
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007b4, 'f\x0f:b\xca\x0c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007b4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007b4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007b4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007b4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b9, 8)== ord('\x0c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007ba)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_2_symbolic(self):
        ''' Instruction PCMPISTRM_2
            Groups: sse42
            0x4008ec:	pcmpistrm	xmm1, xmm2, 0x74
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008ec, 'f\x0f:b\xcat')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008ec
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008ec)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008ec)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008ec, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ed, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ee, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ef, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008f1, 8)== ord('t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008f2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_20_symbolic(self):
        ''' Instruction PCMPISTRM_20
            Groups: sse42
            0x4007d8:	pcmpistrm	xmm1, xmm2, 0x18
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007d8, 'f\x0f:b\xca\x18')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007d8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007d8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007d8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007d8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007da, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007db, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007dc, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007dd, 8)== ord('\x18'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007de)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_21_symbolic(self):
        ''' Instruction PCMPISTRM_21
            Groups: sse42
            0x400892:	pcmpistrm	xmm1, xmm2, 0x55
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400892, 'f\x0f:b\xcaU')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400892
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400892)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400892)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400892, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400893, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400894, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400895, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400896, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400897, 8)== ord('U'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400898)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_22_symbolic(self):
        ''' Instruction PCMPISTRM_22
            Groups: sse42
            0x40084a:	pcmpistrm	xmm1, xmm2, 0x3d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40084a, 'f\x0f:b\xca=')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40084a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40084a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40084a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40084a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40084b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40084c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40084d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40084e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40084f, 8)== ord('='))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400850)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_23_symbolic(self):
        ''' Instruction PCMPISTRM_23
            Groups: sse42
            0x40088c:	pcmpistrm	xmm1, xmm2, 0x54
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40088c, 'f\x0f:b\xcaT')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40088c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40088c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40088c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40088c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40088d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40088e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40088f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400890, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400891, 8)== ord('T'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400892)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_24_symbolic(self):
        ''' Instruction PCMPISTRM_24
            Groups: sse42
            0x4008fe:	pcmpistrm	xmm1, xmm2, 0x79
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008fe, 'f\x0f:b\xcay')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008fe
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008fe)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008fe)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400900, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400901, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400902, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400903, 8)== ord('y'))
        condition = Operators.AND(condition, cpu.read_int(0x4008fe, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ff, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400904)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_25_symbolic(self):
        ''' Instruction PCMPISTRM_25
            Groups: sse42
            0x400838:	pcmpistrm	xmm1, xmm2, 0x38
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400838, 'f\x0f:b\xca8')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400838
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400838)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400838)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400838, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400839, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40083a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40083b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40083c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40083d, 8)== ord('8'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40083e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_26_symbolic(self):
        ''' Instruction PCMPISTRM_26
            Groups: sse42
            0x400832:	pcmpistrm	xmm1, xmm2, 0x35
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400832, 'f\x0f:b\xca5')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400832
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400832)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400832)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400832, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400833, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400834, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400835, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400836, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400837, 8)== ord('5'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400838)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_27_symbolic(self):
        ''' Instruction PCMPISTRM_27
            Groups: sse42
            0x400820:	pcmpistrm	xmm1, xmm2, 0x30
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400820, 'f\x0f:b\xca0')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400820
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400820)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400820)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400820, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400821, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400822, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400823, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400824, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400825, 8)== ord('0'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400826)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_28_symbolic(self):
        ''' Instruction PCMPISTRM_28
            Groups: sse42
            0x400850:	pcmpistrm	xmm1, xmm2, 0x40
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400850, 'f\x0f:b\xca@')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400850
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400850)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400850)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400850, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400851, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400852, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400853, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400854, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400855, 8)== ord('@'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400856)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_29_symbolic(self):
        ''' Instruction PCMPISTRM_29
            Groups: sse42
            0x4007d2:	pcmpistrm	xmm1, xmm2, 0x15
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007d2, 'f\x0f:b\xca\x15')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007d2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007d2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007d2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007d2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007d7, 8)== ord('\x15'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007d8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_3_symbolic(self):
        ''' Instruction PCMPISTRM_3
            Groups: sse42
            0x400826:	pcmpistrm	xmm1, xmm2, 0x31
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400826, 'f\x0f:b\xca1')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400826
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400826)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400826)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400826, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400827, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400828, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400829, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40082a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40082b, 8)== ord('1'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40082c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_30_symbolic(self):
        ''' Instruction PCMPISTRM_30
            Groups: sse42
            0x400898:	pcmpistrm	xmm1, xmm2, 0x58
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400898, 'f\x0f:b\xcaX')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400898
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400898)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400898)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400898, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400899, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40089a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40089b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40089c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40089d, 8)== ord('X'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40089e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_31_symbolic(self):
        ''' Instruction PCMPISTRM_31
            Groups: sse42
            0x4008aa:	pcmpistrm	xmm1, xmm2, 0x5d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008aa, 'f\x0f:b\xca]')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008aa
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008aa)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008aa)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008aa, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ab, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ac, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ad, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ae, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008af, 8)== ord(']'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008b0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_32_symbolic(self):
        ''' Instruction PCMPISTRM_32
            Groups: sse42
            0x4007ea:	pcmpistrm	xmm1, xmm2, 0x1d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007ea, 'f\x0f:b\xca\x1d')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007ea
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007ea)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007ea)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007ea, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007eb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ec, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ed, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ee, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ef, 8)== ord('\x1d'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007f0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_33_symbolic(self):
        ''' Instruction PCMPISTRM_33
            Groups: sse42
            0x4007f6:	pcmpistrm	xmm1, xmm2, 0x21
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007f6, 'f\x0f:b\xca!')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007f6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007f6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007f6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007f6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fa, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007fb, 8)== ord('!'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007fc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_34_symbolic(self):
        ''' Instruction PCMPISTRM_34
            Groups: sse42
            0x4008b0:	pcmpistrm	xmm1, xmm2, 0x60
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008b0, 'f\x0f:b\xca`')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008b0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008b0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008b0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008b0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b5, 8)== ord('`'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008b6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_35_symbolic(self):
        ''' Instruction PCMPISTRM_35
            Groups: sse42
            0x4008a4:	pcmpistrm	xmm1, xmm2, 0x5c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008a4, 'f\x0f:b\xca\\')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008a4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008a4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008a4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008a4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008a9, 8)== ord('\\'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008aa)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_36_symbolic(self):
        ''' Instruction PCMPISTRM_36
            Groups: sse42
            0x4008e0:	pcmpistrm	xmm1, xmm2, 0x70
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008e0, 'f\x0f:b\xcap')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008e0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008e0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008e0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008e0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e5, 8)== ord('p'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008e6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_37_symbolic(self):
        ''' Instruction PCMPISTRM_37
            Groups: sse42
            0x400904:	pcmpistrm	xmm1, xmm2, 0x7c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400904, 'f\x0f:b\xca|')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400904
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400904)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400904)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400904, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400905, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400906, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400907, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400908, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400909, 8)== ord('|'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40090a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_38_symbolic(self):
        ''' Instruction PCMPISTRM_38
            Groups: sse42
            0x4008c2:	pcmpistrm	xmm1, xmm2, 0x65
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008c2, 'f\x0f:b\xcae')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008c2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008c2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008c2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008c2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c7, 8)== ord('e'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008c8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_39_symbolic(self):
        ''' Instruction PCMPISTRM_39
            Groups: sse42
            0x40081a:	pcmpistrm	xmm1, xmm2, 0x2d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40081a, 'f\x0f:b\xca-')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40081a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40081a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40081a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40081a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40081b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40081c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40081d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40081e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40081f, 8)== ord('-'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400820)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_4_symbolic(self):
        ''' Instruction PCMPISTRM_4
            Groups: sse42
            0x4008bc:	pcmpistrm	xmm1, xmm2, 0x64
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008bc, 'f\x0f:b\xcad')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008bc
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008bc)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008bc)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008c0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008c1, 8)== ord('d'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bc, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bd, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008be, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bf, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008c2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_40_symbolic(self):
        ''' Instruction PCMPISTRM_40
            Groups: sse42
            0x4007de:	pcmpistrm	xmm1, xmm2, 0x19
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007de, 'f\x0f:b\xca\x19')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007de
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007de)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007de)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007e0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e3, 8)== ord('\x19'))
        condition = Operators.AND(condition, cpu.read_int(0x4007de, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007df, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007e4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_41_symbolic(self):
        ''' Instruction PCMPISTRM_41
            Groups: sse42
            0x400814:	pcmpistrm	xmm1, xmm2, 0x2c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400814, 'f\x0f:b\xca,')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400814
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400814)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400814)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400814, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400815, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400816, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400817, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400818, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400819, 8)== ord(','))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40081a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_42_symbolic(self):
        ''' Instruction PCMPISTRM_42
            Groups: sse42
            0x4007c6:	pcmpistrm	xmm1, xmm2, 0x11
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007c6, 'f\x0f:b\xca\x11')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007c6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007c6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007c6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007c6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ca, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007cb, 8)== ord('\x11'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007cc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_43_symbolic(self):
        ''' Instruction PCMPISTRM_43
            Groups: sse42
            0x400868:	pcmpistrm	xmm1, xmm2, 0x48
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400868, 'f\x0f:b\xcaH')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400868
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400868)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400868)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400868, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400869, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40086a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40086b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40086c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40086d, 8)== ord('H'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40086e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_44_symbolic(self):
        ''' Instruction PCMPISTRM_44
            Groups: sse42
            0x4008ce:	pcmpistrm	xmm1, xmm2, 0x69
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008ce, 'f\x0f:b\xcai')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008ce
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008ce)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008ce)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008ce, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008cf, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d3, 8)== ord('i'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008d4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_45_symbolic(self):
        ''' Instruction PCMPISTRM_45
            Groups: sse42
            0x400874:	pcmpistrm	xmm1, xmm2, 0x4c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400874, 'f\x0f:b\xcaL')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400874
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400874)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400874)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400874, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400875, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400876, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400877, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400878, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400879, 8)== ord('L'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40087a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_46_symbolic(self):
        ''' Instruction PCMPISTRM_46
            Groups: sse42
            0x40085c:	pcmpistrm	xmm1, xmm2, 0x44
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40085c, 'f\x0f:b\xcaD')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40085c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40085c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40085c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400860, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400861, 8)== ord('D'))
        condition = Operators.AND(condition, cpu.read_int(0x40085c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40085d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40085e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40085f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400862)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_47_symbolic(self):
        ''' Instruction PCMPISTRM_47
            Groups: sse42
            0x4007a8:	pcmpistrm	xmm1, xmm2, 8
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007a8, 'f\x0f:b\xca\x08')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007a8
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007a8)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007a8)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007a8, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a9, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007aa, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ab, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ac, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007ad, 8)== ord('\x08'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007ae)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_48_symbolic(self):
        ''' Instruction PCMPISTRM_48
            Groups: sse42
            0x40082c:	pcmpistrm	xmm1, xmm2, 0x34
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40082c, 'f\x0f:b\xca4')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40082c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40082c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40082c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40082c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40082d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40082e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40082f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400830, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400831, 8)== ord('4'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400832)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_49_symbolic(self):
        ''' Instruction PCMPISTRM_49
            Groups: sse42
            0x4008da:	pcmpistrm	xmm1, xmm2, 0x6d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008da, 'f\x0f:b\xcam')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008da
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008da)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008da)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008da, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008db, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008dc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008dd, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008de, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008df, 8)== ord('m'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008e0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_5_symbolic(self):
        ''' Instruction PCMPISTRM_5
            Groups: sse42
            0x4007a2:	pcmpistrm	xmm1, xmm2, 5
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007a2, 'f\x0f:b\xca\x05')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007a2
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007a2)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007a2)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007a2, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a3, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a4, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a5, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a6, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a7, 8)== ord('\x05'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007a8)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_50_symbolic(self):
        ''' Instruction PCMPISTRM_50
            Groups: sse42
            0x4007e4:	pcmpistrm	xmm1, xmm2, 0x1c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007e4, 'f\x0f:b\xca\x1c')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007e4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007e4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007e4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007e4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007e9, 8)== ord('\x1c'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007ea)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_51_symbolic(self):
        ''' Instruction PCMPISTRM_51
            Groups: sse42
            0x400880:	pcmpistrm	xmm1, xmm2, 0x50
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400880, 'f\x0f:b\xcaP')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400880
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400880)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400880)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400880, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400881, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400882, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400883, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400884, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400885, 8)== ord('P'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400886)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_52_symbolic(self):
        ''' Instruction PCMPISTRM_52
            Groups: sse42
            0x400886:	pcmpistrm	xmm1, xmm2, 0x51
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400886, 'f\x0f:b\xcaQ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400886
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400886)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400886)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400886, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400887, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400888, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400889, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40088a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40088b, 8)== ord('Q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40088c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_53_symbolic(self):
        ''' Instruction PCMPISTRM_53
            Groups: sse42
            0x4008b6:	pcmpistrm	xmm1, xmm2, 0x61
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008b6, 'f\x0f:b\xcaa')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008b6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008b6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008b6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008b6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008b9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ba, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008bb, 8)== ord('a'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008bc)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_54_symbolic(self):
        ''' Instruction PCMPISTRM_54
            Groups: sse42
            0x4007ba:	pcmpistrm	xmm1, xmm2, 0xd
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007ba, 'f\x0f:b\xca\r')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007ba
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007ba)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007ba)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007ba, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bb, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bc, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bd, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007be, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007bf, 8)== ord('\r'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007c0)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_55_symbolic(self):
        ''' Instruction PCMPISTRM_55
            Groups: sse42
            0x40090a:	pcmpistrm	xmm1, xmm2, 0x7d
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40090a, 'f\x0f:b\xca}')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40090a
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40090a)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40090a)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40090a, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40090b, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40090c, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40090d, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40090e, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40090f, 8)== ord('}'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400910)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_56_symbolic(self):
        ''' Instruction PCMPISTRM_56
            Groups: sse42
            0x40079c:	pcmpistrm	xmm1, xmm2, 4
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40079c, 'f\x0f:b\xca\x04')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40079c
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40079c)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40079c)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007a0, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007a1, 8)== ord('\x04'))
        condition = Operators.AND(condition, cpu.read_int(0x40079c, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40079d, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40079e, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40079f, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007a2)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_57_symbolic(self):
        ''' Instruction PCMPISTRM_57
            Groups: sse42
            0x4007ae:	pcmpistrm	xmm1, xmm2, 9
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007ae, 'f\x0f:b\xca\t')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007ae
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007ae)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007ae)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007ae, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007af, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b0, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b1, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b2, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007b3, 8)== ord('\t'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007b4)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_58_symbolic(self):
        ''' Instruction PCMPISTRM_58
            Groups: sse42
            0x400844:	pcmpistrm	xmm1, xmm2, 0x3c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400844, 'f\x0f:b\xca<')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x400844
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400844)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400844)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400844, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400845, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400846, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400847, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400848, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400849, 8)== ord('<'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x40084a)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_59_symbolic(self):
        ''' Instruction PCMPISTRM_59
            Groups: sse42
            0x4008e6:	pcmpistrm	xmm1, xmm2, 0x71
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008e6, 'f\x0f:b\xcaq')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4008e6
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008e6)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008e6)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008e6, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e7, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e8, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008e9, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008ea, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008eb, 8)== ord('q'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4008ec)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_6_symbolic(self):
        ''' Instruction PCMPISTRM_6
            Groups: sse42
            0x400808:	pcmpistrm	xmm1, xmm2, 0x28
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400808, 'f\x0f:b\xca(')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400808
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400808)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400808)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400808, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400809, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x40080a, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x40080b, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40080c, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40080d, 8)== ord('('))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40080e)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_60_symbolic(self):
        ''' Instruction PCMPISTRM_60
            Groups: sse42
            0x4008d4:	pcmpistrm	xmm1, xmm2, 0x6c
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4008d4, 'f\x0f:b\xcal')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4008d4
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4008d4)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4008d4)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4008d4, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d5, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d6, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d7, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d8, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4008d9, 8)== ord('l'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4008da)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_61_symbolic(self):
        ''' Instruction PCMPISTRM_61
            Groups: sse42
            0x400796:	pcmpistrm	xmm1, xmm2, 1
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400796, 'f\x0f:b\xca\x01')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400796
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400796)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400796)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400796, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400797, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400798, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400799, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x40079a, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x40079b, 8)== ord('\x01'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x40079c)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_62_symbolic(self):
        ''' Instruction PCMPISTRM_62
            Groups: sse42
            0x40083e:	pcmpistrm	xmm1, xmm2, 0x39
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40083e, 'f\x0f:b\xca9')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x40083e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40083e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40083e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400840, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400841, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400842, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400843, 8)== ord('9'))
        condition = Operators.AND(condition, cpu.read_int(0x40083e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40083f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x400844)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_63_symbolic(self):
        ''' Instruction PCMPISTRM_63
            Groups: sse42
            0x400790:	pcmpistrm	xmm1, xmm2, 0
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400790, 'f\x0f:b\xca\x00')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == False)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400790
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400790)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400790)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400790, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400791, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400792, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400793, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400794, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400795, 8)== ord('\x00'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400796)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_64_symbolic(self):
        ''' Instruction PCMPISTRM_64
            Groups: sse42
            0x4007c0:	pcmpistrm	xmm1, xmm2, 0x10
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007c0, 'f\x0f:b\xca\x10')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x4007c0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007c0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007c0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007c0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007c5, 8)== ord('\x10'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == True)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == True)
        condition = Operators.AND(condition, cpu.RIP == 0x4007c6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_7_symbolic(self):
        ''' Instruction PCMPISTRM_7
            Groups: sse42
            0x4007f0:	pcmpistrm	xmm1, xmm2, 0x20
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x4007f0, 'f\x0f:b\xca ')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == True)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == True)
        cpu.RIP = 0x4007f0
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x4007f0)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x4007f0)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x4007f0, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f1, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f2, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f3, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f4, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x4007f5, 8)== ord(' '))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x4007f6)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_8_symbolic(self):
        ''' Instruction PCMPISTRM_8
            Groups: sse42
            0x40086e:	pcmpistrm	xmm1, xmm2, 0x49
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x40086e, 'f\x0f:b\xcaI')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x40086e
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x40086e)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x40086e)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x40086e, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x40086f, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400870, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400871, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400872, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400873, 8)== ord('I'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400874)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

    def test_PCMPISTRM_9_symbolic(self):
        ''' Instruction PCMPISTRM_9
            Groups: sse42
            0x400862:	pcmpistrm	xmm1, xmm2, 0x45
        '''
        cs = ConstraintSet()
        mem = SMemory64(cs)
        cpu = AMD64Cpu(mem)
        mem.mmap(0x00400000, 0x1000, 'rwx')
        mem.write(0x400862, 'f\x0f:b\xcaE')
        cpu.XMM2 = cs.new_bitvec(128)
        cs.add(cpu.XMM2 == 0x363534333231)
        cpu.XMM1 = cs.new_bitvec(128)
        cs.add(cpu.XMM1 == 0x48474645444342414847464544434241)
        cpu.PF = cs.new_bool()
        cs.add(cpu.PF == False)
        cpu.AF = cs.new_bool()
        cs.add(cpu.AF == False)
        cpu.OF = cs.new_bool()
        cs.add(cpu.OF == False)
        cpu.ZF = cs.new_bool()
        cs.add(cpu.ZF == True)
        cpu.CF = cs.new_bool()
        cs.add(cpu.CF == False)
        cpu.RIP = 0x400862
        cpu.SF = cs.new_bool()
        cs.add(cpu.SF == False)

        done = False
        while not done:
            try:
                cpu.execute()
                done = True
            except ConcretizeRegister as e:
                symbol = getattr(cpu, e.reg_name)
                values = solver.get_all_values(cs, symbol)
                self.assertEqual(len(values), 1)
                setattr(cpu, e.reg_name, values[0])
                setattr(cpu, 'RIP', 0x400862)

            except ConcretizeMemory as e:
                symbol = getattr(cpu, 'EBP')
                if isinstance(symbol, Expression):
                    values = solver.get_all_values(cs, symbol)
                    self.assertEqual(len(values), 1)
                    setattr(cpu, 'EBP', values[0])
                for i in range(e.size):
                    symbol = mem[e.address+i]
                    if isinstance(symbol, Expression):
                        values = solver.get_all_values(cs, symbol)
                        self.assertEqual(len(values), 1)
                        mem[e.address+i] = values[0]
                setattr(cpu, 'RIP', 0x400862)

        condition = True
        condition = Operators.AND(condition, cpu.read_int(0x400862, 8)== ord('f'))
        condition = Operators.AND(condition, cpu.read_int(0x400863, 8)== ord('\x0f'))
        condition = Operators.AND(condition, cpu.read_int(0x400864, 8)== ord(':'))
        condition = Operators.AND(condition, cpu.read_int(0x400865, 8)== ord('b'))
        condition = Operators.AND(condition, cpu.read_int(0x400866, 8)== ord('\xca'))
        condition = Operators.AND(condition, cpu.read_int(0x400867, 8)== ord('E'))
        condition = Operators.AND(condition, cpu.XMM2 == 0x363534333231)
        condition = Operators.AND(condition, cpu.XMM1 == 0x48474645444342414847464544434241)
        condition = Operators.AND(condition, cpu.PF == False)
        condition = Operators.AND(condition, cpu.AF == False)
        condition = Operators.AND(condition, cpu.OF == False)
        condition = Operators.AND(condition, cpu.ZF == True)
        condition = Operators.AND(condition, cpu.CF == False)
        condition = Operators.AND(condition, cpu.RIP == 0x400868)
        condition = Operators.AND(condition, cpu.SF == False)

        with cs as temp_cs:
            temp_cs.add(condition)
            self.assertTrue(solver.check(temp_cs))
        with cs as temp_cs:
            temp_cs.add(condition == False)
            self.assertFalse(solver.check(temp_cs))
          

if __name__ == '__main__':
    unittest.main()

